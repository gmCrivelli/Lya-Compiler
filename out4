Integer Mode: int
Integer Mode: int
Procedure declaration: g
Integer Mode: int
Identifier: ID "y" type "var int"
ERROR (line 7): Identifier t was not defined
ERROR (line 7): Identifier t was not defined
Binary operator: *
ERROR (line 7): Type ^UNDEFINED^ not found
ERROR (line 7): Type ^UNDEFINED^ not found
ERROR (line 7): Binary operator * not supported on RHS of expression
ERROR (line 7): Mismatched assignment types int and ^UNDEFINED^
Assigning to y with operator =
Identifier: ID "z" type "var int"
Identifier: ID "z" type "var int"
Identifier: ID "x" type "var int"
Binary operator: +
Identifier: ID "y" type "var int"
Binary operator: +
Assigning to z with operator =
Builtin Name: print
Identifier: ID "z" type "var int"
Printing environment scope stack:
{'char': <semantic.ExprType object at 0x7f265f42dfd0>, 'int': <semantic.ExprType object at 0x7f265f427438>, 'bool': <semantic.ExprType object at 0x7f265f42df60>, 'string': <semantic.ExprType object at 0x7f265f3af048>}
{'z': ['var', 'int', False], 'g': ['proc', 'void', False, [['int', False]]], 'x': ['var', 'int', False]}
{'y': ['var', 'int', False]}
Integer Mode: int
Procedure declaration: h
Integer Mode: int
ERROR (line 13): Identifier x already declared as var int
Integer Mode: int
Procedure declaration: f
Integer Mode: int
Identifier: ID "t" type "var int"
Identifier: ID "z" type "var int"
Identifier: ID "x" type "var int"
Binary operator: +
ERROR (line 16): Identifier y was not defined
Binary operator: +
ERROR (line 16): Type ^UNDEFINED^ not found
ERROR (line 16): Binary operator + does not have matching types: int and void
ERROR (line 16): Mismatched assignment types int and int
Assigning to t with operator =
Identifier: ID "g" type "proc void"
Identifier: ID "t" type "var int"
Identifier: ID "z" type "var int"
Identifier: ID "t" type "var int"
Assigning to z with operator =
Printing environment scope stack:
{'char': <semantic.ExprType object at 0x7f265f42dfd0>, 'int': <semantic.ExprType object at 0x7f265f427438>, 'bool': <semantic.ExprType object at 0x7f265f42df60>, 'string': <semantic.ExprType object at 0x7f265f3af048>}
{'h': ['proc', 'void', False, [['int', False]]], 'z': ['var', 'int', False], 'g': ['proc', 'void', False, [['int', False]]], 'x': ['var', 'int', False]}
{'f': ['proc', 'void', False, [['int', False]]]}
{'t': ['var', 'int', False]}
Identifier: ID "x" type "var int"
ERROR (line 20): Identifier y was not defined
Integer Literal: 1
Binary operator: +
ERROR (line 20): Type ^UNDEFINED^ not found
ERROR (line 20): Binary operator + does not have matching types: void and int
ERROR (line 20): Mismatched assignment types int and void
Assigning to x with operator =
Identifier: ID "f" type "proc void"
Identifier: ID "x" type "var int"
Identifier: ID "g" type "proc void"
Identifier: ID "z" type "var int"
Identifier: ID "x" type "var int"
Binary operator: +
Printing environment scope stack:
{'char': <semantic.ExprType object at 0x7f265f42dfd0>, 'int': <semantic.ExprType object at 0x7f265f427438>, 'bool': <semantic.ExprType object at 0x7f265f42df60>, 'string': <semantic.ExprType object at 0x7f265f3af048>}
{'h': ['proc', 'void', False, [['int', False]]], 'z': ['var', 'int', False], 'g': ['proc', 'void', False, [['int', False]]], 'x': ['var', 'int', False]}
{'f': ['proc', 'void', False, [['int', False]]]}
Identifier: ID "z" type "var int"
Integer Literal: 1
Assigning to z with operator =
Identifier: ID "x" type "var int"
Integer Literal: 3
Assigning to x with operator =
Identifier: ID "h" type "proc void"
Identifier: ID "x" type "var int"
Identifier: ID "g" type "proc void"
Identifier: ID "x" type "var int"
Builtin Name: print
Identifier: ID "x" type "var int"
Identifier: ID "z" type "var int"
Printing environment scope stack:
{'char': <semantic.ExprType object at 0x7f265f42dfd0>, 'int': <semantic.ExprType object at 0x7f265f427438>, 'bool': <semantic.ExprType object at 0x7f265f42df60>, 'string': <semantic.ExprType object at 0x7f265f3af048>}
{'h': ['proc', 'void', False, [['int', False]]], 'z': ['var', 'int', False], 'g': ['proc', 'void', False, [['int', False]]], 'x': ['var', 'int', False]}
