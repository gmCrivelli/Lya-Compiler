<operand0> ::=  <operand1>
            | <operand0> <operator1> <operand1>
<operator1> ::=  <relational_operator>
             | <membership_operator>
<relational_operator> ::=  && | || | == | != | > | >= | < | <=
<membership_operator> ::= IN
<operand1> ::=  <operand2>
            | <operand1> <operator2> <operand2>
<operator2> ::=  <arithmetic_additive_operator>
             | <string_concatenation_operator>
<arithmetic_additive_operator> ::= +|-
<string_concatenation_operator> ::= &
<operand2> ::=  <operand3>
            | <operand2> <arithmetic_multiplicative_operator> <operand3>
<arithmetic_multiplicative_operator> ::=  âˆ— | / | %
<operand3> ::=  [ <monadic_operator> ] <operand4>
            | <integer_literal>
<monadic_operator> ::= - | !
<operand4> ::=  <location> | <referenced_location> | <primitive_value>
<referenced_location> ::= ARROW <location>
<action_statement> ::= [ <label_id> : ] <action> ;
<label_id> ::= <identifier>
<action> ::=  <bracketed_action>
          | <assignment_action>
          | <call_action>
          | <exit_action>
          | <return_action>
          | <result_action>
<bracketed_action> ::= <if_action> | <do_action>
<assignment_action> ::=    <location> <assigning_operator> <expression>
<assigning_operator> ::= [ <closed_dyadic_operator> ] <assignment_symbol>
<closed_dyadic_operator> ::=  <arithmetic_additive_operator>
                          | <arithmetic_multiplicative_operator>
                          | <string_concatenation_operator>
<assignment_symbol> ::= =
<if_action> ::= IF <boolean_expression> <then_clause> [ <else_clause> ] FI
<then_clause> ::= THEN { <action_statement> }*
<else_clause> ::=  ELSE { <action_statement> }*
               | ELSIF <boolean_expression> <then_clause> [ <else_clause> ]
<do_action> ::= DO [ <control_part> ; ] { <action_statement> }* OD
<control_part> ::=  <for_control> [ <while_control> ]
               | <while_control>
<for_control> ::= FOR <iteration>
<iteration> ::= <step_enumeration> | <range_enumeration>
<step_enumeration> ::=  <loop_counter> <assignment_symbol>
<start_value> [ <step_value> ] [ DOWN ] <end_value>
<loop_counter> ::= <identifier>
<start_value> ::= <discrete_expression>
<step_value> ::= BY <integer_expression>
<end_value> ::= TO <discrete_expression>
<discrete_expression> ::= <expression>
<range_enumeration> ::= <loop_counter> [ DOWN ] IN <discrete_mode>
<while_control> ::= WHILE <boolean_expression>
<call_action> ::=  <procedure_call> | <builtin_call>
<procedure_call> ::= <procedure_name> ( [ <parameter_list> ] )
<parameter_list> ::= <parameter> { , <parameter> }*
<parameter> ::= <expression>
<procedure_name> ::= <identifier>
<exit_actiom> ::= EXIT label_id
<return_action> ::= RETURN [ <result> ]
<result_action> ::= RESULT <result>
<result> ::= <expression>
<builtin_call> ::= <builtin_name> ( [ <parameter_list> ] )
<builtin_name> ::= ABS | ASC | NUM | UPPER | LOWER | LENGTH | READ | PRINT
<procedure_statement> ::= <label_id> : <procedure_definition> ;
<procedure_definition> ::=
 PROC ( [ <formal_parameter_list> ] ) [ <result_spec> ];
 { <statement> }* END
<formal_parameter_list> ::= <formal_parameter> { , <formal_parameter> }*
<formal_parameter> ::= <identifier_list> <parameter_spec>
<parameter_spec> ::=  <mode> [ <parameter_attribute> ]
<parameter_attribute> ::= LOC
<result_spec> ::= RETURNS ( <mode> [ <result_attribute> ] )
<result_attribute> ::= LOC
<comment> ::= <bracketed_comment> | <line_end_comment>
<bracketed_comment> ::= /* <character_string> */
<line_end_comment> ::= // <character_string> <end_of_line>
<character_string> ::= { <character> }*
