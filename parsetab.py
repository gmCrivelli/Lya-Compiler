
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST SYN NUM ELSE ELSIF EXIT WHILE READ IN NULL UPPER OD FOR DCL RETURN CHARS TRUE FI PRINT ARRAY IF TYPE DO LOWER FALSE TO THEN RETURNS LENGTH END BY ABS PROC DOWN LOC RESULT BOOL ASC INT CHAR REFprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list initialization\n                              | identifier_list mode initializationnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT label_idreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'ASC':([0,4,5,8,12,14,19,22,25,29,37,40,45,52,58,60,61,71,72,87,91,92,96,101,102,105,108,109,110,112,113,114,115,116,117,119,122,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,174,181,186,188,189,190,192,204,205,206,211,212,213,221,225,226,227,229,232,234,239,244,251,264,267,270,272,289,291,294,295,302,308,310,328,],[35,-4,-7,-2,35,-8,-6,-5,35,35,35,35,35,-122,35,-123,35,35,35,35,35,35,-3,-151,35,35,-128,-144,-140,-146,-143,-142,-145,35,-141,35,-9,35,-113,-110,-112,-114,-111,35,-107,-99,-104,-106,35,-100,-97,-103,-98,-105,-101,-102,-118,35,-119,-117,35,-23,35,-18,35,-152,35,35,-200,-129,35,35,35,35,35,35,35,35,35,35,35,35,-203,35,35,35,35,-204,35,35,35,35,35,35,35,]),'AND':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,153,-67,-125,-68,-120,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,-96,-116,-191,-181,-62,-56,-82,-65,-83,]),'DECREASE':([3,10,11,24,30,32,34,43,44,79,111,173,177,224,231,233,305,],[-179,-60,-17,-58,-56,-178,-57,113,-59,-56,-61,-190,-180,-191,-181,-62,-65,]),'LENGTH':([0,4,5,8,12,14,19,22,25,29,37,40,45,52,58,60,61,71,72,87,91,92,96,101,102,105,108,109,110,112,113,114,115,116,117,119,122,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,174,181,186,188,189,190,192,204,205,206,211,212,213,221,225,226,227,229,232,234,239,244,251,264,267,270,272,289,291,294,295,302,308,310,328,],[1,-4,-7,-2,1,-8,-6,-5,1,1,1,1,1,-122,1,-123,1,1,1,1,1,1,-3,-151,1,1,-128,-144,-140,-146,-143,-142,-145,1,-141,1,-9,1,-113,-110,-112,-114,-111,1,-107,-99,-104,-106,1,-100,-97,-103,-98,-105,-101,-102,-118,1,-119,-117,1,-23,1,-18,1,-152,1,1,-200,-129,1,1,1,1,1,1,1,1,1,1,1,1,-203,1,1,1,1,-204,1,1,1,1,1,1,1,]),'ABS':([0,4,5,8,12,14,19,22,25,29,37,40,45,52,58,60,61,71,72,87,91,92,96,101,102,105,108,109,110,112,113,114,115,116,117,119,122,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,174,181,186,188,189,190,192,204,205,206,211,212,213,221,225,226,227,229,232,234,239,244,251,264,267,270,272,289,291,294,295,302,308,310,328,],[2,-4,-7,-2,2,-8,-6,-5,2,2,2,2,2,-122,2,-123,2,2,2,2,2,2,-3,-151,2,2,-128,-144,-140,-146,-143,-142,-145,2,-141,2,-9,2,-113,-110,-112,-114,-111,2,-107,-99,-104,-106,2,-100,-97,-103,-98,-105,-101,-102,-118,2,-119,-117,2,-23,2,-18,2,-152,2,2,-200,-129,2,2,2,2,2,2,2,2,2,2,2,2,-203,2,2,2,2,-204,2,2,2,2,2,2,2,]),'MINUS':([3,11,12,24,25,29,32,34,44,50,51,53,54,56,57,59,61,62,63,64,66,68,69,70,71,73,75,76,78,79,80,81,82,83,84,87,91,92,105,109,110,111,112,113,114,115,116,117,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,173,177,186,211,212,213,215,219,220,221,223,224,225,229,231,232,233,234,244,259,264,265,267,270,291,294,295,302,305,308,310,320,328,],[-179,-17,52,-58,52,52,-178,-57,-59,-69,144,-115,-79,-60,-126,-78,52,-77,-71,-76,-67,-125,-68,-120,52,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,52,52,52,52,-144,-140,-61,-146,-143,-142,-145,52,-141,52,-113,-110,-112,-114,-111,52,-121,-107,-99,-104,-106,52,-100,-97,-103,-98,-105,-101,-102,-127,-118,52,-119,-117,-190,-180,52,52,52,52,-109,-85,144,52,-116,-191,52,52,-181,52,-62,52,52,-56,52,-82,52,52,52,52,52,52,-65,52,52,-83,52,]),'TO':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,265,282,283,284,300,305,307,309,320,321,326,327,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,-96,-116,-191,-181,-62,-82,-170,-174,310,-88,-65,310,328,-83,-89,-171,-55,]),'DIVCREASE':([3,10,11,24,30,32,34,43,44,79,111,173,177,224,231,233,305,],[-179,-60,-17,-58,-56,-178,-57,115,-59,-56,-61,-190,-180,-191,-181,-62,-65,]),'SEMI':([3,6,10,11,13,15,24,26,28,29,32,34,36,38,41,44,46,47,50,51,53,54,56,57,59,62,63,64,65,66,67,68,69,70,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,90,93,95,98,99,103,104,107,111,120,121,124,125,126,128,130,131,132,133,134,135,137,138,139,141,142,150,165,173,177,185,187,191,193,194,196,197,199,200,202,203,207,209,210,215,219,220,223,224,228,231,233,235,236,237,238,240,241,245,249,252,265,274,278,279,283,288,292,296,297,300,305,306,311,316,317,320,321,325,329,331,333,334,],[-179,-131,-133,-17,-136,-138,-58,-135,-137,-186,-178,-57,-134,-132,108,-59,122,-10,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-188,-125,-68,-120,-75,-189,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,-185,-130,-90,-187,181,-24,188,-19,-157,192,-161,-61,205,206,-31,-33,-27,-12,-40,-30,-37,-36,-32,-29,-46,-28,-45,-35,-34,-121,-127,-190,-180,-21,-20,-159,-177,-162,-166,-164,-165,-139,251,-201,-11,-13,-44,-109,-85,-96,-116,-191,-147,-181,-62,-25,-26,-22,-14,-158,-163,-205,289,-202,-82,-148,-160,-175,-174,-206,-38,-39,-47,-88,-65,-176,-167,-54,-49,-83,-89,-168,-172,-212,-173,-213,]),'COMMA':([3,11,24,32,34,44,46,47,48,49,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,93,94,95,97,111,124,125,126,128,130,131,132,133,134,135,137,138,139,141,142,150,165,170,171,172,173,176,177,179,180,207,208,209,210,215,219,220,223,224,231,233,235,236,238,246,247,248,256,257,258,260,265,271,276,277,285,286,292,296,297,300,305,312,313,315,316,317,318,319,320,321,],[-179,-17,-58,-178,-57,-59,123,-10,127,-15,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,182,127,-24,127,-61,-31,-33,-27,-12,-40,-30,-37,-36,-32,-29,-46,-28,-45,-35,-34,-121,-127,-182,225,-184,-190,225,-180,-63,234,-11,-16,-13,-44,-109,-85,-96,-116,-191,-181,-62,-25,-26,-14,127,287,-207,-53,-52,294,-50,-82,-183,-43,-64,-210,-209,-38,-39,-47,-88,-65,-211,-208,-41,-54,-49,-51,-184,-83,-89,]),'READ':([0,4,5,8,12,14,19,22,25,29,37,40,45,52,58,60,61,71,72,87,91,92,96,101,102,105,108,109,110,112,113,114,115,116,117,119,122,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,174,181,186,188,189,190,192,204,205,206,211,212,213,221,225,226,227,229,232,234,239,244,251,264,267,270,272,289,291,294,295,302,308,310,328,],[17,-4,-7,-2,17,-8,-6,-5,17,17,17,17,17,-122,17,-123,17,17,17,17,17,17,-3,-151,17,17,-128,-144,-140,-146,-143,-142,-145,17,-141,17,-9,17,-113,-110,-112,-114,-111,17,-107,-99,-104,-106,17,-100,-97,-103,-98,-105,-101,-102,-118,17,-119,-117,17,-23,17,-18,17,-152,17,17,-200,-129,17,17,17,17,17,17,17,17,17,17,17,17,-203,17,17,17,17,-204,17,17,17,17,17,17,17,]),'DIVIDE':([3,11,24,32,34,44,50,53,54,56,57,59,62,63,64,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-115,-79,-60,-126,-78,-77,-71,-76,-67,-125,-68,-120,-75,-72,166,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,166,-85,-116,-191,-181,-62,-56,-82,-65,-83,]),'LOC':([11,124,125,126,130,131,132,133,134,135,137,138,139,141,142,210,285,292,296,297,314,316,317,],[-17,-31,-33,-27,-40,-30,-37,-36,-32,-29,-46,-28,-45,-35,-34,-44,312,-38,-39,-47,330,-54,-49,]),'DCL':([0,4,5,8,14,19,22,37,96,108,119,122,181,188,204,205,206,251,289,],[9,-4,-7,-2,-8,-6,-5,9,-3,-128,9,-9,-23,-18,9,-200,-129,-203,-204,]),'REF':([11,48,49,97,129,183,208,246,290,293,],[-17,129,-15,129,129,129,-16,129,129,129,]),'RPAREN':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,87,91,111,124,125,126,130,131,132,133,134,135,137,138,139,141,142,150,151,165,170,171,172,173,176,177,201,210,215,219,220,223,224,231,233,247,248,254,261,265,271,276,285,286,292,295,296,297,300,305,312,313,314,315,316,317,319,320,321,330,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,173,177,-61,-31,-33,-27,-40,-30,-37,-36,-32,-29,-46,-28,-45,-35,-34,-121,219,-127,-182,224,-184,-190,231,-180,245,-44,-109,-85,-96,-116,-191,-181,-62,288,-207,292,296,-82,-183,-43,-210,-209,-38,177,-39,-47,-88,-65,-211,-208,331,-41,-54,-49,-184,-83,-89,334,]),'WHILE':([3,11,24,32,34,40,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,111,124,125,132,133,134,141,142,150,165,173,177,194,196,197,199,215,219,220,223,224,231,233,265,279,283,292,296,300,305,306,311,320,321,325,329,333,],[-179,-17,-58,-178,-57,105,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,-61,-31,-33,-37,-36,-32,-35,-34,-121,-127,-190,-180,105,-166,-164,-165,-109,-85,-96,-116,-191,-181,-62,-82,-175,-174,-38,-39,-88,-65,-176,-167,-83,-89,-168,-172,-173,]),'EQUAL':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,162,-67,-125,-68,-120,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,-96,-116,-191,-181,-62,-56,-82,-65,-83,]),'PROC':([45,],[118,]),'ID':([0,3,4,5,8,9,11,12,14,19,20,22,24,25,29,32,33,34,37,39,40,44,45,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,87,91,92,96,97,98,99,101,102,105,106,108,109,110,111,112,113,114,115,116,117,119,122,123,127,129,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,173,174,177,181,182,183,185,186,187,188,189,190,192,201,204,205,206,208,211,212,213,215,219,220,221,223,224,225,226,227,229,231,232,233,234,237,238,239,242,244,246,251,264,265,267,270,272,281,287,289,290,291,293,294,295,300,302,305,308,310,320,321,328,],[11,-179,-4,-7,-2,11,-17,11,-8,-6,11,-5,-58,11,11,-178,11,-57,11,11,11,-59,11,11,-15,-69,-95,-122,-115,-79,-60,-126,11,-78,-123,11,-77,-71,-76,-86,-67,-125,-68,-120,11,11,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,11,11,11,-3,11,11,-19,-151,11,11,11,-128,-144,-140,-61,-146,-143,-142,-145,11,-141,11,-9,11,11,11,11,-113,-110,-112,-114,-111,11,-121,-107,-99,-104,-106,11,-100,-97,-103,-98,-105,-101,-102,-127,-118,11,-119,-117,-190,11,-180,-23,11,11,-21,11,-20,-18,11,-152,11,11,11,-200,-129,-16,11,11,11,-109,-85,-96,11,-116,-191,11,11,11,11,-181,11,-62,11,-22,-14,11,11,11,11,-203,11,-82,11,11,11,11,11,-204,11,11,11,11,11,-88,11,-65,11,11,-83,-89,11,]),'ARRAY':([11,48,49,97,129,183,208,246,290,293,],[-17,136,-15,136,136,136,-16,136,136,136,]),'CHAR':([11,48,49,97,129,183,208,212,242,246,281,290,293,294,],[-17,132,-15,132,132,132,-16,132,132,132,132,132,132,132,]),'RESULT':([0,4,5,8,14,19,22,37,40,45,96,101,102,108,119,122,174,181,188,189,190,192,204,205,206,226,227,239,251,272,289,],[12,-4,-7,-2,-8,-6,-5,12,12,12,-3,-151,12,-128,12,-9,12,-23,-18,12,-152,12,12,-200,-129,12,12,12,-203,12,-204,]),'OR':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,157,-67,-125,-68,-120,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,-96,-116,-191,-181,-62,-56,-82,-65,-83,]),'NOT':([12,25,29,61,71,87,91,92,105,109,110,112,113,114,115,116,117,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[60,60,60,60,60,60,60,60,60,-144,-140,-146,-143,-142,-145,60,-141,60,-113,-110,-112,-114,-111,60,-107,-99,-104,-106,60,-100,-97,-103,-98,-105,-101,-102,-118,60,-119,-117,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'LPAREN':([1,2,11,12,16,17,18,21,23,25,27,29,30,35,52,58,60,61,71,79,87,91,92,105,109,110,112,113,114,115,116,117,118,124,125,130,132,133,134,138,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,186,211,212,213,221,225,229,232,234,244,250,257,259,264,267,270,279,280,291,292,294,295,296,302,306,308,310,328,],[-197,-192,-17,61,-196,-198,-195,-194,87,61,-199,61,91,-193,-122,61,-123,61,61,91,61,61,61,61,-144,-140,-146,-143,-142,-145,61,-141,201,-31,-33,211,-37,-36,-32,213,-35,-34,61,-113,-110,-112,-114,-111,61,-107,-99,-104,-106,61,-100,-97,-103,-98,-105,-101,-102,-118,61,-119,-117,61,61,61,61,61,61,61,61,61,61,290,213,295,61,61,61,213,211,61,-38,61,61,-39,61,213,61,61,61,]),'STRCAT':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,147,-115,-79,-60,-126,-78,-77,-71,-76,-67,-125,-68,-120,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,147,-116,-191,-181,-62,-56,-82,-65,-83,]),'BY':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,265,282,283,284,300,305,320,321,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,-96,-116,-191,-181,-62,-82,-170,-174,308,-88,-65,-83,-89,]),'FALSE':([12,25,29,52,58,60,61,71,87,91,92,105,109,110,112,113,114,115,116,117,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[62,62,62,-122,62,-123,62,62,62,62,62,62,-144,-140,-146,-143,-142,-145,62,-141,62,-113,-110,-112,-114,-111,62,-107,-99,-104,-106,62,-100,-97,-103,-98,-105,-101,-102,-118,62,-119,-117,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'LESSEQ':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,155,-67,-125,-68,-120,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,-96,-116,-191,-181,-62,-56,-82,-65,-83,]),'TIMES':([3,11,24,32,34,44,50,53,54,56,57,59,62,63,64,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-115,-79,-60,-126,-78,-77,-71,-76,-67,-125,-68,-120,-75,-72,169,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,169,-85,-116,-191,-181,-62,-56,-82,-65,-83,]),'UPPER':([0,4,5,8,12,14,19,22,25,29,37,40,45,52,58,60,61,71,72,87,91,92,96,101,102,105,108,109,110,112,113,114,115,116,117,119,122,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,174,181,186,188,189,190,192,204,205,206,211,212,213,221,225,226,227,229,232,234,239,244,251,264,267,270,272,289,291,294,295,302,308,310,328,],[18,-4,-7,-2,18,-8,-6,-5,18,18,18,18,18,-122,18,-123,18,18,18,18,18,18,-3,-151,18,18,-128,-144,-140,-146,-143,-142,-145,18,-141,18,-9,18,-113,-110,-112,-114,-111,18,-107,-99,-104,-106,18,-100,-97,-103,-98,-105,-101,-102,-118,18,-119,-117,18,-23,18,-18,18,-152,18,18,-200,-129,18,18,18,18,18,18,18,18,18,18,18,18,-203,18,18,18,18,-204,18,18,18,18,18,18,18,]),'EXIT':([0,4,5,8,14,19,22,37,40,45,96,101,102,108,119,122,174,181,188,189,190,192,204,205,206,226,227,239,251,272,289,],[20,-4,-7,-2,-8,-6,-5,20,20,20,-3,-151,20,-128,20,-9,20,-23,-18,20,-152,20,20,-200,-129,20,20,20,-203,20,-204,]),'NUM':([0,4,5,8,12,14,19,22,25,29,37,40,45,52,58,60,61,71,72,87,91,92,96,101,102,105,108,109,110,112,113,114,115,116,117,119,122,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,174,181,186,188,189,190,192,204,205,206,211,212,213,221,225,226,227,229,232,234,239,244,251,264,267,270,272,289,291,294,295,302,308,310,328,],[21,-4,-7,-2,21,-8,-6,-5,21,21,21,21,21,-122,21,-123,21,21,21,21,21,21,-3,-151,21,21,-128,-144,-140,-146,-143,-142,-145,21,-141,21,-9,21,-113,-110,-112,-114,-111,21,-107,-99,-104,-106,21,-100,-97,-103,-98,-105,-101,-102,-118,21,-119,-117,21,-23,21,-18,21,-152,21,21,-200,-129,21,21,21,21,21,21,21,21,21,21,21,21,-203,21,21,21,21,-204,21,21,21,21,21,21,21,]),'INT':([11,48,49,97,129,183,208,212,242,246,281,290,293,294,],[-17,141,-15,141,141,141,-16,141,141,141,141,141,141,141,]),'MODCREASE':([3,10,11,24,30,32,34,43,44,79,111,173,177,224,231,233,305,],[-179,-60,-17,-58,-56,-178,-57,112,-59,-56,-61,-190,-180,-191,-181,-62,-65,]),'DOWN':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,111,150,165,173,177,195,198,215,219,220,223,224,231,233,265,282,283,284,300,305,307,320,321,326,327,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,243,-169,-109,-85,-96,-116,-191,-181,-62,-82,-170,-174,309,-88,-65,309,-83,-89,-171,-55,]),'SCONST':([12,25,29,52,58,60,61,71,87,91,92,105,109,110,112,113,114,115,116,117,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[81,81,81,-122,81,-123,81,81,81,81,81,81,-144,-140,-146,-143,-142,-145,81,-141,81,-113,-110,-112,-114,-111,81,-107,-99,-104,-106,81,-100,-97,-103,-98,-105,-101,-102,-118,81,-119,-117,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'THEN':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,88,89,111,150,164,165,173,177,215,219,220,223,224,231,233,265,273,300,303,305,320,321,322,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,-90,174,-61,-121,221,-127,-190,-180,-109,-85,-96,-116,-191,-181,-62,-82,174,-88,221,-65,-83,-89,221,]),'TYPE':([0,4,5,8,14,19,22,37,96,108,119,122,181,188,204,205,206,251,289,],[33,-4,-7,-2,-8,-6,-5,33,-3,-128,33,-9,-23,-18,33,-200,-129,-203,-204,]),'ELSIF':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,101,108,111,150,165,173,174,175,177,190,206,215,219,220,222,223,224,226,231,233,265,266,269,300,304,305,320,321,323,332,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,-151,-128,-61,-121,-127,-190,-149,229,-180,-152,-129,-109,-85,-96,270,-116,-191,-150,-181,-62,-82,-91,302,-88,229,-65,-83,-89,-93,-94,]),'MULCREASE':([3,10,11,24,30,32,34,43,44,79,111,173,177,224,231,233,305,],[-179,-60,-17,-58,-56,-178,-57,109,-59,-56,-61,-190,-180,-191,-181,-62,-65,]),'IF':([0,4,5,8,12,14,19,22,25,29,37,40,45,61,71,87,91,92,96,101,102,105,108,109,110,112,113,114,115,116,117,119,122,149,174,181,186,188,189,190,192,204,205,206,211,212,213,221,225,226,227,229,232,234,239,244,251,264,267,270,272,289,291,294,295,302,308,310,328,],[25,-4,-7,-2,71,-8,-6,-5,71,71,25,25,25,71,71,71,71,71,-3,-151,25,71,-128,-144,-140,-146,-143,-142,-145,71,-141,25,-9,71,25,-23,71,-18,25,-152,25,25,-200,-129,71,71,71,71,71,25,25,71,71,71,25,71,-203,71,71,71,25,-204,71,71,71,71,71,71,71,]),'LBRACKET':([3,10,11,24,30,31,32,34,43,44,50,54,55,56,57,59,62,63,64,66,69,73,75,78,79,80,81,82,83,84,111,136,140,165,173,177,219,224,231,233,259,265,305,320,],[-179,-60,-17,-58,-56,92,-178,-57,-66,-59,-69,-79,149,-60,-84,-78,-77,-71,-76,-67,-68,-75,-72,-74,-56,-80,-81,-73,-70,-66,-61,212,214,-66,-190,-180,-85,-191,-181,-62,-56,-82,-65,-83,]),'ARROW':([3,10,11,12,24,25,29,30,32,34,43,44,52,56,58,60,61,71,79,84,87,91,92,105,109,110,111,112,113,114,115,116,117,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,173,177,186,211,212,213,221,224,225,229,231,232,233,234,244,259,264,267,270,291,294,295,302,305,308,310,328,],[-179,-60,-17,72,-58,72,72,-56,-178,-57,111,-59,-122,-60,72,-123,72,72,-56,111,72,72,72,72,-144,-140,-61,-146,-143,-142,-145,72,-141,72,-113,-110,-112,-114,-111,72,-107,-99,-104,-106,72,-100,-97,-103,-98,-105,-101,-102,111,-118,72,-119,-117,-190,-180,72,72,72,72,72,-191,72,72,-181,72,-62,72,72,-56,72,72,72,72,72,72,72,-65,72,72,72,]),'OD':([40,101,102,108,190,192,206,239,],[103,-151,191,-128,-152,240,-129,278,]),'PRINT':([0,4,5,8,12,14,19,22,25,29,37,40,45,52,58,60,61,71,72,87,91,92,96,101,102,105,108,109,110,112,113,114,115,116,117,119,122,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,174,181,186,188,189,190,192,204,205,206,211,212,213,221,225,226,227,229,232,234,239,244,251,264,267,270,272,289,291,294,295,302,308,310,328,],[27,-4,-7,-2,27,-8,-6,-5,27,27,27,27,27,-122,27,-123,27,27,27,27,27,27,-3,-151,27,27,-128,-144,-140,-146,-143,-142,-145,27,-141,27,-9,27,-113,-110,-112,-114,-111,27,-107,-99,-104,-106,27,-100,-97,-103,-98,-105,-101,-102,-118,27,-119,-117,27,-23,27,-18,27,-152,27,27,-200,-129,27,27,27,27,27,27,27,27,27,27,27,27,-203,27,27,27,27,-204,27,27,27,27,27,27,27,]),'ICONST':([12,25,29,52,58,60,61,71,87,91,92,105,109,110,112,113,114,115,116,117,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,186,211,212,213,214,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[64,64,64,-122,64,-123,64,64,64,64,64,64,-144,-140,-146,-143,-142,-145,64,-141,64,-113,-110,-112,-114,-111,64,-107,-99,-104,-106,64,-100,-97,-103,-98,-105,-101,-102,-118,64,-119,-117,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'GREATEREQ':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,154,-67,-125,-68,-120,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,-96,-116,-191,-181,-62,-56,-82,-65,-83,]),'COLON':([3,7,11,24,30,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,100,111,150,165,173,177,178,179,215,216,218,219,220,223,224,231,233,253,255,259,265,300,305,319,320,321,],[-179,45,-17,-58,-130,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,189,-61,-121,-127,-190,-180,232,-42,-109,264,-42,-85,-96,-116,-191,-181,-62,291,-42,-56,-82,-88,-65,-42,-83,-89,]),'CHARS':([11,48,49,97,129,183,208,246,290,293,],[-17,140,-15,140,140,140,-16,140,140,140,]),'FI':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,101,108,111,150,165,173,174,175,177,190,206,215,219,220,223,224,226,227,230,231,233,265,268,272,299,300,301,304,305,320,321,324,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,-151,-128,-61,-121,-127,-190,-149,228,-180,-152,-129,-109,-85,-96,-116,-191,-150,-153,274,-181,-62,-82,300,-154,-92,-88,321,-155,-65,-83,-89,-156,]),'GREATER':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,159,-67,-125,-68,-120,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,-96,-116,-191,-181,-62,-56,-82,-65,-83,]),'RETURN':([0,4,5,8,14,19,22,37,40,45,96,101,102,108,119,122,174,181,188,189,190,192,204,205,206,226,227,239,251,272,289,],[29,-4,-7,-2,-8,-6,-5,29,29,29,-3,-151,29,-128,29,-9,29,-23,-18,29,-152,29,29,-200,-129,29,29,29,-203,29,-204,]),'NULL':([12,25,29,52,58,60,61,71,87,91,92,105,109,110,112,113,114,115,116,117,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[80,80,80,-122,80,-123,80,80,80,80,80,80,-144,-140,-146,-143,-142,-145,80,-141,80,-113,-110,-112,-114,-111,80,-107,-99,-104,-106,80,-100,-97,-103,-98,-105,-101,-102,-118,80,-119,-117,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'BOOL':([11,48,49,97,129,183,208,212,242,246,281,290,293,294,],[-17,133,-15,133,133,133,-16,133,133,133,133,133,133,133,]),'LOWER':([0,4,5,8,12,14,19,22,25,29,37,40,45,52,58,60,61,71,72,87,91,92,96,101,102,105,108,109,110,112,113,114,115,116,117,119,122,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,174,181,186,188,189,190,192,204,205,206,211,212,213,221,225,226,227,229,232,234,239,244,251,264,267,270,272,289,291,294,295,302,308,310,328,],[16,-4,-7,-2,16,-8,-6,-5,16,16,16,16,16,-122,16,-123,16,16,16,16,16,16,-3,-151,16,16,-128,-144,-140,-146,-143,-142,-145,16,-141,16,-9,16,-113,-110,-112,-114,-111,16,-107,-99,-104,-106,16,-100,-97,-103,-98,-105,-101,-102,-118,16,-119,-117,16,-23,16,-18,16,-152,16,16,-200,-129,16,16,16,16,16,16,16,16,16,16,16,16,-203,16,16,16,16,-204,16,16,16,16,16,16,16,]),'RBRACKET':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,111,124,125,132,133,134,141,142,150,165,173,177,179,180,215,217,218,219,220,223,224,231,233,256,257,258,260,262,263,265,275,276,277,292,296,298,300,305,315,318,320,321,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,-61,-31,-33,-37,-36,-32,-35,-34,-121,-127,-190,-180,-63,233,-109,265,-55,-85,-96,-116,-191,-181,-62,-53,-52,293,-50,297,-48,-82,305,-43,-64,-38,-39,320,-88,-65,-41,-51,-83,-89,]),'CCONST':([12,25,29,52,58,60,61,71,87,91,92,105,109,110,112,113,114,115,116,117,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[54,54,54,-122,54,-123,54,54,54,54,54,54,-144,-140,-146,-143,-142,-145,54,-141,54,-113,-110,-112,-114,-111,54,-107,-99,-104,-106,54,-100,-97,-103,-98,-105,-101,-102,-118,54,-119,-117,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'PLUS':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,146,-115,-79,-60,-126,-78,-77,-71,-76,-67,-125,-68,-120,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,146,-116,-191,-181,-62,-56,-82,-65,-83,]),'DIFF':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,163,-67,-125,-68,-120,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,-96,-116,-191,-181,-62,-56,-82,-65,-83,]),'END':([4,5,8,14,19,22,96,108,119,122,181,188,204,205,206,251,289,],[-4,-7,-2,-8,-6,-5,-3,-128,203,-9,-23,-18,252,-200,-129,-203,-204,]),'ASSIGN':([3,10,11,24,30,32,34,43,44,49,79,94,97,111,124,125,126,128,130,131,132,133,134,135,137,138,139,141,142,173,177,184,195,198,208,210,224,231,233,292,296,297,305,316,317,],[-179,-60,-17,-58,-56,-178,-57,110,-59,-15,-56,183,186,-61,-31,-33,-27,186,-40,-30,-37,-36,-32,-29,-46,-28,-45,-35,-34,-190,-180,186,244,-169,-16,-44,-191,-181,-62,-38,-39,-47,-65,-54,-49,]),'TRUE':([12,25,29,52,58,60,61,71,87,91,92,105,109,110,112,113,114,115,116,117,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[59,59,59,-122,59,-123,59,59,59,59,59,59,-144,-140,-146,-143,-142,-145,59,-141,59,-113,-110,-112,-114,-111,59,-107,-99,-104,-106,59,-100,-97,-103,-98,-105,-101,-102,-118,59,-119,-117,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'INCREASE':([3,10,11,24,30,32,34,43,44,79,111,173,177,224,231,233,305,],[-179,-60,-17,-58,-56,-178,-57,114,-59,-56,-61,-190,-180,-191,-181,-62,-65,]),'RETURNS':([202,245,288,],[250,-205,-206,]),'SYN':([0,4,5,8,14,19,22,37,96,108,119,122,181,188,204,205,206,251,289,],[39,-4,-7,-2,-8,-6,-5,39,-3,-128,39,-9,-23,-18,39,-200,-129,-203,-204,]),'ELSE':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,101,108,111,150,165,173,174,175,177,190,206,215,219,220,222,223,224,226,231,233,265,266,269,300,304,305,320,321,323,332,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,-86,-67,-125,-68,-120,-75,-72,-108,-87,-74,-56,-80,-81,-73,-70,-124,-151,-128,-61,-121,-127,-190,-149,227,-180,-152,-129,-109,-85,-96,267,-116,-191,-150,-181,-62,-82,-91,267,-88,227,-65,-83,-89,-93,-94,]),'FOR':([40,],[106,]),'DO':([0,4,5,8,14,19,22,37,40,45,96,101,102,108,119,122,174,181,188,189,190,192,204,205,206,226,227,239,251,272,289,],[40,-4,-7,-2,-8,-6,-5,40,40,40,-3,-151,40,-128,40,-9,40,-23,-18,40,-152,40,40,-200,-129,40,40,40,-203,40,-204,]),'LESS':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,220,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,161,-67,-125,-68,-120,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,-109,-85,-96,-116,-191,-181,-62,-56,-82,-65,-83,]),'$end':([4,5,8,14,19,22,37,42,96,108,122,181,188,205,206,],[-4,-7,-2,-8,-6,-5,-1,0,-3,-128,-9,-23,-18,-200,-129,]),'IN':([3,11,24,32,34,44,50,51,53,54,56,57,59,62,63,64,65,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,195,198,215,219,220,223,224,231,233,243,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-95,-115,-79,-60,-126,-78,-77,-71,-76,152,-67,-125,-68,-120,-75,-72,-108,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,242,-169,-109,-85,-96,-116,-191,-181,-62,281,-56,-82,-65,-83,]),'MOD':([3,11,24,32,34,44,50,53,54,56,57,59,62,63,64,66,68,69,70,73,75,76,78,79,80,81,82,83,84,111,150,165,173,177,215,219,223,224,231,233,259,265,305,320,],[-179,-17,-58,-178,-57,-59,-69,-115,-79,-60,-126,-78,-77,-71,-76,-67,-125,-68,-120,-75,-72,168,-74,-56,-80,-81,-73,-70,-124,-61,-121,-127,-190,-180,168,-85,-116,-191,-181,-62,-56,-82,-65,-83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration_list':([9,],[46,]),'lower_bound':([92,149,211,212,213,294,295,],[178,216,253,253,253,253,253,]),'parameter':([87,91,225,295,],[170,170,271,170,]),'operand3':([12,25,29,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[53,53,53,53,53,53,53,53,53,53,53,53,53,223,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'bracketed_action':([0,37,40,45,102,119,174,189,192,204,226,227,239,272,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'statement':([0,37,119,204,],[8,96,8,96,]),'iteration':([106,],[197,]),'array_primitive_value':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'call_action':([0,12,25,29,37,40,45,58,61,71,72,87,91,92,102,105,116,119,143,149,156,167,174,186,189,192,204,211,212,213,221,225,226,227,229,232,234,239,244,264,267,270,272,291,294,295,302,308,310,328,],[10,56,56,56,10,10,10,56,56,56,56,56,56,56,10,56,56,10,56,56,56,56,10,56,10,10,10,56,56,56,56,56,10,10,56,56,56,10,56,56,56,56,10,56,56,56,56,56,56,56,]),'primitive_value':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'else_expression':([222,269,],[268,301,]),'value_array_slice':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'monadic_operator':([12,25,29,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'integer_expression':([149,308,],[217,326,]),'formal_procedure_head':([45,],[119,]),'boolean_mode':([48,97,129,183,212,242,246,281,290,293,294,],[134,134,134,134,134,134,134,134,134,134,134,]),'result_action':([0,37,40,45,102,119,174,189,192,204,226,227,239,272,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'element_mode':([293,],[317,]),'upper_bound':([232,264,291,],[275,298,315,]),'operand1':([12,25,29,61,71,87,91,92,105,116,149,156,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[51,51,51,51,51,51,51,51,51,51,51,220,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'closed_dyadic_operator':([43,],[117,]),'membership_operator':([65,],[160,]),'reference_mode':([48,97,129,183,246,290,293,],[135,135,135,135,135,135,135,]),'literal':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'mode_name':([48,97,129,183,246,290,293,],[126,126,126,126,126,126,126,]),'result':([12,29,],[67,90,]),'mode_definition':([33,182,],[95,235,]),'array_element':([0,12,25,29,37,40,45,58,61,71,72,87,91,92,102,105,116,119,143,149,156,167,174,186,189,192,204,211,212,213,221,225,226,227,229,232,234,239,244,264,267,270,272,291,294,295,302,308,310,328,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'string_concatenation_operator':([51,220,],[148,148,]),'character_string_literal':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'return_action':([0,37,40,45,102,119,174,189,192,204,226,227,239,272,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'operator2':([51,220,],[143,143,]),'end_value':([284,307,],[311,325,]),'control_part':([40,],[104,]),'synonym_list':([39,],[98,]),'empty_literal':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'identifier':([0,9,12,20,25,29,33,37,39,40,45,48,58,61,71,72,87,91,92,97,98,102,105,106,116,119,123,127,129,143,149,156,167,174,182,183,186,189,192,201,204,211,212,213,221,225,226,227,229,232,234,239,242,244,246,264,267,270,272,281,287,290,291,293,294,295,302,308,310,328,],[30,49,79,86,79,79,49,30,49,30,79,130,79,79,79,79,79,79,79,130,49,30,79,198,79,30,49,208,130,79,79,79,79,30,49,130,79,79,30,49,30,79,259,79,79,79,30,30,79,79,79,30,280,79,130,79,79,79,30,280,49,130,79,130,259,79,79,79,79,79,]),'result_spec':([202,],[249,]),'integer_literal':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,214,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,263,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'action_statement_list':([40,174,192,227,],[102,226,239,272,]),'then_clause':([89,273,],[175,304,]),'exit_action':([0,37,40,45,102,119,174,189,192,204,226,227,239,272,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'statement_list':([0,119,],[37,204,]),'assignment_action':([0,37,40,45,102,119,174,189,192,204,226,227,239,272,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'operator1':([65,],[156,]),'array_mode':([48,97,129,183,246,290,293,],[137,137,137,137,137,137,137,]),'synonym_definition':([39,98,],[99,187,]),'relational_operator':([65,],[158,]),'elsif_expression':([222,],[269,]),'newmode_list':([33,],[93,]),'procedure_definition':([45,],[120,]),'formal_parameter_list':([201,],[247,]),'location':([0,12,25,29,37,40,45,58,61,71,72,87,91,92,102,105,116,119,143,149,156,167,174,186,189,192,204,211,212,213,221,225,226,227,229,232,234,239,244,264,267,270,272,291,294,295,302,308,310,328,],[43,84,84,84,43,43,43,84,84,84,165,84,84,84,43,84,84,43,84,84,84,84,43,84,43,43,43,84,84,84,84,84,43,43,84,84,84,43,84,84,84,84,43,84,84,84,84,84,84,84,]),'operand4':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[70,70,70,150,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'declaration':([9,123,],[47,207,]),'initialization':([97,128,184,],[185,209,237,]),'builtin_call':([0,12,25,29,37,40,45,58,61,71,72,87,91,92,102,105,116,119,143,149,156,167,174,186,189,192,204,211,212,213,221,225,226,227,229,232,234,239,244,264,267,270,272,291,294,295,302,308,310,328,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'character_mode':([48,97,129,183,212,242,246,281,290,293,294,],[125,125,125,125,125,125,125,125,125,125,125,]),'declaration_statement':([0,37,119,204,],[4,4,4,4,]),'procedure_statement':([0,37,119,204,],[5,5,5,5,]),'label_id':([0,20,37,40,102,119,174,192,204,226,227,239,272,],[7,85,7,100,100,7,100,100,7,100,100,100,100,]),'parameter_spec':([246,],[286,]),'literal_range':([211,212,213,294,295,],[254,256,261,256,254,]),'arithmetic_additive_operator':([51,220,],[145,145,]),'identifier_list':([9,33,39,98,123,182,201,287,],[48,94,97,97,48,94,246,246,]),'range_enumeration':([106,],[196,]),'composite_mode':([48,97,129,183,246,290,293,],[131,131,131,131,131,131,131,]),'step_value':([284,],[307,]),'index_mode':([212,294,],[260,318,]),'dereferenced_reference':([0,12,25,29,37,40,45,58,61,71,72,87,91,92,102,105,116,119,143,149,156,167,174,186,189,192,204,211,212,213,221,225,226,227,229,232,234,239,244,264,267,270,272,291,294,295,302,308,310,328,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'action_statement':([0,37,40,102,119,174,192,204,226,227,239,272,],[14,14,101,190,14,101,101,14,190,101,190,190,]),'do_action':([0,37,40,45,102,119,174,189,192,204,226,227,239,272,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'assigning_operator':([43,],[116,]),'then_expression':([164,303,322,],[222,323,332,]),'index_mode_list':([212,],[258,]),'parameter_list':([87,91,295,],[171,176,176,]),'string_mode':([48,97,129,183,246,290,293,],[139,139,139,139,139,139,139,]),'newmode_statement':([0,37,119,204,],[19,19,19,19,]),'start_value':([244,],[284,]),'synonym_statement':([0,37,119,204,],[22,22,22,22,]),'if_action':([0,37,40,45,102,119,174,189,192,204,226,227,239,272,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'referenced_location':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'discrete_expression':([244,310,328,],[282,329,333,]),'step_enumeration':([106,],[199,]),'character_literal':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'value_array_element':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'integer_mode':([48,97,129,183,212,242,246,281,290,293,294,],[124,124,124,124,124,124,124,124,124,124,124,]),'string_length':([214,],[262,]),'for_control':([106,],[194,]),'parenthesis_gambiarra':([118,],[202,]),'expression':([12,25,29,61,71,87,91,92,105,116,149,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[74,88,74,151,88,172,172,179,88,200,218,238,255,255,255,266,172,88,276,277,283,276,299,88,276,255,319,88,327,283,283,]),'boolean_literal':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'formal_parameter':([201,287,],[248,313,]),'mode':([48,97,129,183,246,290,293,],[128,184,210,236,285,314,316,]),'operand2':([12,25,29,61,71,87,91,92,105,116,143,149,156,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[76,76,76,76,76,76,76,76,76,76,215,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'operand0':([12,25,29,61,71,87,91,92,105,116,149,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'expression_list':([92,],[180,]),'array_location':([0,12,25,29,37,40,45,58,61,71,72,87,91,92,102,105,116,119,143,149,156,167,174,186,189,192,204,211,212,213,221,225,226,227,229,232,234,239,244,264,267,270,272,291,294,295,302,308,310,328,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'program':([0,],[42,]),'procedure_call':([0,12,25,29,37,40,45,58,61,71,72,87,91,92,102,105,116,119,143,149,156,167,174,186,189,192,204,211,212,213,221,225,226,227,229,232,234,239,244,264,267,270,272,291,294,295,302,308,310,328,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'discrete_range_mode':([48,97,129,183,212,242,246,281,290,293,294,],[142,142,142,142,142,142,142,142,142,142,142,]),'conditional_expression':([12,25,29,61,71,87,91,92,105,116,149,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'loop_counter':([106,],[195,]),'while_control':([40,194,],[107,241,]),'else_clause':([175,304,],[230,324,]),'boolean_expression':([25,71,105,229,270,302,],[89,164,193,273,303,322,]),'discrete_mode':([48,97,129,183,212,242,246,281,290,293,294,],[138,138,138,138,257,279,138,306,138,138,257,]),'array_slice':([0,12,25,29,37,40,45,58,61,71,72,87,91,92,102,105,116,119,143,149,156,167,174,186,189,192,204,211,212,213,221,225,226,227,229,232,234,239,244,264,267,270,272,291,294,295,302,308,310,328,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'action':([0,37,40,45,102,119,174,189,192,204,226,227,239,272,],[41,41,41,121,41,41,41,121,41,41,41,41,41,41,]),'parenthesized_expression':([12,25,29,58,61,71,87,91,92,105,116,143,149,156,167,186,211,212,213,221,225,229,232,234,244,264,267,270,291,294,295,302,308,310,328,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'builtin_name':([0,12,25,29,37,40,45,58,61,71,72,87,91,92,102,105,116,119,143,149,156,167,174,186,189,192,204,211,212,213,221,225,226,227,229,232,234,239,244,264,267,270,272,291,294,295,302,308,310,328,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'arithmetic_multiplicative_operator':([76,215,],[167,167,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',23),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',29),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',30),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',41),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',46),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',51),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',52),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',59),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',60),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',67),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',74),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',75),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',82),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',88),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',96),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',97),
  ('synonym_definition -> identifier_list initialization','synonym_definition',2,'p_synonym_definition','parser.py',104),
  ('synonym_definition -> identifier_list mode initialization','synonym_definition',3,'p_synonym_definition','parser.py',105),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',117),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',123),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',124),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',131),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',137),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',138),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',139),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',140),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',145),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',146),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',153),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',158),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',163),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',168),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',169),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',176),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',186),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',191),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',197),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',203),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',209),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',210),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','parser.py',215),
  ('string_length -> integer_literal','string_length',1,'p_string_length','parser.py',221),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',227),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',233),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',234),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',241),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',242),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',247),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',253),
  ('location -> identifier','location',1,'p_location','parser.py',259),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',260),
  ('location -> array_element','location',1,'p_location','parser.py',261),
  ('location -> array_slice','location',1,'p_location','parser.py',262),
  ('location -> call_action','location',1,'p_location','parser.py',263),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',273),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',313),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',319),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',320),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',327),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',333),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',339),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',340),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',342),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',348),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',349),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',352),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',357),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',363),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',364),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',371),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',377),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',384),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',390),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',396),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',402),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',408),
  ('expression -> operand0','expression',1,'p_expression','parser.py',415),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',416),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',421),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',422),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',431),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',437),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',443),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',449),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',450),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',459),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',460),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',467),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',468),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',473),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',474),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',475),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',480),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',485),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',490),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',491),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',499),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',500),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',505),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',506),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',512),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',516),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',517),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',524),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',525),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',526),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',531),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',532),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',540),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',541),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',546),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',547),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',548),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',553),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',558),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',559),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',568),
  ('action -> bracketed_action','action',1,'p_action','parser.py',574),
  ('action -> assignment_action','action',1,'p_action','parser.py',575),
  ('action -> call_action','action',1,'p_action','parser.py',576),
  ('action -> exit_action','action',1,'p_action','parser.py',577),
  ('action -> return_action','action',1,'p_action','parser.py',578),
  ('action -> result_action','action',1,'p_action','parser.py',579),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',584),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',585),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',590),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',609),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',610),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',615),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',616),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',617),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',624),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',625),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',634),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',635),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',644),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',645),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',652),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',653),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',654),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',655),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',670),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',671),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',672),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',673),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',687),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',688),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',689),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',698),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',703),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',704),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',709),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',710),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',717),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',722),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',727),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',732),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',733),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',741),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',746),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',747),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',754),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',758),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',759),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',764),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',765),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',772),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',773),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',780),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','parser.py',788),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',792),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',793),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',800),
  ('result -> expression','result',1,'p_result','parser.py',804),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',809),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',810),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',817),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',818),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',819),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',820),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',821),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',822),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',823),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',824),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',828),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',832),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',833),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',841),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',849),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',850),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',857),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',858),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',865),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',869),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',870),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',882),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',883),
]
