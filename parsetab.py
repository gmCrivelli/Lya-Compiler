
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST ASC DOWN TRUE ELSE INT FALSE PRINT BOOL UPPER CHARS RESULT CHAR FOR ABS ARRAY RETURN NULL SYN REF NUM END ELSIF FI PROC TYPE OD LOC THEN WHILE LOWER DCL LENGTH IN TO BY DO READ EXIT IF RETURNSprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list ASSIGN constant_expression\n                              | identifier_list mode ASSIGN constant_expressionconstant_expression : expressionnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET ICONST RBRACKETarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT exit_label_idexit_label_id :  identifierreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'DIFF':([3,10,19,25,28,29,49,50,51,53,54,56,57,58,59,61,63,65,67,68,69,70,71,74,75,76,77,78,79,80,81,91,119,124,193,199,202,203,212,213,239,241,245,255,270,313,318,],[-178,-17,-59,-57,-179,-58,-81,-79,-67,-115,-78,-108,-68,-69,-126,-74,-56,-125,-73,-124,-71,-76,-80,-95,-75,-60,-77,-72,135,-120,-70,-61,-127,-121,-180,-191,-116,-85,-109,-96,-62,-181,-192,-82,-56,-65,-83,]),'COLON':([3,5,10,19,20,25,28,29,49,50,51,53,54,56,57,58,59,61,63,65,66,67,68,69,70,71,74,75,76,77,78,79,80,81,91,101,119,124,187,188,193,199,202,203,209,211,212,213,239,241,245,255,264,266,270,291,313,315,318,323,],[-178,82,-17,-59,-130,-57,-179,-58,-81,-79,-67,-115,-78,-108,-68,-69,-126,-74,-56,-125,-87,-73,-124,-71,-76,-80,-95,-75,-60,-77,-72,-86,-120,-70,-61,176,-127,-121,237,-43,-180,-191,-116,-85,254,-43,-109,-96,-62,-181,-192,-82,300,-43,-56,-88,-65,-89,-83,-43,]),'PRINT':([0,4,9,13,17,21,30,33,35,41,42,43,47,48,52,55,60,62,82,83,84,85,86,87,88,89,90,102,105,107,109,110,115,116,117,120,121,122,123,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,172,175,176,178,186,194,197,200,206,207,208,214,216,217,220,222,223,225,231,236,237,238,240,242,248,249,252,254,263,287,299,300,303,304,308,309,331,],[22,22,22,-2,22,-7,22,-6,22,-8,-5,-4,-122,22,-123,22,22,22,22,-146,-140,-141,-145,-144,22,-143,-142,22,22,-151,22,22,22,-3,-128,-117,-119,-118,22,22,22,-110,-113,-114,22,-112,-111,-102,-105,-104,-100,-107,-106,-97,-103,-98,22,-99,-101,22,-9,-24,22,22,-152,-18,22,22,22,22,22,22,-129,-201,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-204,22,-205,22,22,22,22,22,22,]),'MINUS':([3,4,9,10,19,25,28,29,30,48,49,50,51,53,54,56,57,58,59,61,62,63,65,67,68,69,70,71,74,75,76,77,78,80,81,83,84,85,86,87,88,89,90,91,102,109,110,115,119,120,121,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,193,197,199,200,202,203,207,212,213,220,222,223,225,236,237,238,239,240,241,242,245,248,249,254,255,270,287,300,303,304,308,309,313,318,331,],[-178,47,47,-17,-59,-57,-179,-58,47,47,-81,-79,-67,-115,-78,-108,-68,-69,-126,-74,47,-56,-125,-73,-124,-71,-76,-80,130,-75,-60,-77,-72,-120,-70,-146,-140,-141,-145,-144,47,-143,-142,-61,47,47,47,47,-127,-117,-119,-118,47,-121,47,-110,-113,-114,47,-112,-111,-102,-105,-104,-100,-107,-106,-97,-103,-98,47,-99,-101,-180,47,-191,47,-116,-85,47,-109,130,47,47,47,47,47,47,47,-62,47,-181,47,-192,47,47,47,-82,-56,47,47,47,47,47,47,-65,-83,47,]),'EXIT':([0,13,17,21,33,35,41,42,43,82,105,107,116,117,127,147,172,175,176,178,186,194,206,208,214,216,217,231,252,263,299,],[2,-2,2,-7,-6,2,-8,-5,-4,2,2,-151,-3,-128,2,2,-9,-24,2,2,-152,-18,2,2,2,-129,-201,2,2,-204,-205,]),'CHAR':([10,94,96,112,162,173,224,225,235,257,276,298,304,305,],[-17,164,-15,164,164,164,-16,164,164,164,164,164,164,164,]),'LOC':([10,152,154,155,157,158,160,161,163,164,165,166,167,168,169,226,294,301,302,306,321,325,326,],[-17,-41,-29,-28,-35,-34,-36,-32,-30,-38,-37,-33,-31,-46,-47,-45,319,-39,-40,-48,333,-54,-49,]),'IF':([0,4,9,13,17,21,30,33,35,41,42,43,48,62,82,83,84,85,86,87,88,89,90,102,105,107,109,110,115,116,117,127,128,147,172,175,176,178,186,194,197,200,206,207,208,214,216,217,220,222,223,225,231,236,237,238,240,242,248,249,252,254,263,287,299,300,303,304,308,309,331,],[4,48,48,-2,4,-7,48,-6,4,-8,-5,-4,48,48,4,-146,-140,-141,-145,-144,48,-143,-142,48,4,-151,48,48,48,-3,-128,4,48,4,-9,-24,4,4,-152,-18,48,48,4,48,4,4,-129,-201,48,48,48,48,4,48,48,48,48,48,48,48,4,48,-204,48,-205,48,48,48,48,48,48,]),'LBRACKET':([3,6,10,18,19,20,25,28,29,40,49,50,51,54,57,58,59,61,63,67,68,69,70,71,73,75,76,77,78,81,91,119,159,170,193,199,203,239,241,245,255,270,313,318,],[-178,-66,-17,109,-59,-56,-57,-179,-58,-60,-81,-79,-67,-78,-68,-69,-84,-74,-56,-73,-66,-71,-76,-80,128,-75,-60,-77,-72,-70,-61,-66,225,227,-180,-191,-85,-62,-181,-192,-82,-56,-65,-83,]),'BOOL':([10,94,96,112,162,173,224,225,235,257,276,298,304,305,],[-17,165,-15,165,165,165,-16,165,165,165,165,165,165,165,]),'DIVIDE':([3,10,19,25,28,29,49,50,51,53,54,56,57,58,59,61,63,65,67,68,69,70,71,75,76,77,78,80,81,91,119,124,193,199,202,203,212,239,241,245,255,270,313,318,],[-178,-17,-59,-57,-179,-58,-81,-79,-67,-115,-78,122,-68,-69,-126,-74,-56,-125,-73,-124,-71,-76,-80,-75,-60,-77,-72,-120,-70,-61,-127,-121,-180,-191,-116,-85,122,-62,-181,-192,-82,-56,-65,-83,]),'RETURNS':([219,260,297,],[261,-206,-207,]),'CCONST':([4,9,30,47,48,52,60,62,83,84,85,86,87,88,89,90,102,109,110,115,120,121,122,123,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[50,50,50,-122,50,-123,50,50,-146,-140,-141,-145,-144,50,-143,-142,50,50,50,50,-117,-119,-118,50,50,-110,-113,-114,50,-112,-111,-102,-105,-104,-100,-107,-106,-97,-103,-98,50,-99,-101,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'ASSIGN':([3,6,10,19,20,25,28,29,40,63,91,96,98,112,152,153,154,155,157,158,160,161,163,164,165,166,167,168,169,179,183,193,196,199,224,226,239,241,245,301,302,306,313,325,326,],[-178,84,-17,-59,-56,-57,-179,-58,-60,-56,-61,-15,173,197,-41,222,-29,-28,-35,-34,-36,-32,-30,-38,-37,-33,-31,-46,-47,-169,236,-180,242,-191,-16,-45,-62,-181,-192,-39,-40,-48,-65,-54,-49,]),'NULL':([4,9,30,47,48,52,60,62,83,84,85,86,87,88,89,90,102,109,110,115,120,121,122,123,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[71,71,71,-122,71,-123,71,71,-146,-140,-141,-145,-144,71,-143,-142,71,71,71,71,-117,-119,-118,71,71,-110,-113,-114,71,-112,-111,-102,-105,-104,-100,-107,-106,-97,-103,-98,71,-99,-101,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'LENGTH':([0,4,9,13,17,21,30,33,35,41,42,43,47,48,52,55,60,62,82,83,84,85,86,87,88,89,90,102,105,107,109,110,115,116,117,120,121,122,123,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,172,175,176,178,186,194,197,200,206,207,208,214,216,217,220,222,223,225,231,236,237,238,240,242,248,249,252,254,263,287,299,300,303,304,308,309,331,],[32,32,32,-2,32,-7,32,-6,32,-8,-5,-4,-122,32,-123,32,32,32,32,-146,-140,-141,-145,-144,32,-143,-142,32,32,-151,32,32,32,-3,-128,-117,-119,-118,32,32,32,-110,-113,-114,32,-112,-111,-102,-105,-104,-100,-107,-106,-97,-103,-98,32,-99,-101,32,-9,-24,32,32,-152,-18,32,32,32,32,32,32,-129,-201,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-204,32,-205,32,32,32,32,32,32,]),'ID':([0,2,3,4,9,10,13,15,16,17,19,21,24,25,28,29,30,33,35,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,96,102,104,105,107,109,110,111,112,113,115,116,117,119,120,121,122,123,124,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,156,162,171,172,173,174,175,176,178,186,193,194,195,197,199,200,202,203,206,207,208,212,213,214,216,217,218,220,222,223,224,225,231,235,236,237,238,239,240,241,242,243,244,245,248,249,252,254,255,257,263,276,286,287,291,296,298,299,300,303,304,305,308,309,313,315,318,331,],[10,10,-178,10,10,-17,-2,10,10,10,-59,-7,10,-57,-179,-58,10,-6,10,-8,-5,-4,-122,10,-81,-79,-67,-123,-115,-78,10,-108,-68,-69,-126,10,-74,10,-56,-125,-87,-73,-124,-71,-76,-80,-95,-75,-60,-77,-72,-86,-120,-70,10,-146,-140,-141,-145,-144,10,-143,-142,-61,10,-15,10,10,10,-151,10,10,10,10,-19,10,-3,-128,-127,-117,-119,-118,10,-121,10,10,-110,-113,-114,10,-112,-111,-102,-105,-104,-100,-107,-106,-97,-103,-98,10,-99,-101,10,10,10,10,-9,10,10,-24,10,10,-152,-180,-18,-20,10,-191,10,-116,-85,10,10,10,-109,-96,10,-129,-201,10,10,10,10,-16,10,10,10,10,10,10,-62,10,-181,10,-21,-23,-192,10,10,10,10,-82,10,-204,10,-22,10,-88,10,10,-205,10,10,10,10,10,10,-65,-89,-83,10,]),'RESULT':([0,13,17,21,33,35,41,42,43,82,105,107,116,117,127,147,172,175,176,178,186,194,206,208,214,216,217,231,252,263,299,],[9,-2,9,-7,-6,9,-8,-5,-4,9,9,-151,-3,-128,9,9,-9,-24,9,9,-152,-18,9,9,9,-129,-201,9,9,-204,-205,]),'DO':([0,13,17,21,33,35,41,42,43,82,105,107,116,117,127,147,172,175,176,178,186,194,206,208,214,216,217,231,252,263,299,],[17,-2,17,-7,-6,17,-8,-5,-4,17,17,-151,-3,-128,17,17,-9,-24,17,17,-152,-18,17,17,17,-129,-201,17,17,-204,-205,]),'ARRAY':([10,94,96,112,162,173,224,257,298,305,],[-17,159,-15,159,159,159,-16,159,159,159,]),'ARROW':([3,4,6,9,10,19,20,25,28,29,30,40,47,48,52,60,62,63,68,76,83,84,85,86,87,88,89,90,91,102,109,110,115,119,120,121,122,123,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,193,197,199,200,207,220,222,223,225,236,237,238,239,240,241,242,245,248,249,254,270,287,300,303,304,308,309,313,331,],[-178,55,91,55,-17,-59,-56,-57,-179,-58,55,-60,-122,55,-123,55,55,-56,91,-60,-146,-140,-141,-145,-144,55,-143,-142,-61,55,55,55,55,91,-117,-119,-118,55,55,-110,-113,-114,55,-112,-111,-102,-105,-104,-100,-107,-106,-97,-103,-98,55,-99,-101,-180,55,-191,55,55,55,55,55,55,55,55,55,-62,55,-181,55,-192,55,55,55,-56,55,55,55,55,55,55,-65,55,]),'TO':([3,10,19,25,28,29,49,50,51,53,54,56,57,58,59,61,63,65,66,67,68,69,70,71,74,75,76,77,78,79,80,81,91,119,124,193,199,202,203,212,213,239,241,245,255,279,280,281,291,310,312,313,315,318,327,328,],[-178,-17,-59,-57,-179,-58,-81,-79,-67,-115,-78,-108,-68,-69,-126,-74,-56,-125,-87,-73,-124,-71,-76,-80,-95,-75,-60,-77,-72,-86,-120,-70,-61,-127,-121,-180,-191,-116,-85,-109,-96,-62,-181,-192,-82,-170,-174,309,-88,309,331,-65,-89,-83,-171,-55,]),'UPPER':([0,4,9,13,17,21,30,33,35,41,42,43,47,48,52,55,60,62,82,83,84,85,86,87,88,89,90,102,105,107,109,110,115,116,117,120,121,122,123,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,172,175,176,178,186,194,197,200,206,207,208,214,216,217,220,222,223,225,231,236,237,238,240,242,248,249,252,254,263,287,299,300,303,304,308,309,331,],[14,14,14,-2,14,-7,14,-6,14,-8,-5,-4,-122,14,-123,14,14,14,14,-146,-140,-141,-145,-144,14,-143,-142,14,14,-151,14,14,14,-3,-128,-117,-119,-118,14,14,14,-110,-113,-114,14,-112,-111,-102,-105,-104,-100,-107,-106,-97,-103,-98,14,-99,-101,14,-9,-24,14,14,-152,-18,14,14,14,14,14,14,-129,-201,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-204,14,-205,14,14,14,14,14,14,]),'GREATEREQ':([3,10,19,25,28,29,49,50,51,53,54,56,57,58,59,61,63,65,67,68,69,70,71,74,75,76,77,78,79,80,81,91,119,124,193,199,202,203,212,213,239,241,245,255,270,313,318,],[-178,-17,-59,-57,-179,-58,-81,-79,-67,-115,-78,-108,-68,-69,-126,-74,-56,-125,-73,-124,-71,-76,-80,-95,-75,-60,-77,-72,137,-120,-70,-61,-127,-121,-180,-191,-116,-85,-109,-96,-62,-181,-192,-82,-56,-65,-83,]),'THEN':([3,10,19,25,28,29,49,50,51,53,54,56,57,58,59,61,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,91,118,119,124,193,199,202,203,212,213,239,241,245,253,255,290,291,313,314,315,318,],[-178,-17,-59,-57,-179,-58,-81,-79,-67,-115,-78,-108,-68,-69,-126,-74,-56,127,-125,-87,-73,-124,-71,-76,-80,-90,-95,-75,-60,-77,-72,-86,-120,-70,-61,200,-127,-121,-180,-191,-116,-85,-109,-96,-62,-181,-192,127,-82,200,-88,-65,200,-89,-83,]),'DCL':([0,13,21,33,35,41,42,43,116,117,147,172,175,194,214,216,217,263,299,],[15,-2,-7,-6,15,-8,-5,-4,-3,-128,15,-9,-24,-18,15,-129,-201,-204,-205,]),'MULCREASE':([3,6,10,19,20,25,28,29,40,63,91,193,199,239,241,245,313,],[-178,87,-17,-59,-56,-57,-179,-58,-60,-56,-61,-180,-191,-62,-181,-192,-65,]),'MOD':([3,10,19,25,28,29,49,50,51,53,54,56,57,58,59,61,63,65,67,68,69,70,71,75,76,77,78,80,81,91,119,124,193,199,202,203,212,239,241,245,255,270,313,318,],[-178,-17,-59,-57,-179,-58,-81,-79,-67,-115,-78,121,-68,-69,-126,-74,-56,-125,-73,-124,-71,-76,-80,-75,-60,-77,-72,-120,-70,-61,-127,-121,-180,-191,-116,-85,121,-62,-181,-192,-82,-56,-65,-83,]),'WHILE':([3,10,17,19,25,28,29,49,50,51,53,54,56,57,58,59,61,63,65,66,67,68,69,70,71,74,75,76,77,78,79,80,81,91,119,124,157,158,160,161,164,165,166,180,181,182,184,193,199,202,203,212,213,239,241,245,255,278,280,291,301,302,307,311,313,315,318,329,330,335,],[-178,-17,102,-59,-57,-179,-58,-81,-79,-67,-115,-78,-108,-68,-69,-126,-74,-56,-125,-87,-73,-124,-71,-76,-80,-95,-75,-60,-77,-72,-86,-120,-70,-61,-127,-121,-35,-34,-36,-32,-38,-37,-33,-165,102,-164,-166,-180,-191,-116,-85,-109,-96,-62,-181,-192,-82,-175,-174,-88,-39,-40,-176,-167,-65,-89,-83,-172,-168,-173,]),'LESSEQ':([3,10,19,25,28,29,49,50,51,53,54,56,57,58,59,61,63,65,67,68,69,70,71,74,75,76,77,78,79,80,81,91,119,124,193,199,202,203,212,213,239,241,245,255,270,313,318,],[-178,-17,-59,-57,-179,-58,-81,-79,-67,-115,-78,-108,-68,-69,-126,-74,-56,-125,-73,-124,-71,-76,-80,-95,-75,-60,-77,-72,140,-120,-70,-61,-127,-121,-180,-191,-116,-85,-109,-96,-62,-181,-192,-82,-56,-65,-83,]),'GREATER':([3,10,19,25,28,29,49,50,51,53,54,56,57,58,59,61,63,65,67,68,69,70,71,74,75,76,77,78,79,80,81,91,119,124,193,199,202,203,212,213,239,241,245,255,270,313,318,],[-178,-17,-59,-57,-179,-58,-81,-79,-67,-115,-78,-108,-68,-69,-126,-74,-56,-125,-73,-124,-71,-76,-80,-95,-75,-60,-77,-72,142,-120,-70,-61,-127,-121,-180,-191,-116,-85,-109,-96,-62,-181,-192,-82,-56,-65,-83,]),'FOR':([17,],[104,]),'CHARS':([10,94,96,112,162,173,224,257,298,305,],[-17,170,-15,170,170,170,-16,170,170,170,]),'ICONST':([4,9,30,47,48,52,60,62,83,84,85,86,87,88,89,90,102,109,110,115,120,121,122,123,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,197,200,207,220,222,223,225,227,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[70,70,70,-122,70,-123,70,70,-146,-140,-141,-145,-144,70,-143,-142,70,70,70,70,-117,-119,-118,70,70,-110,-113,-114,70,-112,-111,-102,-105,-104,-100,-107,-106,-97,-103,-98,70,-99,-101,70,70,70,70,70,70,70,274,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'mode':([94,112,162,173,257,298,305,],[153,196,226,229,294,321,325,]),'parameter':([110,115,240,303,],[190,190,285,190,]),'operator2':([74,213,],[132,132,]),'else_clause':([126,292,],[205,317,]),'procedure_call':([0,4,9,17,30,35,48,55,60,62,82,88,102,105,109,110,115,123,127,128,132,144,147,176,178,197,200,206,207,208,214,220,222,223,225,231,236,237,238,240,242,248,249,252,254,287,300,303,304,308,309,331,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'procedure_definition':([82,],[149,]),'location':([0,4,9,17,30,35,48,55,60,62,82,88,102,105,109,110,115,123,127,128,132,144,147,176,178,197,200,206,207,208,214,220,222,223,225,231,236,237,238,240,242,248,249,252,254,287,300,303,304,308,309,331,],[6,68,68,6,68,6,68,119,68,68,6,68,68,6,68,68,68,68,6,68,68,68,6,6,6,68,68,6,68,6,6,68,68,68,68,6,68,68,68,68,68,68,68,6,68,68,68,68,68,68,68,68,]),'if_action':([0,17,35,82,105,127,147,176,178,206,208,214,231,252,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'return_action':([0,17,35,82,105,127,147,176,178,206,208,214,231,252,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'step_value':([281,],[310,]),'operator1':([79,],[144,]),'lower_bound':([109,128,220,223,225,303,304,],[187,209,264,264,264,264,264,]),'exit_label_id':([2,],[45,]),'statement':([0,35,147,214,],[13,116,13,116,]),'reference_mode':([94,112,162,173,257,298,305,],[163,163,163,163,163,163,163,]),'initialization':([153,],[221,]),'iteration':([104,],[182,]),'constant_expression':([197,242,],[243,286,]),'composite_mode':([94,112,162,173,257,298,305,],[167,167,167,167,167,167,167,]),'monadic_operator':([4,9,30,48,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'integer_expression':([128,308,],[210,327,]),'element_mode':([305,],[326,]),'mode_definition':([16,174,],[100,230,]),'array_slice':([0,4,9,17,30,35,48,55,60,62,82,88,102,105,109,110,115,123,127,128,132,144,147,176,178,197,200,206,207,208,214,220,222,223,225,231,236,237,238,240,242,248,249,252,254,287,300,303,304,308,309,331,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'elsif_expression':([201,],[247,]),'result_action':([0,17,35,82,105,127,147,176,178,206,208,214,231,252,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'referenced_location':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'mode_name':([94,112,162,173,257,298,305,],[155,155,155,155,155,155,155,]),'literal_range':([220,223,225,303,304,],[265,268,272,265,272,]),'dereferenced_reference':([0,4,9,17,30,35,48,55,60,62,82,88,102,105,109,110,115,123,127,128,132,144,147,176,178,197,200,206,207,208,214,220,222,223,225,231,236,237,238,240,242,248,249,252,254,287,300,303,304,308,309,331,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'action_statement_list':([17,127,178,206,],[105,208,231,252,]),'boolean_literal':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'builtin_call':([0,4,9,17,30,35,48,55,60,62,82,88,102,105,109,110,115,123,127,128,132,144,147,176,178,197,200,206,207,208,214,220,222,223,225,231,236,237,238,240,242,248,249,252,254,287,300,303,304,308,309,331,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'closed_dyadic_operator':([6,],[85,]),'formal_parameter_list':([218,],[259,]),'array_element':([0,4,9,17,30,35,48,55,60,62,82,88,102,105,109,110,115,123,127,128,132,144,147,176,178,197,200,206,207,208,214,220,222,223,225,231,236,237,238,240,242,248,249,252,254,287,300,303,304,308,309,331,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'assigning_operator':([6,],[88,]),'synonym_definition':([24,111,],[113,195,]),'newmode_statement':([0,35,147,214,],[33,33,33,33,]),'arithmetic_multiplicative_operator':([56,212,],[123,123,]),'then_clause':([64,253,],[126,292,]),'boolean_expression':([4,48,102,207,249,287,],[64,118,177,253,290,314,]),'statement_list':([0,147,],[35,214,]),'operand1':([4,9,30,48,62,88,102,109,110,115,128,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[74,74,74,74,74,74,74,74,74,74,74,213,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'expression_list':([109,],[189,]),'newmode_list':([16,],[99,]),'action':([0,17,35,82,105,127,147,176,178,206,208,214,231,252,],[39,39,39,148,39,39,39,148,39,39,39,39,39,39,]),'character_string_literal':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'call_action':([0,4,9,17,30,35,48,55,60,62,82,88,102,105,109,110,115,123,127,128,132,144,147,176,178,197,200,206,207,208,214,220,222,223,225,231,236,237,238,240,242,248,249,252,254,287,300,303,304,308,309,331,],[40,76,76,40,76,40,76,76,76,76,40,76,76,40,76,76,76,76,40,76,76,76,40,40,40,76,76,40,76,40,40,76,76,76,76,40,76,76,76,76,76,76,76,40,76,76,76,76,76,76,76,76,]),'action_statement':([0,17,35,105,127,147,178,206,208,214,231,252,],[41,107,41,186,107,41,107,107,186,41,186,186,]),'result':([9,30,],[93,114,]),'array_location':([0,4,9,17,30,35,48,55,60,62,82,88,102,105,109,110,115,123,127,128,132,144,147,176,178,197,200,206,207,208,214,220,222,223,225,231,236,237,238,240,242,248,249,252,254,287,300,303,304,308,309,331,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'declaration_statement':([0,35,147,214,],[43,43,43,43,]),'array_mode':([94,112,162,173,257,298,305,],[169,169,169,169,169,169,169,]),'program':([0,],[44,]),'parenthesis_gambiarra':([150,],[219,]),'range_enumeration':([104,],[184,]),'result_spec':([219,],[262,]),'string_concatenation_operator':([74,213,],[134,134,]),'then_expression':([118,290,314,],[201,316,332,]),'discrete_expression':([236,309,331,],[279,329,335,]),'end_value':([281,310,],[311,330,]),'label_id':([0,17,35,105,127,147,178,206,208,214,231,252,],[5,101,5,101,101,5,101,101,101,5,101,101,]),'procedure_statement':([0,35,147,214,],[21,21,21,21,]),'operand0':([4,9,30,48,62,88,102,109,110,115,128,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'index_mode':([225,304,],[269,324,]),'loop_counter':([104,],[183,]),'literal':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'membership_operator':([79,],[143,]),'operand3':([4,9,30,48,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[53,53,53,53,53,53,53,53,53,53,202,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'character_literal':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'do_action':([0,17,35,82,105,127,147,176,178,206,208,214,231,252,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'discrete_mode':([94,112,162,173,225,235,257,276,298,304,305,],[154,154,154,154,271,278,154,307,154,271,154,]),'parameter_spec':([257,],[295,]),'declaration':([15,171,],[95,228,]),'value_array_slice':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'else_expression':([201,247,],[250,288,]),'arithmetic_additive_operator':([74,213,],[129,129,]),'boolean_mode':([94,112,162,173,225,235,257,276,298,304,305,],[166,166,166,166,166,166,166,166,166,166,166,]),'synonym_list':([24,],[111,]),'primitive_value':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'string_mode':([94,112,162,173,257,298,305,],[168,168,168,168,168,168,168,]),'parameter_list':([110,115,303,],[191,198,191,]),'empty_literal':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'formal_procedure_head':([82,],[147,]),'declaration_list':([15,],[97,]),'identifier':([0,2,4,9,15,16,17,24,30,35,48,55,60,62,82,88,94,102,104,105,109,110,111,112,115,123,127,128,132,144,147,156,162,171,173,174,176,178,197,200,206,207,208,214,218,220,222,223,225,231,235,236,237,238,240,242,248,249,252,254,257,276,287,296,298,300,303,304,305,308,309,331,],[20,46,63,63,96,96,20,96,63,20,63,63,63,63,63,63,152,63,179,20,63,63,96,152,63,63,20,63,63,63,20,224,152,96,152,96,63,20,63,63,20,63,20,20,96,63,63,63,270,20,277,63,63,63,63,63,63,63,20,63,152,277,63,96,152,63,63,270,152,63,63,63,]),'control_part':([17,],[103,]),'step_enumeration':([104,],[180,]),'start_value':([236,],[281,]),'integer_mode':([94,112,162,173,225,235,257,276,298,304,305,],[161,161,161,161,161,161,161,161,161,161,161,]),'value_array_element':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'for_control':([104,],[181,]),'relational_operator':([79,],[141,]),'upper_bound':([237,254,300,],[282,293,322,]),'identifier_list':([15,16,24,111,171,174,218,296,],[94,98,112,112,94,98,257,257,]),'discrete_range_mode':([94,112,162,173,225,235,257,276,298,304,305,],[157,157,157,157,157,157,157,157,157,157,157,]),'conditional_expression':([4,9,30,48,62,88,102,109,110,115,128,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'integer_literal':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'bracketed_action':([0,17,35,82,105,127,147,176,178,206,208,214,231,252,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'character_mode':([94,112,162,173,225,235,257,276,298,304,305,],[158,158,158,158,158,158,158,158,158,158,158,]),'expression':([4,9,30,48,62,88,102,109,110,115,128,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[72,92,92,72,125,151,72,188,192,192,211,244,246,72,266,267,266,266,280,283,284,192,244,289,72,283,72,283,323,266,328,280,280,]),'array_primitive_value':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'assignment_action':([0,17,35,82,105,127,147,176,178,206,208,214,231,252,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'exit_action':([0,17,35,82,105,127,147,176,178,206,208,214,231,252,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'operand2':([4,9,30,48,62,88,102,109,110,115,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[56,56,56,56,56,56,56,56,56,56,56,212,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'formal_parameter':([218,296,],[258,320,]),'while_control':([17,181,],[108,233,]),'synonym_statement':([0,35,147,214,],[42,42,42,42,]),'operand4':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[80,80,80,80,124,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'index_mode_list':([225,],[273,]),'builtin_name':([0,4,9,17,30,35,48,55,60,62,82,88,102,105,109,110,115,123,127,128,132,144,147,176,178,197,200,206,207,208,214,220,222,223,225,231,236,237,238,240,242,248,249,252,254,287,300,303,304,308,309,331,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'parenthesized_expression':([4,9,30,48,60,62,88,102,109,110,115,123,128,132,144,197,200,207,220,222,223,225,236,237,238,240,242,248,249,254,287,300,303,304,308,309,331,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list ASSIGN constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode ASSIGN constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',114),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET ICONST RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',392),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',398),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',404),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',410),
  ('expression -> operand0','expression',1,'p_expression','parser.py',417),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',418),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',424),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',425),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',434),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',440),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',446),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',452),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',453),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',462),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',463),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',470),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',471),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',483),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',488),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',493),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',494),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',502),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',509),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',515),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',519),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',520),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',529),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',534),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',535),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',544),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',550),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',551),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',556),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',561),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',562),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',571),
  ('action -> bracketed_action','action',1,'p_action','parser.py',577),
  ('action -> assignment_action','action',1,'p_action','parser.py',578),
  ('action -> call_action','action',1,'p_action','parser.py',579),
  ('action -> exit_action','action',1,'p_action','parser.py',580),
  ('action -> return_action','action',1,'p_action','parser.py',581),
  ('action -> result_action','action',1,'p_action','parser.py',582),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',588),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',593),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',613),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',622),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',627),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',628),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',637),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',638),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',647),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',648),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',655),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',657),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',658),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',673),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',674),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',675),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',676),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',691),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',692),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',701),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',707),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',712),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',713),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',720),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',725),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',730),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',735),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',736),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',744),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',749),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',750),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',757),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',761),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',762),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',767),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',768),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',775),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',776),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',783),
  ('exit_action -> EXIT exit_label_id','exit_action',2,'p_exit_action','parser.py',791),
  ('exit_label_id -> identifier','exit_label_id',1,'p_exit_label_id','parser.py',795),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',799),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',800),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',807),
  ('result -> expression','result',1,'p_result','parser.py',811),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',816),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',817),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',826),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',827),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',828),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',829),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',830),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',831),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',835),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',839),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',847),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',848),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',856),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',857),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',864),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',865),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',872),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',876),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',877),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',889),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',890),
]
