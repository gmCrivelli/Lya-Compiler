
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST ARRAY BY CHARS DCL DO DOWN ELSE ELSIF END EXIT FI FOR IF IN LOC TYPE OD PROC REF RESULT RETURN RETURNS SYN THEN TO WHILE ABS ASC BOOL CHAR FALSE INT LENGTH LOWER NULL NUM PRINT READ TRUE UPPERprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list initialization\n                              | identifier_list mode initializationnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT label_idreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'DCL':([0,2,3,4,5,6,7,8,45,57,118,139,144,149,213,214,216,257,292,],[9,9,-2,-4,-5,-6,-7,-8,-3,-128,-9,-18,-23,9,-200,-129,9,-203,-204,]),'SYN':([0,2,3,4,5,6,7,8,45,57,118,139,144,149,213,214,216,257,292,],[10,10,-2,-4,-5,-6,-7,-8,-3,-128,-9,-18,-23,10,-200,-129,10,-203,-204,]),'TYPE':([0,2,3,4,5,6,7,8,45,57,118,139,144,149,213,214,216,257,292,],[11,11,-2,-4,-5,-6,-7,-8,-3,-128,-9,-18,-23,11,-200,-129,11,-203,-204,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,21,25,26,27,28,29,30,31,32,33,34,45,48,49,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,110,112,113,114,116,117,118,119,121,131,139,140,141,143,144,145,146,149,151,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,179,180,181,184,185,187,195,196,203,204,205,208,209,210,213,214,216,218,219,220,221,222,224,225,229,232,233,234,236,238,239,241,242,243,244,257,263,267,268,270,271,273,281,286,289,290,291,292,293,295,298,300,307,309,311,320,323,327,],[21,21,-2,-4,-5,-6,-7,-8,21,21,21,-17,-178,-179,21,21,21,21,21,-57,-58,-59,-3,21,-15,21,-19,21,21,-128,21,21,-61,-140,-141,-142,-143,-144,-145,-146,-86,-87,-95,21,-108,-115,-120,21,-124,-125,-126,-122,-123,-56,-60,21,-67,-68,-69,-70,-71,-72,-73,-74,-75,21,-76,-77,-78,-79,-80,-81,21,21,-151,21,21,21,-9,21,21,21,-18,-20,-21,21,-23,21,21,21,-180,21,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,21,-110,-111,-112,-113,-114,21,-117,-118,-119,-121,-127,21,21,21,-152,21,-190,-16,21,21,21,-22,-14,-200,-129,21,21,-181,21,-96,-109,21,-116,-85,21,21,21,21,21,21,-191,-62,21,21,-203,21,21,21,-82,21,21,21,21,21,21,21,-204,21,21,-88,21,21,21,-65,-89,-83,21,]),'EXIT':([0,2,3,4,5,6,7,8,31,45,56,57,110,113,118,139,144,149,184,185,187,195,213,214,216,232,234,236,257,273,292,],[27,27,-2,-4,-5,-6,-7,-8,27,-3,27,-128,27,-151,-9,-18,-23,27,27,27,-152,27,-200,-129,27,27,27,27,-203,27,-204,]),'RETURN':([0,2,3,4,5,6,7,8,31,45,56,57,110,113,118,139,144,149,184,185,187,195,213,214,216,232,234,236,257,273,292,],[28,28,-2,-4,-5,-6,-7,-8,28,-3,28,-128,28,-151,-9,-18,-23,28,28,28,-152,28,-200,-129,28,28,28,28,-203,28,-204,]),'RESULT':([0,2,3,4,5,6,7,8,31,45,56,57,110,113,118,139,144,149,184,185,187,195,213,214,216,232,234,236,257,273,292,],[29,29,-2,-4,-5,-6,-7,-8,29,-3,29,-128,29,-151,-9,-18,-23,29,29,29,-152,29,-200,-129,29,29,29,29,-203,29,-204,]),'IF':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,98,110,113,114,116,117,118,139,143,144,149,181,184,185,187,195,204,205,208,213,214,216,220,224,232,233,234,236,238,243,244,257,267,268,271,273,286,290,291,292,300,307,309,327,],[30,30,-2,-4,-5,-6,-7,-8,75,75,75,30,-3,30,-128,75,75,-140,-141,-142,-143,-144,-145,-146,75,75,30,-151,75,75,75,-9,-18,75,-23,30,75,30,30,-152,30,75,75,75,-200,-129,30,75,75,30,75,30,30,75,75,75,-203,75,75,75,30,75,75,75,-204,75,75,75,75,]),'DO':([0,2,3,4,5,6,7,8,31,45,56,57,110,113,118,139,144,149,184,185,187,195,213,214,216,232,234,236,257,273,292,],[31,31,-2,-4,-5,-6,-7,-8,31,-3,31,-128,31,-151,-9,-18,-23,31,31,31,-152,31,-200,-129,31,31,31,31,-203,31,-204,]),'ABS':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,143,144,149,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,184,185,187,195,204,205,208,213,214,216,220,224,232,233,234,236,238,243,244,257,267,268,271,273,286,290,291,292,300,307,309,327,],[37,37,-2,-4,-5,-6,-7,-8,37,37,37,37,-3,37,-128,37,37,-140,-141,-142,-143,-144,-145,-146,37,37,-122,-123,37,37,37,-151,37,37,37,-9,-18,37,-23,37,37,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,37,-110,-111,-112,-113,-114,37,-117,-118,-119,37,37,37,-152,37,37,37,37,-200,-129,37,37,37,37,37,37,37,37,37,37,-203,37,37,37,37,37,37,37,-204,37,37,37,37,]),'ASC':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,143,144,149,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,184,185,187,195,204,205,208,213,214,216,220,224,232,233,234,236,238,243,244,257,267,268,271,273,286,290,291,292,300,307,309,327,],[38,38,-2,-4,-5,-6,-7,-8,38,38,38,38,-3,38,-128,38,38,-140,-141,-142,-143,-144,-145,-146,38,38,-122,-123,38,38,38,-151,38,38,38,-9,-18,38,-23,38,38,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,38,-110,-111,-112,-113,-114,38,-117,-118,-119,38,38,38,-152,38,38,38,38,-200,-129,38,38,38,38,38,38,38,38,38,38,-203,38,38,38,38,38,38,38,-204,38,38,38,38,]),'NUM':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,143,144,149,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,184,185,187,195,204,205,208,213,214,216,220,224,232,233,234,236,238,243,244,257,267,268,271,273,286,290,291,292,300,307,309,327,],[39,39,-2,-4,-5,-6,-7,-8,39,39,39,39,-3,39,-128,39,39,-140,-141,-142,-143,-144,-145,-146,39,39,-122,-123,39,39,39,-151,39,39,39,-9,-18,39,-23,39,39,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,39,-110,-111,-112,-113,-114,39,-117,-118,-119,39,39,39,-152,39,39,39,39,-200,-129,39,39,39,39,39,39,39,39,39,39,-203,39,39,39,39,39,39,39,-204,39,39,39,39,]),'UPPER':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,143,144,149,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,184,185,187,195,204,205,208,213,214,216,220,224,232,233,234,236,238,243,244,257,267,268,271,273,286,290,291,292,300,307,309,327,],[40,40,-2,-4,-5,-6,-7,-8,40,40,40,40,-3,40,-128,40,40,-140,-141,-142,-143,-144,-145,-146,40,40,-122,-123,40,40,40,-151,40,40,40,-9,-18,40,-23,40,40,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,40,-110,-111,-112,-113,-114,40,-117,-118,-119,40,40,40,-152,40,40,40,40,-200,-129,40,40,40,40,40,40,40,40,40,40,-203,40,40,40,40,40,40,40,-204,40,40,40,40,]),'LOWER':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,143,144,149,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,184,185,187,195,204,205,208,213,214,216,220,224,232,233,234,236,238,243,244,257,267,268,271,273,286,290,291,292,300,307,309,327,],[41,41,-2,-4,-5,-6,-7,-8,41,41,41,41,-3,41,-128,41,41,-140,-141,-142,-143,-144,-145,-146,41,41,-122,-123,41,41,41,-151,41,41,41,-9,-18,41,-23,41,41,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,41,-110,-111,-112,-113,-114,41,-117,-118,-119,41,41,41,-152,41,41,41,41,-200,-129,41,41,41,41,41,41,41,41,41,41,-203,41,41,41,41,41,41,41,-204,41,41,41,41,]),'LENGTH':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,143,144,149,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,184,185,187,195,204,205,208,213,214,216,220,224,232,233,234,236,238,243,244,257,267,268,271,273,286,290,291,292,300,307,309,327,],[42,42,-2,-4,-5,-6,-7,-8,42,42,42,42,-3,42,-128,42,42,-140,-141,-142,-143,-144,-145,-146,42,42,-122,-123,42,42,42,-151,42,42,42,-9,-18,42,-23,42,42,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,42,-110,-111,-112,-113,-114,42,-117,-118,-119,42,42,42,-152,42,42,42,42,-200,-129,42,42,42,42,42,42,42,42,42,42,-203,42,42,42,42,42,42,42,-204,42,42,42,42,]),'READ':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,143,144,149,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,184,185,187,195,204,205,208,213,214,216,220,224,232,233,234,236,238,243,244,257,267,268,271,273,286,290,291,292,300,307,309,327,],[43,43,-2,-4,-5,-6,-7,-8,43,43,43,43,-3,43,-128,43,43,-140,-141,-142,-143,-144,-145,-146,43,43,-122,-123,43,43,43,-151,43,43,43,-9,-18,43,-23,43,43,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,43,-110,-111,-112,-113,-114,43,-117,-118,-119,43,43,43,-152,43,43,43,43,-200,-129,43,43,43,43,43,43,43,43,43,43,-203,43,43,43,43,43,43,43,-204,43,43,43,43,]),'PRINT':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,143,144,149,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,184,185,187,195,204,205,208,213,214,216,220,224,232,233,234,236,238,243,244,257,267,268,271,273,286,290,291,292,300,307,309,327,],[44,44,-2,-4,-5,-6,-7,-8,44,44,44,44,-3,44,-128,44,44,-140,-141,-142,-143,-144,-145,-146,44,44,-122,-123,44,44,44,-151,44,44,44,-9,-18,44,-23,44,44,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,44,-110,-111,-112,-113,-114,44,-117,-118,-119,44,44,44,-152,44,44,44,44,-200,-129,44,44,44,44,44,44,44,44,44,44,-203,44,44,44,44,44,44,44,-204,44,44,44,44,]),'$end':([1,2,3,4,5,6,7,8,45,57,118,139,144,213,214,],[0,-1,-2,-4,-5,-6,-7,-8,-3,-128,-9,-18,-23,-200,-129,]),'END':([3,4,5,6,7,8,45,57,118,139,144,149,213,214,216,257,292,],[-2,-4,-5,-6,-7,-8,-3,-128,-9,-18,-23,215,-200,-129,256,-203,-204,]),'COLON':([12,14,21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,115,151,179,180,196,199,200,219,221,222,225,227,228,229,241,242,246,247,255,270,298,311,316,320,323,],[56,-130,-17,-178,-179,-57,-58,-59,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,195,-180,-121,-127,-190,244,-42,-181,-96,-109,-116,271,-42,-85,-191,-62,286,-42,-56,-82,-88,-65,-42,-89,-83,]),'SEMI':([13,15,16,17,18,19,20,21,22,23,25,26,28,32,33,34,46,47,50,51,53,54,60,68,69,70,71,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,105,107,108,109,111,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,140,141,147,148,151,155,179,180,186,188,189,190,191,194,196,201,202,206,209,210,211,212,215,217,219,221,222,225,229,230,235,237,241,242,256,258,260,270,272,275,278,279,285,287,288,294,298,305,310,311,313,314,320,323,325,326,330,333,334,],[57,-131,-132,-133,-134,-135,-136,-17,-137,-138,-178,-179,-186,-57,-58,-59,118,-10,139,-19,144,-24,-61,-185,-130,-187,-189,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-188,-90,-157,185,-161,-12,-40,-27,-28,-29,-30,-31,-32,-33,-34,-45,-46,-35,-36,-37,-20,-21,213,214,-180,-139,-121,-127,-159,-162,-164,-165,-166,-177,-190,-11,-13,-44,-22,-14,-25,-26,-201,257,-181,-96,-109,-116,-85,-147,-158,-163,-191,-62,-202,292,-205,-82,-148,-160,-174,-175,-38,-39,-47,-206,-88,-167,-176,-65,-49,-54,-89,-83,-168,-172,-212,-173,-213,]),'ARROW':([14,17,21,24,25,26,28,29,30,32,33,34,58,59,60,61,62,63,64,65,66,67,75,79,80,83,84,85,86,98,114,116,117,143,151,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,180,181,196,204,205,208,219,220,224,233,238,241,242,243,244,255,267,268,271,286,290,291,300,307,309,311,327,],[-56,-60,-17,60,-178,-179,87,87,87,-57,-58,-59,87,87,-61,-140,-141,-142,-143,-144,-145,-146,87,87,60,-122,-123,-56,-60,87,87,87,87,87,-180,87,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,87,-110,-111,-112,-113,-114,87,-117,-118,-119,60,87,-190,87,87,87,-181,87,87,87,87,-191,-62,87,87,-56,87,87,87,87,87,87,87,87,87,-65,87,]),'ASSIGN':([14,17,21,24,25,26,32,33,34,49,52,55,60,85,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,142,151,192,193,196,203,206,219,241,242,285,287,288,311,313,314,],[-56,-60,-17,61,-178,-179,-57,-58,-59,-15,143,146,-61,-56,143,-40,-27,-28,-29,-30,-31,-32,-33,-34,-45,-46,-35,-36,-37,143,-180,238,-169,-190,-16,-44,-181,-191,-62,-38,-39,-47,-65,-49,-54,]),'INCREASE':([14,17,21,24,25,26,32,33,34,60,85,151,196,219,241,242,311,],[-56,-60,-17,63,-178,-179,-57,-58,-59,-61,-56,-180,-190,-181,-191,-62,-65,]),'DECREASE':([14,17,21,24,25,26,32,33,34,60,85,151,196,219,241,242,311,],[-56,-60,-17,64,-178,-179,-57,-58,-59,-61,-56,-180,-190,-181,-191,-62,-65,]),'MULCREASE':([14,17,21,24,25,26,32,33,34,60,85,151,196,219,241,242,311,],[-56,-60,-17,65,-178,-179,-57,-58,-59,-61,-56,-180,-190,-181,-191,-62,-65,]),'DIVCREASE':([14,17,21,24,25,26,32,33,34,60,85,151,196,219,241,242,311,],[-56,-60,-17,66,-178,-179,-57,-58,-59,-61,-56,-180,-190,-181,-191,-62,-65,]),'MODCREASE':([14,17,21,24,25,26,32,33,34,60,85,151,196,219,241,242,311,],[-56,-60,-17,67,-178,-179,-57,-58,-59,-61,-56,-180,-190,-181,-191,-62,-65,]),'LBRACKET':([14,17,21,24,25,26,32,33,34,36,60,80,82,85,86,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,137,138,151,180,196,219,229,241,242,255,270,311,323,],[-56,-60,-17,-66,-178,-179,-57,-58,-59,117,-61,-66,-84,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,181,-76,-77,-78,-79,-80,-81,207,208,-180,-66,-190,-181,-85,-191,-62,-56,-82,-65,-83,]),'LPAREN':([14,21,28,29,30,35,37,38,39,40,41,42,43,44,58,59,61,62,63,64,65,66,67,75,79,83,84,85,98,114,116,117,122,124,127,128,129,130,134,135,136,143,150,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,204,205,208,220,224,233,238,243,244,253,255,259,267,268,271,279,280,285,286,287,290,291,300,307,309,310,327,],[58,-17,98,98,98,116,-192,-193,-194,-195,-196,-197,-198,-199,98,98,-140,-141,-142,-143,-144,-145,-146,98,98,-122,-123,58,98,98,98,98,204,205,-31,-32,-33,-34,-35,-36,-37,98,218,98,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,98,-110,-111,-112,-113,-114,98,-117,-118,-119,98,98,98,98,98,98,98,98,98,98,205,291,293,98,98,98,205,204,-38,98,-39,98,98,98,98,98,205,98,]),'COMMA':([21,25,26,32,33,34,46,47,48,49,52,53,54,55,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,151,152,153,154,179,180,196,197,198,200,201,202,203,206,210,211,212,219,221,222,225,229,241,242,251,252,253,254,261,262,263,264,270,282,284,285,287,288,296,297,298,311,312,313,314,315,316,318,319,320,323,],[-17,-178,-179,-57,-58,-59,119,-10,121,-15,121,145,-24,121,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-12,-40,-27,-28,-29,-30,-31,-32,-33,-34,-45,-46,-35,-36,-37,-180,220,-182,-184,-121,-127,-190,220,243,-63,-11,-13,-16,-44,-14,-25,-26,-181,-96,-109,-116,-85,-191,-62,290,-50,-52,-53,295,-207,121,-183,-82,-64,-43,-38,-39,-47,-209,-210,-88,-65,-41,-49,-54,-51,-184,-208,-211,-89,-83,]),'REF':([21,48,49,52,131,146,203,263,289,293,],[-17,131,-15,131,131,131,-16,131,131,131,]),'INT':([21,48,49,52,131,146,203,208,239,263,281,289,290,293,],[-17,134,-15,134,134,134,-16,134,134,134,134,134,134,134,]),'BOOL':([21,48,49,52,131,146,203,208,239,263,281,289,290,293,],[-17,135,-15,135,135,135,-16,135,135,135,135,135,135,135,]),'CHAR':([21,48,49,52,131,146,203,208,239,263,281,289,290,293,],[-17,136,-15,136,136,136,-16,136,136,136,136,136,136,136,]),'CHARS':([21,48,49,52,131,146,203,263,289,293,],[-17,137,-15,137,137,137,-16,137,137,137,]),'ARRAY':([21,48,49,52,131,146,203,263,289,293,],[-17,138,-15,138,138,138,-16,138,138,138,]),'TIMES':([21,25,26,32,33,34,60,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,176,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,176,-116,-85,-191,-62,-56,-82,-65,-83,]),'DIVIDE':([21,25,26,32,33,34,60,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,177,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,177,-116,-85,-191,-62,-56,-82,-65,-83,]),'MOD':([21,25,26,32,33,34,60,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,178,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,178,-116,-85,-191,-62,-56,-82,-65,-83,]),'PLUS':([21,25,26,32,33,34,60,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,171,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,171,-109,-116,-85,-191,-62,-56,-82,-65,-83,]),'MINUS':([21,25,26,28,29,30,32,33,34,58,59,60,61,62,63,64,65,66,67,74,75,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,114,116,117,143,151,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,179,180,181,196,204,205,208,219,220,221,222,224,225,229,233,238,241,242,243,244,255,267,268,270,271,286,290,291,300,307,309,311,323,327,],[-17,-178,-179,83,83,83,-57,-58,-59,83,83,-61,-140,-141,-142,-143,-144,-145,-146,172,83,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,83,-76,-77,-78,-79,-80,-81,83,83,83,83,-180,83,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,83,-110,-111,-112,-113,-114,83,-117,-118,-119,-121,-127,83,-190,83,83,83,-181,83,172,-109,83,-116,-85,83,83,-191,-62,83,83,-56,83,83,-82,83,83,83,83,83,83,83,-65,-83,83,]),'STRCAT':([21,25,26,32,33,34,60,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,173,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,173,-109,-116,-85,-191,-62,-56,-82,-65,-83,]),'AND':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,159,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,-96,-109,-116,-85,-191,-62,-56,-82,-65,-83,]),'OR':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,160,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,-96,-109,-116,-85,-191,-62,-56,-82,-65,-83,]),'EQUAL':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,161,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,-96,-109,-116,-85,-191,-62,-56,-82,-65,-83,]),'DIFF':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,162,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,-96,-109,-116,-85,-191,-62,-56,-82,-65,-83,]),'GREATER':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,163,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,-96,-109,-116,-85,-191,-62,-56,-82,-65,-83,]),'GREATEREQ':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,164,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,-96,-109,-116,-85,-191,-62,-56,-82,-65,-83,]),'LESS':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,165,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,-96,-109,-116,-85,-191,-62,-56,-82,-65,-83,]),'LESSEQ':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,166,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,-96,-109,-116,-85,-191,-62,-56,-82,-65,-83,]),'IN':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,192,193,196,219,221,222,225,229,240,241,242,255,270,311,323,],[-17,-178,-179,-57,-58,-59,-61,167,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,239,-169,-190,-181,-96,-109,-116,-85,281,-191,-62,-56,-82,-65,-83,]),'THEN':([21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,106,107,151,174,179,180,196,219,221,222,225,229,241,242,270,274,298,302,311,320,321,323,],[-17,-178,-179,-57,-58,-59,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,184,-90,-180,224,-121,-127,-190,-181,-96,-109,-116,-85,-191,-62,-82,184,-88,224,-65,-89,224,-83,]),'RPAREN':([21,25,26,32,33,34,58,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,116,122,123,124,125,126,127,128,129,130,132,133,134,135,136,151,152,153,154,179,180,182,196,197,206,218,219,221,222,225,229,241,242,245,248,261,262,264,270,284,285,287,288,291,296,297,298,311,312,313,314,316,317,318,319,320,323,331,],[-17,-178,-179,-57,-58,-59,151,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,196,-40,-27,-28,-29,-30,-31,-32,-33,-34,-45,-46,-35,-36,-37,-180,219,-182,-184,-121,-127,229,-190,241,-44,260,-181,-96,-109,-116,-85,-191,-62,285,287,294,-207,-183,-82,-43,-38,-39,-47,151,-209,-210,-88,-65,-41,-49,-54,-184,330,-208,-211,-89,-83,334,]),'RBRACKET':([21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,127,128,129,130,134,135,136,151,179,180,196,198,200,219,221,222,225,226,228,229,241,242,249,250,251,252,253,254,270,282,283,284,285,287,298,303,311,312,315,320,323,],[-17,-178,-179,-57,-58,-59,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-31,-32,-33,-34,-35,-36,-37,-180,-121,-127,-190,242,-63,-181,-96,-109,-116,270,-55,-85,-191,-62,288,-48,289,-50,-52,-53,-82,-64,311,-43,-38,-39,-88,323,-65,-41,-51,-89,-83,]),'ELSE':([21,25,26,32,33,34,57,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,113,151,179,180,183,184,187,196,214,219,221,222,223,225,229,234,241,242,266,269,270,298,304,311,320,322,323,332,],[-17,-178,-179,-57,-58,-59,-128,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-151,-180,-121,-127,232,-149,-152,-190,-129,-181,-96,-109,267,-116,-85,-150,-191,-62,267,-91,-82,-88,232,-65,-89,-93,-83,-94,]),'ELSIF':([21,25,26,32,33,34,57,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,113,151,179,180,183,184,187,196,214,219,221,222,223,225,229,234,241,242,266,269,270,298,304,311,320,322,323,332,],[-17,-178,-179,-57,-58,-59,-128,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-151,-180,-121,-127,233,-149,-152,-190,-129,-181,-96,-109,268,-116,-85,-150,-191,-62,300,-91,-82,-88,233,-65,-89,-93,-83,-94,]),'TO':([21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,270,276,277,278,298,306,308,311,320,323,328,329,],[-17,-178,-179,-57,-58,-59,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,-96,-109,-116,-85,-191,-62,-82,307,-170,-174,-88,307,327,-65,-89,-83,-171,-55,]),'DOWN':([21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,192,193,196,219,221,222,225,229,241,242,270,276,277,278,298,306,311,320,323,328,329,],[-17,-178,-179,-57,-58,-59,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,240,-169,-190,-181,-96,-109,-116,-85,-191,-62,-82,308,-170,-174,-88,308,-65,-89,-83,-171,-55,]),'BY':([21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,151,179,180,196,219,221,222,225,229,241,242,270,276,277,278,298,311,320,323,],[-17,-178,-179,-57,-58,-59,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-180,-121,-127,-190,-181,-96,-109,-116,-85,-191,-62,-82,309,-170,-174,-88,-65,-89,-83,]),'FI':([21,25,26,32,33,34,57,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,113,151,179,180,183,184,187,196,214,219,221,222,225,229,231,232,234,241,242,265,270,273,298,299,301,304,311,320,323,324,],[-17,-178,-179,-57,-58,-59,-128,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-151,-180,-121,-127,230,-149,-152,-190,-129,-181,-96,-109,-116,-85,272,-153,-150,-191,-62,298,-82,-154,-88,320,-92,-155,-65,-89,-83,-156,]),'WHILE':([21,25,26,31,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,127,128,129,130,134,135,136,151,179,180,188,189,190,191,196,219,221,222,225,229,241,242,270,278,279,285,287,298,305,310,311,320,323,325,326,333,],[-17,-178,-179,114,-57,-58,-59,-61,-86,-87,-95,-108,-115,-120,-124,-125,-126,-56,-60,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-31,-32,-33,-34,-35,-36,-37,-180,-121,-127,114,-164,-165,-166,-190,-181,-96,-109,-116,-85,-191,-62,-82,-174,-175,-38,-39,-88,-167,-176,-65,-89,-83,-168,-172,-173,]),'LOC':([21,122,123,124,125,126,127,128,129,130,132,133,134,135,136,206,285,287,288,297,313,314,317,],[-17,-40,-27,-28,-29,-30,-31,-32,-33,-34,-45,-46,-35,-36,-37,-44,-38,-39,-47,319,-49,-54,331,]),'NOT':([28,29,30,58,59,61,62,63,64,65,66,67,75,98,114,116,117,143,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[84,84,84,84,84,-140,-141,-142,-143,-144,-145,-146,84,84,84,84,84,84,84,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,84,-110,-111,-112,-113,-114,84,-117,-118,-119,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'ICONST':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,143,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,204,205,207,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[99,99,99,99,99,-140,-141,-142,-143,-144,-145,-146,99,99,-122,-123,99,99,99,99,99,99,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,99,-110,-111,-112,-113,-114,99,-117,-118,-119,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'FALSE':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,143,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[100,100,100,100,100,-140,-141,-142,-143,-144,-145,-146,100,100,-122,-123,100,100,100,100,100,100,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,100,-110,-111,-112,-113,-114,100,-117,-118,-119,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'TRUE':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,143,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[101,101,101,101,101,-140,-141,-142,-143,-144,-145,-146,101,101,-122,-123,101,101,101,101,101,101,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,101,-110,-111,-112,-113,-114,101,-117,-118,-119,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'CCONST':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,143,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[102,102,102,102,102,-140,-141,-142,-143,-144,-145,-146,102,102,-122,-123,102,102,102,102,102,102,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,102,-110,-111,-112,-113,-114,102,-117,-118,-119,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'NULL':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,143,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[103,103,103,103,103,-140,-141,-142,-143,-144,-145,-146,103,103,-122,-123,103,103,103,103,103,103,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,103,-110,-111,-112,-113,-114,103,-117,-118,-119,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'SCONST':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,143,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,176,177,178,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[104,104,104,104,104,-140,-141,-142,-143,-144,-145,-146,104,104,-122,-123,104,104,104,104,104,104,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,104,-110,-111,-112,-113,-114,104,-117,-118,-119,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'OD':([31,57,110,113,185,187,214,236,],[108,-128,186,-151,235,-152,-129,275,]),'FOR':([31,],[112,]),'PROC':([56,],[150,]),'RETURNS':([217,260,294,],[259,-205,-206,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,149,],[2,216,]),'statement':([0,2,149,216,],[3,45,3,45,]),'declaration_statement':([0,2,149,216,],[4,4,4,4,]),'synonym_statement':([0,2,149,216,],[5,5,5,5,]),'newmode_statement':([0,2,149,216,],[6,6,6,6,]),'procedure_statement':([0,2,149,216,],[7,7,7,7,]),'action_statement':([0,2,31,110,149,184,185,216,232,234,236,273,],[8,8,113,187,8,113,113,8,113,187,187,187,]),'label_id':([0,2,27,31,110,149,184,185,216,232,234,236,273,],[12,12,68,115,115,12,115,115,12,115,115,115,115,]),'action':([0,2,31,56,110,149,184,185,195,216,232,234,236,273,],[13,13,13,148,13,13,13,13,148,13,13,13,13,13,]),'identifier':([0,2,9,10,11,27,28,29,30,31,48,50,52,56,58,59,75,79,87,98,110,112,114,116,117,119,121,131,143,145,146,149,156,168,175,181,184,185,195,204,205,208,216,218,220,224,232,233,234,236,238,239,243,244,263,267,268,271,273,281,286,289,290,291,293,295,300,307,309,327,],[14,14,49,49,49,69,85,85,85,14,122,49,122,85,85,85,85,85,85,85,14,193,85,85,85,49,203,122,85,49,122,14,85,85,85,85,14,14,85,85,85,255,14,49,85,85,14,85,14,14,85,280,85,85,122,85,85,85,14,280,85,122,255,85,122,49,85,85,85,85,]),'bracketed_action':([0,2,31,56,110,149,184,185,195,216,232,234,236,273,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'assignment_action':([0,2,31,56,110,149,184,185,195,216,232,234,236,273,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'call_action':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,143,149,156,168,175,181,184,185,195,204,205,208,216,220,224,232,233,234,236,238,243,244,267,268,271,273,286,290,291,300,307,309,327,],[17,17,86,86,86,17,17,86,86,86,86,86,86,17,86,86,86,86,17,86,86,86,86,17,17,17,86,86,86,17,86,86,17,86,17,17,86,86,86,86,86,86,17,86,86,86,86,86,86,86,]),'exit_action':([0,2,31,56,110,149,184,185,195,216,232,234,236,273,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'return_action':([0,2,31,56,110,149,184,185,195,216,232,234,236,273,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'result_action':([0,2,31,56,110,149,184,185,195,216,232,234,236,273,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'if_action':([0,2,31,56,110,149,184,185,195,216,232,234,236,273,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'do_action':([0,2,31,56,110,149,184,185,195,216,232,234,236,273,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'location':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,143,149,156,168,175,181,184,185,195,204,205,208,216,220,224,232,233,234,236,238,243,244,267,268,271,273,286,290,291,300,307,309,327,],[24,24,80,80,80,24,24,80,80,80,80,180,80,24,80,80,80,80,24,80,80,80,80,24,24,24,80,80,80,24,80,80,24,80,24,24,80,80,80,80,80,80,24,80,80,80,80,80,80,80,]),'procedure_call':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,143,149,156,168,175,181,184,185,195,204,205,208,216,220,224,232,233,234,236,238,243,244,267,268,271,273,286,290,291,300,307,309,327,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'builtin_call':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,143,149,156,168,175,181,184,185,195,204,205,208,216,220,224,232,233,234,236,238,243,244,267,268,271,273,286,290,291,300,307,309,327,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'dereferenced_reference':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,143,149,156,168,175,181,184,185,195,204,205,208,216,220,224,232,233,234,236,238,243,244,267,268,271,273,286,290,291,300,307,309,327,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'array_element':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,143,149,156,168,175,181,184,185,195,204,205,208,216,220,224,232,233,234,236,238,243,244,267,268,271,273,286,290,291,300,307,309,327,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'array_slice':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,143,149,156,168,175,181,184,185,195,204,205,208,216,220,224,232,233,234,236,238,243,244,267,268,271,273,286,290,291,300,307,309,327,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'builtin_name':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,143,149,156,168,175,181,184,185,195,204,205,208,216,220,224,232,233,234,236,238,243,244,267,268,271,273,286,290,291,300,307,309,327,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'array_location':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,143,149,156,168,175,181,184,185,195,204,205,208,216,220,224,232,233,234,236,238,243,244,267,268,271,273,286,290,291,300,307,309,327,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'declaration_list':([9,],[46,]),'declaration':([9,119,],[47,201,]),'identifier_list':([9,10,11,50,119,145,218,295,],[48,52,55,52,48,55,263,263,]),'synonym_list':([10,],[50,]),'synonym_definition':([10,50,],[51,140,]),'newmode_list':([11,],[53,]),'mode_definition':([11,145,],[54,211,]),'assigning_operator':([24,],[59,]),'closed_dyadic_operator':([24,],[62,]),'result':([28,29,],[70,105,]),'expression':([28,29,30,58,59,75,98,114,116,117,143,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[71,71,107,154,155,107,182,107,154,200,210,228,247,247,247,154,269,107,278,282,284,301,107,284,284,247,316,107,278,329,278,]),'operand0':([28,29,30,58,59,75,98,114,116,117,143,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'conditional_expression':([28,29,30,58,59,75,98,114,116,117,143,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'operand1':([28,29,30,58,59,75,98,114,116,117,143,156,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[74,74,74,74,74,74,74,74,74,74,74,221,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'operand2':([28,29,30,58,59,75,98,114,116,117,143,156,168,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[76,76,76,76,76,76,76,76,76,76,76,76,222,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'operand3':([28,29,30,58,59,75,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[77,77,77,77,77,77,77,77,77,77,77,77,77,225,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'operand4':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[78,78,78,78,78,78,179,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'monadic_operator':([28,29,30,58,59,75,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'referenced_location':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'primitive_value':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'literal':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'value_array_element':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'value_array_slice':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'parenthesized_expression':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'integer_literal':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,207,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,250,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'boolean_literal':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'character_literal':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'empty_literal':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'character_string_literal':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'array_primitive_value':([28,29,30,58,59,75,79,98,114,116,117,143,156,168,175,181,204,205,208,220,224,233,238,243,244,267,268,271,286,290,291,300,307,309,327,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'boolean_expression':([30,75,114,233,268,300,],[106,174,194,274,302,321,]),'control_part':([31,],[109,]),'action_statement_list':([31,184,185,232,],[110,234,236,273,]),'while_control':([31,188,],[111,237,]),'mode':([48,52,131,146,263,289,293,],[120,142,206,212,297,314,317,]),'mode_name':([48,52,131,146,263,289,293,],[123,123,123,123,123,123,123,]),'discrete_mode':([48,52,131,146,208,239,263,281,289,290,293,],[124,124,124,124,253,279,124,310,124,253,124,]),'reference_mode':([48,52,131,146,263,289,293,],[125,125,125,125,125,125,125,]),'composite_mode':([48,52,131,146,263,289,293,],[126,126,126,126,126,126,126,]),'integer_mode':([48,52,131,146,208,239,263,281,289,290,293,],[127,127,127,127,127,127,127,127,127,127,127,]),'boolean_mode':([48,52,131,146,208,239,263,281,289,290,293,],[128,128,128,128,128,128,128,128,128,128,128,]),'character_mode':([48,52,131,146,208,239,263,281,289,290,293,],[129,129,129,129,129,129,129,129,129,129,129,]),'discrete_range_mode':([48,52,131,146,208,239,263,281,289,290,293,],[130,130,130,130,130,130,130,130,130,130,130,]),'string_mode':([48,52,131,146,263,289,293,],[132,132,132,132,132,132,132,]),'array_mode':([48,52,131,146,263,289,293,],[133,133,133,133,133,133,133,]),'initialization':([52,120,142,],[141,202,209,]),'procedure_definition':([56,],[147,]),'formal_procedure_head':([56,],[149,]),'parameter_list':([58,116,291,],[152,197,152,]),'parameter':([58,116,220,291,],[153,153,264,153,]),'operator1':([72,],[156,]),'relational_operator':([72,],[157,]),'membership_operator':([72,],[158,]),'operator2':([74,221,],[168,168,]),'arithmetic_additive_operator':([74,221,],[169,169,]),'string_concatenation_operator':([74,221,],[170,170,]),'arithmetic_multiplicative_operator':([76,222,],[175,175,]),'then_clause':([106,274,],[183,304,]),'for_control':([112,],[188,]),'iteration':([112,],[189,]),'step_enumeration':([112,],[190,]),'range_enumeration':([112,],[191,]),'loop_counter':([112,],[192,]),'expression_list':([117,],[198,]),'lower_bound':([117,181,204,205,208,290,291,],[199,227,246,246,246,246,246,]),'parenthesis_gambiarra':([150,],[217,]),'then_expression':([174,302,321,],[223,322,332,]),'integer_expression':([181,309,],[226,328,]),'else_clause':([183,304,],[231,324,]),'literal_range':([204,205,208,290,291,],[245,248,254,254,245,]),'string_length':([207,],[249,]),'index_mode_list':([208,],[251,]),'index_mode':([208,290,],[252,315,]),'result_spec':([217,],[258,]),'formal_parameter_list':([218,],[261,]),'formal_parameter':([218,295,],[262,318,]),'else_expression':([223,266,],[265,299,]),'elsif_expression':([223,],[266,]),'start_value':([238,],[276,]),'discrete_expression':([238,307,327,],[277,326,333,]),'upper_bound':([244,271,286,],[283,303,312,]),'parameter_spec':([263,],[296,]),'end_value':([276,306,],[305,325,]),'step_value':([276,],[306,]),'element_mode':([289,],[313,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',23),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',29),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',30),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',41),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',46),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',51),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',52),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',59),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',60),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',67),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',74),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',75),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',82),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',88),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',96),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',97),
  ('synonym_definition -> identifier_list initialization','synonym_definition',2,'p_synonym_definition','parser.py',104),
  ('synonym_definition -> identifier_list mode initialization','synonym_definition',3,'p_synonym_definition','parser.py',105),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',117),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',123),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',124),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',131),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',137),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',138),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',139),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',140),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',145),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',146),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',153),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',158),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',163),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',168),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',169),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',176),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',186),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',191),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',197),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',203),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',209),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',210),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','parser.py',215),
  ('string_length -> integer_literal','string_length',1,'p_string_length','parser.py',221),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',227),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',233),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',234),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',241),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',242),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',247),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',253),
  ('location -> identifier','location',1,'p_location','parser.py',259),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',260),
  ('location -> array_element','location',1,'p_location','parser.py',261),
  ('location -> array_slice','location',1,'p_location','parser.py',262),
  ('location -> call_action','location',1,'p_location','parser.py',263),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',273),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',313),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',319),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',320),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',327),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',333),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',339),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',340),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',342),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',348),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',349),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',352),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',357),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',363),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',364),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',371),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',377),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',384),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',390),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',396),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',402),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',408),
  ('expression -> operand0','expression',1,'p_expression','parser.py',415),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',416),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',421),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',422),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',431),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',437),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',443),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',449),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',450),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',459),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',460),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',467),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',468),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',473),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',474),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',475),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',480),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',485),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',490),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',491),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',499),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',500),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',505),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',506),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',512),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',516),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',517),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',524),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',525),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',526),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',531),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',532),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',540),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',541),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',546),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',547),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',548),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',553),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',558),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',559),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',568),
  ('action -> bracketed_action','action',1,'p_action','parser.py',574),
  ('action -> assignment_action','action',1,'p_action','parser.py',575),
  ('action -> call_action','action',1,'p_action','parser.py',576),
  ('action -> exit_action','action',1,'p_action','parser.py',577),
  ('action -> return_action','action',1,'p_action','parser.py',578),
  ('action -> result_action','action',1,'p_action','parser.py',579),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',584),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',585),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',590),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',609),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',610),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',615),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',616),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',617),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',624),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',625),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',634),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',635),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',644),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',645),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',652),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',653),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',654),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',655),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',670),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',671),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',672),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',673),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',687),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',688),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',689),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',698),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',703),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',704),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',709),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',710),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',717),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',722),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',727),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',732),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',733),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',741),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',746),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',747),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',754),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',758),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',759),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',764),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',765),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',772),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',773),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',780),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','parser.py',788),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',792),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',793),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',800),
  ('result -> expression','result',1,'p_result','parser.py',804),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',809),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',810),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',817),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',818),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',819),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',820),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',821),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',822),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',823),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',824),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',828),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',832),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',833),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',841),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',849),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',850),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',857),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',858),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',865),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',869),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',870),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',882),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',883),
]
