
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST DO NULL CHAR LOWER FI REF WHILE TYPE IN LENGTH THEN ABS ELSIF CHARS FALSE LOC OD TRUE DCL END RESULT DOWN EXIT BOOL INT ELSE FOR PROC UPPER TO IF RETURNS SYN READ ASC PRINT RETURN NUM BY ARRAYprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list ASSIGN constant_expression\n                              | identifier_list mode ASSIGN constant_expressionconstant_expression : expressionnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET ICONST RBRACKETarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT exit_label_idexit_label_id :  identifierreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'ARRAY':([20,86,87,116,161,193,221,248,292,301,],[-17,155,-15,155,155,155,-16,155,155,155,]),'LESSEQ':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,132,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,-96,-109,-62,-192,-82,-56,-65,-83,]),'LOC':([20,156,157,162,163,164,165,166,167,169,170,171,172,173,174,222,288,303,304,305,316,323,324,],[-17,-38,-31,-34,-30,-46,-37,-41,-32,-35,-36,-28,-29,-47,-33,-45,314,-48,-39,-40,332,-54,-49,]),'ARROW':([5,9,12,13,15,16,17,20,22,32,39,43,48,49,56,58,59,71,76,78,79,93,97,98,106,107,108,109,110,111,112,113,114,125,126,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,159,189,206,207,215,217,223,224,225,230,232,233,234,235,239,243,255,259,260,264,295,299,300,302,308,309,312,330,],[-179,-57,-60,-58,-56,52,52,-17,-178,-59,52,108,52,108,-60,52,-56,-122,52,52,-123,52,52,52,-142,-146,-61,52,-143,-144,-145,-141,-140,-180,108,-119,52,-117,-118,-106,-102,-107,-99,-101,52,-104,-100,-98,-103,-105,-97,52,-114,-110,-112,52,-111,-113,52,-191,52,-181,52,52,52,52,52,52,52,52,-62,-192,52,52,52,52,52,-56,52,52,52,52,52,52,-65,52,]),'NUM':([0,3,4,16,17,21,23,25,27,28,33,39,45,46,47,48,52,58,71,76,78,79,93,95,96,97,98,106,107,109,110,111,112,113,114,121,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,159,175,176,185,192,195,198,200,201,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,252,255,259,260,285,291,295,299,300,302,308,309,330,],[14,14,-7,14,14,-2,14,-6,-5,-4,-8,14,14,-128,-3,14,14,14,-122,14,14,-123,14,14,-151,14,14,-142,-146,14,-143,-144,-145,-141,-140,14,-119,14,-117,-118,-106,-102,-107,-99,-101,14,-104,-100,-98,-103,-105,-97,14,-114,-110,-112,14,-111,-113,-18,14,14,14,-152,-24,14,-9,-129,-201,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-204,14,14,14,14,-205,14,14,14,14,14,14,14,]),'DIFF':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,133,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,-96,-109,-62,-192,-82,-56,-65,-83,]),'INT':([20,86,87,116,161,193,217,221,229,248,274,292,301,302,],[-17,170,-15,170,170,170,170,-16,170,170,170,170,170,170,]),'MULCREASE':([5,9,12,13,15,20,22,32,43,59,108,125,189,207,234,235,312,],[-179,-57,-60,-58,-56,-17,-178,-59,111,-56,-61,-180,-191,-181,-62,-192,-65,]),'READ':([0,3,4,16,17,21,23,25,27,28,33,39,45,46,47,48,52,58,71,76,78,79,93,95,96,97,98,106,107,109,110,111,112,113,114,121,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,159,175,176,185,192,195,198,200,201,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,252,255,259,260,285,291,295,299,300,302,308,309,330,],[7,7,-7,7,7,-2,7,-6,-5,-4,-8,7,7,-128,-3,7,7,7,-122,7,7,-123,7,7,-151,7,7,-142,-146,7,-143,-144,-145,-141,-140,7,-119,7,-117,-118,-106,-102,-107,-99,-101,7,-104,-100,-98,-103,-105,-97,7,-114,-110,-112,7,-111,-113,-18,7,7,7,-152,-24,7,-9,-129,-201,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-204,7,7,7,7,-205,7,7,7,7,7,7,7,]),'ASSIGN':([5,9,12,13,15,20,22,32,43,59,86,87,103,108,125,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,189,197,207,221,222,234,235,303,304,305,312,323,324,],[-179,-57,-60,-58,-56,-17,-178,-59,114,-56,159,-15,193,-61,-180,-38,-31,-34,-30,-46,-37,-41,-32,224,-35,-36,-28,-29,-47,-33,230,-169,-191,243,-181,-16,-45,-62,-192,-48,-39,-40,-65,-54,-49,]),'CHAR':([20,86,87,116,161,193,217,221,229,248,274,292,301,302,],[-17,156,-15,156,156,156,156,-16,156,156,156,156,156,156,]),'STRCAT':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-73,-72,-69,-74,-81,-76,-70,-71,147,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,147,-109,-62,-192,-82,-56,-65,-83,]),'RPAREN':([5,9,13,20,22,32,48,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,98,108,122,123,124,125,126,131,145,156,157,162,163,164,165,166,167,169,170,171,172,173,174,189,190,202,207,208,209,210,216,222,234,235,246,249,254,256,270,272,280,287,288,296,300,303,304,305,312,314,315,316,317,318,321,322,323,324,332,],[-179,-57,-58,-17,-178,-59,125,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,189,-61,207,-182,-184,-180,-127,209,-121,-38,-31,-34,-30,-46,-37,-41,-32,-35,-36,-28,-29,-47,-33,-191,235,247,-181,-116,-85,-96,-109,-45,-62,-192,-208,290,-183,-82,304,305,-44,-210,-211,-88,125,-48,-39,-40,-65,-212,-209,333,-83,-89,-42,-184,-54,-49,336,]),'COMMA':([5,9,13,20,22,32,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,86,87,101,102,103,108,115,116,117,122,123,124,125,126,145,156,157,162,163,164,165,166,167,169,170,171,172,173,174,187,188,189,190,197,207,208,209,210,216,221,222,234,235,236,237,244,245,246,248,249,254,256,265,266,267,268,280,282,286,287,288,296,303,304,305,312,314,315,317,318,321,322,323,324,325,],[-179,-57,-58,-17,-178,-59,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,160,-15,-25,191,160,-61,-10,160,199,206,-182,-184,-180,-127,-121,-38,-31,-34,-30,-46,-37,-41,-32,-35,-36,-28,-29,-47,-33,233,-63,-191,206,-12,-181,-116,-85,-96,-109,-16,-45,-62,-192,-26,-27,-13,-11,-208,160,289,-183,-82,-50,-53,302,-52,-44,-64,-14,-210,-211,-88,-48,-39,-40,-65,-212,-209,-83,-89,-42,-184,-54,-49,-51,]),'COLON':([1,5,9,13,15,20,22,32,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,89,108,125,126,145,186,188,189,207,208,209,210,211,212,216,234,235,256,262,263,264,296,312,317,318,322,],[45,-179,-57,-58,-130,-17,-178,-59,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,175,-61,-180,-127,-121,232,-43,-191,-181,-116,-85,-96,255,-43,-109,-62,-192,-82,-43,299,-56,-88,-65,-83,-89,-43,]),'LESS':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,142,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,-96,-109,-62,-192,-82,-56,-65,-83,]),'FI':([5,9,13,20,22,32,46,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,96,108,125,126,145,185,189,194,195,200,207,208,209,210,216,234,235,240,241,242,256,258,285,294,296,298,312,313,317,318,331,],[-179,-57,-58,-17,-178,-59,-128,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-151,-61,-180,-127,-121,-152,-191,238,-149,-129,-181,-116,-85,-96,-109,-62,-192,284,-153,-150,-82,296,-154,318,-88,-92,-65,-155,-83,-89,-156,]),'BY':([5,9,13,20,22,32,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,277,278,279,296,312,317,318,],[-179,-57,-58,-17,-178,-59,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,-96,-109,-62,-192,-82,309,-170,-174,-88,-65,-83,-89,]),'ELSIF':([5,9,13,20,22,32,46,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,96,108,125,126,145,185,189,194,195,200,207,208,209,210,214,216,234,235,242,256,257,261,296,312,313,317,318,320,334,],[-179,-57,-58,-17,-178,-59,-128,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-151,-61,-180,-127,-121,-152,-191,239,-149,-129,-181,-116,-85,-96,259,-109,-62,-192,-150,-82,295,-91,-88,-65,239,-83,-89,-93,-94,]),'LOWER':([0,3,4,16,17,21,23,25,27,28,33,39,45,46,47,48,52,58,71,76,78,79,93,95,96,97,98,106,107,109,110,111,112,113,114,121,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,159,175,176,185,192,195,198,200,201,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,252,255,259,260,285,291,295,299,300,302,308,309,330,],[10,10,-7,10,10,-2,10,-6,-5,-4,-8,10,10,-128,-3,10,10,10,-122,10,10,-123,10,10,-151,10,10,-142,-146,10,-143,-144,-145,-141,-140,10,-119,10,-117,-118,-106,-102,-107,-99,-101,10,-104,-100,-98,-103,-105,-97,10,-114,-110,-112,10,-111,-113,-18,10,10,10,-152,-24,10,-9,-129,-201,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-204,10,10,10,10,-205,10,10,10,10,10,10,10,]),'IN':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,177,178,189,207,208,209,210,216,228,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,134,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,229,-169,-191,-181,-116,-85,-96,-109,274,-62,-192,-82,-56,-65,-83,]),'THEN':([5,9,13,20,22,32,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,104,105,108,125,126,145,146,189,207,208,209,210,216,234,235,256,283,296,297,312,317,318,319,],[-179,-57,-58,-17,-178,-59,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-90,195,-61,-180,-127,-121,215,-191,-181,-116,-85,-96,-109,-62,-192,-82,195,-88,215,-65,-83,-89,215,]),'MOD':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,66,67,70,72,74,75,77,80,82,83,108,125,126,145,189,207,208,209,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,127,-126,-60,-115,-56,-125,-75,-68,-78,-79,-73,-72,-69,-74,-81,-76,-70,-71,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,127,-62,-192,-82,-56,-65,-83,]),'INCREASE':([5,9,12,13,15,20,22,32,43,59,108,125,189,207,234,235,312,],[-179,-57,-60,-58,-56,-17,-178,-59,106,-56,-61,-180,-191,-181,-62,-192,-65,]),'FALSE':([16,17,39,48,58,71,76,78,79,93,97,98,106,107,109,110,111,112,113,114,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[51,51,51,51,51,-122,51,51,-123,51,51,51,-142,-146,51,-143,-144,-145,-141,-140,-119,51,-117,-118,-106,-102,-107,-99,-101,51,-104,-100,-98,-103,-105,-97,51,-114,-110,-112,51,-111,-113,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'FOR':([23,],[92,]),'RETURN':([0,3,4,21,23,25,27,28,33,45,46,47,95,96,121,154,175,176,185,192,195,198,200,201,205,227,241,242,252,285,291,],[16,16,-7,-2,16,-6,-5,-4,-8,16,-128,-3,16,-151,16,-18,16,16,-152,-24,16,-9,-129,-201,16,16,16,16,-204,16,-205,]),'DIVCREASE':([5,9,12,13,15,20,22,32,43,59,108,125,189,207,234,235,312,],[-179,-57,-60,-58,-56,-17,-178,-59,112,-56,-61,-180,-191,-181,-62,-192,-65,]),'RESULT':([0,3,4,21,23,25,27,28,33,45,46,47,95,96,121,154,175,176,185,192,195,198,200,201,205,227,241,242,252,285,291,],[17,17,-7,-2,17,-6,-5,-4,-8,17,-128,-3,17,-151,17,-18,17,17,-152,-24,17,-9,-129,-201,17,17,17,17,-204,17,-205,]),'SYN':([0,3,4,21,25,27,28,33,46,47,121,154,192,198,200,201,205,252,291,],[18,18,-7,-2,-6,-5,-4,-8,-128,-3,18,-18,-24,-9,-129,-201,18,-204,-205,]),'SEMI':([2,5,8,9,11,12,13,16,19,20,22,30,32,38,40,41,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,69,70,72,73,74,75,77,80,81,82,83,84,85,88,90,91,94,99,100,101,102,104,108,115,117,118,119,125,126,145,153,156,157,162,163,164,165,166,167,169,170,171,172,173,174,179,180,181,182,183,184,189,196,197,203,204,207,208,209,210,216,219,220,222,226,231,234,235,236,237,238,244,245,247,250,253,256,271,273,276,279,284,286,290,296,303,304,305,306,307,312,317,318,323,324,326,329,333,335,336,],[46,-179,-135,-57,-138,-133,-58,-187,-136,-17,-178,-131,-59,-132,-137,-134,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-190,-69,-74,-188,-81,-76,-70,-71,-95,-80,-67,-189,154,-19,-161,176,-157,-186,-185,-25,192,-90,-61,-10,198,200,201,-180,-127,-121,-20,-38,-31,-34,-30,-46,-37,-41,-32,-35,-36,-28,-29,-47,-33,-165,-162,-166,-164,-177,-159,-191,-139,-12,252,-202,-181,-116,-85,-96,-109,-21,-23,-45,-158,-163,-62,-192,-26,-27,-147,-13,-11,-206,291,-203,-82,-22,-160,-175,-174,-148,-14,-207,-88,-48,-39,-40,-176,-167,-65,-83,-89,-54,-49,-172,-168,-213,-173,-214,]),'RBRACKET':([5,9,13,20,22,32,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,156,162,165,167,169,170,174,187,188,189,207,208,209,210,212,213,216,234,235,256,265,266,267,268,269,280,281,282,293,296,304,305,312,317,318,321,325,],[-179,-57,-58,-17,-178,-59,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-38,-34,-37,-32,-35,-36,-33,234,-63,-191,-181,-116,-85,-96,-55,256,-109,-62,-192,-82,-50,-53,301,-52,303,-44,312,-64,317,-88,-39,-40,-65,-83,-89,-42,-51,]),'TO':([5,9,13,20,22,32,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,277,278,279,296,310,311,312,317,318,327,328,],[-179,-57,-58,-17,-178,-59,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,-96,-109,-62,-192,-82,308,-170,-174,-88,308,330,-65,-83,-89,-55,-171,]),'ID':([0,3,4,5,9,13,16,17,18,20,21,22,23,25,27,28,32,33,35,36,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,72,74,75,76,77,78,79,80,81,82,83,85,86,87,88,92,93,95,96,97,98,106,107,108,109,110,111,112,113,114,116,121,125,126,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,149,150,151,152,153,154,159,160,161,175,176,185,189,191,192,193,195,198,199,200,201,202,205,206,207,208,209,210,215,216,217,219,220,221,223,224,225,227,229,230,232,233,234,235,239,241,242,243,248,252,255,256,259,260,271,274,285,289,291,292,295,296,299,300,301,302,308,309,312,317,318,330,],[20,20,-7,-179,-57,-58,20,20,20,-17,-2,-178,20,-6,-5,-4,-59,-8,20,20,20,20,20,-128,-3,20,-124,-87,-77,20,-120,-108,-126,-60,-115,20,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-122,-74,-81,-76,20,-70,20,-123,-71,-95,-80,-67,20,20,-15,-19,20,20,20,-151,20,20,-142,-146,-61,20,-143,-144,-145,-141,-140,20,20,-180,-127,-119,20,-117,-118,-106,-102,-107,-99,-101,20,-104,-100,-98,-103,-105,-97,20,-121,-114,-110,-112,20,-111,-113,-20,-18,20,20,20,20,20,-152,-191,20,-24,20,20,-9,20,-129,-201,20,20,20,-181,-116,-85,-96,20,-109,20,-21,-23,-16,20,20,20,20,20,20,20,20,-62,-192,20,20,20,20,20,-204,20,-82,20,20,-22,20,20,20,-205,20,20,-88,20,20,20,20,20,20,-65,-83,-89,20,]),'TRUE':([16,17,39,48,58,71,76,78,79,93,97,98,106,107,109,110,111,112,113,114,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[63,63,63,63,63,-122,63,63,-123,63,63,63,-142,-146,63,-143,-144,-145,-141,-140,-119,63,-117,-118,-106,-102,-107,-99,-101,63,-104,-100,-98,-103,-105,-97,63,-114,-110,-112,63,-111,-113,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'GREATER':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,141,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,-96,-109,-62,-192,-82,-56,-65,-83,]),'DO':([0,3,4,21,23,25,27,28,33,45,46,47,95,96,121,154,175,176,185,192,195,198,200,201,205,227,241,242,252,285,291,],[23,23,-7,-2,23,-6,-5,-4,-8,23,-128,-3,23,-151,23,-18,23,23,-152,-24,23,-9,-129,-201,23,23,23,23,-204,23,-205,]),'WHILE':([5,9,13,20,22,23,32,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,156,162,165,167,169,170,174,179,180,181,182,189,207,208,209,210,216,234,235,256,276,279,296,304,305,306,307,312,317,318,326,329,335,],[-179,-57,-58,-17,-178,93,-59,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-38,-34,-37,-32,-35,-36,-33,-165,93,-166,-164,-191,-181,-116,-85,-96,-109,-62,-192,-82,-175,-174,-88,-39,-40,-176,-167,-65,-83,-89,-172,-168,-173,]),'MODCREASE':([5,9,12,13,15,20,22,32,43,59,108,125,189,207,234,235,312,],[-179,-57,-60,-58,-56,-17,-178,-59,107,-56,-61,-180,-191,-181,-62,-192,-65,]),'END':([4,21,25,27,28,33,46,47,121,154,192,198,200,201,205,252,291,],[-7,-2,-6,-5,-4,-8,-128,-3,204,-18,-24,-9,-129,-201,253,-204,-205,]),'OD':([23,46,95,96,176,185,200,227,],[94,-128,184,-151,226,-152,-129,273,]),'LPAREN':([6,7,10,14,15,16,17,20,26,29,31,34,37,39,48,58,59,71,76,78,79,93,97,98,106,107,109,110,111,112,113,114,120,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,156,159,162,165,166,167,169,170,172,174,206,215,217,223,224,225,230,232,233,239,243,251,255,259,260,264,268,275,276,295,299,300,302,304,305,306,308,309,330,],[-198,-199,-197,-195,48,58,58,-17,98,-196,-194,-193,-200,58,58,58,48,-122,58,58,-123,58,58,58,-142,-146,58,-143,-144,-145,-141,-140,202,-119,58,-117,-118,-106,-102,-107,-99,-101,58,-104,-100,-98,-103,-105,-97,58,-114,-110,-112,58,-111,-113,-38,58,-34,-37,223,-32,-35,-36,225,-33,58,58,58,58,58,58,58,58,58,58,58,292,58,58,58,300,225,223,225,58,58,58,58,-39,-40,225,58,58,58,]),'RETURNS':([203,247,290,],[251,-206,-207,]),'CHARS':([20,86,87,116,161,193,221,248,292,301,],[-17,158,-15,158,158,158,-16,158,158,158,]),'AND':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,135,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,-96,-109,-62,-192,-82,-56,-65,-83,]),'MINUS':([5,9,13,16,17,20,22,32,39,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,66,67,70,72,74,75,77,78,80,81,82,83,93,97,98,106,107,108,109,110,111,112,113,114,125,126,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,149,150,151,152,159,189,206,207,208,209,210,215,216,217,223,224,225,230,232,233,234,235,239,243,255,256,259,260,264,295,299,300,302,308,309,312,317,330,],[-179,-57,-58,71,71,-17,-178,-59,71,71,-124,-77,-120,-108,-126,-60,-115,71,-56,-125,-75,-68,-78,-79,-73,-72,-69,-74,-81,-76,-70,71,-71,152,-80,-67,71,71,71,-142,-146,-61,71,-143,-144,-145,-141,-140,-180,-127,-119,71,-117,-118,-106,-102,-107,-99,-101,71,-104,-100,-98,-103,-105,-97,71,-121,-114,-110,-112,71,-111,-113,71,-191,71,-181,-116,-85,152,71,-109,71,71,71,71,71,71,71,-62,-192,71,71,71,-82,71,71,-56,71,71,71,71,71,71,-65,-83,71,]),'UPPER':([0,3,4,16,17,21,23,25,27,28,33,39,45,46,47,48,52,58,71,76,78,79,93,95,96,97,98,106,107,109,110,111,112,113,114,121,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,159,175,176,185,192,195,198,200,201,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,252,255,259,260,285,291,295,299,300,302,308,309,330,],[29,29,-7,29,29,-2,29,-6,-5,-4,-8,29,29,-128,-3,29,29,29,-122,29,29,-123,29,29,-151,29,29,-142,-146,29,-143,-144,-145,-141,-140,29,-119,29,-117,-118,-106,-102,-107,-99,-101,29,-104,-100,-98,-103,-105,-97,29,-114,-110,-112,29,-111,-113,-18,29,29,29,-152,-24,29,-9,-129,-201,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-204,29,29,29,29,-205,29,29,29,29,29,29,29,]),'DIVIDE':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,66,67,70,72,74,75,77,80,82,83,108,125,126,145,189,207,208,209,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,130,-126,-60,-115,-56,-125,-75,-68,-78,-79,-73,-72,-69,-74,-81,-76,-70,-71,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,130,-62,-192,-82,-56,-65,-83,]),'CCONST':([16,17,39,48,58,71,76,78,79,93,97,98,106,107,109,110,111,112,113,114,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[64,64,64,64,64,-122,64,64,-123,64,64,64,-142,-146,64,-143,-144,-145,-141,-140,-119,64,-117,-118,-106,-102,-107,-99,-101,64,-104,-100,-98,-103,-105,-97,64,-114,-110,-112,64,-111,-113,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'ASC':([0,3,4,16,17,21,23,25,27,28,33,39,45,46,47,48,52,58,71,76,78,79,93,95,96,97,98,106,107,109,110,111,112,113,114,121,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,159,175,176,185,192,195,198,200,201,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,252,255,259,260,285,291,295,299,300,302,308,309,330,],[31,31,-7,31,31,-2,31,-6,-5,-4,-8,31,31,-128,-3,31,31,31,-122,31,31,-123,31,31,-151,31,31,-142,-146,31,-143,-144,-145,-141,-140,31,-119,31,-117,-118,-106,-102,-107,-99,-101,31,-104,-100,-98,-103,-105,-97,31,-114,-110,-112,31,-111,-113,-18,31,31,31,-152,-24,31,-9,-129,-201,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-204,31,31,31,31,-205,31,31,31,31,31,31,31,]),'REF':([20,86,87,116,161,193,221,248,292,301,],[-17,161,-15,161,161,161,-16,161,161,161,]),'GREATEREQ':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,138,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,-96,-109,-62,-192,-82,-56,-65,-83,]),'SCONST':([16,17,39,48,58,71,76,78,79,93,97,98,106,107,109,110,111,112,113,114,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[74,74,74,74,74,-122,74,74,-123,74,74,74,-142,-146,74,-143,-144,-145,-141,-140,-119,74,-117,-118,-106,-102,-107,-99,-101,74,-104,-100,-98,-103,-105,-97,74,-114,-110,-112,74,-111,-113,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'NULL':([16,17,39,48,58,71,76,78,79,93,97,98,106,107,109,110,111,112,113,114,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[82,82,82,82,82,-122,82,82,-123,82,82,82,-142,-146,82,-143,-144,-145,-141,-140,-119,82,-117,-118,-106,-102,-107,-99,-101,82,-104,-100,-98,-103,-105,-97,82,-114,-110,-112,82,-111,-113,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'ABS':([0,3,4,16,17,21,23,25,27,28,33,39,45,46,47,48,52,58,71,76,78,79,93,95,96,97,98,106,107,109,110,111,112,113,114,121,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,159,175,176,185,192,195,198,200,201,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,252,255,259,260,285,291,295,299,300,302,308,309,330,],[34,34,-7,34,34,-2,34,-6,-5,-4,-8,34,34,-128,-3,34,34,34,-122,34,34,-123,34,34,-151,34,34,-142,-146,34,-143,-144,-145,-141,-140,34,-119,34,-117,-118,-106,-102,-107,-99,-101,34,-104,-100,-98,-103,-105,-97,34,-114,-110,-112,34,-111,-113,-18,34,34,34,-152,-24,34,-9,-129,-201,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-204,34,34,34,34,-205,34,34,34,34,34,34,34,]),'$end':([3,4,21,25,27,28,33,42,46,47,154,192,198,200,201,],[-1,-7,-2,-6,-5,-4,-8,0,-128,-3,-18,-24,-9,-129,-201,]),'EXIT':([0,3,4,21,23,25,27,28,33,45,46,47,95,96,121,154,175,176,185,192,195,198,200,201,205,227,241,242,252,285,291,],[35,35,-7,-2,35,-6,-5,-4,-8,35,-128,-3,35,-151,35,-18,35,35,-152,-24,35,-9,-129,-201,35,35,35,35,-204,35,-205,]),'TYPE':([0,3,4,21,25,27,28,33,46,47,121,154,192,198,200,201,205,252,291,],[36,36,-7,-2,-6,-5,-4,-8,-128,-3,36,-18,-24,-9,-129,-201,36,-204,-205,]),'DOWN':([5,9,13,20,22,32,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,177,178,189,207,208,209,210,216,234,235,256,277,278,279,296,310,312,317,318,327,328,],[-179,-57,-58,-17,-178,-59,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,228,-169,-191,-181,-116,-85,-96,-109,-62,-192,-82,311,-170,-174,-88,311,-65,-83,-89,-55,-171,]),'BOOL':([20,86,87,116,161,193,217,221,229,248,274,292,301,302,],[-17,165,-15,165,165,165,165,-16,165,165,165,165,165,165,]),'ICONST':([16,17,39,48,58,71,76,78,79,93,97,98,106,107,109,110,111,112,113,114,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,159,206,215,217,218,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[75,75,75,75,75,-122,75,75,-123,75,75,75,-142,-146,75,-143,-144,-145,-141,-140,-119,75,-117,-118,-106,-102,-107,-99,-101,75,-104,-100,-98,-103,-105,-97,75,-114,-110,-112,75,-111,-113,75,75,75,75,269,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'LENGTH':([0,3,4,16,17,21,23,25,27,28,33,39,45,46,47,48,52,58,71,76,78,79,93,95,96,97,98,106,107,109,110,111,112,113,114,121,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,159,175,176,185,192,195,198,200,201,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,252,255,259,260,285,291,295,299,300,302,308,309,330,],[6,6,-7,6,6,-2,6,-6,-5,-4,-8,6,6,-128,-3,6,6,6,-122,6,6,-123,6,6,-151,6,6,-142,-146,6,-143,-144,-145,-141,-140,6,-119,6,-117,-118,-106,-102,-107,-99,-101,6,-104,-100,-98,-103,-105,-97,6,-114,-110,-112,6,-111,-113,-18,6,6,6,-152,-24,6,-9,-129,-201,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-204,6,6,6,6,-205,6,6,6,6,6,6,6,]),'PROC':([45,],[120,]),'EQUAL':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,136,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,-96,-109,-62,-192,-82,-56,-65,-83,]),'ELSE':([5,9,13,20,22,32,46,49,50,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,96,108,125,126,145,185,189,194,195,200,207,208,209,210,214,216,234,235,242,256,257,261,296,312,313,317,318,320,334,],[-179,-57,-58,-17,-178,-59,-128,-124,-87,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-86,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-151,-61,-180,-127,-121,-152,-191,241,-149,-129,-181,-116,-85,-96,260,-109,-62,-192,-150,-82,260,-91,-88,-65,241,-83,-89,-93,-94,]),'IF':([0,3,4,16,17,21,23,25,27,28,33,39,45,46,47,48,58,78,93,95,96,97,98,106,107,109,110,111,112,113,114,121,144,154,159,175,176,185,192,195,198,200,201,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,252,255,259,260,285,291,295,299,300,302,308,309,330,],[39,39,-7,78,78,-2,39,-6,-5,-4,-8,78,39,-128,-3,78,78,78,78,39,-151,78,78,-142,-146,78,-143,-144,-145,-141,-140,39,78,-18,78,39,39,-152,-24,39,-9,-129,-201,39,78,78,78,78,78,78,39,78,78,78,78,39,39,78,-204,78,78,78,39,-205,78,78,78,78,78,78,78,]),'OR':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,65,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,139,-73,-72,-69,-74,-81,-76,-70,-71,-95,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,-96,-109,-62,-192,-82,-56,-65,-83,]),'NOT':([16,17,39,48,58,78,93,97,98,106,107,109,110,111,112,113,114,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[79,79,79,79,79,79,79,79,79,-142,-146,79,-143,-144,-145,-141,-140,-119,79,-117,-118,-106,-102,-107,-99,-101,79,-104,-100,-98,-103,-105,-97,79,-114,-110,-112,79,-111,-113,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'TIMES':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,66,67,70,72,74,75,77,80,82,83,108,125,126,145,189,207,208,209,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,129,-126,-60,-115,-56,-125,-75,-68,-78,-79,-73,-72,-69,-74,-81,-76,-70,-71,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,129,-62,-192,-82,-56,-65,-83,]),'DECREASE':([5,9,12,13,15,20,22,32,43,59,108,125,189,207,234,235,312,],[-179,-57,-60,-58,-56,-17,-178,-59,110,-56,-61,-180,-191,-181,-62,-192,-65,]),'PRINT':([0,3,4,16,17,21,23,25,27,28,33,39,45,46,47,48,52,58,71,76,78,79,93,95,96,97,98,106,107,109,110,111,112,113,114,121,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,154,159,175,176,185,192,195,198,200,201,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,252,255,259,260,285,291,295,299,300,302,308,309,330,],[37,37,-7,37,37,-2,37,-6,-5,-4,-8,37,37,-128,-3,37,37,37,-122,37,37,-123,37,37,-151,37,37,-142,-146,37,-143,-144,-145,-141,-140,37,-119,37,-117,-118,-106,-102,-107,-99,-101,37,-104,-100,-98,-103,-105,-97,37,-114,-110,-112,37,-111,-113,-18,37,37,37,-152,-24,37,-9,-129,-201,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-204,37,37,37,37,-205,37,37,37,37,37,37,37,]),'PLUS':([5,9,13,20,22,32,49,51,53,54,55,56,57,59,60,61,62,63,64,66,67,70,72,74,75,77,80,81,82,83,108,125,126,145,189,207,208,209,210,216,234,235,256,264,312,317,],[-179,-57,-58,-17,-178,-59,-124,-77,-120,-108,-126,-60,-115,-56,-125,-75,-68,-78,-79,-73,-72,-69,-74,-81,-76,-70,-71,149,-80,-67,-61,-180,-127,-121,-191,-181,-116,-85,149,-109,-62,-192,-82,-56,-65,-83,]),'LBRACKET':([5,9,12,13,15,20,22,24,32,43,49,51,55,56,59,61,62,63,64,66,67,68,70,72,74,75,77,80,82,83,108,125,126,155,158,189,207,209,234,235,256,264,312,317,],[-179,-57,-60,-58,-56,-17,-178,97,-59,-66,-66,-77,-84,-60,-56,-75,-68,-78,-79,-73,-72,144,-69,-74,-81,-76,-70,-71,-80,-67,-61,-180,-66,217,218,-191,-181,-85,-62,-192,-82,-56,-65,-83,]),'DCL':([0,3,4,21,25,27,28,33,46,47,121,154,192,198,200,201,205,252,291,],[44,44,-7,-2,-6,-5,-4,-8,-128,-3,44,-18,-24,-9,-129,-201,44,-204,-205,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'action':([0,3,23,45,95,121,175,176,195,205,227,241,242,285,],[2,2,2,118,2,2,118,2,2,2,2,2,2,2,]),'builtin_call':([0,3,16,17,23,39,45,48,52,58,76,78,93,95,97,98,109,121,128,137,144,150,159,175,176,195,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,255,259,260,285,295,299,300,302,308,309,330,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'loop_counter':([92,],[177,]),'exit_label_id':([35,],[100,]),'start_value':([230,],[277,]),'control_part':([23,],[91,]),'parameter':([48,98,206,300,],[123,123,254,123,]),'declaration_list':([44,],[117,]),'primitive_value':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'expression':([16,17,39,48,58,78,93,97,98,109,144,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[69,69,104,124,131,104,104,188,124,196,212,220,124,261,262,262,220,262,279,280,282,104,286,280,104,298,104,280,322,262,279,327,279,]),'lower_bound':([97,144,217,223,225,300,302,],[186,211,263,263,263,263,263,]),'closed_dyadic_operator':([43,],[113,]),'referenced_location':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'parameter_list':([48,98,300,],[122,190,122,]),'mode_definition':([36,191,],[101,236,]),'string_mode':([86,116,161,193,248,292,301,],[164,164,164,164,164,164,164,]),'index_mode_list':([217,],[267,]),'element_mode':([301,],[324,]),'operator1':([65,],[137,]),'end_value':([277,310,],[307,329,]),'value_array_element':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'for_control':([92,],[180,]),'operand0':([16,17,39,48,58,78,93,97,98,109,144,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'procedure_call':([0,3,16,17,23,39,45,48,52,58,76,78,93,95,97,98,109,121,128,137,144,150,159,175,176,195,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,255,259,260,285,295,299,300,302,308,309,330,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'expression_list':([97,],[187,]),'iteration':([92,],[182,]),'array_location':([0,3,16,17,23,39,45,48,52,58,76,78,93,95,97,98,109,121,128,137,144,150,159,175,176,195,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,255,259,260,285,295,299,300,302,308,309,330,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'boolean_mode':([86,116,161,193,217,229,248,274,292,301,302,],[174,174,174,174,174,174,174,174,174,174,174,]),'newmode_statement':([0,3,121,205,],[25,25,25,25,]),'empty_literal':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'action_statement_list':([23,176,195,241,],[95,227,242,285,]),'synonym_statement':([0,3,121,205,],[27,27,27,27,]),'upper_bound':([232,255,299,],[281,293,321,]),'literal_range':([217,223,225,300,302,],[266,270,272,270,266,]),'formal_parameter':([202,289,],[246,315,]),'step_enumeration':([92,],[179,]),'newmode_list':([36,],[102,]),'else_expression':([214,257,],[258,294,]),'action_statement':([0,3,23,95,121,176,195,205,227,241,242,285,],[33,33,96,185,33,96,96,33,185,96,185,185,]),'result_spec':([203,],[250,]),'parameter_spec':([248,],[287,]),'else_clause':([194,313,],[240,331,]),'monadic_operator':([16,17,39,48,58,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'then_clause':([105,283,],[194,313,]),'parenthesis_gambiarra':([120,],[203,]),'if_action':([0,3,23,45,95,121,175,176,195,205,227,241,242,285,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'exit_action':([0,3,23,45,95,121,175,176,195,205,227,241,242,285,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'integer_literal':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'program':([0,],[42,]),'membership_operator':([65,],[140,]),'operand1':([16,17,39,48,58,78,93,97,98,109,137,144,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[81,81,81,81,81,81,81,81,81,81,210,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'character_literal':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'location':([0,3,16,17,23,39,45,48,52,58,76,78,93,95,97,98,109,121,128,137,144,150,159,175,176,195,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,255,259,260,285,295,299,300,302,308,309,330,],[43,43,49,49,43,49,43,49,126,49,49,49,49,43,49,49,49,43,49,49,49,49,49,43,43,43,43,49,49,49,49,49,49,43,49,49,49,49,43,43,49,49,49,49,43,49,49,49,49,49,49,49,]),'literal':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'label_id':([0,3,23,95,121,176,195,205,227,241,242,285,],[1,1,89,89,1,89,89,1,89,89,89,89,]),'conditional_expression':([16,17,39,48,58,78,93,97,98,109,144,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'integer_expression':([144,309,],[213,328,]),'while_control':([23,180,],[90,231,]),'procedure_statement':([0,3,121,205,],[4,4,4,4,]),'operand4':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[53,53,53,53,53,145,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'operand2':([16,17,39,48,58,78,93,97,98,109,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[54,54,54,54,54,54,54,54,54,54,54,54,216,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'return_action':([0,3,23,45,95,121,175,176,195,205,227,241,242,285,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'discrete_expression':([230,308,330,],[278,326,335,]),'declaration':([44,199,],[115,245,]),'do_action':([0,3,23,45,95,121,175,176,195,205,227,241,242,285,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'result_action':([0,3,23,45,95,121,175,176,195,205,227,241,242,285,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'operand3':([16,17,39,48,58,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[57,57,57,57,57,57,57,57,57,57,208,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'then_expression':([146,297,319,],[214,320,334,]),'array_element':([0,3,16,17,23,39,45,48,52,58,76,78,93,95,97,98,109,121,128,137,144,150,159,175,176,195,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,255,259,260,285,295,299,300,302,308,309,330,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'arithmetic_additive_operator':([81,210,],[148,148,]),'identifier':([0,3,16,17,18,23,35,36,39,44,45,48,52,58,76,78,85,86,92,93,95,97,98,109,116,121,128,137,144,150,159,160,161,175,176,191,193,195,199,202,205,206,215,217,223,224,225,227,229,230,232,233,239,241,242,243,248,255,259,260,274,285,289,292,295,299,300,301,302,308,309,330,],[15,15,59,59,87,15,99,87,59,87,59,59,59,59,59,59,87,166,178,59,15,59,59,59,166,15,59,59,59,59,59,221,166,59,15,87,166,15,87,87,15,59,59,264,59,59,59,15,275,59,59,59,59,15,15,59,166,59,59,59,275,15,87,166,59,59,59,166,264,59,59,59,]),'assigning_operator':([43,],[109,]),'integer_mode':([86,116,161,193,217,229,248,274,292,301,302,],[167,167,167,167,167,167,167,167,167,167,167,]),'call_action':([0,3,16,17,23,39,45,48,52,58,76,78,93,95,97,98,109,121,128,137,144,150,159,175,176,195,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,255,259,260,285,295,299,300,302,308,309,330,],[12,12,56,56,12,56,12,56,56,56,56,56,56,12,56,56,56,12,56,56,56,56,56,12,12,12,12,56,56,56,56,56,56,12,56,56,56,56,12,12,56,56,56,56,12,56,56,56,56,56,56,56,]),'character_string_literal':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'formal_parameter_list':([202,],[249,]),'composite_mode':([86,116,161,193,248,292,301,],[157,157,157,157,157,157,157,]),'statement':([0,3,121,205,],[21,47,21,47,]),'arithmetic_multiplicative_operator':([54,216,],[128,128,]),'mode_name':([86,116,161,193,248,292,301,],[171,171,171,171,171,171,171,]),'relational_operator':([65,],[143,]),'operator2':([81,210,],[150,150,]),'discrete_mode':([86,116,161,193,217,229,248,274,292,301,302,],[172,172,172,172,268,276,172,306,172,172,268,]),'boolean_literal':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'array_primitive_value':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'dereferenced_reference':([0,3,16,17,23,39,45,48,52,58,76,78,93,95,97,98,109,121,128,137,144,150,159,175,176,195,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,255,259,260,285,295,299,300,302,308,309,330,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'index_mode':([217,302,],[265,325,]),'builtin_name':([0,3,16,17,23,39,45,48,52,58,76,78,93,95,97,98,109,121,128,137,144,150,159,175,176,195,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,255,259,260,285,295,299,300,302,308,309,330,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'value_array_slice':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'synonym_definition':([18,85,],[88,153,]),'identifier_list':([18,36,44,85,191,199,202,289,],[86,103,116,86,103,116,248,248,]),'declaration_statement':([0,3,121,205,],[28,28,28,28,]),'bracketed_action':([0,3,23,45,95,121,175,176,195,205,227,241,242,285,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'result':([16,17,],[73,84,]),'statement_list':([0,121,],[3,205,]),'range_enumeration':([92,],[181,]),'character_mode':([86,116,161,193,217,229,248,274,292,301,302,],[162,162,162,162,162,162,162,162,162,162,162,]),'procedure_definition':([45,],[119,]),'formal_procedure_head':([45,],[121,]),'reference_mode':([86,116,161,193,248,292,301,],[163,163,163,163,163,163,163,]),'assignment_action':([0,3,23,45,95,121,175,176,195,205,227,241,242,285,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'parenthesized_expression':([16,17,39,48,58,76,78,93,97,98,109,128,137,144,150,159,206,215,217,223,224,225,230,232,233,239,243,255,259,260,295,299,300,302,308,309,330,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'step_value':([277,],[310,]),'constant_expression':([159,224,],[219,271,]),'mode':([86,116,161,193,248,292,301,],[168,197,222,237,288,316,323,]),'synonym_list':([18,],[85,]),'discrete_range_mode':([86,116,161,193,217,229,248,274,292,301,302,],[169,169,169,169,169,169,169,169,169,169,169,]),'array_slice':([0,3,16,17,23,39,45,48,52,58,76,78,93,95,97,98,109,121,128,137,144,150,159,175,176,195,205,206,215,217,223,224,225,227,230,232,233,239,241,242,243,255,259,260,285,295,299,300,302,308,309,330,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'elsif_expression':([214,],[257,]),'string_concatenation_operator':([81,210,],[151,151,]),'boolean_expression':([39,78,93,239,259,295,],[105,146,183,283,297,319,]),'array_mode':([86,116,161,193,248,292,301,],[173,173,173,173,173,173,173,]),'initialization':([197,],[244,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list ASSIGN constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode ASSIGN constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',114),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET ICONST RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',392),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',398),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',404),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',410),
  ('expression -> operand0','expression',1,'p_expression','parser.py',417),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',418),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',423),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',424),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',433),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',439),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',445),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',451),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',452),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',461),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',462),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',469),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',470),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',475),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',482),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',487),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',492),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',493),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',501),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',502),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',507),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',514),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',518),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',519),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',526),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',533),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',534),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',542),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',548),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',550),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',555),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',560),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',561),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',570),
  ('action -> bracketed_action','action',1,'p_action','parser.py',576),
  ('action -> assignment_action','action',1,'p_action','parser.py',577),
  ('action -> call_action','action',1,'p_action','parser.py',578),
  ('action -> exit_action','action',1,'p_action','parser.py',579),
  ('action -> return_action','action',1,'p_action','parser.py',580),
  ('action -> result_action','action',1,'p_action','parser.py',581),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',586),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',592),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',611),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',617),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',626),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',627),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',636),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',637),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',646),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',647),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',654),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',655),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',657),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',672),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',673),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',674),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',675),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',689),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',691),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',700),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',705),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',711),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',712),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',719),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',724),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',729),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',734),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',735),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',743),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',748),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',749),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',756),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',760),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',761),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',766),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',767),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',774),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',775),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',782),
  ('exit_action -> EXIT exit_label_id','exit_action',2,'p_exit_action','parser.py',790),
  ('exit_label_id -> identifier','exit_label_id',1,'p_exit_label_id','parser.py',794),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',798),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',799),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',806),
  ('result -> expression','result',1,'p_result','parser.py',810),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',815),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',816),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',823),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',826),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',827),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',828),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',829),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',830),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',834),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',838),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',839),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',846),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',847),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',855),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',856),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',863),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',864),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',871),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',875),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',876),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',888),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',889),
]
