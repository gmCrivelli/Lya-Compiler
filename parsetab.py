
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST LOC ASC ABS END FALSE ELSE EXIT ARRAY TRUE WHILE PROC NULL TYPE FI RETURNS TO DCL UPPER CHAR REF LENGTH INT DOWN THEN RESULT IF SYN IN FOR NUM DO BY RETURN BOOL ELSIF READ CHARS PRINT OD LOWERprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list initialization\n                              | identifier_list mode initializationnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT label_idreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'EXIT':([0,3,9,10,23,26,32,38,41,45,81,88,100,102,119,149,171,181,185,187,194,197,201,202,204,238,239,243,248,282,285,],[7,-6,-7,7,-2,7,-8,-4,-5,7,-128,-3,7,-151,7,-9,-18,-23,7,-152,7,7,-129,7,-200,7,7,7,-203,7,-204,]),'ASC':([0,3,5,9,10,23,26,32,35,36,38,41,45,48,59,60,61,65,72,81,88,92,96,100,102,104,108,109,110,111,112,114,115,116,117,119,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,149,171,173,181,185,187,194,197,201,202,204,213,217,218,221,226,230,231,235,238,239,240,243,248,253,256,258,282,285,295,297,301,303,307,309,324,],[27,-6,27,-7,27,-2,27,-8,27,27,-4,-5,27,-123,-122,27,27,27,27,-128,-3,27,27,27,-151,27,27,-146,-145,-140,-141,-144,-142,27,-143,27,27,-119,-117,-118,-113,-112,27,-111,-114,-110,27,-98,-102,-105,-103,-97,-99,-100,27,-107,-104,-106,-101,-9,-18,27,-23,27,-152,27,27,-129,27,-200,27,27,27,27,27,27,27,27,27,27,27,27,-203,27,27,27,27,-204,27,27,27,27,27,27,27,]),'REF':([25,85,87,90,156,179,223,250,286,302,],[-17,156,-15,156,156,156,-16,156,156,156,]),'DOWN':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,189,190,199,207,208,209,215,227,232,244,254,276,277,278,293,304,308,315,318,327,328,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,-61,-127,-121,-190,-169,234,-180,-116,-85,-109,-96,-191,-62,-181,-82,-170,306,-174,-88,-65,306,-83,-89,-171,-55,]),'LOC':([25,151,152,153,154,155,157,158,162,163,164,166,167,168,169,219,287,298,299,300,312,321,322,],[-17,-32,-37,-34,-28,-40,-27,-30,-36,-35,-31,-46,-29,-33,-45,-44,313,-39,-38,-47,331,-54,-49,]),'INCREASE':([1,2,18,22,25,37,40,42,43,74,113,177,199,227,232,244,304,],[-179,-60,-57,-59,-17,-56,-178,115,-58,-56,-61,-190,-180,-191,-62,-181,-65,]),'CHAR':([25,85,87,90,156,179,221,223,236,250,275,286,301,302,],[-17,152,-15,152,152,152,152,-16,152,152,152,152,152,152,]),'SEMI':([1,2,6,12,13,15,16,18,19,22,25,29,30,36,40,43,46,47,49,50,51,52,53,54,55,56,57,58,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,80,82,83,84,86,89,91,94,95,98,99,103,106,107,113,118,120,127,134,151,152,153,154,155,157,158,161,162,163,164,166,167,168,169,170,174,177,186,188,191,192,193,195,199,200,203,205,207,208,209,215,216,219,222,224,225,227,228,229,232,233,237,241,244,245,246,249,254,278,280,281,284,290,293,298,299,300,304,305,310,315,318,321,322,325,326,330,333,334,],[-179,-133,81,-135,-134,-131,-132,-57,-138,-59,-17,-137,-136,-186,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-188,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,-189,-130,-185,149,-10,171,-19,181,-24,-161,-157,194,-90,-187,-61,201,204,-127,-121,-32,-37,-34,-28,-40,-27,-30,-12,-36,-35,-31,-46,-29,-33,-45,-20,-21,-190,-159,-162,-165,-166,-164,-177,-180,-139,-201,248,-116,-85,-109,-96,-11,-44,-13,-22,-14,-191,-26,-25,-62,-163,-158,-147,-181,-202,285,-205,-82,-174,-175,-160,-148,-206,-88,-39,-38,-47,-65,-176,-167,-83,-89,-54,-49,-172,-168,-212,-173,-213,]),'ASSIGN':([1,2,18,22,25,37,40,42,43,74,87,90,93,113,151,152,153,154,155,157,158,161,162,163,164,166,167,168,169,172,177,189,190,199,219,223,227,232,244,298,299,300,304,321,322,],[-179,-60,-57,-59,-17,-56,-178,111,-58,-56,-15,173,179,-61,-32,-37,-34,-28,-40,-27,-30,173,-36,-35,-31,-46,-29,-33,-45,173,-190,-169,235,-180,-44,-16,-191,-62,-181,-39,-38,-47,-65,-54,-49,]),'THEN':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,105,106,113,127,134,136,177,199,207,208,209,215,227,232,244,254,283,292,293,304,315,317,318,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,197,-90,-61,-127,-121,213,-190,-180,-116,-85,-109,-96,-191,-62,-181,-82,197,213,-88,-65,-83,213,-89,]),'DCL':([0,3,9,10,23,32,38,41,81,88,119,149,171,181,201,202,204,248,285,],[8,-6,-7,8,-2,-8,-4,-5,-128,-3,8,-9,-18,-23,-129,8,-200,-203,-204,]),'ICONST':([5,35,36,48,59,60,65,72,92,96,104,108,109,110,111,112,114,115,116,117,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,173,213,217,218,220,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[49,49,49,-123,-122,49,49,49,49,49,49,49,-146,-145,-140,-141,-144,-142,49,-143,49,-119,-117,-118,-113,-112,49,-111,-114,-110,49,-98,-102,-105,-103,-97,-99,-100,49,-107,-104,-106,-101,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'ARRAY':([25,85,87,90,156,179,223,250,286,302,],[-17,160,-15,160,160,160,-16,160,160,160,]),'NULL':([5,35,36,48,59,60,65,72,92,96,104,108,109,110,111,112,114,115,116,117,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[57,57,57,-123,-122,57,57,57,57,57,57,57,-146,-145,-140,-141,-144,-142,57,-143,57,-119,-117,-118,-113,-112,57,-111,-114,-110,57,-98,-102,-105,-103,-97,-99,-100,57,-107,-104,-106,-101,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'ABS':([0,3,5,9,10,23,26,32,35,36,38,41,45,48,59,60,61,65,72,81,88,92,96,100,102,104,108,109,110,111,112,114,115,116,117,119,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,149,171,173,181,185,187,194,197,201,202,204,213,217,218,221,226,230,231,235,238,239,240,243,248,253,256,258,282,285,295,297,301,303,307,309,324,],[11,-6,11,-7,11,-2,11,-8,11,11,-4,-5,11,-123,-122,11,11,11,11,-128,-3,11,11,11,-151,11,11,-146,-145,-140,-141,-144,-142,11,-143,11,11,-119,-117,-118,-113,-112,11,-111,-114,-110,11,-98,-102,-105,-103,-97,-99,-100,11,-107,-104,-106,-101,-9,-18,11,-23,11,-152,11,11,-129,11,-200,11,11,11,11,11,11,11,11,11,11,11,11,-203,11,11,11,11,-204,11,11,11,11,11,11,11,]),'NOT':([5,35,36,60,72,92,96,104,108,109,110,111,112,114,115,116,117,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[48,48,48,48,48,48,48,48,48,-146,-145,-140,-141,-144,-142,48,-143,48,-119,-117,-118,-113,-112,48,-111,-114,-110,48,-98,-102,-105,-103,-97,-99,-100,48,-107,-104,-106,-101,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'TO':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,276,277,278,293,304,306,308,315,318,327,328,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,-96,-191,-62,-181,-82,-170,307,-174,-88,-65,324,307,-83,-89,-171,-55,]),'$end':([3,9,10,23,32,38,39,41,81,88,149,171,181,201,204,],[-6,-7,-1,-2,-8,-4,0,-5,-128,-3,-9,-18,-23,-129,-200,]),'SYN':([0,3,9,10,23,32,38,41,81,88,119,149,171,181,201,202,204,248,285,],[14,-6,-7,14,-2,-8,-4,-5,-128,-3,14,-9,-18,-23,-129,14,-200,-203,-204,]),'MINUS':([1,5,18,22,25,35,36,40,43,46,47,49,50,51,52,53,54,55,56,57,60,63,64,66,67,68,70,71,72,73,74,75,77,78,79,92,96,104,108,109,110,111,112,113,114,115,116,117,122,123,124,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,173,177,199,207,208,209,213,215,217,218,221,226,227,230,231,232,235,240,244,253,254,256,258,270,295,297,301,303,304,307,309,315,324,],[-179,59,-57,-59,-17,59,59,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,59,128,-72,-79,-78,-81,-75,-125,59,-69,-56,-77,-70,-126,-68,59,59,59,59,-146,-145,-140,-141,-61,-144,-142,59,-143,59,-119,-117,-118,-127,-113,-112,59,-111,-114,-110,-121,59,-98,-102,-105,-103,-97,-99,-100,59,-107,-104,-106,-101,59,-190,-180,-116,-85,-109,59,128,59,59,59,59,-191,59,59,-62,59,59,-181,59,-82,59,59,-56,59,59,59,59,-65,59,59,-83,59,]),'RESULT':([0,3,9,10,23,26,32,38,41,45,81,88,100,102,119,149,171,181,185,187,194,197,201,202,204,238,239,243,248,282,285,],[5,-6,-7,5,-2,5,-8,-4,-5,5,-128,-3,5,-151,5,-9,-18,-23,5,-152,5,5,-129,5,-200,5,5,5,-203,5,-204,]),'LPAREN':([5,11,17,20,25,27,28,31,33,34,35,36,37,44,48,59,60,65,72,74,92,96,104,108,109,110,111,112,114,115,116,117,121,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,151,152,153,154,155,162,163,164,168,173,213,217,218,221,226,230,231,235,240,247,253,256,258,268,270,279,280,295,297,298,299,301,303,305,307,309,324,],[60,-192,92,-194,-17,-193,-199,-197,-196,-195,60,60,108,-198,-123,-122,60,60,60,108,60,60,60,60,-146,-145,-140,-141,-144,-142,60,-143,206,60,-119,-117,-118,-113,-112,60,-111,-114,-110,60,-98,-102,-105,-103,-97,-99,-100,60,-107,-104,-106,-101,-32,-37,-34,217,218,-36,-35,-31,-33,60,60,60,60,60,60,60,60,60,60,286,60,60,60,217,303,218,217,60,60,-39,-38,60,60,217,60,60,60,]),'COMMA':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,84,85,86,87,90,93,94,95,113,127,134,151,152,153,154,155,157,158,161,162,163,164,166,167,168,169,175,176,177,178,183,184,198,199,207,208,209,215,216,219,222,223,225,227,228,229,232,244,250,251,252,254,266,267,268,269,271,273,274,287,288,293,298,299,300,304,313,314,315,318,319,320,321,322,323,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,150,165,-10,-15,165,165,180,-24,-61,-127,-121,-32,-37,-34,-28,-40,-27,-30,-12,-36,-35,-31,-46,-29,-33,-45,-182,226,-190,-184,231,-63,226,-180,-116,-85,-109,-96,-11,-44,-13,-16,-14,-191,-26,-25,-62,-181,165,-207,289,-82,301,-50,-52,-53,-183,-43,-64,-210,-209,-88,-39,-38,-47,-65,-211,-208,-83,-89,-41,-51,-54,-49,-184,]),'OR':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,143,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,-96,-191,-62,-181,-82,-56,-65,-83,]),'ELSE':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,81,102,113,127,134,177,187,196,197,199,201,207,208,209,214,215,227,232,243,244,254,255,259,293,304,311,315,316,318,332,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,-128,-151,-61,-127,-121,-190,-152,239,-149,-180,-129,-116,-85,-109,258,-96,-191,-62,-150,-181,-82,-91,258,-88,-65,239,-83,-93,-89,-94,]),'ARROW':([1,2,5,18,22,25,35,36,37,40,42,43,46,48,55,59,60,65,72,74,92,96,104,108,109,110,111,112,113,114,115,116,117,122,123,124,125,127,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,173,177,199,213,217,218,221,226,227,230,231,232,235,240,244,253,256,258,270,295,297,301,303,304,307,309,324,],[-179,-60,61,-57,-59,-17,61,61,-56,-178,113,-58,-60,-123,113,-122,61,61,61,-56,61,61,61,61,-146,-145,-140,-141,-61,-144,-142,61,-143,61,-119,-117,-118,113,-113,-112,61,-111,-114,-110,61,-98,-102,-105,-103,-97,-99,-100,61,-107,-104,-106,-101,61,-190,-180,61,61,61,61,61,-191,61,61,-62,61,61,-181,61,61,61,-56,61,61,61,61,-65,61,61,61,]),'RBRACKET':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,151,152,153,162,163,164,168,177,183,184,199,207,208,209,211,212,215,227,232,244,254,264,265,266,267,268,269,272,273,274,291,293,298,299,304,315,318,319,320,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,-61,-127,-121,-32,-37,-34,-36,-35,-31,-33,-190,232,-63,-180,-116,-85,-109,254,-55,-96,-191,-62,-181,-82,-48,300,302,-50,-52,-53,304,-43,-64,315,-88,-39,-38,-65,-83,-89,-41,-51,]),'SCONST':([5,35,36,48,59,60,65,72,92,96,104,108,109,110,111,112,114,115,116,117,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[68,68,68,-123,-122,68,68,68,68,68,68,68,-146,-145,-140,-141,-144,-142,68,-143,68,-119,-117,-118,-113,-112,68,-111,-114,-110,68,-98,-102,-105,-103,-97,-99,-100,68,-107,-104,-106,-101,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'FI':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,81,102,113,127,134,177,187,196,197,199,201,207,208,209,215,227,232,239,242,243,244,254,257,282,293,294,296,304,311,315,318,329,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,-128,-151,-61,-127,-121,-190,-152,241,-149,-180,-129,-116,-85,-109,-96,-191,-62,-153,284,-150,-181,-82,293,-154,-88,-92,318,-65,-155,-83,-89,-156,]),'GREATER':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,140,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,-96,-191,-62,-181,-82,-56,-65,-83,]),'TYPE':([0,3,9,10,23,32,38,41,81,88,119,149,171,181,201,202,204,248,285,],[21,-6,-7,21,-2,-8,-4,-5,-128,-3,21,-9,-18,-23,-129,21,-200,-203,-204,]),'DIFF':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,138,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,-96,-191,-62,-181,-82,-56,-65,-83,]),'PLUS':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,63,64,66,67,68,70,71,73,74,75,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,129,-72,-79,-78,-81,-75,-125,-69,-56,-77,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,129,-191,-62,-181,-82,-56,-65,-83,]),'LESS':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,139,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,-96,-191,-62,-181,-82,-56,-65,-83,]),'CCONST':([5,35,36,48,59,60,65,72,92,96,104,108,109,110,111,112,114,115,116,117,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[66,66,66,-123,-122,66,66,66,66,66,66,66,-146,-145,-140,-141,-144,-142,66,-143,66,-119,-117,-118,-113,-112,66,-111,-114,-110,66,-98,-102,-105,-103,-97,-99,-100,66,-107,-104,-106,-101,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'COLON':([1,4,18,22,25,37,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,97,113,127,134,177,182,184,199,207,208,209,210,212,215,227,232,244,254,260,262,270,293,304,315,318,323,],[-179,45,-57,-59,-17,-130,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,185,-61,-127,-121,-190,230,-42,-180,-116,-85,-109,253,-42,-96,-191,-62,-181,-82,297,-42,-56,-88,-65,-83,-89,-42,]),'TIMES':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,64,66,67,68,70,71,73,74,75,77,78,79,113,127,134,177,199,207,208,209,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,124,-71,-67,-120,-124,-73,-80,-72,-79,-78,-81,-75,-125,-69,-56,-77,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,124,-191,-62,-181,-82,-56,-65,-83,]),'LBRACKET':([1,2,18,22,24,25,37,40,42,43,46,47,49,52,53,55,56,57,64,66,67,68,69,70,73,74,75,77,78,79,113,127,159,160,177,199,208,227,232,244,254,270,304,315,],[-179,-60,-57,-59,96,-17,-56,-178,-66,-58,-60,-74,-76,-71,-67,-66,-73,-80,-72,-79,-78,-81,135,-75,-69,-56,-77,-70,-84,-68,-61,-66,220,221,-190,-180,-85,-191,-62,-181,-82,-56,-65,-83,]),'END':([3,9,23,32,38,41,81,88,119,149,171,181,201,202,204,248,285,],[-6,-7,-2,-8,-4,-5,-128,-3,203,-9,-18,-23,-129,245,-200,-203,-204,]),'AND':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,142,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,-96,-191,-62,-181,-82,-56,-65,-83,]),'ID':([0,1,3,5,7,8,9,10,14,18,21,22,23,25,26,32,35,36,38,40,41,43,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,81,85,87,88,89,90,91,92,96,100,101,102,104,108,109,110,111,112,113,114,115,116,117,119,122,123,124,125,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,156,165,170,171,173,174,177,179,180,181,185,187,194,197,199,201,202,204,206,207,208,209,213,215,217,218,221,223,224,225,226,227,230,231,232,235,236,238,239,240,243,244,248,250,253,254,256,258,275,282,285,286,289,293,295,297,301,302,303,304,307,309,315,318,324,],[25,-179,-6,25,25,25,-7,25,25,-57,25,-59,-2,-17,25,-8,25,25,-4,-178,-5,-58,25,-60,-74,-123,-76,-115,-108,-71,-67,-120,-124,-73,-80,-122,25,25,-87,-95,-72,25,-79,-78,-81,-75,-125,25,-69,-56,-77,-86,-70,-126,-68,-128,25,-15,-3,25,25,-19,25,25,25,25,-151,25,25,-146,-145,-140,-141,-61,-144,-142,25,-143,25,25,-119,-117,-118,-127,-113,-112,25,-111,-114,-110,-121,25,-98,-102,-105,-103,-97,-99,-100,25,-107,-104,-106,-101,-9,25,25,25,-20,-18,25,-21,-190,25,25,-23,25,-152,25,25,-180,-129,25,-200,25,-116,-85,-109,25,-96,25,25,25,-16,-22,-14,25,-191,25,25,-62,25,25,25,25,25,25,-181,-203,25,25,-82,25,25,25,25,-204,25,25,-88,25,25,25,25,25,-65,25,25,-83,-89,25,]),'FOR':([26,],[101,]),'DO':([0,3,9,10,23,26,32,38,41,45,81,88,100,102,119,149,171,181,185,187,194,197,201,202,204,238,239,243,248,282,285,],[26,-6,-7,26,-2,26,-8,-4,-5,26,-128,-3,26,-151,26,-9,-18,-23,26,-152,26,26,-129,26,-200,26,26,26,-203,26,-204,]),'OD':([26,81,100,102,187,194,201,238,],[99,-128,186,-151,-152,237,-129,281,]),'DECREASE':([1,2,18,22,25,37,40,42,43,74,113,177,199,227,232,244,304,],[-179,-60,-57,-59,-17,-56,-178,117,-58,-56,-61,-190,-180,-191,-62,-181,-65,]),'CHARS':([25,85,87,90,156,179,223,250,286,302,],[-17,159,-15,159,159,159,-16,159,159,159,]),'PRINT':([0,3,5,9,10,23,26,32,35,36,38,41,45,48,59,60,61,65,72,81,88,92,96,100,102,104,108,109,110,111,112,114,115,116,117,119,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,149,171,173,181,185,187,194,197,201,202,204,213,217,218,221,226,230,231,235,238,239,240,243,248,253,256,258,282,285,295,297,301,303,307,309,324,],[28,-6,28,-7,28,-2,28,-8,28,28,-4,-5,28,-123,-122,28,28,28,28,-128,-3,28,28,28,-151,28,28,-146,-145,-140,-141,-144,-142,28,-143,28,28,-119,-117,-118,-113,-112,28,-111,-114,-110,28,-98,-102,-105,-103,-97,-99,-100,28,-107,-104,-106,-101,-9,-18,28,-23,28,-152,28,28,-129,28,-200,28,28,28,28,28,28,28,28,28,28,28,28,-203,28,28,28,28,-204,28,28,28,28,28,28,28,]),'MOD':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,64,66,67,68,70,71,73,74,75,77,78,79,113,127,134,177,199,207,208,209,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,123,-71,-67,-120,-124,-73,-80,-72,-79,-78,-81,-75,-125,-69,-56,-77,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,123,-191,-62,-181,-82,-56,-65,-83,]),'LENGTH':([0,3,5,9,10,23,26,32,35,36,38,41,45,48,59,60,61,65,72,81,88,92,96,100,102,104,108,109,110,111,112,114,115,116,117,119,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,149,171,173,181,185,187,194,197,201,202,204,213,217,218,221,226,230,231,235,238,239,240,243,248,253,256,258,282,285,295,297,301,303,307,309,324,],[31,-6,31,-7,31,-2,31,-8,31,31,-4,-5,31,-123,-122,31,31,31,31,-128,-3,31,31,31,-151,31,31,-146,-145,-140,-141,-144,-142,31,-143,31,31,-119,-117,-118,-113,-112,31,-111,-114,-110,31,-98,-102,-105,-103,-97,-99,-100,31,-107,-104,-106,-101,-9,-18,31,-23,31,-152,31,31,-129,31,-200,31,31,31,31,31,31,31,31,31,31,31,31,-203,31,31,31,31,-204,31,31,31,31,31,31,31,]),'RETURNS':([205,249,290,],[247,-205,-206,]),'EQUAL':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,148,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,-96,-191,-62,-181,-82,-56,-65,-83,]),'LOWER':([0,3,5,9,10,23,26,32,35,36,38,41,45,48,59,60,61,65,72,81,88,92,96,100,102,104,108,109,110,111,112,114,115,116,117,119,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,149,171,173,181,185,187,194,197,201,202,204,213,217,218,221,226,230,231,235,238,239,240,243,248,253,256,258,282,285,295,297,301,303,307,309,324,],[33,-6,33,-7,33,-2,33,-8,33,33,-4,-5,33,-123,-122,33,33,33,33,-128,-3,33,33,33,-151,33,33,-146,-145,-140,-141,-144,-142,33,-143,33,33,-119,-117,-118,-113,-112,33,-111,-114,-110,33,-98,-102,-105,-103,-97,-99,-100,33,-107,-104,-106,-101,-9,-18,33,-23,33,-152,33,33,-129,33,-200,33,33,33,33,33,33,33,33,33,33,33,33,-203,33,33,33,33,-204,33,33,33,33,33,33,33,]),'IF':([0,3,5,9,10,23,26,32,35,36,38,41,45,60,72,81,88,92,96,100,102,104,108,109,110,111,112,114,115,116,117,119,135,149,171,173,181,185,187,194,197,201,202,204,213,217,218,221,226,230,231,235,238,239,240,243,248,253,256,258,282,285,295,297,301,303,307,309,324,],[35,-6,72,-7,35,-2,35,-8,72,72,-4,-5,35,72,72,-128,-3,72,72,35,-151,72,72,-146,-145,-140,-141,-144,-142,72,-143,35,72,-9,-18,72,-23,35,-152,35,35,-129,35,-200,72,72,72,72,72,72,72,72,35,35,72,35,-203,72,72,72,35,-204,72,72,72,72,72,72,72,]),'RPAREN':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,92,108,113,126,127,134,151,152,153,154,155,157,158,162,163,164,166,167,168,169,175,176,177,178,198,199,206,207,208,209,215,219,227,232,244,251,252,254,261,263,271,273,287,288,293,298,299,300,303,304,312,313,314,315,318,319,321,322,323,331,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,177,199,-61,208,-127,-121,-32,-37,-34,-28,-40,-27,-30,-36,-35,-31,-46,-29,-33,-45,-182,227,-190,-184,244,-180,249,-116,-85,-109,-96,-44,-191,-62,-181,-207,290,-82,298,299,-183,-43,-210,-209,-88,-39,-38,-47,199,-65,330,-211,-208,-83,-89,-41,-54,-49,-184,334,]),'LESSEQ':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,147,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,-96,-191,-62,-181,-82,-56,-65,-83,]),'GREATEREQ':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,146,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,-96,-191,-62,-181,-82,-56,-65,-83,]),'UPPER':([0,3,5,9,10,23,26,32,35,36,38,41,45,48,59,60,61,65,72,81,88,92,96,100,102,104,108,109,110,111,112,114,115,116,117,119,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,149,171,173,181,185,187,194,197,201,202,204,213,217,218,221,226,230,231,235,238,239,240,243,248,253,256,258,282,285,295,297,301,303,307,309,324,],[34,-6,34,-7,34,-2,34,-8,34,34,-4,-5,34,-123,-122,34,34,34,34,-128,-3,34,34,34,-151,34,34,-146,-145,-140,-141,-144,-142,34,-143,34,34,-119,-117,-118,-113,-112,34,-111,-114,-110,34,-98,-102,-105,-103,-97,-99,-100,34,-107,-104,-106,-101,-9,-18,34,-23,34,-152,34,34,-129,34,-200,34,34,34,34,34,34,34,34,34,34,34,34,-203,34,34,34,34,-204,34,34,34,34,34,34,34,]),'MULCREASE':([1,2,18,22,25,37,40,42,43,74,113,177,199,227,232,244,304,],[-179,-60,-57,-59,-17,-56,-178,114,-58,-56,-61,-190,-180,-191,-62,-181,-65,]),'BOOL':([25,85,87,90,156,179,221,223,236,250,275,286,301,302,],[-17,162,-15,162,162,162,162,-16,162,162,162,162,162,162,]),'BY':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,276,277,278,293,304,315,318,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,-96,-191,-62,-181,-82,-170,309,-174,-88,-65,-83,-89,]),'RETURN':([0,3,9,10,23,26,32,38,41,45,81,88,100,102,119,149,171,181,185,187,194,197,201,202,204,238,239,243,248,282,285,],[36,-6,-7,36,-2,36,-8,-4,-5,36,-128,-3,36,-151,36,-9,-18,-23,36,-152,36,36,-129,36,-200,36,36,36,-203,36,-204,]),'STRCAT':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,63,64,66,67,68,70,71,73,74,75,77,78,79,113,127,134,177,199,207,208,209,215,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,132,-72,-79,-78,-81,-75,-125,-69,-56,-77,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,-109,132,-191,-62,-181,-82,-56,-65,-83,]),'WHILE':([1,18,22,25,26,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,151,152,153,162,163,164,168,177,188,191,192,193,199,207,208,209,215,227,232,244,254,278,280,293,298,299,304,305,310,315,318,325,326,333,],[-179,-57,-59,-17,104,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,-61,-127,-121,-32,-37,-34,-36,-35,-31,-33,-190,104,-165,-166,-164,-180,-116,-85,-109,-96,-191,-62,-181,-82,-174,-175,-88,-39,-38,-65,-176,-167,-83,-89,-172,-168,-173,]),'DIVIDE':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,64,66,67,68,70,71,73,74,75,77,78,79,113,127,134,177,199,207,208,209,227,232,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,125,-71,-67,-120,-124,-73,-80,-72,-79,-78,-81,-75,-125,-69,-56,-77,-70,-126,-68,-61,-127,-121,-190,-180,-116,-85,125,-191,-62,-181,-82,-56,-65,-83,]),'INT':([25,85,87,90,156,179,221,223,236,250,275,286,301,302,],[-17,163,-15,163,163,163,163,-16,163,163,163,163,163,163,]),'MODCREASE':([1,2,18,22,25,37,40,42,43,74,113,177,199,227,232,244,304,],[-179,-60,-57,-59,-17,-56,-178,109,-58,-56,-61,-190,-180,-191,-62,-181,-65,]),'FALSE':([5,35,36,48,59,60,65,72,92,96,104,108,109,110,111,112,114,115,116,117,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[75,75,75,-123,-122,75,75,75,75,75,75,75,-146,-145,-140,-141,-144,-142,75,-143,75,-119,-117,-118,-113,-112,75,-111,-114,-110,75,-98,-102,-105,-103,-97,-99,-100,75,-107,-104,-106,-101,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'DIVCREASE':([1,2,18,22,25,37,40,42,43,74,113,177,199,227,232,244,304,],[-179,-60,-57,-59,-17,-56,-178,110,-58,-56,-61,-190,-180,-191,-62,-181,-65,]),'NUM':([0,3,5,9,10,23,26,32,35,36,38,41,45,48,59,60,61,65,72,81,88,92,96,100,102,104,108,109,110,111,112,114,115,116,117,119,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,149,171,173,181,185,187,194,197,201,202,204,213,217,218,221,226,230,231,235,238,239,240,243,248,253,256,258,282,285,295,297,301,303,307,309,324,],[20,-6,20,-7,20,-2,20,-8,20,20,-4,-5,20,-123,-122,20,20,20,20,-128,-3,20,20,20,-151,20,20,-146,-145,-140,-141,-144,-142,20,-143,20,20,-119,-117,-118,-113,-112,20,-111,-114,-110,20,-98,-102,-105,-103,-97,-99,-100,20,-107,-104,-106,-101,-9,-18,20,-23,20,-152,20,20,-129,20,-200,20,20,20,20,20,20,20,20,20,20,20,20,-203,20,20,20,20,-204,20,20,20,20,20,20,20,]),'IN':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,63,64,66,67,68,70,71,73,74,75,76,77,78,79,113,127,134,177,189,190,199,207,208,209,215,227,232,234,244,254,270,304,315,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,145,-70,-126,-68,-61,-127,-121,-190,-169,236,-180,-116,-85,-109,-96,-191,-62,275,-181,-82,-56,-65,-83,]),'ELSIF':([1,18,22,25,40,43,46,47,49,50,51,52,53,54,55,56,57,62,63,64,66,67,68,70,71,73,74,75,76,77,78,79,81,102,113,127,134,177,187,196,197,199,201,207,208,209,214,215,227,232,243,244,254,255,259,293,304,311,315,316,318,332,],[-179,-57,-59,-17,-178,-58,-60,-74,-76,-115,-108,-71,-67,-120,-124,-73,-80,-87,-95,-72,-79,-78,-81,-75,-125,-69,-56,-77,-86,-70,-126,-68,-128,-151,-61,-127,-121,-190,-152,240,-149,-180,-129,-116,-85,-109,256,-96,-191,-62,-150,-181,-82,-91,295,-88,-65,240,-83,-93,-89,-94,]),'TRUE':([5,35,36,48,59,60,65,72,92,96,104,108,109,110,111,112,114,115,116,117,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[67,67,67,-123,-122,67,67,67,67,67,67,67,-146,-145,-140,-141,-144,-142,67,-143,67,-119,-117,-118,-113,-112,67,-111,-114,-110,67,-98,-102,-105,-103,-97,-99,-100,67,-107,-104,-106,-101,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'READ':([0,3,5,9,10,23,26,32,35,36,38,41,45,48,59,60,61,65,72,81,88,92,96,100,102,104,108,109,110,111,112,114,115,116,117,119,122,123,124,125,128,129,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,149,171,173,181,185,187,194,197,201,202,204,213,217,218,221,226,230,231,235,238,239,240,243,248,253,256,258,282,285,295,297,301,303,307,309,324,],[44,-6,44,-7,44,-2,44,-8,44,44,-4,-5,44,-123,-122,44,44,44,44,-128,-3,44,44,44,-151,44,44,-146,-145,-140,-141,-144,-142,44,-143,44,44,-119,-117,-118,-113,-112,44,-111,-114,-110,44,-98,-102,-105,-103,-97,-99,-100,44,-107,-104,-106,-101,-9,-18,44,-23,44,-152,44,44,-129,44,-200,44,44,44,44,44,44,44,44,44,44,44,44,-203,44,44,44,44,-204,44,44,44,44,44,44,44,]),'PROC':([45,],[121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'builtin_call':([0,5,10,26,35,36,45,60,61,65,72,92,96,100,104,108,116,119,122,130,135,144,173,185,194,197,202,213,217,218,221,226,230,231,235,238,239,240,243,253,256,258,282,295,297,301,303,307,309,324,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'array_location':([0,5,10,26,35,36,45,60,61,65,72,92,96,100,104,108,116,119,122,130,135,144,173,185,194,197,202,213,217,218,221,226,230,231,235,238,239,240,243,253,256,258,282,295,297,301,303,307,309,324,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'empty_literal':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'synonym_definition':([14,89,],[91,170,]),'label_id':([0,7,10,26,100,119,194,197,202,238,239,243,282,],[4,83,4,97,97,4,97,97,4,97,97,97,97,]),'mode_definition':([21,180,],[95,229,]),'bracketed_action':([0,10,26,45,100,119,185,194,197,202,238,239,243,282,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'operand0':([5,35,36,60,72,92,96,104,108,116,135,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'relational_operator':([76,],[141,]),'operand3':([5,35,36,60,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[50,50,50,50,50,50,50,50,50,50,207,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'else_clause':([196,311,],[242,329,]),'character_string_literal':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'mode':([85,90,156,179,250,286,302,],[161,172,219,228,287,312,321,]),'action':([0,10,26,45,100,119,185,194,197,202,238,239,243,282,],[6,6,6,118,6,6,118,6,6,6,6,6,6,6,]),'operand2':([5,35,36,60,72,92,96,104,108,116,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[51,51,51,51,51,51,51,51,51,51,209,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'else_expression':([214,259,],[257,296,]),'procedure_statement':([0,10,119,202,],[9,9,9,9,]),'initialization':([90,161,172,],[174,222,224,]),'literal':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'operand4':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[54,54,54,54,134,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'index_mode_list':([221,],[266,]),'character_literal':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'for_control':([101,],[188,]),'if_action':([0,10,26,45,100,119,185,194,197,202,238,239,243,282,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'closed_dyadic_operator':([42,],[112,]),'assigning_operator':([42,],[116,]),'assignment_action':([0,10,26,45,100,119,185,194,197,202,238,239,243,282,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'boolean_expression':([35,72,104,240,256,295,],[105,136,195,283,292,317,]),'procedure_definition':([45,],[120,]),'parameter_list':([92,108,303,],[176,198,198,]),'dereferenced_reference':([0,5,10,26,35,36,45,60,61,65,72,92,96,100,104,108,116,119,122,130,135,144,173,185,194,197,202,213,217,218,221,226,230,231,235,238,239,240,243,253,256,258,282,295,297,301,303,307,309,324,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'iteration':([101,],[193,]),'operand1':([5,35,36,60,72,92,96,104,108,116,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[63,63,63,63,63,63,63,63,63,63,63,215,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'monadic_operator':([5,35,36,60,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'array_slice':([0,5,10,26,35,36,45,60,61,65,72,92,96,100,104,108,116,119,122,130,135,144,173,185,194,197,202,213,217,218,221,226,230,231,235,238,239,240,243,253,256,258,282,295,297,301,303,307,309,324,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'statement_list':([0,119,],[10,202,]),'do_action':([0,10,26,45,100,119,185,194,197,202,238,239,243,282,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'discrete_range_mode':([85,90,156,179,221,236,250,275,286,301,302,],[153,153,153,153,153,153,153,153,153,153,153,]),'statement':([0,10,119,202,],[23,88,23,88,]),'mode_name':([85,90,156,179,250,286,302,],[157,157,157,157,157,157,157,]),'range_enumeration':([101,],[192,]),'literal_range':([217,218,221,301,303,],[261,263,269,269,263,]),'formal_procedure_head':([45,],[119,]),'action_statement':([0,10,26,100,119,194,197,202,238,239,243,282,],[32,32,102,187,32,102,102,32,187,102,187,187,]),'referenced_location':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'synonym_list':([14,],[89,]),'identifier_list':([8,14,21,89,150,180,206,289,],[85,90,93,90,85,93,250,250,]),'start_value':([235,],[277,]),'integer_expression':([135,309,],[211,327,]),'identifier':([0,5,7,8,10,14,21,26,35,36,45,60,61,65,72,85,89,90,92,96,100,101,104,108,116,119,122,130,135,144,150,156,165,173,179,180,185,194,197,202,206,213,217,218,221,226,230,231,235,236,238,239,240,243,250,253,256,258,275,282,286,289,295,297,301,302,303,307,309,324,],[37,74,82,87,37,87,87,37,74,74,74,74,74,74,74,155,87,155,74,74,37,189,74,74,74,37,74,74,74,74,87,155,223,74,155,87,74,37,37,37,87,74,74,74,270,74,74,74,74,279,37,37,74,37,155,74,74,74,279,37,155,87,74,74,270,155,74,74,74,74,]),'character_mode':([85,90,156,179,221,236,250,275,286,301,302,],[168,168,168,168,168,168,168,168,168,168,168,]),'synonym_statement':([0,10,119,202,],[41,41,41,41,]),'operator1':([76,],[144,]),'procedure_call':([0,5,10,26,35,36,45,60,61,65,72,92,96,100,104,108,116,119,122,130,135,144,173,185,194,197,202,213,217,218,221,226,230,231,235,238,239,240,243,253,256,258,282,295,297,301,303,307,309,324,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'parenthesis_gambiarra':([121,],[205,]),'parenthesized_expression':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'array_element':([0,5,10,26,35,36,45,60,61,65,72,92,96,100,104,108,116,119,122,130,135,144,173,185,194,197,202,213,217,218,221,226,230,231,235,238,239,240,243,253,256,258,282,295,297,301,303,307,309,324,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'then_expression':([136,292,317,],[214,316,332,]),'elsif_expression':([214,],[259,]),'string_mode':([85,90,156,179,250,286,302,],[169,169,169,169,169,169,169,]),'membership_operator':([76,],[137,]),'call_action':([0,5,10,26,35,36,45,60,61,65,72,92,96,100,104,108,116,119,122,130,135,144,173,185,194,197,202,213,217,218,221,226,230,231,235,238,239,240,243,253,256,258,282,295,297,301,303,307,309,324,],[2,46,2,2,46,46,2,46,46,46,46,46,46,2,46,46,46,2,46,46,46,46,46,2,2,2,2,46,46,46,46,46,46,46,46,2,2,46,2,46,46,46,2,46,46,46,46,46,46,46,]),'newmode_statement':([0,10,119,202,],[3,3,3,3,]),'string_concatenation_operator':([63,215,],[131,131,]),'discrete_mode':([85,90,156,179,221,236,250,275,286,301,302,],[154,154,154,154,268,280,154,305,154,268,154,]),'lower_bound':([96,135,217,218,221,301,303,],[182,210,260,260,260,260,260,]),'parameter':([92,108,226,303,],[175,175,271,175,]),'composite_mode':([85,90,156,179,250,286,302,],[158,158,158,158,158,158,158,]),'expression':([5,35,36,60,72,92,96,104,108,116,135,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[80,106,80,126,106,178,184,106,178,200,212,225,255,262,262,262,178,273,274,278,106,273,106,294,106,273,262,323,278,328,278,]),'integer_literal':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,220,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,264,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'program':([0,],[39,]),'formal_parameter':([206,289,],[251,314,]),'then_clause':([105,283,],[196,311,]),'return_action':([0,10,26,45,100,119,185,194,197,202,238,239,243,282,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'exit_action':([0,10,26,45,100,119,185,194,197,202,238,239,243,282,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'result':([5,36,],[58,107,]),'declaration':([8,150,],[86,216,]),'integer_mode':([85,90,156,179,221,236,250,275,286,301,302,],[164,164,164,164,164,164,164,164,164,164,164,]),'while_control':([26,188,],[98,233,]),'loop_counter':([101,],[190,]),'array_mode':([85,90,156,179,250,286,302,],[166,166,166,166,166,166,166,]),'parameter_spec':([250,],[288,]),'conditional_expression':([5,35,36,60,72,92,96,104,108,116,135,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'index_mode':([221,301,],[267,320,]),'boolean_literal':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'arithmetic_multiplicative_operator':([51,209,],[122,122,]),'step_enumeration':([101,],[191,]),'result_spec':([205,],[246,]),'string_length':([220,],[265,]),'value_array_slice':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'action_statement_list':([26,194,197,239,],[100,238,243,282,]),'operator2':([63,215,],[130,130,]),'newmode_list':([21,],[94,]),'boolean_mode':([85,90,156,179,221,236,250,275,286,301,302,],[151,151,151,151,151,151,151,151,151,151,151,]),'array_primitive_value':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'result_action':([0,10,26,45,100,119,185,194,197,202,238,239,243,282,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'element_mode':([302,],[322,]),'arithmetic_additive_operator':([63,215,],[133,133,]),'discrete_expression':([235,307,324,],[276,325,333,]),'declaration_list':([8,],[84,]),'upper_bound':([230,253,297,],[272,291,319,]),'control_part':([26,],[103,]),'primitive_value':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'formal_parameter_list':([206,],[252,]),'end_value':([277,308,],[310,326,]),'declaration_statement':([0,10,119,202,],[38,38,38,38,]),'step_value':([277,],[308,]),'builtin_name':([0,5,10,26,35,36,45,60,61,65,72,92,96,100,104,108,116,119,122,130,135,144,173,185,194,197,202,213,217,218,221,226,230,231,235,238,239,240,243,253,256,258,282,295,297,301,303,307,309,324,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'reference_mode':([85,90,156,179,250,286,302,],[167,167,167,167,167,167,167,]),'location':([0,5,10,26,35,36,45,60,61,65,72,92,96,100,104,108,116,119,122,130,135,144,173,185,194,197,202,213,217,218,221,226,230,231,235,238,239,240,243,253,256,258,282,295,297,301,303,307,309,324,],[42,55,42,42,55,55,42,55,127,55,55,55,55,42,55,55,55,42,55,55,55,55,55,42,42,42,42,55,55,55,55,55,55,55,55,42,42,55,42,55,55,55,42,55,55,55,55,55,55,55,]),'expression_list':([96,],[183,]),'value_array_element':([5,35,36,60,65,72,92,96,104,108,116,122,130,135,144,173,213,217,218,221,226,230,231,235,240,253,256,258,295,297,301,303,307,309,324,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',23),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',29),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',30),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',41),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',46),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',51),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',52),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',59),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',60),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',67),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',74),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',75),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',82),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',88),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',96),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',97),
  ('synonym_definition -> identifier_list initialization','synonym_definition',2,'p_synonym_definition','parser.py',104),
  ('synonym_definition -> identifier_list mode initialization','synonym_definition',3,'p_synonym_definition','parser.py',105),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',117),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',123),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',124),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',131),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',137),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',138),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',139),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',140),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',145),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',146),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',153),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',158),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',163),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',168),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',169),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',176),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',186),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',191),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',197),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',203),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',209),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',210),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','parser.py',215),
  ('string_length -> integer_literal','string_length',1,'p_string_length','parser.py',221),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',227),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',233),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',234),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',241),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',242),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',247),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',253),
  ('location -> identifier','location',1,'p_location','parser.py',259),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',260),
  ('location -> array_element','location',1,'p_location','parser.py',261),
  ('location -> array_slice','location',1,'p_location','parser.py',262),
  ('location -> call_action','location',1,'p_location','parser.py',263),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',273),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',313),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',319),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',320),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',327),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',333),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',339),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',340),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',342),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',348),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',349),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',352),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',357),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',363),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',364),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',371),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',377),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',384),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',390),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',396),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',402),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',408),
  ('expression -> operand0','expression',1,'p_expression','parser.py',415),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',416),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',421),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',422),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',431),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',437),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',443),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',449),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',450),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',459),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',460),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',467),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',468),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',473),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',474),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',475),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',480),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',485),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',490),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',491),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',499),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',500),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',505),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',506),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',512),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',516),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',517),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',524),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',525),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',526),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',531),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',532),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',540),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',541),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',546),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',547),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',548),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',553),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',558),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',559),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',568),
  ('action -> bracketed_action','action',1,'p_action','parser.py',574),
  ('action -> assignment_action','action',1,'p_action','parser.py',575),
  ('action -> call_action','action',1,'p_action','parser.py',576),
  ('action -> exit_action','action',1,'p_action','parser.py',577),
  ('action -> return_action','action',1,'p_action','parser.py',578),
  ('action -> result_action','action',1,'p_action','parser.py',579),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',584),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',585),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',590),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',609),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',610),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',615),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',616),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',617),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',624),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',625),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',634),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',635),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',644),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',645),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',652),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',653),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',654),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',655),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',670),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',671),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',672),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',673),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',687),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',688),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',689),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',698),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',703),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',704),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',709),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',710),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',717),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',722),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',727),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',732),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',733),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',741),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',746),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',747),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',754),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',758),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',759),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',764),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',765),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',772),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',773),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',780),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','parser.py',788),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',792),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',793),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',800),
  ('result -> expression','result',1,'p_result','parser.py',804),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',809),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',810),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',817),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',818),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',819),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',820),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',821),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',822),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',823),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',824),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',828),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',832),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',833),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',841),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',849),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',850),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',857),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',858),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',865),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',869),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',870),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',882),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',883),
]
