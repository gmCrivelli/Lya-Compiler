
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST ASC FOR ELSIF NUM TO LENGTH OD DOWN PROC EXIT IN UPPER BOOL ARRAY LOWER CHAR TRUE END ABS REF FALSE PRINT BY INT CHARS RETURN RETURNS FI READ NULL DCL WHILE THEN ELSE DO TYPE IF RESULT SYN LOCprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list ASSIGN constant_expression\n                              | identifier_list mode ASSIGN constant_expressionconstant_expression : expressionnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET ICONST RBRACKETarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT exit_label_idexit_label_id :  identifierreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'COMMA':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,89,104,105,106,107,112,115,116,117,129,143,167,168,170,171,172,173,178,179,181,183,184,185,186,188,189,190,191,192,193,194,195,196,199,202,203,204,205,226,227,228,230,233,236,242,243,245,251,260,261,263,271,272,274,278,279,280,281,286,290,296,297,306,308,312,313,315,317,320,321,327,328,329,330,331,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-25,163,165,-15,163,197,-10,163,-127,-121,229,-63,-191,-184,232,-182,-37,-29,-47,-33,-36,-28,-35,-30,-41,-34,-31,-38,-46,-32,-180,232,-12,-116,-109,-96,-85,-16,-27,-26,-62,-192,-45,-181,-11,-13,-82,-208,163,298,-64,-44,-183,-52,309,-50,-53,-14,-88,-211,-210,-65,-40,-48,-39,-89,-83,-212,-209,-42,-51,-54,-49,-184,]),'ID':([0,1,2,3,4,6,7,8,10,16,18,22,23,25,26,32,33,34,37,38,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,80,83,86,87,88,89,90,91,92,93,94,95,98,99,101,103,107,108,110,111,112,113,114,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,144,145,147,152,153,161,163,164,165,166,170,174,175,176,177,195,197,198,201,202,203,204,205,209,212,213,215,216,217,219,220,222,223,226,229,230,231,232,233,234,235,237,238,239,241,242,244,247,249,251,252,255,259,261,270,283,287,290,294,295,298,302,304,306,307,309,310,311,315,317,324,],[1,-17,-6,1,-7,-178,-2,1,1,-179,1,1,-4,1,-58,1,-59,-5,1,-57,-8,1,-124,-120,-70,-115,1,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-123,1,-86,-87,-71,1,-60,-67,-74,-126,-81,-75,1,-122,-68,-56,-125,-3,-128,1,-145,-140,-61,-144,1,-143,-141,-142,-146,1,1,1,-151,-15,1,1,1,1,-19,1,1,-118,-117,1,-119,-112,-114,-110,1,-111,-113,-127,-106,-107,-105,1,-98,-99,-100,-103,-97,-102,-101,-104,-121,1,1,1,1,1,-152,1,1,1,-24,-191,-18,-20,1,1,-180,1,-9,1,-116,-109,-96,-85,1,1,1,1,-201,-129,1,1,1,1,-16,1,-62,1,1,-192,-23,-21,1,1,1,1,-181,1,1,1,-82,1,1,-204,1,1,-22,1,-88,1,-205,1,1,1,-65,1,1,1,1,-89,-83,1,]),'RESULT':([0,2,4,7,8,22,23,34,43,80,83,86,99,103,145,147,152,153,161,166,174,198,209,213,215,216,217,220,255,259,295,],[3,-6,-7,-2,3,3,-4,-5,-8,-3,-128,3,3,-151,3,3,3,3,-152,-24,-18,-9,3,3,3,-201,-129,3,3,-204,-205,]),'DOWN':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,89,129,143,154,155,170,195,202,203,204,205,230,233,242,251,265,266,267,290,300,306,315,317,325,326,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,224,-169,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,-174,-170,303,-88,303,-65,-89,-83,-55,-171,]),'REF':([1,107,112,117,164,177,226,261,294,310,],[-17,-15,177,177,177,177,-16,177,177,177,]),'PRINT':([0,2,3,4,7,8,10,22,23,32,34,43,49,60,61,66,74,75,80,83,86,87,88,90,91,92,93,94,95,99,101,103,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,145,147,152,153,161,166,174,176,198,201,209,212,213,215,216,217,220,222,229,231,232,237,238,239,241,244,247,249,252,255,259,287,295,302,304,307,309,311,324,],[19,-6,19,-7,-2,19,19,19,-4,19,-5,-8,19,-123,19,19,19,-122,-3,-128,19,-145,-140,-144,19,-143,-141,-142,-146,19,19,-151,19,19,19,-118,-117,19,-119,-112,-114,-110,19,-111,-113,-106,-107,-105,19,-98,-99,-100,-103,-97,-102,-101,-104,19,19,19,19,19,-152,-24,-18,19,-9,19,19,19,19,19,-201,-129,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-204,19,-205,19,19,19,19,19,19,]),'DECREASE':([1,6,16,21,26,27,33,38,39,77,89,170,195,230,233,242,306,],[-17,-178,-179,92,-58,-60,-59,-57,-56,-56,-61,-191,-180,-62,-192,-181,-65,]),'LESSEQ':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,130,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,-56,-65,-83,]),'AND':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,135,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,-56,-65,-83,]),'LESS':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,132,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,-56,-65,-83,]),'SEMI':([1,5,6,11,12,13,14,16,24,26,27,28,32,33,38,40,45,46,47,48,50,51,52,53,54,55,56,57,58,59,62,63,64,65,67,68,69,70,71,72,73,76,77,78,82,84,85,89,97,100,102,104,106,109,111,113,115,116,129,143,148,149,151,156,157,158,159,160,162,170,175,178,179,181,183,184,185,186,188,189,190,191,192,193,194,195,199,202,203,204,205,211,214,218,221,225,227,228,230,233,234,235,236,242,243,245,251,253,256,258,262,264,265,268,283,286,290,299,301,305,306,308,312,313,315,317,322,323,329,330,333,335,336,],[-17,-135,-178,-136,-131,-137,83,-179,-134,-58,-133,-138,-187,-59,-57,-132,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-190,-86,-87,-71,-60,-67,-74,-126,-189,-81,-75,-68,-56,-125,-90,-185,-186,-61,153,-161,-157,-25,166,-188,174,-19,198,-10,-127,-121,216,217,-139,-165,-162,-164,-166,-159,-177,-191,-20,-37,-29,-47,-33,-36,-28,-35,-30,-41,-34,-31,-38,-46,-32,-180,-12,-116,-109,-96,-85,-147,-202,259,-158,-163,-27,-26,-62,-192,-23,-21,-45,-181,-11,-13,-82,-148,-203,295,-206,-160,-174,-175,-22,-14,-88,-207,-167,-176,-65,-40,-48,-39,-89,-83,-168,-172,-54,-49,-213,-173,-214,]),'RPAREN':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,89,110,114,129,142,143,170,171,172,173,178,179,181,183,184,185,186,188,189,190,191,192,193,194,195,196,202,203,204,205,219,230,233,236,242,251,260,263,272,274,277,285,290,296,297,306,308,311,312,313,315,317,319,320,321,327,329,330,331,334,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,170,195,-127,205,-121,-191,-184,233,-182,-37,-29,-47,-33,-36,-28,-35,-30,-41,-34,-31,-38,-46,-32,-180,242,-116,-109,-96,-85,262,-62,-192,-45,-181,-82,-208,299,-44,-183,308,313,-88,-211,-210,-65,-40,195,-48,-39,-89,-83,333,-212,-209,-42,-54,-49,-184,336,]),'UPPER':([0,2,3,4,7,8,10,22,23,32,34,43,49,60,61,66,74,75,80,83,86,87,88,90,91,92,93,94,95,99,101,103,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,145,147,152,153,161,166,174,176,198,201,209,212,213,215,216,217,220,222,229,231,232,237,238,239,241,244,247,249,252,255,259,287,295,302,304,307,309,311,324,],[9,-6,9,-7,-2,9,9,9,-4,9,-5,-8,9,-123,9,9,9,-122,-3,-128,9,-145,-140,-144,9,-143,-141,-142,-146,9,9,-151,9,9,9,-118,-117,9,-119,-112,-114,-110,9,-111,-113,-106,-107,-105,9,-98,-99,-100,-103,-97,-102,-101,-104,9,9,9,9,9,-152,-24,-18,9,-9,9,9,9,9,9,-201,-129,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-204,9,-205,9,9,9,9,9,9,]),'IF':([0,2,3,4,7,8,10,22,23,32,34,43,49,66,80,83,86,87,88,90,91,92,93,94,95,99,101,103,108,110,114,144,145,147,152,153,161,166,174,176,198,201,209,212,213,215,216,217,220,222,229,231,232,237,238,239,241,244,247,249,252,255,259,287,295,302,304,307,309,311,324,],[10,-6,49,-7,-2,10,49,10,-4,49,-5,-8,49,49,-3,-128,10,-145,-140,-144,49,-143,-141,-142,-146,10,49,-151,49,49,49,49,10,10,10,10,-152,-24,-18,49,-9,49,10,49,10,10,-201,-129,10,49,49,49,49,49,49,49,49,49,49,49,49,10,-204,49,-205,49,49,49,49,49,49,]),'NULL':([3,10,32,49,60,66,74,75,87,88,90,91,92,93,94,95,101,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[50,50,50,50,-123,50,50,-122,-145,-140,-144,50,-143,-141,-142,-146,50,50,50,50,-118,-117,50,-119,-112,-114,-110,50,-111,-113,-106,-107,-105,50,-98,-99,-100,-103,-97,-102,-101,-104,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'$end':([2,4,7,8,23,34,41,43,80,83,166,174,198,216,217,],[-6,-7,-2,-1,-4,-5,0,-8,-3,-128,-24,-18,-9,-201,-129,]),'TRUE':([3,10,32,49,60,66,74,75,87,88,90,91,92,93,94,95,101,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[56,56,56,56,-123,56,56,-122,-145,-140,-144,56,-143,-141,-142,-146,56,56,56,56,-118,-117,56,-119,-112,-114,-110,56,-111,-113,-106,-107,-105,56,-98,-99,-100,-103,-97,-102,-101,-104,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'ELSE':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,83,89,103,129,143,145,146,161,170,195,200,202,203,204,205,209,217,230,233,242,246,250,251,290,293,306,315,316,317,332,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-128,-61,-151,-127,-121,-149,213,-152,-191,-180,247,-116,-109,-96,-85,-150,-129,-62,-192,-181,247,-91,-82,-88,213,-65,-89,-93,-83,-94,]),'CCONST':([3,10,32,49,60,66,74,75,87,88,90,91,92,93,94,95,101,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[53,53,53,53,-123,53,53,-122,-145,-140,-144,53,-143,-141,-142,-146,53,53,53,53,-118,-117,53,-119,-112,-114,-110,53,-111,-113,-106,-107,-105,53,-98,-99,-100,-103,-97,-102,-101,-104,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'CHARS':([1,107,112,117,164,177,226,261,294,310,],[-17,-15,187,187,187,187,-16,187,187,187,]),'ASC':([0,2,3,4,7,8,10,22,23,32,34,43,49,60,61,66,74,75,80,83,86,87,88,90,91,92,93,94,95,99,101,103,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,145,147,152,153,161,166,174,176,198,201,209,212,213,215,216,217,220,222,229,231,232,237,238,239,241,244,247,249,252,255,259,287,295,302,304,307,309,311,324,],[15,-6,15,-7,-2,15,15,15,-4,15,-5,-8,15,-123,15,15,15,-122,-3,-128,15,-145,-140,-144,15,-143,-141,-142,-146,15,15,-151,15,15,15,-118,-117,15,-119,-112,-114,-110,15,-111,-113,-106,-107,-105,15,-98,-99,-100,-103,-97,-102,-101,-104,15,15,15,15,15,-152,-24,-18,15,-9,15,15,15,15,15,-201,-129,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-204,15,-205,15,15,15,15,15,15,]),'END':([2,4,7,23,34,43,80,83,147,166,174,198,215,216,217,259,295,],[-6,-7,-2,-4,-5,-8,-3,-128,214,-24,-18,-9,256,-201,-129,-204,-205,]),'TO':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,265,266,267,290,300,303,306,315,317,325,326,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,-174,-170,302,-88,302,324,-65,-89,-83,-55,-171,]),'FALSE':([3,10,32,49,60,66,74,75,87,88,90,91,92,93,94,95,101,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[57,57,57,57,-123,57,57,-122,-145,-140,-144,57,-143,-141,-142,-146,57,57,57,57,-118,-117,57,-119,-112,-114,-110,57,-111,-113,-106,-107,-105,57,-98,-99,-100,-103,-97,-102,-101,-104,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'DO':([0,2,4,7,8,22,23,34,43,80,83,86,99,103,145,147,152,153,161,166,174,198,209,213,215,216,217,220,255,259,295,],[22,-6,-7,-2,22,22,-4,-5,-8,-3,-128,22,22,-151,22,22,22,22,-152,-24,-18,-9,22,22,22,-201,-129,22,22,-204,-205,]),'ELSIF':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,83,89,103,129,143,145,146,161,170,195,200,202,203,204,205,209,217,230,233,242,246,250,251,290,293,306,315,316,317,332,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-128,-61,-151,-127,-121,-149,212,-152,-191,-180,249,-116,-109,-96,-85,-150,-129,-62,-192,-181,287,-91,-82,-88,212,-65,-89,-93,-83,-94,]),'OD':([22,83,99,103,153,161,217,220,],[102,-128,160,-151,221,-152,-129,264,]),'INT':([1,107,112,117,164,177,223,226,238,261,270,294,309,310,],[-17,-15,184,184,184,184,184,-16,184,184,184,184,184,184,]),'FOR':([22,],[98,]),'NOT':([3,10,32,49,66,87,88,90,91,92,93,94,95,101,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[60,60,60,60,60,-145,-140,-144,60,-143,-141,-142,-146,60,60,60,60,-118,-117,60,-119,-112,-114,-110,60,-111,-113,-106,-107,-105,60,-98,-99,-100,-103,-97,-102,-101,-104,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'ICONST':([3,10,32,49,60,66,74,75,87,88,90,91,92,93,94,95,101,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,176,201,212,222,229,231,232,237,238,239,240,241,244,247,249,252,287,302,304,307,309,311,324,],[59,59,59,59,-123,59,59,-122,-145,-140,-144,59,-143,-141,-142,-146,59,59,59,59,-118,-117,59,-119,-112,-114,-110,59,-111,-113,-106,-107,-105,59,-98,-99,-100,-103,-97,-102,-101,-104,59,59,59,59,59,59,59,59,59,59,59,284,59,59,59,59,59,59,59,59,59,59,59,59,]),'ARROW':([1,3,6,10,16,21,26,27,32,33,38,39,45,49,60,66,67,74,75,77,87,88,89,90,91,92,93,94,95,101,108,110,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,170,176,195,201,212,222,229,230,231,232,233,237,238,239,241,242,244,247,249,252,282,287,302,304,306,307,309,311,324,],[-17,61,-178,61,-179,89,-58,-60,61,-59,-57,-56,89,61,-123,61,-60,61,-122,-56,-145,-140,-61,-144,61,-143,-141,-142,-146,61,61,61,61,-118,-117,61,-119,-112,-114,-110,61,-111,-113,89,-106,-107,-105,61,-98,-99,-100,-103,-97,-102,-101,-104,61,-191,61,-180,61,61,61,61,-62,61,61,-192,61,61,61,61,-181,61,61,61,61,-56,61,61,61,-65,61,61,61,61,]),'ABS':([0,2,3,4,7,8,10,22,23,32,34,43,49,60,61,66,74,75,80,83,86,87,88,90,91,92,93,94,95,99,101,103,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,145,147,152,153,161,166,174,176,198,201,209,212,213,215,216,217,220,222,229,231,232,237,238,239,241,244,247,249,252,255,259,287,295,302,304,307,309,311,324,],[17,-6,17,-7,-2,17,17,17,-4,17,-5,-8,17,-123,17,17,17,-122,-3,-128,17,-145,-140,-144,17,-143,-141,-142,-146,17,17,-151,17,17,17,-118,-117,17,-119,-112,-114,-110,17,-111,-113,-106,-107,-105,17,-98,-99,-100,-103,-97,-102,-101,-104,17,17,17,17,17,-152,-24,-18,17,-9,17,17,17,17,17,-201,-129,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-204,17,-205,17,17,17,17,17,17,]),'LOC':([1,178,179,181,183,184,185,186,188,189,190,191,192,193,194,236,296,308,312,313,319,329,330,],[-17,-37,-29,-47,-33,-36,-28,-35,-30,-41,-34,-31,-38,-46,-32,-45,320,-40,-48,-39,334,-54,-49,]),'PLUS':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,123,-78,-77,-73,-76,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,123,-85,-62,-192,-181,-82,-56,-65,-83,]),'STRCAT':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,124,-78,-77,-73,-76,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,124,-85,-62,-192,-181,-82,-56,-65,-83,]),'RETURN':([0,2,4,7,8,22,23,34,43,80,83,86,99,103,145,147,152,153,161,166,174,198,209,213,215,216,217,220,255,259,295,],[32,-6,-7,-2,32,32,-4,-5,-8,-3,-128,32,32,-151,32,32,32,32,-152,-24,-18,-9,32,32,32,-201,-129,32,32,-204,-205,]),'CHAR':([1,107,112,117,164,177,223,226,238,261,270,294,309,310,],[-17,-15,192,192,192,192,192,-16,192,192,192,192,192,192,]),'RETURNS':([218,262,299,],[257,-206,-207,]),'BOOL':([1,107,112,117,164,177,223,226,238,261,270,294,309,310,],[-17,-15,178,178,178,178,178,-16,178,178,178,178,178,178,]),'ASSIGN':([1,6,16,21,26,27,33,38,39,77,89,105,107,112,154,155,170,178,179,181,182,183,184,185,186,188,189,190,191,192,193,194,195,199,226,230,233,236,242,306,308,312,313,329,330,],[-17,-178,-179,88,-58,-60,-59,-57,-56,-56,-61,164,-15,176,222,-169,-191,-37,-29,-47,239,-33,-36,-28,-35,-30,-41,-34,-31,-38,-46,-32,-180,244,-16,-62,-192,-45,-181,-65,-40,-48,-39,-54,-49,]),'THEN':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,81,82,89,118,129,143,170,195,202,203,204,205,230,233,242,251,254,290,291,306,314,315,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,145,-90,-61,201,-127,-121,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,145,-88,201,-65,201,-89,-83,]),'RBRACKET':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,89,129,143,167,168,170,178,183,184,186,190,192,194,195,202,203,204,205,206,207,230,233,242,251,271,272,273,278,279,280,281,284,290,292,306,308,313,315,317,327,328,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,230,-63,-191,-37,-33,-36,-35,-34,-38,-32,-180,-116,-109,-96,-85,-55,251,-62,-192,-181,-82,-64,-44,306,-52,310,-50,-53,312,-88,317,-65,-40,-39,-89,-83,-42,-51,]),'DIVIDE':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,56,57,58,59,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,119,-79,-69,-78,-77,-73,-76,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,119,-85,-62,-192,-181,-82,-56,-65,-83,]),'OR':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,136,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,-56,-65,-83,]),'LPAREN':([1,3,9,10,15,17,19,29,30,32,35,36,39,42,49,60,66,74,75,77,87,88,90,91,92,93,94,95,101,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,150,176,178,179,183,184,186,189,190,192,194,201,212,222,229,231,232,237,238,239,241,244,247,249,252,257,268,269,278,282,287,302,304,305,307,308,309,311,313,324,],[-17,66,-196,66,-194,-193,-200,-197,-199,66,110,-195,114,-198,66,-123,66,66,-122,114,-145,-140,-144,66,-143,-141,-142,-146,66,66,66,66,-118,-117,66,-119,-112,-114,-110,66,-111,-113,-106,-107,-105,66,-98,-99,-100,-103,-97,-102,-101,-104,66,219,66,-37,237,-33,-36,-35,241,-34,-38,-32,66,66,66,66,66,66,66,66,66,66,66,66,66,66,294,237,241,237,311,66,66,66,237,66,-40,66,66,-39,66,]),'TYPE':([0,2,4,7,8,23,34,43,80,83,147,166,174,198,215,216,217,259,295,],[25,-6,-7,-2,25,-4,-5,-8,-3,-128,25,-24,-18,-9,25,-201,-129,-204,-205,]),'DIVCREASE':([1,6,16,21,26,27,33,38,39,77,89,170,195,230,233,242,306,],[-17,-178,-179,87,-58,-60,-59,-57,-56,-56,-61,-191,-180,-62,-192,-181,-65,]),'INCREASE':([1,6,16,21,26,27,33,38,39,77,89,170,195,230,233,242,306,],[-17,-178,-179,94,-58,-60,-59,-57,-56,-56,-61,-191,-180,-62,-192,-181,-65,]),'MODCREASE':([1,6,16,21,26,27,33,38,39,77,89,170,195,230,233,242,306,],[-17,-178,-179,95,-58,-60,-59,-57,-56,-56,-61,-191,-180,-62,-192,-181,-65,]),'ARRAY':([1,107,112,117,164,177,226,261,294,310,],[-17,-15,180,180,180,180,-16,180,180,180,]),'LENGTH':([0,2,3,4,7,8,10,22,23,32,34,43,49,60,61,66,74,75,80,83,86,87,88,90,91,92,93,94,95,99,101,103,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,145,147,152,153,161,166,174,176,198,201,209,212,213,215,216,217,220,222,229,231,232,237,238,239,241,244,247,249,252,255,259,287,295,302,304,307,309,311,324,],[42,-6,42,-7,-2,42,42,42,-4,42,-5,-8,42,-123,42,42,42,-122,-3,-128,42,-145,-140,-144,42,-143,-141,-142,-146,42,42,-151,42,42,42,-118,-117,42,-119,-112,-114,-110,42,-111,-113,-106,-107,-105,42,-98,-99,-100,-103,-97,-102,-101,-104,42,42,42,42,42,-152,-24,-18,42,-9,42,42,42,42,42,-201,-129,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-204,42,-205,42,42,42,42,42,42,]),'READ':([0,2,3,4,7,8,10,22,23,32,34,43,49,60,61,66,74,75,80,83,86,87,88,90,91,92,93,94,95,99,101,103,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,145,147,152,153,161,166,174,176,198,201,209,212,213,215,216,217,220,222,229,231,232,237,238,239,241,244,247,249,252,255,259,287,295,302,304,307,309,311,324,],[30,-6,30,-7,-2,30,30,30,-4,30,-5,-8,30,-123,30,30,30,-122,-3,-128,30,-145,-140,-144,30,-143,-141,-142,-146,30,30,-151,30,30,30,-118,-117,30,-119,-112,-114,-110,30,-111,-113,-106,-107,-105,30,-98,-99,-100,-103,-97,-102,-101,-104,30,30,30,30,30,-152,-24,-18,30,-9,30,30,30,30,30,-201,-129,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-204,30,-205,30,30,30,30,30,30,]),'EXIT':([0,2,4,7,8,22,23,34,43,80,83,86,99,103,145,147,152,153,161,166,174,198,209,213,215,216,217,220,255,259,295,],[18,-6,-7,-2,18,18,-4,-5,-8,-3,-128,18,18,-151,18,18,18,18,-152,-24,-18,-9,18,18,18,-201,-129,18,18,-204,-205,]),'SCONST':([3,10,32,49,60,66,74,75,87,88,90,91,92,93,94,95,101,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[72,72,72,72,-123,72,72,-122,-145,-140,-144,72,-143,-141,-142,-146,72,72,72,72,-118,-117,72,-119,-112,-114,-110,72,-111,-113,-106,-107,-105,72,-98,-99,-100,-103,-97,-102,-101,-104,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'EQUAL':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,140,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,-56,-65,-83,]),'WHILE':([1,6,16,22,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,89,129,143,156,157,158,159,170,178,183,184,186,190,192,194,195,202,203,204,205,230,233,242,251,265,268,290,301,305,306,308,313,315,317,322,323,335,],[-17,-178,-179,101,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-165,101,-164,-166,-191,-37,-33,-36,-35,-34,-38,-32,-180,-116,-109,-96,-85,-62,-192,-181,-82,-174,-175,-88,-167,-176,-65,-40,-39,-89,-83,-168,-172,-173,]),'BY':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,265,266,267,290,306,315,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,-174,-170,304,-88,-65,-89,-83,]),'GREATEREQ':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,141,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,-56,-65,-83,]),'LOWER':([0,2,3,4,7,8,10,22,23,32,34,43,49,60,61,66,74,75,80,83,86,87,88,90,91,92,93,94,95,99,101,103,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,145,147,152,153,161,166,174,176,198,201,209,212,213,215,216,217,220,222,229,231,232,237,238,239,241,244,247,249,252,255,259,287,295,302,304,307,309,311,324,],[29,-6,29,-7,-2,29,29,29,-4,29,-5,-8,29,-123,29,29,29,-122,-3,-128,29,-145,-140,-144,29,-143,-141,-142,-146,29,29,-151,29,29,29,-118,-117,29,-119,-112,-114,-110,29,-111,-113,-106,-107,-105,29,-98,-99,-100,-103,-97,-102,-101,-104,29,29,29,29,29,-152,-24,-18,29,-9,29,29,29,29,29,-201,-129,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-204,29,-205,29,29,29,29,29,29,]),'IN':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,65,67,68,69,70,72,73,76,77,78,89,129,143,154,155,170,195,202,203,204,205,224,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,131,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,223,-169,-191,-180,-116,-109,-96,-85,270,-62,-192,-181,-82,-56,-65,-83,]),'DCL':([0,2,4,7,8,23,34,43,80,83,147,166,174,198,215,216,217,259,295,],[44,-6,-7,-2,44,-4,-5,-8,-3,-128,44,-24,-18,-9,44,-201,-129,-204,-205,]),'TIMES':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,56,57,58,59,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,120,-79,-69,-78,-77,-73,-76,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,120,-85,-62,-192,-181,-82,-56,-65,-83,]),'GREATER':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,137,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,-56,-65,-83,]),'MINUS':([1,3,6,10,16,26,32,33,38,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,67,68,69,70,72,73,76,77,78,87,88,89,90,91,92,93,94,95,101,108,110,114,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,144,170,176,195,201,202,203,204,205,212,222,229,230,231,232,233,237,238,239,241,242,244,247,249,251,252,282,287,302,304,306,307,309,311,317,324,],[-17,75,-178,75,-179,-58,75,-59,-57,-124,-120,-70,-115,75,-80,-72,-108,-79,-69,128,-78,-77,-73,-76,-71,75,-60,-67,-74,-126,-81,-75,-68,-56,-125,-145,-140,-61,-144,75,-143,-141,-142,-146,75,75,75,75,-118,-117,75,-119,-112,-114,-110,75,-111,-113,-127,-106,-107,-105,75,-98,-99,-100,-103,-97,-102,-101,-104,-121,75,-191,75,-180,75,-116,-109,128,-85,75,75,75,-62,75,75,-192,75,75,75,75,-181,75,75,75,-82,75,-56,75,75,75,-65,75,75,75,-83,75,]),'NUM':([0,2,3,4,7,8,10,22,23,32,34,43,49,60,61,66,74,75,80,83,86,87,88,90,91,92,93,94,95,99,101,103,108,110,114,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,144,145,147,152,153,161,166,174,176,198,201,209,212,213,215,216,217,220,222,229,231,232,237,238,239,241,244,247,249,252,255,259,287,295,302,304,307,309,311,324,],[36,-6,36,-7,-2,36,36,36,-4,36,-5,-8,36,-123,36,36,36,-122,-3,-128,36,-145,-140,-144,36,-143,-141,-142,-146,36,36,-151,36,36,36,-118,-117,36,-119,-112,-114,-110,36,-111,-113,-106,-107,-105,36,-98,-99,-100,-103,-97,-102,-101,-104,36,36,36,36,36,-152,-24,-18,36,-9,36,36,36,36,36,-201,-129,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-204,36,-205,36,36,36,36,36,36,]),'SYN':([0,2,4,7,8,23,34,43,80,83,147,166,174,198,215,216,217,259,295,],[37,-6,-7,-2,37,-4,-5,-8,-3,-128,37,-24,-18,-9,37,-201,-129,-204,-205,]),'DIFF':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,204,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,139,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,-109,-96,-85,-62,-192,-181,-82,-56,-65,-83,]),'MULCREASE':([1,6,16,21,26,27,33,38,39,77,89,170,195,230,233,242,306,],[-17,-178,-179,90,-58,-60,-59,-57,-56,-56,-61,-191,-180,-62,-192,-181,-65,]),'FI':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,83,89,103,129,143,145,146,161,170,195,202,203,204,205,209,210,213,217,230,233,242,248,251,255,288,289,290,293,306,315,317,318,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-128,-61,-151,-127,-121,-149,211,-152,-191,-180,-116,-109,-96,-85,-150,253,-153,-129,-62,-192,-181,290,-82,-154,315,-92,-88,-155,-65,-89,-83,-156,]),'LBRACKET':([1,6,16,21,26,27,31,33,38,39,45,47,50,51,53,54,56,57,58,59,65,67,68,69,70,72,73,76,77,79,89,129,170,180,187,195,205,230,233,242,251,282,306,317,],[-17,-178,-179,-66,-58,-60,108,-59,-57,-56,-66,-70,-80,-72,-79,-69,-78,-77,-73,-76,-71,-60,-67,-74,-84,-81,-75,-68,-56,144,-61,-66,-191,238,240,-180,-85,-62,-192,-181,-82,-56,-65,-83,]),'COLON':([1,6,16,20,26,33,38,39,45,46,47,48,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,69,70,72,73,76,77,78,89,96,129,143,168,169,170,195,202,203,204,205,206,208,230,233,242,251,275,276,282,290,306,315,317,331,],[-17,-178,-179,86,-58,-59,-57,-130,-124,-120,-70,-115,-80,-72,-108,-79,-69,-95,-78,-77,-73,-76,-86,-87,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,152,-127,-121,-43,231,-191,-180,-116,-109,-96,-85,-43,252,-62,-192,-181,-82,-43,307,-56,-88,-65,-89,-83,-43,]),'PROC':([86,],[150,]),'MOD':([1,6,16,26,33,38,45,46,47,48,50,51,52,53,54,56,57,58,59,65,67,68,69,70,72,73,76,77,78,89,129,143,170,195,202,203,205,230,233,242,251,282,306,317,],[-17,-178,-179,-58,-59,-57,-124,-120,-70,-115,-80,-72,122,-79,-69,-78,-77,-73,-76,-71,-60,-67,-74,-126,-81,-75,-68,-56,-125,-61,-127,-121,-191,-180,-116,122,-85,-62,-192,-181,-82,-56,-65,-83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'newmode_statement':([0,8,147,215,],[2,2,2,2,]),'procedure_statement':([0,8,147,215,],[4,4,4,4,]),'return_action':([0,8,22,86,99,145,147,152,153,209,213,215,220,255,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'procedure_call':([0,3,8,10,22,32,49,61,66,74,86,91,99,101,108,110,114,121,126,133,144,145,147,152,153,176,201,209,212,213,215,220,222,229,231,232,237,238,239,241,244,247,249,252,255,287,302,304,307,309,311,324,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'statement':([0,8,147,215,],[7,80,7,80,]),'operand3':([3,10,32,49,66,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[48,48,48,48,48,48,48,48,48,48,202,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'character_string_literal':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'formal_procedure_head':([86,],[147,]),'then_expression':([118,291,314,],[200,316,332,]),'boolean_literal':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'if_action':([0,8,22,86,99,145,147,152,153,209,213,215,220,255,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'action':([0,8,22,86,99,145,147,152,153,209,213,215,220,255,],[14,14,14,149,14,14,14,149,14,14,14,14,14,14,]),'mode':([112,117,164,177,261,294,310,],[182,199,227,236,296,319,329,]),'formal_parameter':([219,298,],[260,321,]),'string_concatenation_operator':([55,204,],[127,127,]),'operand0':([3,10,32,49,66,91,101,108,110,114,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'operand1':([3,10,32,49,66,91,101,108,110,114,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[55,55,55,55,55,55,55,55,55,55,204,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'declaration':([44,197,],[116,243,]),'array_location':([0,3,8,10,22,32,49,61,66,74,86,91,99,101,108,110,114,121,126,133,144,145,147,152,153,176,201,209,212,213,215,220,222,229,231,232,237,238,239,241,244,247,249,252,255,287,302,304,307,309,311,324,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'array_mode':([112,117,164,177,261,294,310,],[181,181,181,181,181,181,181,]),'parameter_spec':([261,],[297,]),'integer_mode':([112,117,164,177,223,238,261,270,294,309,310,],[194,194,194,194,194,194,194,194,194,194,194,]),'range_enumeration':([98,],[159,]),'expression':([3,10,32,49,66,91,101,108,110,114,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[62,82,62,82,142,151,82,168,171,171,206,234,250,82,265,271,272,171,275,275,234,275,286,289,82,272,82,265,325,272,275,331,265,]),'end_value':([267,300,],[301,322,]),'synonym_list':([37,],[111,]),'while_control':([22,157,],[100,225,]),'declaration_list':([44,],[115,]),'parenthesized_expression':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'character_mode':([112,117,164,177,223,238,261,270,294,309,310,],[190,190,190,190,190,190,190,190,190,190,190,]),'else_clause':([146,293,],[210,318,]),'array_element':([0,3,8,10,22,32,49,61,66,74,86,91,99,101,108,110,114,121,126,133,144,145,147,152,153,176,201,209,212,213,215,220,222,229,231,232,237,238,239,241,244,247,249,252,255,287,302,304,307,309,311,324,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'index_mode_list':([238,],[279,]),'primitive_value':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'result':([3,32,],[71,109,]),'upper_bound':([231,252,307,],[273,292,327,]),'mode_definition':([25,165,],[104,228,]),'mode_name':([112,117,164,177,261,294,310,],[185,185,185,185,185,185,185,]),'integer_expression':([144,304,],[207,326,]),'arithmetic_multiplicative_operator':([52,203,],[121,121,]),'monadic_operator':([3,10,32,49,66,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'constant_expression':([176,239,],[235,283,]),'array_slice':([0,3,8,10,22,32,49,61,66,74,86,91,99,101,108,110,114,121,126,133,144,145,147,152,153,176,201,209,212,213,215,220,222,229,231,232,237,238,239,241,244,247,249,252,255,287,302,304,307,309,311,324,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'lower_bound':([108,144,237,238,241,309,311,],[169,208,276,276,276,276,276,]),'character_literal':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'start_value':([222,],[267,]),'reference_mode':([112,117,164,177,261,294,310,],[188,188,188,188,188,188,188,]),'string_mode':([112,117,164,177,261,294,310,],[193,193,193,193,193,193,193,]),'assignment_action':([0,8,22,86,99,145,147,152,153,209,213,215,220,255,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'referenced_location':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'closed_dyadic_operator':([21,],[93,]),'newmode_list':([25,],[106,]),'formal_parameter_list':([219,],[263,]),'expression_list':([108,],[167,]),'value_array_element':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'elsif_expression':([200,],[246,]),'initialization':([199,],[245,]),'location':([0,3,8,10,22,32,49,61,66,74,86,91,99,101,108,110,114,121,126,133,144,145,147,152,153,176,201,209,212,213,215,220,222,229,231,232,237,238,239,241,244,247,249,252,255,287,302,304,307,309,311,324,],[21,45,21,45,21,45,45,129,45,45,21,45,21,45,45,45,45,45,45,45,45,21,21,21,21,45,45,21,45,21,21,21,45,45,45,45,45,45,45,45,45,45,45,45,21,45,45,45,45,45,45,45,]),'operand4':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[46,46,46,46,46,143,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'statement_list':([0,147,],[8,215,]),'discrete_mode':([112,117,164,177,223,238,261,270,294,309,310,],[179,179,179,179,268,278,179,305,179,278,179,]),'result_action':([0,8,22,86,99,145,147,152,153,209,213,215,220,255,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'bracketed_action':([0,8,22,86,99,145,147,152,153,209,213,215,220,255,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'boolean_expression':([10,49,101,212,249,287,],[81,118,162,254,291,314,]),'array_primitive_value':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'operand2':([3,10,32,49,66,91,101,108,110,114,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[52,52,52,52,52,52,52,52,52,52,203,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'value_array_slice':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'for_control':([98,],[157,]),'builtin_call':([0,3,8,10,22,32,49,61,66,74,86,91,99,101,108,110,114,121,126,133,144,145,147,152,153,176,201,209,212,213,215,220,222,229,231,232,237,238,239,241,244,247,249,252,255,287,302,304,307,309,311,324,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'literal_range':([237,238,241,309,311,],[277,281,285,281,285,]),'step_value':([267,],[300,]),'discrete_range_mode':([112,117,164,177,223,238,261,270,294,309,310,],[186,186,186,186,186,186,186,186,186,186,186,]),'operator1':([63,],[133,]),'label_id':([0,8,22,99,145,147,153,209,213,215,220,255,],[20,20,96,96,96,20,96,96,96,20,96,96,]),'then_clause':([81,254,],[146,293,]),'exit_label_id':([18,],[84,]),'else_expression':([200,246,],[248,288,]),'control_part':([22,],[97,]),'element_mode':([310,],[330,]),'program':([0,],[41,]),'operator2':([55,204,],[126,126,]),'action_statement_list':([22,145,153,213,],[99,209,220,255,]),'declaration_statement':([0,8,147,215,],[23,23,23,23,]),'conditional_expression':([3,10,32,49,66,91,101,108,110,114,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'call_action':([0,3,8,10,22,32,49,61,66,74,86,91,99,101,108,110,114,121,126,133,144,145,147,152,153,176,201,209,212,213,215,220,222,229,231,232,237,238,239,241,244,247,249,252,255,287,302,304,307,309,311,324,],[27,67,27,67,27,67,67,67,67,67,27,67,27,67,67,67,67,67,67,67,67,27,27,27,27,67,67,27,67,27,27,27,67,67,67,67,67,67,67,67,67,67,67,67,27,67,67,67,67,67,67,67,]),'exit_action':([0,8,22,86,99,145,147,152,153,209,213,215,220,255,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'do_action':([0,8,22,86,99,145,147,152,153,209,213,215,220,255,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'integer_literal':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'membership_operator':([63,],[134,]),'synonym_definition':([37,111,],[113,175,]),'literal':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'composite_mode':([112,117,164,177,261,294,310,],[191,191,191,191,191,191,191,]),'loop_counter':([98,],[154,]),'relational_operator':([63,],[138,]),'procedure_definition':([86,],[148,]),'identifier_list':([25,37,44,111,165,197,219,298,],[105,112,117,112,105,117,261,261,]),'boolean_mode':([112,117,164,177,223,238,261,270,294,309,310,],[183,183,183,183,183,183,183,183,183,183,183,]),'iteration':([98,],[158,]),'parameter_list':([110,114,311,],[172,196,196,]),'empty_literal':([3,10,32,49,66,74,91,101,108,110,114,121,126,133,144,176,201,212,222,229,231,232,237,238,239,241,244,247,249,252,287,302,304,307,309,311,324,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'builtin_name':([0,3,8,10,22,32,49,61,66,74,86,91,99,101,108,110,114,121,126,133,144,145,147,152,153,176,201,209,212,213,215,220,222,229,231,232,237,238,239,241,244,247,249,252,255,287,302,304,307,309,311,324,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'parenthesis_gambiarra':([150,],[218,]),'synonym_statement':([0,8,147,215,],[34,34,34,34,]),'discrete_expression':([222,302,324,],[266,323,335,]),'index_mode':([238,309,],[280,328,]),'arithmetic_additive_operator':([55,204,],[125,125,]),'parameter':([110,114,232,311,],[173,173,274,173,]),'dereferenced_reference':([0,3,8,10,22,32,49,61,66,74,86,91,99,101,108,110,114,121,126,133,144,145,147,152,153,176,201,209,212,213,215,220,222,229,231,232,237,238,239,241,244,247,249,252,255,287,302,304,307,309,311,324,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'identifier':([0,3,8,10,18,22,25,32,37,44,49,61,66,74,86,91,98,99,101,108,110,111,112,114,117,121,126,133,144,145,147,152,153,163,164,165,176,177,197,201,209,212,213,215,219,220,222,223,229,231,232,237,238,239,241,244,247,249,252,255,261,270,287,294,298,302,304,307,309,310,311,324,],[39,77,39,77,85,39,107,77,107,107,77,77,77,77,77,77,155,39,77,77,77,107,189,77,189,77,77,77,77,39,39,77,39,226,189,107,77,189,107,77,39,77,39,39,107,39,77,269,77,77,77,77,282,77,77,77,77,77,77,39,189,269,77,189,107,77,77,77,282,189,77,77,]),'assigning_operator':([21,],[91,]),'result_spec':([218,],[258,]),'action_statement':([0,8,22,99,145,147,153,209,213,215,220,255,],[43,43,103,161,103,43,103,161,103,43,161,161,]),'step_enumeration':([98,],[156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list ASSIGN constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode ASSIGN constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',114),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET ICONST RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',392),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',398),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',404),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',410),
  ('expression -> operand0','expression',1,'p_expression','parser.py',417),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',418),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',424),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',425),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',434),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',440),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',446),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',452),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',453),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',462),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',463),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',470),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',471),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',483),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',488),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',493),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',494),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',502),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',509),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',515),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',519),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',520),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',529),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',534),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',535),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',544),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',550),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',551),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',556),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',561),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',562),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',571),
  ('action -> bracketed_action','action',1,'p_action','parser.py',577),
  ('action -> assignment_action','action',1,'p_action','parser.py',578),
  ('action -> call_action','action',1,'p_action','parser.py',579),
  ('action -> exit_action','action',1,'p_action','parser.py',580),
  ('action -> return_action','action',1,'p_action','parser.py',581),
  ('action -> result_action','action',1,'p_action','parser.py',582),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',588),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',593),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',613),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',622),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',627),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',628),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',637),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',638),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',647),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',648),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',655),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',657),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',658),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',673),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',674),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',675),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',676),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',691),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',692),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',701),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',707),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',712),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',713),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',720),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',725),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',730),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',735),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',736),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',744),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',749),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',750),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',757),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',761),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',762),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',767),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',768),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',775),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',776),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',783),
  ('exit_action -> EXIT exit_label_id','exit_action',2,'p_exit_action','parser.py',791),
  ('exit_label_id -> identifier','exit_label_id',1,'p_exit_label_id','parser.py',795),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',799),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',800),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',807),
  ('result -> expression','result',1,'p_result','parser.py',811),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',816),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',817),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',826),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',827),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',828),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',829),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',830),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',831),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',835),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',839),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',847),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',848),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',856),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',857),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',864),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',865),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',872),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',876),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',877),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',889),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',890),
]
