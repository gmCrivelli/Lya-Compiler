
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULVAL DIVVAL DIFF MOD MODVAL NEGATE ICONST CCONST SCONST PROC FALSE CHAR DOWN READ FI EXIT DO REF BY THEN LENGTH SYN ASC OD IN RETURN BOOL ABS TO ARRAY ELSIF FOR LOC ELSE CHARS INT IF RETURNS NUM TRUE DCL NULL RESULT PRINT END LOWER UPPER TYPE WHILEprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : identifier\n                            | declaration_list COMMA identifieridentifier : IDexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : ICONSTfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'$end':([1,2,3,5,6,11,],[-4,-1,-2,0,-3,-5,]),'DCL':([0,1,2,3,6,11,],[4,-4,4,-2,-3,-5,]),'COMMA':([7,8,9,12,],[-8,10,-6,-7,]),'ID':([4,10,],[7,7,]),'SEMI':([7,8,9,12,],[-8,11,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration_statement':([0,2,],[1,1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,6,]),'identifier':([4,10,],[9,12,]),'declaration_list':([4,],[8,]),'program':([0,],[5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',25),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',26),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',34),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',39),
  ('declaration_list -> identifier','declaration_list',1,'p_declaration_list','parser.py',43),
  ('declaration_list -> declaration_list COMMA identifier','declaration_list',3,'p_declaration_list','parser.py',44),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',53),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','parser.py',59),
  ('expression -> term','expression',1,'p_expression_term','parser.py',64),
  ('term -> term TIMES factor','term',3,'p_term_times','parser.py',69),
  ('term -> term DIVIDE factor','term',3,'p_term_div','parser.py',74),
  ('term -> factor','term',1,'p_term_factor','parser.py',79),
  ('factor -> ICONST','factor',1,'p_factor_num','parser.py',84),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','parser.py',89),
]
