
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST LENGTH LOC CHARS ARRAY DCL ELSIF OD PRINT SYN TRUE IN PROC RESULT REF DO NUM UPPER DOWN RETURN CHAR FI ELSE EXIT TYPE BOOL WHILE ASC RETURNS END NULL TO FOR IF READ FALSE LOWER INT THEN BY ABSprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list ASSIGN constant_expression\n                              | identifier_list mode ASSIGN constant_expressionconstant_expression : expressionnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET ICONST RBRACKETarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT exit_label_idexit_label_id :  identifierreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'LBRACKET':([3,4,10,11,21,23,27,29,33,35,49,50,54,55,56,57,58,59,60,62,63,65,67,68,71,72,77,78,79,80,94,123,153,176,178,199,201,204,213,245,250,277,287,314,],[45,-179,-60,-178,-57,-66,-59,-17,-58,-56,-73,-76,-70,-78,-67,-68,-72,125,-60,-81,-74,-75,-66,-79,-69,-84,-71,-80,-56,-77,-61,-191,-66,232,233,-180,-62,-192,-85,-181,-82,-56,-65,-83,]),'UPPER':([0,5,8,13,16,17,20,22,31,37,42,44,45,46,51,53,64,75,81,83,86,87,88,89,90,91,92,93,95,109,110,112,114,115,116,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,151,156,161,179,182,185,193,195,196,200,202,203,208,214,217,218,219,221,222,225,230,231,232,235,240,243,251,253,255,258,266,293,299,301,305,306,309,311,331,],[2,-6,-4,-7,2,2,-8,-2,2,2,-5,2,2,2,-122,-123,2,2,2,2,-142,-143,-145,-144,-140,-141,-146,2,2,2,-151,2,-128,2,-3,2,-106,-105,-97,-101,-107,2,-100,-99,-98,-104,-102,-103,-119,2,-117,-118,-114,-111,-110,-112,-113,2,2,2,2,-18,-9,-24,2,-152,2,2,2,2,2,2,2,2,-201,2,-129,2,2,2,2,2,2,2,2,2,2,2,-204,2,-205,2,2,2,2,2,2,]),'BOOL':([29,96,97,100,162,184,229,232,241,263,285,300,304,305,],[-17,160,-15,160,160,160,-16,160,160,160,160,160,160,160,]),'EQUAL':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,130,-124,-79,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-96,-116,-109,-85,-181,-82,-56,-65,-83,]),'ICONST':([16,17,44,45,46,51,53,64,75,81,86,87,88,89,90,91,92,93,112,115,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,161,200,202,203,208,218,225,230,231,232,233,235,240,251,253,255,293,301,305,306,309,311,331,],[50,50,50,50,50,-122,-123,50,50,50,-142,-143,-145,-144,-140,-141,-146,50,50,50,50,-106,-105,-97,-101,-107,50,-100,-99,-98,-104,-102,-103,-119,50,-117,-118,-114,-111,-110,-112,-113,50,50,50,50,50,50,50,50,50,50,50,278,50,50,50,50,50,50,50,50,50,50,50,50,]),'MINUS':([4,11,16,17,21,27,29,33,44,45,46,49,50,54,55,56,57,58,60,61,62,63,64,65,67,68,70,71,72,73,74,76,77,78,79,80,81,86,87,88,89,90,91,92,93,94,112,115,123,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,161,199,200,201,202,203,204,208,210,211,212,213,218,225,230,231,232,235,240,245,250,251,253,255,277,287,293,301,305,306,309,311,314,331,],[-179,-178,51,51,-57,-59,-17,-58,51,51,51,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,51,-75,-124,-79,-125,-69,-126,-108,-120,148,-71,-80,-56,-77,51,-142,-143,-145,-144,-140,-141,-146,51,-61,51,51,-191,51,-106,-105,-97,-101,-107,51,-100,-99,-98,-104,-102,-103,-119,51,-117,-118,-121,-114,-111,-110,-112,-113,51,-127,51,-180,51,-62,51,51,-192,51,148,-116,-109,-85,51,51,51,51,51,51,51,-181,-82,51,51,51,-56,-65,51,51,51,51,51,51,-83,51,]),'COLON':([4,11,21,24,27,29,33,35,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,94,111,118,119,123,143,153,199,201,204,205,207,210,211,212,213,245,250,269,270,277,287,290,314,316,326,],[-179,-178,-57,95,-59,-17,-58,-130,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,196,-43,200,-191,-121,-127,-180,-62,-192,-43,251,-96,-116,-109,-85,-181,-82,-43,301,-56,-65,-88,-83,-89,-43,]),'ABS':([0,5,8,13,16,17,20,22,31,37,42,44,45,46,51,53,64,75,81,83,86,87,88,89,90,91,92,93,95,109,110,112,114,115,116,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,151,156,161,179,182,185,193,195,196,200,202,203,208,214,217,218,219,221,222,225,230,231,232,235,240,243,251,253,255,258,266,293,299,301,305,306,309,311,331,],[40,-6,-4,-7,40,40,-8,-2,40,40,-5,40,40,40,-122,-123,40,40,40,40,-142,-143,-145,-144,-140,-141,-146,40,40,40,-151,40,-128,40,-3,40,-106,-105,-97,-101,-107,40,-100,-99,-98,-104,-102,-103,-119,40,-117,-118,-114,-111,-110,-112,-113,40,40,40,40,-18,-9,-24,40,-152,40,40,40,40,40,40,40,40,-201,40,-129,40,40,40,40,40,40,40,40,40,40,40,-204,40,-205,40,40,40,40,40,40,]),'NULL':([16,17,44,45,46,51,53,64,75,81,86,87,88,89,90,91,92,93,112,115,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[78,78,78,78,78,-122,-123,78,78,78,-142,-143,-145,-144,-140,-141,-146,78,78,78,78,-106,-105,-97,-101,-107,78,-100,-99,-98,-104,-102,-103,-119,78,-117,-118,-114,-111,-110,-112,-113,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'BY':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,280,281,282,287,290,314,316,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-96,-116,-109,-85,-181,-82,-174,-170,311,-65,-88,-83,-89,]),'INCREASE':([4,10,11,21,23,27,29,33,35,79,94,123,199,201,204,245,287,],[-179,-60,-178,-57,86,-59,-17,-58,-56,-56,-61,-191,-180,-62,-192,-181,-65,]),'NOT':([16,17,44,45,46,64,81,86,87,88,89,90,91,92,93,112,115,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[53,53,53,53,53,53,53,-142,-143,-145,-144,-140,-141,-146,53,53,53,53,-106,-105,-97,-101,-107,53,-100,-99,-98,-104,-102,-103,-119,53,-117,-118,-114,-111,-110,-112,-113,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'TRUE':([16,17,44,45,46,51,53,64,75,81,86,87,88,89,90,91,92,93,112,115,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[55,55,55,55,55,-122,-123,55,55,55,-142,-143,-145,-144,-140,-141,-146,55,55,55,55,-106,-105,-97,-101,-107,55,-100,-99,-98,-104,-102,-103,-119,55,-117,-118,-114,-111,-110,-112,-113,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'EXIT':([0,5,8,13,20,22,31,37,42,95,109,110,114,116,151,156,179,182,185,193,195,196,214,217,219,221,222,243,258,266,299,],[9,-6,-4,-7,-8,-2,9,9,-5,9,9,-151,-128,-3,9,9,-18,-9,-24,9,-152,9,9,9,-201,9,-129,9,9,-204,-205,]),'AND':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,134,-124,-79,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-96,-116,-109,-85,-181,-82,-56,-65,-83,]),'GREATER':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,138,-124,-79,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-96,-116,-109,-85,-181,-82,-56,-65,-83,]),'LOC':([29,160,163,164,165,166,168,169,170,171,172,173,174,175,177,228,298,302,303,307,321,323,324,],[-17,-37,-31,-28,-35,-30,-38,-47,-41,-32,-46,-29,-33,-36,-34,-45,320,-39,-40,-48,333,-54,-49,]),'LENGTH':([0,5,8,13,16,17,20,22,31,37,42,44,45,46,51,53,64,75,81,83,86,87,88,89,90,91,92,93,95,109,110,112,114,115,116,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,151,156,161,179,182,185,193,195,196,200,202,203,208,214,217,218,219,221,222,225,230,231,232,235,240,243,251,253,255,258,266,293,299,301,305,306,309,311,331,],[36,-6,-4,-7,36,36,-8,-2,36,36,-5,36,36,36,-122,-123,36,36,36,36,-142,-143,-145,-144,-140,-141,-146,36,36,36,-151,36,-128,36,-3,36,-106,-105,-97,-101,-107,36,-100,-99,-98,-104,-102,-103,-119,36,-117,-118,-114,-111,-110,-112,-113,36,36,36,36,-18,-9,-24,36,-152,36,36,36,36,36,36,36,36,-201,36,-129,36,36,36,36,36,36,36,36,36,36,36,-204,36,-205,36,36,36,36,36,36,]),'PRINT':([0,5,8,13,16,17,20,22,31,37,42,44,45,46,51,53,64,75,81,83,86,87,88,89,90,91,92,93,95,109,110,112,114,115,116,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,151,156,161,179,182,185,193,195,196,200,202,203,208,214,217,218,219,221,222,225,230,231,232,235,240,243,251,253,255,258,266,293,299,301,305,306,309,311,331,],[12,-6,-4,-7,12,12,-8,-2,12,12,-5,12,12,12,-122,-123,12,12,12,12,-142,-143,-145,-144,-140,-141,-146,12,12,12,-151,12,-128,12,-3,12,-106,-105,-97,-101,-107,12,-100,-99,-98,-104,-102,-103,-119,12,-117,-118,-114,-111,-110,-112,-113,12,12,12,12,-18,-9,-24,12,-152,12,12,12,12,12,12,12,12,-201,12,-129,12,12,12,12,12,12,12,12,12,12,12,-204,12,-205,12,12,12,12,12,12,]),'GREATEREQ':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,136,-124,-79,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-96,-116,-109,-85,-181,-82,-56,-65,-83,]),'FALSE':([16,17,44,45,46,51,53,64,75,81,86,87,88,89,90,91,92,93,112,115,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[80,80,80,80,80,-122,-123,80,80,80,-142,-143,-145,-144,-140,-141,-146,80,80,80,80,-106,-105,-97,-101,-107,80,-100,-99,-98,-104,-102,-103,-119,80,-117,-118,-114,-111,-110,-112,-113,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'IN':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,70,71,72,73,74,76,77,78,79,80,94,123,143,153,190,192,199,201,204,210,211,212,213,242,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,131,-124,-79,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,241,-169,-180,-62,-192,-96,-116,-109,-85,285,-181,-82,-56,-65,-83,]),'MODCREASE':([4,10,11,21,23,27,29,33,35,79,94,123,199,201,204,245,287,],[-179,-60,-178,-57,92,-59,-17,-58,-56,-56,-61,-191,-180,-62,-192,-181,-65,]),'MOD':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,67,68,70,71,72,73,74,77,78,79,80,94,123,143,153,199,201,204,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-124,-79,-125,-69,-126,139,-120,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-116,139,-85,-181,-82,-56,-65,-83,]),'MULCREASE':([4,10,11,21,23,27,29,33,35,79,94,123,199,201,204,245,287,],[-179,-60,-178,-57,89,-59,-17,-58,-56,-56,-61,-191,-180,-62,-192,-181,-65,]),'RETURNS':([224,264,295,],[267,-206,-207,]),'OR':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,133,-124,-79,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-96,-116,-109,-85,-181,-82,-56,-65,-83,]),'CHARS':([29,96,97,100,162,184,229,263,300,304,],[-17,178,-15,178,178,178,-16,178,178,178,]),'LESS':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,128,-124,-79,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-96,-116,-109,-85,-181,-82,-56,-65,-83,]),'ASSIGN':([4,10,11,21,23,27,29,33,35,79,94,96,97,103,123,159,160,163,164,165,166,168,169,170,171,172,173,174,175,177,181,190,192,199,201,204,228,229,245,287,302,303,307,323,324,],[-179,-60,-178,-57,90,-59,-17,-58,-56,-56,-61,161,-15,184,-191,225,-37,-31,-28,-35,-30,-38,-47,-41,-32,-46,-29,-33,-36,-34,235,240,-169,-180,-62,-192,-45,-16,-181,-65,-39,-40,-48,-54,-49,]),'SEMI':([1,4,7,10,11,15,21,27,28,29,32,33,38,39,41,44,47,48,49,50,52,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,84,85,94,98,99,101,102,104,105,107,108,113,117,123,143,153,154,155,157,160,163,164,165,166,168,169,170,171,172,173,174,175,177,180,181,187,188,189,191,194,197,199,201,204,210,211,212,213,215,220,224,226,227,228,234,236,237,238,239,244,245,250,257,260,264,265,268,279,280,284,286,287,290,295,302,303,307,310,313,314,316,323,324,327,328,334,335,336,],[-137,-179,-136,-133,-178,-138,-57,-59,-134,-17,114,-58,-135,-131,-132,-187,-185,-186,-73,-76,-90,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-190,-189,-61,179,-19,182,-10,-25,185,-161,193,-157,-188,-191,-121,-127,-139,219,222,-37,-31,-28,-35,-30,-38,-47,-41,-32,-46,-29,-33,-36,-34,-20,-12,-162,-165,-166,-164,-159,-177,-180,-62,-192,-96,-116,-109,-85,-147,-202,266,-23,-21,-45,-13,-11,-27,-26,-163,-158,-181,-82,-148,-203,-206,299,-22,-14,-174,-175,-160,-65,-88,-207,-39,-40,-48,-167,-176,-83,-89,-54,-49,-168,-172,-213,-173,-214,]),'TYPE':([0,5,8,13,20,22,37,42,114,116,156,179,182,185,219,221,222,266,299,],[30,-6,-4,-7,-8,-2,30,-5,-128,-3,30,-18,-9,-24,-201,30,-129,-204,-205,]),'RPAREN':([4,11,21,27,29,33,46,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,94,115,121,122,123,124,143,150,153,160,163,164,165,166,168,169,170,171,172,173,174,175,177,198,199,201,204,210,211,212,213,223,228,245,246,249,250,261,262,271,272,287,290,297,298,302,303,306,307,314,316,319,320,321,322,323,324,326,333,],[-179,-178,-57,-59,-17,-58,123,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,199,-184,204,-191,-182,-121,213,-127,-37,-31,-28,-35,-30,-38,-47,-41,-32,-46,-29,-33,-36,-34,245,-180,-62,-192,-96,-116,-109,-85,264,-45,-181,-44,-183,-82,295,-208,302,303,-65,-88,-210,-211,-39,-40,199,-48,-83,-89,-209,-212,334,-42,-54,-49,-184,336,]),'RESULT':([0,5,8,13,20,22,31,37,42,95,109,110,114,116,151,156,179,182,185,193,195,196,214,217,219,221,222,243,258,266,299,],[17,-6,-4,-7,-8,-2,17,17,-5,17,17,-151,-128,-3,17,17,-18,-9,-24,17,-152,17,17,17,-201,17,-129,17,17,-204,-205,]),'CHAR':([29,96,97,100,162,184,229,232,241,263,285,300,304,305,],[-17,168,-15,168,168,168,-16,168,168,168,168,168,168,168,]),'$end':([5,8,13,14,20,22,37,42,114,116,179,182,185,219,222,],[-6,-4,-7,0,-8,-2,-1,-5,-128,-3,-18,-9,-24,-201,-129,]),'DIVIDE':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,67,68,70,71,72,73,74,77,78,79,80,94,123,143,153,199,201,204,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-124,-79,-125,-69,-126,142,-120,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-116,142,-85,-181,-82,-56,-65,-83,]),'OD':([31,109,110,114,193,195,222,243,],[113,194,-151,-128,244,-152,-129,286,]),'LESSEQ':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,127,-124,-79,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-96,-116,-109,-85,-181,-82,-56,-65,-83,]),'TIMES':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,67,68,70,71,72,73,74,77,78,79,80,94,123,143,153,199,201,204,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-124,-79,-125,-69,-126,141,-120,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-116,141,-85,-181,-82,-56,-65,-83,]),'ELSIF':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,94,110,114,123,143,151,152,153,195,199,201,204,209,210,211,212,213,214,222,245,250,252,256,287,290,294,314,315,316,332,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-151,-128,-191,-121,-149,218,-127,-152,-180,-62,-192,253,-96,-116,-109,-85,-150,-129,-181,-82,-91,293,-65,-88,218,-83,-93,-89,-94,]),'COMMA':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,94,96,97,100,101,102,103,104,105,118,120,121,122,123,124,143,153,160,163,164,165,166,168,169,170,171,172,173,174,175,177,181,198,199,201,204,210,211,212,213,228,229,234,236,237,238,245,246,248,249,250,261,262,263,273,274,275,276,279,287,290,297,298,302,303,307,314,316,319,320,322,323,324,325,326,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,167,-15,167,183,-10,167,-25,186,-63,202,-184,203,-191,-182,-121,-127,-37,-31,-28,-35,-30,-38,-47,-41,-32,-46,-29,-33,-36,-34,-12,203,-180,-62,-192,-96,-116,-109,-85,-45,-16,-13,-11,-27,-26,-181,-44,-64,-183,-82,296,-208,167,-52,-50,-53,305,-14,-65,-88,-210,-211,-39,-40,-48,-83,-89,-209,-212,-42,-54,-49,-51,-184,]),'WHILE':([4,11,21,27,29,31,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,94,123,143,153,160,165,168,171,174,175,177,187,188,189,191,199,201,204,210,211,212,213,245,250,280,284,287,290,302,303,310,313,314,316,327,328,335,],[-179,-178,-57,-59,-17,112,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,-37,-35,-38,-32,-33,-36,-34,112,-165,-166,-164,-180,-62,-192,-96,-116,-109,-85,-181,-82,-174,-175,-65,-88,-39,-40,-167,-176,-83,-89,-168,-172,-173,]),'ASC':([0,5,8,13,16,17,20,22,31,37,42,44,45,46,51,53,64,75,81,83,86,87,88,89,90,91,92,93,95,109,110,112,114,115,116,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,151,156,161,179,182,185,193,195,196,200,202,203,208,214,217,218,219,221,222,225,230,231,232,235,240,243,251,253,255,258,266,293,299,301,305,306,309,311,331,],[18,-6,-4,-7,18,18,-8,-2,18,18,-5,18,18,18,-122,-123,18,18,18,18,-142,-143,-145,-144,-140,-141,-146,18,18,18,-151,18,-128,18,-3,18,-106,-105,-97,-101,-107,18,-100,-99,-98,-104,-102,-103,-119,18,-117,-118,-114,-111,-110,-112,-113,18,18,18,18,-18,-9,-24,18,-152,18,18,18,18,18,18,18,18,-201,18,-129,18,18,18,18,18,18,18,18,18,18,18,-204,18,-205,18,18,18,18,18,18,]),'SCONST':([16,17,44,45,46,51,53,64,75,81,86,87,88,89,90,91,92,93,112,115,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[62,62,62,62,62,-122,-123,62,62,62,-142,-143,-145,-144,-140,-141,-146,62,62,62,62,-106,-105,-97,-101,-107,62,-100,-99,-98,-104,-102,-103,-119,62,-117,-118,-114,-111,-110,-112,-113,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'SYN':([0,5,8,13,20,22,37,42,114,116,156,179,182,185,219,221,222,266,299,],[25,-6,-4,-7,-8,-2,25,-5,-128,-3,25,-18,-9,-24,-201,25,-129,-204,-205,]),'DCL':([0,5,8,13,20,22,37,42,114,116,156,179,182,185,219,221,222,266,299,],[26,-6,-4,-7,-8,-2,26,-5,-128,-3,26,-18,-9,-24,-201,26,-129,-204,-205,]),'REF':([29,96,97,100,162,184,229,263,300,304,],[-17,162,-15,162,162,162,-16,162,162,162,]),'READ':([0,5,8,13,16,17,20,22,31,37,42,44,45,46,51,53,64,75,81,83,86,87,88,89,90,91,92,93,95,109,110,112,114,115,116,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,151,156,161,179,182,185,193,195,196,200,202,203,208,214,217,218,219,221,222,225,230,231,232,235,240,243,251,253,255,258,266,293,299,301,305,306,309,311,331,],[34,-6,-4,-7,34,34,-8,-2,34,34,-5,34,34,34,-122,-123,34,34,34,34,-142,-143,-145,-144,-140,-141,-146,34,34,34,-151,34,-128,34,-3,34,-106,-105,-97,-101,-107,34,-100,-99,-98,-104,-102,-103,-119,34,-117,-118,-114,-111,-110,-112,-113,34,34,34,34,-18,-9,-24,34,-152,34,34,34,34,34,34,34,34,-201,34,-129,34,34,34,34,34,34,34,34,34,34,34,-204,34,-205,34,34,34,34,34,34,]),'NUM':([0,5,8,13,16,17,20,22,31,37,42,44,45,46,51,53,64,75,81,83,86,87,88,89,90,91,92,93,95,109,110,112,114,115,116,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,151,156,161,179,182,185,193,195,196,200,202,203,208,214,217,218,219,221,222,225,230,231,232,235,240,243,251,253,255,258,266,293,299,301,305,306,309,311,331,],[19,-6,-4,-7,19,19,-8,-2,19,19,-5,19,19,19,-122,-123,19,19,19,19,-142,-143,-145,-144,-140,-141,-146,19,19,19,-151,19,-128,19,-3,19,-106,-105,-97,-101,-107,19,-100,-99,-98,-104,-102,-103,-119,19,-117,-118,-114,-111,-110,-112,-113,19,19,19,19,-18,-9,-24,19,-152,19,19,19,19,19,19,19,19,-201,19,-129,19,19,19,19,19,19,19,19,19,19,19,-204,19,-205,19,19,19,19,19,19,]),'THEN':([4,11,21,27,29,33,49,50,52,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,82,94,123,126,143,153,199,201,204,210,211,212,213,245,250,259,287,289,290,314,316,317,],[-179,-178,-57,-59,-17,-58,-73,-76,-90,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,151,-61,-191,208,-121,-127,-180,-62,-192,-96,-116,-109,-85,-181,-82,151,-65,208,-88,-83,-89,208,]),'PROC':([95,],[158,]),'ID':([0,4,5,8,9,11,13,16,17,20,21,22,25,26,27,29,30,31,33,37,42,44,45,46,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,106,109,110,112,114,115,116,123,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,153,156,161,162,167,179,180,182,183,184,185,186,193,195,196,199,200,201,202,203,204,208,210,211,212,213,214,217,218,219,221,222,223,225,226,227,229,230,231,232,235,240,241,243,245,250,251,253,255,258,263,266,268,285,287,290,293,296,299,300,301,304,305,306,309,311,314,316,331,],[29,-179,-6,-4,29,-178,-7,29,29,-8,-57,-2,29,29,-59,-17,29,29,-58,29,-5,29,29,29,-73,-76,-122,-123,-70,-78,-67,-68,-72,-60,-115,-81,-74,29,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,29,-95,-71,-80,-56,-77,29,29,-142,-143,-145,-144,-140,-141,-146,29,-61,29,29,-15,29,-19,29,29,29,-151,29,-128,29,-3,-191,29,-106,-105,-97,-101,-107,29,-100,-99,-98,-104,-102,-103,-119,29,-117,-118,-121,-114,-111,-110,-112,-113,29,29,-127,29,29,29,29,-18,-20,-9,29,29,-24,29,29,-152,29,-180,29,-62,29,29,-192,29,-96,-116,-109,-85,29,29,29,-201,29,-129,29,29,-23,-21,-16,29,29,29,29,29,29,29,-181,-82,29,29,29,29,29,-204,-22,29,-65,-88,29,29,-205,29,29,29,29,29,29,29,-83,-89,29,]),'IF':([0,5,8,13,16,17,20,22,31,37,42,44,45,46,64,81,86,87,88,89,90,91,92,93,95,109,110,112,114,115,116,125,151,156,161,179,182,185,193,195,196,200,202,203,208,214,217,218,219,221,222,225,230,231,232,235,240,243,251,253,255,258,266,293,299,301,305,306,309,311,331,],[16,-6,-4,-7,64,64,-8,-2,16,16,-5,64,64,64,64,64,-142,-143,-145,-144,-140,-141,-146,64,16,16,-151,64,-128,64,-3,64,16,16,64,-18,-9,-24,16,-152,16,64,64,64,64,16,16,64,-201,16,-129,64,64,64,64,64,64,16,64,64,64,16,-204,64,-205,64,64,64,64,64,64,]),'DO':([0,5,8,13,20,22,31,37,42,95,109,110,114,116,151,156,179,182,185,193,195,196,214,217,219,221,222,243,258,266,299,],[31,-6,-4,-7,-8,-2,31,31,-5,31,31,-151,-128,-3,31,31,-18,-9,-24,31,-152,31,31,31,-201,31,-129,31,31,-204,-205,]),'FOR':([31,],[106,]),'END':([5,8,13,20,22,42,114,116,156,179,182,185,219,221,222,266,299,],[-6,-4,-7,-8,-2,-5,-128,-3,220,-18,-9,-24,-201,260,-129,-204,-205,]),'ELSE':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,94,110,114,123,143,151,152,153,195,199,201,204,209,210,211,212,213,214,222,245,250,252,256,287,290,294,314,315,316,332,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-151,-128,-191,-121,-149,217,-127,-152,-180,-62,-192,255,-96,-116,-109,-85,-150,-129,-181,-82,-91,255,-65,-88,217,-83,-93,-89,-94,]),'TO':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,280,281,282,287,290,308,312,314,316,329,330,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-96,-116,-109,-85,-181,-82,-174,-170,309,-65,-88,309,331,-83,-89,-55,-171,]),'FI':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,94,110,114,123,143,151,152,153,195,199,201,204,210,211,212,213,214,216,217,222,245,250,254,258,287,290,291,292,294,314,316,318,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-151,-128,-191,-121,-149,215,-127,-152,-180,-62,-192,-96,-116,-109,-85,-150,257,-153,-129,-181,-82,290,-154,-65,-88,-92,316,-155,-83,-89,-156,]),'LOWER':([0,5,8,13,16,17,20,22,31,37,42,44,45,46,51,53,64,75,81,83,86,87,88,89,90,91,92,93,95,109,110,112,114,115,116,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,151,156,161,179,182,185,193,195,196,200,202,203,208,214,217,218,219,221,222,225,230,231,232,235,240,243,251,253,255,258,266,293,299,301,305,306,309,311,331,],[43,-6,-4,-7,43,43,-8,-2,43,43,-5,43,43,43,-122,-123,43,43,43,43,-142,-143,-145,-144,-140,-141,-146,43,43,43,-151,43,-128,43,-3,43,-106,-105,-97,-101,-107,43,-100,-99,-98,-104,-102,-103,-119,43,-117,-118,-114,-111,-110,-112,-113,43,43,43,43,-18,-9,-24,43,-152,43,43,43,43,43,43,43,43,-201,43,-129,43,43,43,43,43,43,43,43,43,43,43,-204,43,-205,43,43,43,43,43,43,]),'DOWN':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,94,123,143,153,190,192,199,201,204,210,211,212,213,245,250,280,281,282,287,290,308,314,316,329,330,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,242,-169,-180,-62,-192,-96,-116,-109,-85,-181,-82,-174,-170,312,-65,-88,312,-83,-89,-55,-171,]),'STRCAT':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,67,68,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-124,-79,-125,-69,-126,-108,-120,144,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,144,-116,-109,-85,-181,-82,-56,-65,-83,]),'DIVCREASE':([4,10,11,21,23,27,29,33,35,79,94,123,199,201,204,245,287,],[-179,-60,-178,-57,88,-59,-17,-58,-56,-56,-61,-191,-180,-62,-192,-181,-65,]),'DECREASE':([4,10,11,21,23,27,29,33,35,79,94,123,199,201,204,245,287,],[-179,-60,-178,-57,87,-59,-17,-58,-56,-56,-61,-191,-180,-62,-192,-181,-65,]),'CCONST':([16,17,44,45,46,51,53,64,75,81,86,87,88,89,90,91,92,93,112,115,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[68,68,68,68,68,-122,-123,68,68,68,-142,-143,-145,-144,-140,-141,-146,68,68,68,68,-106,-105,-97,-101,-107,68,-100,-99,-98,-104,-102,-103,-119,68,-117,-118,-114,-111,-110,-112,-113,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'PLUS':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,67,68,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-124,-79,-125,-69,-126,-108,-120,147,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,147,-116,-109,-85,-181,-82,-56,-65,-83,]),'RBRACKET':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,94,118,120,123,143,153,160,165,168,171,174,175,177,199,201,204,205,206,210,211,212,213,245,246,247,248,250,273,274,275,276,278,287,288,290,302,303,314,316,322,325,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,-86,-124,-79,-87,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-63,201,-191,-121,-127,-37,-35,-38,-32,-33,-36,-34,-180,-62,-192,-55,250,-96,-116,-109,-85,-181,-44,287,-64,-82,-52,-50,-53,304,307,-65,314,-88,-39,-40,-83,-89,-42,-51,]),'INT':([29,96,97,100,162,184,229,232,241,263,285,300,304,305,],[-17,175,-15,175,175,175,-16,175,175,175,175,175,175,175,]),'ARROW':([4,10,11,16,17,21,23,27,29,33,35,44,45,46,51,53,60,64,67,75,79,81,86,87,88,89,90,91,92,93,94,112,115,123,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,153,161,199,200,201,202,203,204,208,218,225,230,231,232,235,240,245,251,253,255,277,287,293,301,305,306,309,311,331,],[-179,-60,-178,83,83,-57,94,-59,-17,-58,-56,83,83,83,-122,-123,-60,83,94,83,-56,83,-142,-143,-145,-144,-140,-141,-146,83,-61,83,83,-191,83,-106,-105,-97,-101,-107,83,-100,-99,-98,-104,-102,-103,-119,83,-117,-118,-114,-111,-110,-112,-113,83,94,83,-180,83,-62,83,83,-192,83,83,83,83,83,83,83,83,-181,83,83,83,-56,-65,83,83,83,83,83,83,83,]),'ARRAY':([29,96,97,100,162,184,229,263,300,304,],[-17,176,-15,176,176,176,-16,176,176,176,]),'LPAREN':([2,6,12,16,17,18,19,29,34,35,36,40,43,44,45,46,51,53,64,75,79,81,86,87,88,89,90,91,92,93,112,115,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,158,160,161,165,168,170,171,173,174,175,177,200,202,203,208,218,225,230,231,232,235,240,251,253,255,267,273,277,283,284,293,301,302,303,305,306,309,311,313,331,],[-196,46,-200,81,81,-194,-195,-17,-199,115,-198,-193,-197,81,81,81,-122,-123,81,81,115,81,-142,-143,-145,-144,-140,-141,-146,81,81,81,81,-106,-105,-97,-101,-107,81,-100,-99,-98,-104,-102,-103,-119,81,-117,-118,-114,-111,-110,-112,-113,81,223,-37,81,-35,-38,230,-32,231,-33,-36,-34,81,81,81,81,81,81,81,81,81,81,81,81,81,81,300,231,306,230,231,81,81,-39,-40,81,81,81,81,231,81,]),'DIFF':([4,11,21,27,29,33,49,50,54,55,56,57,58,60,61,62,63,65,66,67,68,70,71,72,73,74,76,77,78,79,80,94,123,143,153,199,201,204,210,211,212,213,245,250,277,287,314,],[-179,-178,-57,-59,-17,-58,-73,-76,-70,-78,-67,-68,-72,-60,-115,-81,-74,-75,137,-124,-79,-125,-69,-126,-108,-120,-95,-71,-80,-56,-77,-61,-191,-121,-127,-180,-62,-192,-96,-116,-109,-85,-181,-82,-56,-65,-83,]),'RETURN':([0,5,8,13,20,22,31,37,42,95,109,110,114,116,151,156,179,182,185,193,195,196,214,217,219,221,222,243,258,266,299,],[44,-6,-4,-7,-8,-2,44,44,-5,44,44,-151,-128,-3,44,44,-18,-9,-24,44,-152,44,44,44,-201,44,-129,44,44,-204,-205,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'if_action':([0,31,37,95,109,151,156,193,196,214,217,221,243,258,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'operand2':([16,17,44,45,46,64,81,93,112,115,125,132,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[73,73,73,73,73,73,73,73,73,73,73,73,212,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'arithmetic_additive_operator':([76,210,],[146,146,]),'element_mode':([304,],[324,]),'synonym_definition':([25,98,],[99,180,]),'builtin_name':([0,16,17,31,37,44,45,46,64,75,81,83,93,95,109,112,115,125,132,140,149,151,156,161,193,196,200,202,203,208,214,217,218,221,225,230,231,232,235,240,243,251,253,255,258,293,301,305,306,309,311,331,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'formal_parameter_list':([223,],[261,]),'while_control':([31,187,],[107,239,]),'mode_name':([96,100,162,184,263,300,304,],[164,164,164,164,164,164,164,]),'expression':([16,17,44,45,46,64,81,93,112,115,125,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[52,84,84,118,121,52,150,154,52,121,205,226,246,248,121,252,52,226,269,269,269,279,280,246,52,291,52,246,269,326,280,329,280,]),'string_mode':([96,100,162,184,263,300,304,],[172,172,172,172,172,172,172,]),'discrete_range_mode':([96,100,162,184,232,241,263,285,300,304,305,],[165,165,165,165,165,165,165,165,165,165,165,]),'index_mode':([232,305,],[274,325,]),'reference_mode':([96,100,162,184,263,300,304,],[166,166,166,166,166,166,166,]),'control_part':([31,],[108,]),'value_array_element':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'call_action':([0,16,17,31,37,44,45,46,64,75,81,83,93,95,109,112,115,125,132,140,149,151,156,161,193,196,200,202,203,208,214,217,218,221,225,230,231,232,235,240,243,251,253,255,258,293,301,305,306,309,311,331,],[10,60,60,10,10,60,60,60,60,60,60,60,60,10,10,60,60,60,60,60,60,10,10,60,10,10,60,60,60,60,10,10,60,10,60,60,60,60,60,60,10,60,60,60,10,60,60,60,60,60,60,60,]),'procedure_call':([0,16,17,31,37,44,45,46,64,75,81,83,93,95,109,112,115,125,132,140,149,151,156,161,193,196,200,202,203,208,214,217,218,221,225,230,231,232,235,240,243,251,253,255,258,293,301,305,306,309,311,331,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'integer_expression':([125,311,],[206,330,]),'boolean_literal':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'iteration':([106,],[191,]),'parameter_list':([46,115,306,],[122,198,198,]),'operand3':([16,17,44,45,46,64,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[61,61,61,61,61,61,61,61,61,61,61,61,211,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'do_action':([0,31,37,95,109,151,156,193,196,214,217,221,243,258,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'declaration_list':([26,],[101,]),'synonym_statement':([0,37,156,221,],[42,42,42,42,]),'result_spec':([224,],[265,]),'declaration':([26,183,],[102,236,]),'operand0':([16,17,44,45,46,64,81,93,112,115,125,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'parenthesis_gambiarra':([158,],[224,]),'result_action':([0,31,37,95,109,151,156,193,196,214,217,221,243,258,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'discrete_expression':([240,309,331,],[281,328,335,]),'label_id':([0,31,37,109,151,156,193,214,217,221,243,258,],[24,111,24,111,111,24,111,111,111,24,111,111,]),'relational_operator':([66,],[129,]),'empty_literal':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'value_array_slice':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'parameter':([46,115,203,306,],[124,124,249,124,]),'newmode_list':([30,],[105,]),'step_value':([282,],[308,]),'array_slice':([0,16,17,31,37,44,45,46,64,75,81,83,93,95,109,112,115,125,132,140,149,151,156,161,193,196,200,202,203,208,214,217,218,221,225,230,231,232,235,240,243,251,253,255,258,293,301,305,306,309,311,331,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'exit_action':([0,31,37,95,109,151,156,193,196,214,217,221,243,258,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'action':([0,31,37,95,109,151,156,193,196,214,217,221,243,258,],[32,32,32,157,32,32,32,32,157,32,32,32,32,32,]),'assigning_operator':([23,],[93,]),'character_string_literal':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'operand1':([16,17,44,45,46,64,81,93,112,115,125,132,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[76,76,76,76,76,76,76,76,76,76,76,210,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'formal_parameter':([223,296,],[262,319,]),'range_enumeration':([106,],[189,]),'string_concatenation_operator':([76,210,],[145,145,]),'closed_dyadic_operator':([23,],[91,]),'operator1':([66,],[132,]),'statement_list':([0,156,],[37,221,]),'else_clause':([152,294,],[216,318,]),'bracketed_action':([0,31,37,95,109,151,156,193,196,214,217,221,243,258,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'boolean_mode':([96,100,162,184,232,241,263,285,300,304,305,],[174,174,174,174,174,174,174,174,174,174,174,]),'else_expression':([209,256,],[254,292,]),'assignment_action':([0,31,37,95,109,151,156,193,196,214,217,221,243,258,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'operator2':([76,210,],[149,149,]),'loop_counter':([106,],[190,]),'procedure_definition':([95,],[155,]),'builtin_call':([0,16,17,31,37,44,45,46,64,75,81,83,93,95,109,112,115,125,132,140,149,151,156,161,193,196,200,202,203,208,214,217,218,221,225,230,231,232,235,240,243,251,253,255,258,293,301,305,306,309,311,331,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'parameter_spec':([263,],[297,]),'newmode_statement':([0,37,156,221,],[5,5,5,5,]),'parenthesized_expression':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'composite_mode':([96,100,162,184,263,300,304,],[163,163,163,163,163,163,163,]),'mode':([96,100,162,184,263,300,304,],[159,181,228,237,298,321,323,]),'array_location':([0,16,17,31,37,44,45,46,64,75,81,83,93,95,109,112,115,125,132,140,149,151,156,161,193,196,200,202,203,208,214,217,218,221,225,230,231,232,235,240,243,251,253,255,258,293,301,305,306,309,311,331,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'declaration_statement':([0,37,156,221,],[8,8,8,8,]),'exit_label_id':([9,],[47,]),'location':([0,16,17,31,37,44,45,46,64,75,81,83,93,95,109,112,115,125,132,140,149,151,156,161,193,196,200,202,203,208,214,217,218,221,225,230,231,232,235,240,243,251,253,255,258,293,301,305,306,309,311,331,],[23,67,67,23,23,67,67,67,67,67,67,153,67,23,23,67,67,67,67,67,67,23,23,67,23,23,67,67,67,67,23,23,67,23,67,67,67,67,67,67,23,67,67,67,23,67,67,67,67,67,67,67,]),'literal':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'formal_procedure_head':([95,],[156,]),'array_primitive_value':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'arithmetic_multiplicative_operator':([73,212,],[140,140,]),'end_value':([282,308,],[310,327,]),'constant_expression':([161,225,],[227,268,]),'character_literal':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'program':([0,],[14,]),'integer_mode':([96,100,162,184,232,241,263,285,300,304,305,],[171,171,171,171,171,171,171,171,171,171,171,]),'return_action':([0,31,37,95,109,151,156,193,196,214,217,221,243,258,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'action_statement_list':([31,151,193,217,],[109,214,243,258,]),'discrete_mode':([96,100,162,184,232,241,263,285,300,304,305,],[173,173,173,173,273,284,173,313,173,173,273,]),'character_mode':([96,100,162,184,232,241,263,285,300,304,305,],[177,177,177,177,177,177,177,177,177,177,177,]),'action_statement':([0,31,37,109,151,156,193,214,217,221,243,258,],[20,110,20,195,110,20,110,195,110,20,195,195,]),'dereferenced_reference':([0,16,17,31,37,44,45,46,64,75,81,83,93,95,109,112,115,125,132,140,149,151,156,161,193,196,200,202,203,208,214,217,218,221,225,230,231,232,235,240,243,251,253,255,258,293,301,305,306,309,311,331,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'step_enumeration':([106,],[188,]),'statement':([0,37,156,221,],[22,116,22,116,]),'mode_definition':([30,186,],[104,238,]),'conditional_expression':([16,17,44,45,46,64,81,93,112,115,125,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'referenced_location':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'lower_bound':([45,125,230,231,232,305,306,],[119,207,270,270,270,270,270,]),'elsif_expression':([209,],[256,]),'result':([17,44,],[85,117,]),'then_expression':([126,289,317,],[209,315,332,]),'initialization':([181,],[234,]),'upper_bound':([200,251,301,],[247,288,322,]),'primitive_value':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'membership_operator':([66,],[135,]),'literal_range':([230,231,232,305,306,],[271,272,275,275,271,]),'monadic_operator':([16,17,44,45,46,64,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'index_mode_list':([232,],[276,]),'array_element':([0,16,17,31,37,44,45,46,64,75,81,83,93,95,109,112,115,125,132,140,149,151,156,161,193,196,200,202,203,208,214,217,218,221,225,230,231,232,235,240,243,251,253,255,258,293,301,305,306,309,311,331,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'for_control':([106,],[187,]),'identifier_list':([25,26,30,98,183,186,223,296,],[96,100,103,96,100,103,263,263,]),'integer_literal':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'then_clause':([82,259,],[152,294,]),'synonym_list':([25,],[98,]),'array_mode':([96,100,162,184,263,300,304,],[169,169,169,169,169,169,169,]),'start_value':([240,],[282,]),'identifier':([0,9,16,17,25,26,30,31,37,44,45,46,64,75,81,83,93,95,96,98,100,106,109,112,115,125,132,140,149,151,156,161,162,167,183,184,186,193,196,200,202,203,208,214,217,218,221,223,225,230,231,232,235,240,241,243,251,253,255,258,263,285,293,296,300,301,304,305,306,309,311,331,],[35,48,79,79,97,97,97,35,35,79,79,79,79,79,79,79,79,79,170,97,170,192,35,79,79,79,79,79,79,35,35,79,170,229,97,170,97,35,79,79,79,79,79,35,35,79,35,97,79,79,79,277,79,79,283,35,79,79,79,35,170,283,79,97,170,79,170,277,79,79,79,79,]),'procedure_statement':([0,37,156,221,],[13,13,13,13,]),'operand4':([16,17,44,45,46,64,75,81,93,112,115,125,132,140,149,161,200,202,203,208,218,225,230,231,232,235,240,251,253,255,293,301,305,306,309,311,331,],[74,74,74,74,74,74,143,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'expression_list':([45,],[120,]),'boolean_expression':([16,64,112,218,253,293,],[82,126,197,259,289,317,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list ASSIGN constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode ASSIGN constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',114),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET ICONST RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',392),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',398),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',404),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',410),
  ('expression -> operand0','expression',1,'p_expression','parser.py',417),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',418),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',424),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',425),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',434),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',440),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',446),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',452),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',453),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',462),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',463),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',470),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',471),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',483),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',488),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',493),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',494),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',502),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',509),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',515),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',519),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',520),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',529),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',534),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',535),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',544),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',550),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',551),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',556),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',561),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',562),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',571),
  ('action -> bracketed_action','action',1,'p_action','parser.py',577),
  ('action -> assignment_action','action',1,'p_action','parser.py',578),
  ('action -> call_action','action',1,'p_action','parser.py',579),
  ('action -> exit_action','action',1,'p_action','parser.py',580),
  ('action -> return_action','action',1,'p_action','parser.py',581),
  ('action -> result_action','action',1,'p_action','parser.py',582),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',588),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',593),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',613),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',622),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',627),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',628),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',637),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',638),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',647),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',648),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',655),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',657),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',658),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',673),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',674),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',675),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',676),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',691),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',692),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',701),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',707),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',712),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',713),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',720),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',725),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',730),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',735),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',736),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',744),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',749),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',750),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',757),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',761),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',762),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',767),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',768),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',775),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',776),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',783),
  ('exit_action -> EXIT exit_label_id','exit_action',2,'p_exit_action','parser.py',791),
  ('exit_label_id -> identifier','exit_label_id',1,'p_exit_label_id','parser.py',795),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',799),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',800),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',807),
  ('result -> expression','result',1,'p_result','parser.py',811),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',816),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',817),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',826),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',827),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',828),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',829),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',830),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',831),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',835),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',839),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',847),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',848),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',856),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',857),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',864),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',865),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',872),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',876),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',877),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',889),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',890),
]
