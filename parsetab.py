
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST FALSE LENGTH FOR END SYN INT READ IN FI RESULT ELSE TRUE ASC NUM ARRAY DOWN CHARS BOOL DCL OD RETURNS BY PRINT WHILE PROC TO DO RETURN LOWER TYPE ABS IF EXIT NULL CHAR ELSIF REF UPPER LOC THENprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list ASSIGN constant_expression\n                              | identifier_list mode ASSIGN constant_expressionconstant_expression : expressionnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET ICONST RBRACKETarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT exit_label_idexit_label_id :  identifierreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'$end':([5,6,16,18,21,32,36,39,47,55,125,147,150,200,203,],[-7,-1,-8,0,-2,-5,-4,-6,-3,-128,-18,-9,-24,-201,-129,]),'MULCREASE':([7,13,14,24,26,34,38,40,44,70,99,155,198,208,224,245,293,],[-178,-58,-59,-56,67,-179,-57,-60,-17,-61,-56,-180,-191,-62,-181,-192,-65,]),'TRUE':([29,37,41,46,61,62,63,64,65,66,67,68,69,74,97,101,104,106,109,114,137,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[85,85,85,85,85,-145,-140,85,-141,-143,-144,-142,-146,85,85,-122,-123,85,85,85,85,85,-118,-119,-117,85,-114,-111,-112,-113,-110,85,-103,-105,-99,-97,-100,-106,-101,-102,85,-104,-98,-107,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'INCREASE':([7,13,14,24,26,34,38,40,44,70,99,155,198,208,224,245,293,],[-178,-58,-59,-56,68,-179,-57,-60,-17,-61,-56,-180,-191,-62,-181,-192,-65,]),'OR':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,185,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-56,-82,-65,-83,]),'RESULT':([0,5,6,16,21,28,32,36,39,45,47,55,75,77,121,125,147,150,158,159,162,195,200,203,205,226,242,244,246,285,287,],[41,-7,41,-8,-2,41,-5,-4,-6,41,-3,-128,41,-151,41,-18,-9,-24,41,41,-152,41,-201,-129,41,41,41,41,-204,41,-205,]),'AND':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,183,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-56,-82,-65,-83,]),'ABS':([0,5,6,16,21,28,29,32,36,37,39,41,45,46,47,55,61,62,63,64,65,66,67,68,69,74,75,77,97,101,104,106,108,109,114,121,125,137,147,150,158,159,162,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,195,200,203,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,246,277,282,283,285,287,294,296,297,303,304,309,322,],[4,-7,4,-8,-2,4,4,-5,-4,4,-6,4,4,4,-3,-128,4,-145,-140,4,-141,-143,-144,-142,-146,4,4,-151,4,-122,-123,4,4,4,4,4,-18,4,-9,-24,4,4,-152,4,-118,-119,-117,4,-114,-111,-112,-113,-110,4,-103,-105,-99,-97,-100,-106,-101,-102,4,-104,-98,-107,4,-201,-129,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-204,4,4,4,4,-205,4,4,4,4,4,4,4,]),'GREATER':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,181,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-56,-82,-65,-83,]),'ID':([0,5,6,7,9,13,14,16,17,21,22,23,28,29,32,34,36,37,38,39,41,44,45,46,47,48,49,50,51,53,55,61,62,63,64,65,66,67,68,69,70,74,75,77,78,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,109,110,111,112,113,114,121,125,126,127,130,137,147,148,150,151,152,155,158,159,162,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,200,202,203,205,206,207,208,209,211,212,213,214,215,216,219,223,224,226,228,229,231,232,236,238,239,242,243,244,245,246,252,260,271,277,278,282,283,285,287,288,289,293,294,296,297,298,303,304,309,310,322,327,328,],[44,-7,44,-178,44,-58,-59,-8,44,-2,44,44,44,44,-5,-179,-4,44,-57,-6,44,-17,44,44,-3,44,-15,-19,44,44,-128,44,-145,-140,44,-141,-143,-144,-142,-146,-61,44,44,-151,44,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,44,-86,-56,-115,-122,-68,-71,-123,-77,44,44,44,-125,-60,-80,-81,44,44,-18,-20,44,44,44,-9,44,-24,44,44,-180,44,44,-152,44,-118,-119,-117,44,-114,-111,-112,-113,-110,44,-103,-105,-99,-97,-100,-106,-101,-102,44,-104,-98,-107,44,-127,-121,-191,-201,44,-129,44,44,44,-62,-16,44,-23,-21,44,44,44,44,44,-181,44,44,44,-116,-109,44,-96,-85,44,44,44,-192,-204,44,-22,44,44,-82,44,44,44,-205,44,44,-65,44,44,44,44,44,44,44,-88,44,-83,-89,]),'MINUS':([7,13,14,29,34,37,38,41,44,46,61,62,63,64,65,66,67,68,69,70,74,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,97,99,100,102,103,105,106,110,111,112,113,114,137,155,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,196,197,198,206,207,208,211,214,215,216,219,223,224,228,231,232,236,238,239,243,245,263,277,278,282,283,293,294,296,297,303,304,309,322,327,],[-178,-58,-59,101,-179,101,-57,101,-17,101,101,-145,-140,101,-141,-143,-144,-142,-146,-61,101,-126,-120,-124,-108,-74,-78,-73,-72,177,-79,-75,-70,-76,-67,-69,101,-56,-115,-68,-71,-77,101,-125,-60,-80,-81,101,101,-180,101,-118,-119,-117,101,-114,-111,-112,-113,-110,101,-103,-105,-99,-97,-100,-106,-101,-102,101,-104,-98,-107,-127,-121,-191,101,101,-62,101,101,101,101,101,101,-181,101,-116,-109,101,177,-85,101,-192,-56,101,-82,101,101,-65,101,101,101,101,101,101,101,-83,]),'MODCREASE':([7,13,14,24,26,34,38,40,44,70,99,155,198,208,224,245,293,],[-178,-58,-59,-56,69,-179,-57,-60,-17,-61,-56,-180,-191,-62,-181,-192,-65,]),'RBRACKET':([7,13,14,34,38,44,70,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,123,124,129,131,133,136,140,141,142,155,196,197,198,208,224,231,232,234,235,238,239,245,254,255,256,261,262,264,265,267,278,293,295,299,307,310,317,319,327,328,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,208,-63,-36,-38,-35,-33,-34,-37,-32,-180,-127,-121,-191,-62,-181,-116,-109,-55,278,-96,-85,-192,293,-44,-64,-50,-53,298,-52,300,-82,-65,-39,-40,327,-88,-42,-51,-83,-89,]),'DIVIDE':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,91,92,93,94,95,96,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,170,-74,-78,-73,-72,-79,-75,-70,-76,-67,-69,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,170,-85,-192,-56,-82,-65,-83,]),'THEN':([7,13,14,34,38,44,70,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,99,100,102,103,105,107,110,111,112,113,155,180,196,197,198,208,224,231,232,238,239,245,278,286,293,310,312,327,328,329,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-87,-108,-74,-78,-73,-90,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,195,-125,-60,-80,-81,-180,236,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-82,195,-65,-88,236,-83,-89,236,]),'IN':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,164,168,196,197,198,208,224,227,231,232,238,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,192,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,229,-169,-127,-121,-191,-62,-181,271,-116,-109,-96,-85,-192,-56,-82,-65,-83,]),'LBRACKET':([3,7,13,14,24,26,34,38,40,44,70,79,81,84,85,86,88,90,91,92,93,94,95,96,99,102,103,105,111,112,113,139,144,155,196,198,208,224,239,245,263,278,293,327,],[46,-178,-58,-59,-56,-66,-179,-57,-60,-17,-61,-84,-66,-74,-78,-73,-72,179,-79,-75,-70,-76,-67,-69,-56,-68,-71,-77,-60,-80,-81,215,217,-180,-66,-191,-62,-181,-85,-192,-56,-82,-65,-83,]),'BY':([7,13,14,34,38,44,70,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,272,273,274,278,293,310,327,328,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-174,-170,303,-82,-65,-88,-83,-89,]),'SEMI':([7,10,11,13,14,19,25,30,31,33,34,37,38,40,43,44,48,50,52,54,56,57,58,59,70,71,73,76,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,115,116,117,118,120,126,128,129,131,132,133,134,135,136,140,141,142,143,145,146,149,155,157,160,161,163,165,166,167,196,197,198,201,204,208,210,212,213,218,220,221,222,224,225,230,231,232,238,239,240,245,247,250,253,260,268,270,272,275,278,284,290,293,295,299,300,301,306,310,320,321,325,326,327,328,333,334,336,],[-178,-137,-131,-58,-59,55,-136,-138,-132,-135,-179,-187,-57,-133,-134,-17,125,-19,147,-10,-185,-186,150,-25,-61,158,-157,-161,-126,-120,-124,-87,-108,-74,-78,-73,-90,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,-188,-190,-189,200,203,-20,-28,-36,-38,-41,-35,-30,-46,-33,-34,-37,-32,-29,-31,-47,-12,-180,-139,-177,-159,-166,-165,-162,-164,-127,-121,-191,246,-202,-62,-45,-23,-21,-11,-13,-26,-27,-181,-158,-163,-116,-109,-96,-85,-147,-192,287,-206,-203,-22,-14,-160,-174,-175,-82,-148,-207,-65,-39,-40,-48,-176,-167,-88,-54,-49,-172,-168,-83,-89,-213,-173,-214,]),'ASSIGN':([7,13,14,24,26,34,38,40,44,49,51,60,70,99,128,129,131,132,133,134,135,136,138,140,141,142,143,145,146,149,155,164,168,198,208,209,210,224,245,293,295,299,300,320,321,],[-178,-58,-59,-56,63,-179,-57,-60,-17,-15,137,152,-61,-56,-28,-36,-38,-41,-35,-30,-46,-33,214,-34,-37,-32,-29,-31,-47,219,-180,228,-169,-191,-62,-16,-45,-181,-192,-65,-39,-40,-48,-54,-49,]),'ARRAY':([44,49,51,53,130,152,209,252,288,298,],[-17,-15,139,139,139,139,-16,139,139,139,]),'CCONST':([29,37,41,46,61,62,63,64,65,66,67,68,69,74,97,101,104,106,109,114,137,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[91,91,91,91,91,-145,-140,91,-141,-143,-144,-142,-146,91,91,-122,-123,91,91,91,91,91,-118,-119,-117,91,-114,-111,-112,-113,-110,91,-103,-105,-99,-97,-100,-106,-101,-102,91,-104,-98,-107,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'LESS':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,182,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-56,-82,-65,-83,]),'SYN':([0,5,6,16,21,32,36,39,47,55,121,125,147,150,200,203,205,246,287,],[9,-7,9,-8,-2,-5,-4,-6,-3,-128,9,-18,-9,-24,-201,-129,9,-204,-205,]),'ICONST':([29,37,41,46,61,62,63,64,65,66,67,68,69,74,97,101,104,106,109,114,137,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,206,207,211,214,215,216,217,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[94,94,94,94,94,-145,-140,94,-141,-143,-144,-142,-146,94,94,-122,-123,94,94,94,94,94,-118,-119,-117,94,-114,-111,-112,-113,-110,94,-103,-105,-99,-97,-100,-106,-101,-102,94,-104,-98,-107,94,94,94,94,94,94,267,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'WHILE':([7,13,14,28,34,38,44,70,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,129,131,133,136,140,141,142,155,163,165,166,167,196,197,198,208,224,231,232,238,239,245,272,275,278,293,295,299,301,306,310,325,326,327,328,334,],[-178,-58,-59,74,-179,-57,-17,-61,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,-36,-38,-35,-33,-34,-37,-32,-180,-166,-165,74,-164,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-174,-175,-82,-65,-39,-40,-176,-167,-88,-172,-168,-83,-89,-173,]),'BOOL':([44,49,51,53,130,152,209,215,229,252,271,288,297,298,],[-17,-15,141,141,141,141,-16,141,141,141,141,141,141,141,]),'REF':([44,49,51,53,130,152,209,252,288,298,],[-17,-15,130,130,130,130,-16,130,130,130,]),'EQUAL':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,187,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-56,-82,-65,-83,]),'DOWN':([7,13,14,34,38,44,70,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,164,168,196,197,198,208,224,231,232,238,239,245,272,273,274,278,293,305,310,323,324,327,328,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,227,-169,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-174,-170,302,-82,-65,302,-88,-55,-171,-83,-89,]),'LENGTH':([0,5,6,16,21,28,29,32,36,37,39,41,45,46,47,55,61,62,63,64,65,66,67,68,69,74,75,77,97,101,104,106,108,109,114,121,125,137,147,150,158,159,162,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,195,200,203,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,246,277,282,283,285,287,294,296,297,303,304,309,322,],[15,-7,15,-8,-2,15,15,-5,-4,15,-6,15,15,15,-3,-128,15,-145,-140,15,-141,-143,-144,-142,-146,15,15,-151,15,-122,-123,15,15,15,15,15,-18,15,-9,-24,15,15,-152,15,-118,-119,-117,15,-114,-111,-112,-113,-110,15,-103,-105,-99,-97,-100,-106,-101,-102,15,-104,-98,-107,15,-201,-129,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-204,15,15,15,15,-205,15,15,15,15,15,15,15,]),'READ':([0,5,6,16,21,28,29,32,36,37,39,41,45,46,47,55,61,62,63,64,65,66,67,68,69,74,75,77,97,101,104,106,108,109,114,121,125,137,147,150,158,159,162,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,195,200,203,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,246,277,282,283,285,287,294,296,297,303,304,309,322,],[12,-7,12,-8,-2,12,12,-5,-4,12,-6,12,12,12,-3,-128,12,-145,-140,12,-141,-143,-144,-142,-146,12,12,-151,12,-122,-123,12,12,12,12,12,-18,12,-9,-24,12,12,-152,12,-118,-119,-117,12,-114,-111,-112,-113,-110,12,-103,-105,-99,-97,-100,-106,-101,-102,12,-104,-98,-107,12,-201,-129,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-204,12,12,12,12,-205,12,12,12,12,12,12,12,]),'LESSEQ':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,186,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-56,-82,-65,-83,]),'ELSIF':([7,13,14,34,38,44,55,70,77,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,162,194,195,196,197,198,203,208,224,231,232,237,238,239,244,245,278,279,280,293,310,313,327,328,330,335,],[-178,-58,-59,-179,-57,-17,-128,-61,-151,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-152,243,-149,-127,-121,-191,-129,-62,-181,-116,-109,283,-96,-85,-150,-192,-82,-91,309,-65,-88,243,-83,-89,-93,-94,]),'ELSE':([7,13,14,34,38,44,55,70,77,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,162,194,195,196,197,198,203,208,224,231,232,237,238,239,244,245,278,279,280,293,310,313,327,328,330,335,],[-178,-58,-59,-179,-57,-17,-128,-61,-151,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-152,242,-149,-127,-121,-191,-129,-62,-181,-116,-109,282,-96,-85,-150,-192,-82,-91,282,-65,-88,242,-83,-89,-93,-94,]),'PRINT':([0,5,6,16,21,28,29,32,36,37,39,41,45,46,47,55,61,62,63,64,65,66,67,68,69,74,75,77,97,101,104,106,108,109,114,121,125,137,147,150,158,159,162,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,195,200,203,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,246,277,282,283,285,287,294,296,297,303,304,309,322,],[1,-7,1,-8,-2,1,1,-5,-4,1,-6,1,1,1,-3,-128,1,-145,-140,1,-141,-143,-144,-142,-146,1,1,-151,1,-122,-123,1,1,1,1,1,-18,1,-9,-24,1,1,-152,1,-118,-119,-117,1,-114,-111,-112,-113,-110,1,-103,-105,-99,-97,-100,-106,-101,-102,1,-104,-98,-107,1,-201,-129,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-204,1,1,1,1,-205,1,1,1,1,1,1,1,]),'DCL':([0,5,6,16,21,32,36,39,47,55,121,125,147,150,200,203,205,246,287,],[17,-7,17,-8,-2,-5,-4,-6,-3,-128,17,-18,-9,-24,-201,-129,17,-204,-205,]),'FALSE':([29,37,41,46,61,62,63,64,65,66,67,68,69,74,97,101,104,106,109,114,137,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[105,105,105,105,105,-145,-140,105,-141,-143,-144,-142,-146,105,105,-122,-123,105,105,105,105,105,-118,-119,-117,105,-114,-111,-112,-113,-110,105,-103,-105,-99,-97,-100,-106,-101,-102,105,-104,-98,-107,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'STRCAT':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-108,-74,-78,-73,-72,174,-79,-75,-70,-76,-67,-69,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,174,-85,-192,-56,-82,-65,-83,]),'NOT':([29,37,41,46,61,62,63,64,65,66,67,68,69,74,97,106,114,137,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[104,104,104,104,104,-145,-140,104,-141,-143,-144,-142,-146,104,104,104,104,104,104,-118,-119,-117,104,-114,-111,-112,-113,-110,104,-103,-105,-99,-97,-100,-106,-101,-102,104,-104,-98,-107,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'ASC':([0,5,6,16,21,28,29,32,36,37,39,41,45,46,47,55,61,62,63,64,65,66,67,68,69,74,75,77,97,101,104,106,108,109,114,121,125,137,147,150,158,159,162,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,195,200,203,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,246,277,282,283,285,287,294,296,297,303,304,309,322,],[20,-7,20,-8,-2,20,20,-5,-4,20,-6,20,20,20,-3,-128,20,-145,-140,20,-141,-143,-144,-142,-146,20,20,-151,20,-122,-123,20,20,20,20,20,-18,20,-9,-24,20,20,-152,20,-118,-119,-117,20,-114,-111,-112,-113,-110,20,-103,-105,-99,-97,-100,-106,-101,-102,20,-104,-98,-107,20,-201,-129,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-204,20,20,20,20,-205,20,20,20,20,20,20,20,]),'LOWER':([0,5,6,16,21,28,29,32,36,37,39,41,45,46,47,55,61,62,63,64,65,66,67,68,69,74,75,77,97,101,104,106,108,109,114,121,125,137,147,150,158,159,162,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,195,200,203,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,246,277,282,283,285,287,294,296,297,303,304,309,322,],[8,-7,8,-8,-2,8,8,-5,-4,8,-6,8,8,8,-3,-128,8,-145,-140,8,-141,-143,-144,-142,-146,8,8,-151,8,-122,-123,8,8,8,8,8,-18,8,-9,-24,8,8,-152,8,-118,-119,-117,8,-114,-111,-112,-113,-110,8,-103,-105,-99,-97,-100,-106,-101,-102,8,-104,-98,-107,8,-201,-129,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-204,8,8,8,8,-205,8,8,8,8,8,8,8,]),'EXIT':([0,5,6,16,21,28,32,36,39,45,47,55,75,77,121,125,147,150,158,159,162,195,200,203,205,226,242,244,246,285,287,],[22,-7,22,-8,-2,22,-5,-4,-6,22,-3,-128,22,-151,22,-18,-9,-24,22,22,-152,22,-201,-129,22,22,22,22,-204,22,-205,]),'TIMES':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,91,92,93,94,95,96,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,172,-74,-78,-73,-72,-79,-75,-70,-76,-67,-69,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,172,-85,-192,-56,-82,-65,-83,]),'RETURNS':([201,250,290,],[248,-206,-207,]),'TYPE':([0,5,6,16,21,32,36,39,47,55,121,125,147,150,200,203,205,246,287,],[23,-7,23,-8,-2,-5,-4,-6,-3,-128,23,-18,-9,-24,-201,-129,23,-204,-205,]),'END':([5,16,21,32,36,39,47,55,121,125,147,150,200,203,205,246,287,],[-7,-8,-2,-5,-4,-6,-3,-128,204,-18,-9,-24,-201,-129,253,-204,-205,]),'DIFF':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,188,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-56,-82,-65,-83,]),'FI':([7,13,14,34,38,44,55,70,77,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,162,194,195,196,197,198,203,208,224,231,232,238,239,241,242,244,245,278,281,285,293,308,310,311,313,327,328,331,],[-178,-58,-59,-179,-57,-17,-128,-61,-151,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-152,240,-149,-127,-121,-191,-129,-62,-181,-116,-109,-96,-85,284,-153,-150,-192,-82,310,-154,-65,328,-88,-92,-155,-83,-89,-156,]),'COMMA':([7,13,14,34,38,44,49,51,52,53,54,58,59,60,70,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,123,124,128,129,131,132,133,134,135,136,140,141,142,143,145,146,149,153,154,155,156,196,197,198,199,208,209,210,218,220,221,222,224,231,232,238,239,245,249,251,252,255,256,261,262,264,265,268,269,278,291,292,293,295,299,300,310,315,316,317,318,319,320,321,327,328,],[-178,-58,-59,-179,-57,-17,-15,127,148,127,-10,151,-25,127,-61,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,207,-63,-28,-36,-38,-41,-35,-30,-46,-33,-34,-37,-32,-29,-31,-47,-12,-184,-182,-180,223,-127,-121,-191,223,-62,-16,-45,-11,-13,-26,-27,-181,-116,-109,-96,-85,-192,-208,289,127,-44,-64,-50,-53,297,-52,-14,-183,-82,-210,-211,-65,-39,-40,-48,-88,-209,-212,-42,-184,-51,-54,-49,-83,-89,]),'COLON':([2,7,13,14,24,34,38,44,70,72,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,122,124,155,196,197,198,208,224,231,232,233,234,238,239,245,257,258,263,278,293,310,318,327,328,],[45,-178,-58,-59,-130,-179,-57,-17,-61,159,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,206,-43,-180,-127,-121,-191,-62,-181,-116,-109,277,-43,-96,-85,-192,294,-43,-56,-82,-65,-88,-43,-83,-89,]),'UPPER':([0,5,6,16,21,28,29,32,36,37,39,41,45,46,47,55,61,62,63,64,65,66,67,68,69,74,75,77,97,101,104,106,108,109,114,121,125,137,147,150,158,159,162,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,195,200,203,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,246,277,282,283,285,287,294,296,297,303,304,309,322,],[27,-7,27,-8,-2,27,27,-5,-4,27,-6,27,27,27,-3,-128,27,-145,-140,27,-141,-143,-144,-142,-146,27,27,-151,27,-122,-123,27,27,27,27,27,-18,27,-9,-24,27,27,-152,27,-118,-119,-117,27,-114,-111,-112,-113,-110,27,-103,-105,-99,-97,-100,-106,-101,-102,27,-104,-98,-107,27,-201,-129,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-204,27,27,27,27,-205,27,27,27,27,27,27,27,]),'DO':([0,5,6,16,21,28,32,36,39,45,47,55,75,77,121,125,147,150,158,159,162,195,200,203,205,226,242,244,246,285,287,],[28,-7,28,-8,-2,28,-5,-4,-6,28,-3,-128,28,-151,28,-18,-9,-24,28,28,-152,28,-201,-129,28,28,28,28,-204,28,-205,]),'INT':([44,49,51,53,130,152,209,215,229,252,271,288,297,298,],[-17,-15,129,129,129,129,-16,129,129,129,129,129,129,129,]),'IF':([0,5,6,16,21,28,29,32,36,37,39,41,45,46,47,55,61,62,63,64,65,66,67,68,69,74,75,77,97,106,114,121,125,137,147,150,158,159,162,179,195,200,203,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,246,277,282,283,285,287,294,296,297,303,304,309,322,],[29,-7,29,-8,-2,29,97,-5,-4,97,-6,97,29,97,-3,-128,97,-145,-140,97,-141,-143,-144,-142,-146,97,29,-151,97,97,97,29,-18,97,-9,-24,29,29,-152,97,29,-201,-129,29,97,97,97,97,97,97,97,97,29,97,97,29,97,29,-204,97,97,97,29,-205,97,97,97,97,97,97,97,]),'DIVCREASE':([7,13,14,24,26,34,38,40,44,70,99,155,198,208,224,245,293,],[-178,-58,-59,-56,62,-179,-57,-60,-17,-61,-56,-180,-191,-62,-181,-192,-65,]),'CHAR':([44,49,51,53,130,152,209,215,229,252,271,288,297,298,],[-17,-15,131,131,131,131,-16,131,131,131,131,131,131,131,]),'DECREASE':([7,13,14,24,26,34,38,40,44,70,99,155,198,208,224,245,293,],[-178,-58,-59,-56,66,-179,-57,-60,-17,-61,-56,-180,-191,-62,-181,-192,-65,]),'MOD':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,91,92,93,94,95,96,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,171,-74,-78,-73,-72,-79,-75,-70,-76,-67,-69,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,171,-85,-192,-56,-82,-65,-83,]),'RPAREN':([7,13,14,34,38,44,61,70,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,114,128,129,131,132,133,134,135,136,140,141,142,143,145,146,153,154,155,156,193,196,197,198,199,202,208,210,224,231,232,238,239,245,249,251,255,259,266,269,278,291,292,293,295,296,299,300,310,314,315,316,317,318,320,321,327,328,332,],[-178,-58,-59,-179,-57,-17,155,-61,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,198,-28,-36,-38,-41,-35,-30,-46,-33,-34,-37,-32,-29,-31,-47,-184,-182,-180,224,239,-127,-121,-191,245,250,-62,-45,-181,-116,-109,-96,-85,-192,-208,290,-44,295,299,-183,-82,-210,-211,-65,-39,155,-40,-48,-88,333,-209,-212,-42,-184,-54,-49,-83,-89,336,]),'FOR':([28,],[78,]),'LPAREN':([1,4,8,12,15,20,24,27,29,35,37,41,42,44,46,61,62,63,64,65,66,67,68,69,74,97,99,101,104,106,109,114,119,129,131,132,133,136,137,140,141,142,143,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,206,207,211,214,215,216,219,223,228,236,243,248,263,265,275,276,277,282,283,294,295,296,297,299,301,303,304,309,322,],[-200,-193,-197,-199,-198,-194,61,-196,106,114,106,106,-195,-17,106,106,-145,-140,106,-141,-143,-144,-142,-146,106,106,61,-122,-123,106,106,106,202,-36,-38,211,-35,-33,106,-34,-37,-32,216,106,-118,-119,-117,106,-114,-111,-112,-113,-110,106,-103,-105,-99,-97,-100,-106,-101,-102,106,-104,-98,-107,106,106,106,106,106,106,106,106,106,106,106,288,296,216,216,211,106,106,106,106,-39,106,106,-40,216,106,106,106,106,]),'ARROW':([7,13,14,24,26,29,34,37,38,40,41,44,46,61,62,63,64,65,66,67,68,69,70,74,81,97,99,101,104,106,109,111,114,137,155,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,196,198,206,207,208,211,214,215,216,219,223,224,228,236,243,245,263,277,282,283,293,294,296,297,303,304,309,322,],[-178,-58,-59,-56,70,108,-179,108,-57,-60,108,-17,108,108,-145,-140,108,-141,-143,-144,-142,-146,-61,108,70,108,-56,-122,-123,108,108,-60,108,108,-180,108,-118,-119,-117,108,-114,-111,-112,-113,-110,108,-103,-105,-99,-97,-100,-106,-101,-102,108,-104,-98,-107,70,-191,108,108,-62,108,108,108,108,108,108,-181,108,108,108,-192,-56,108,108,108,-65,108,108,108,108,108,108,108,]),'PROC':([45,],[119,]),'PLUS':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-108,-74,-78,-73,-72,176,-79,-75,-70,-76,-67,-69,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,176,-85,-192,-56,-82,-65,-83,]),'LOC':([44,128,129,131,132,133,134,135,136,140,141,142,143,145,146,210,292,295,299,300,314,320,321,],[-17,-28,-36,-38,-41,-35,-30,-46,-33,-34,-37,-32,-29,-31,-47,-45,316,-39,-40,-48,332,-54,-49,]),'OD':([28,55,75,77,158,162,203,226,],[73,-128,161,-151,225,-152,-129,270,]),'RETURN':([0,5,6,16,21,28,32,36,39,45,47,55,75,77,121,125,147,150,158,159,162,195,200,203,205,226,242,244,246,285,287,],[37,-7,37,-8,-2,37,-5,-4,-6,37,-3,-128,37,-151,37,-18,-9,-24,37,37,-152,37,-201,-129,37,37,37,37,-204,37,-205,]),'CHARS':([44,49,51,53,130,152,209,252,288,298,],[-17,-15,144,144,144,144,-16,144,144,144,]),'TO':([7,13,14,34,38,44,70,79,80,81,82,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,272,273,274,278,293,302,305,310,323,324,327,328,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-87,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,-86,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-174,-170,304,-82,-65,322,304,-88,-55,-171,-83,-89,]),'GREATEREQ':([7,13,14,34,38,44,70,79,80,81,83,84,85,86,88,89,91,92,93,94,95,96,98,99,100,102,103,105,110,111,112,113,155,196,197,198,208,224,231,232,238,239,245,263,278,293,327,],[-178,-58,-59,-179,-57,-17,-61,-126,-120,-124,-108,-74,-78,-73,-72,-95,-79,-75,-70,-76,-67,-69,190,-56,-115,-68,-71,-77,-125,-60,-80,-81,-180,-127,-121,-191,-62,-181,-116,-109,-96,-85,-192,-56,-82,-65,-83,]),'NULL':([29,37,41,46,61,62,63,64,65,66,67,68,69,74,97,101,104,106,109,114,137,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[112,112,112,112,112,-145,-140,112,-141,-143,-144,-142,-146,112,112,-122,-123,112,112,112,112,112,-118,-119,-117,112,-114,-111,-112,-113,-110,112,-103,-105,-99,-97,-100,-106,-101,-102,112,-104,-98,-107,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'SCONST':([29,37,41,46,61,62,63,64,65,66,67,68,69,74,97,101,104,106,109,114,137,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[113,113,113,113,113,-145,-140,113,-141,-143,-144,-142,-146,113,113,-122,-123,113,113,113,113,113,-118,-119,-117,113,-114,-111,-112,-113,-110,113,-103,-105,-99,-97,-100,-106,-101,-102,113,-104,-98,-107,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'NUM':([0,5,6,16,21,28,29,32,36,37,39,41,45,46,47,55,61,62,63,64,65,66,67,68,69,74,75,77,97,101,104,106,108,109,114,121,125,137,147,150,158,159,162,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,195,200,203,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,246,277,282,283,285,287,294,296,297,303,304,309,322,],[42,-7,42,-8,-2,42,42,-5,-4,42,-6,42,42,42,-3,-128,42,-145,-140,42,-141,-143,-144,-142,-146,42,42,-151,42,-122,-123,42,42,42,42,42,-18,42,-9,-24,42,42,-152,42,-118,-119,-117,42,-114,-111,-112,-113,-110,42,-103,-105,-99,-97,-100,-106,-101,-102,42,-104,-98,-107,42,-201,-129,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-204,42,42,42,42,-205,42,42,42,42,42,42,42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameter_spec':([252,],[291,]),'newmode_list':([23,],[58,]),'mode_definition':([23,151,],[59,221,]),'mode_name':([51,53,130,152,252,288,298,],[128,128,128,128,128,128,128,]),'lower_bound':([46,179,211,215,216,296,297,],[122,233,257,257,257,257,257,]),'else_clause':([194,313,],[241,331,]),'label_id':([0,6,28,75,121,158,195,205,226,242,244,285,],[2,2,72,72,2,72,72,2,72,72,72,72,]),'operand4':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[80,80,80,80,80,80,80,80,80,197,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'arithmetic_multiplicative_operator':([83,232,],[169,169,]),'referenced_location':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'iteration':([78,],[167,]),'conditional_expression':([29,37,41,46,61,64,74,97,106,114,137,179,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'expression_list':([46,],[123,]),'character_mode':([51,53,130,152,215,229,252,271,288,297,298,],[140,140,140,140,140,140,140,140,140,140,140,]),'discrete_expression':([228,304,322,],[273,325,334,]),'operator1':([98,],[189,]),'operand2':([29,37,41,46,61,64,74,97,106,114,137,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[83,83,83,83,83,83,83,83,83,83,83,232,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'procedure_call':([0,6,28,29,37,41,45,46,61,64,74,75,97,106,108,109,114,121,137,158,159,169,173,179,189,195,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,277,282,283,285,294,296,297,303,304,309,322,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'synonym_list':([9,],[48,]),'initialization':([149,],[220,]),'control_part':([28,],[71,]),'constant_expression':([137,214,],[213,260,]),'operand1':([29,37,41,46,61,64,74,97,106,114,137,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[89,89,89,89,89,89,89,89,89,89,89,89,238,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'array_primitive_value':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'identifier_list':([9,17,23,48,148,151,202,289,],[51,53,60,51,53,60,252,252,]),'arithmetic_additive_operator':([89,238,],[178,178,]),'action_statement_list':([28,158,195,242,],[75,226,244,285,]),'bracketed_action':([0,6,28,45,75,121,158,159,195,205,226,242,244,285,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'integer_mode':([51,53,130,152,215,229,252,271,288,297,298,],[142,142,142,142,142,142,142,142,142,142,142,]),'parameter_list':([61,114,296,],[156,199,156,]),'while_control':([28,166,],[76,230,]),'step_value':([274,],[305,]),'index_mode_list':([215,],[264,]),'location':([0,6,28,29,37,41,45,46,61,64,74,75,97,106,108,109,114,121,137,158,159,169,173,179,189,195,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,277,282,283,285,294,296,297,303,304,309,322,],[26,26,26,81,81,81,26,81,81,81,81,26,81,81,196,81,81,26,81,26,26,81,81,81,81,26,26,81,81,81,81,81,81,81,81,26,81,81,26,81,26,81,81,81,26,81,81,81,81,81,81,81,]),'action':([0,6,28,45,75,121,158,159,195,205,226,242,244,285,],[19,19,19,120,19,19,19,120,19,19,19,19,19,19,]),'array_element':([0,6,28,29,37,41,45,46,61,64,74,75,97,106,108,109,114,121,137,158,159,169,173,179,189,195,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,277,282,283,285,294,296,297,303,304,309,322,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'statement':([0,6,121,205,],[21,47,21,47,]),'composite_mode':([51,53,130,152,252,288,298,],[145,145,145,145,145,145,145,]),'relational_operator':([98,],[184,]),'operand0':([29,37,41,46,61,64,74,97,106,114,137,179,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'formal_parameter':([202,289,],[249,315,]),'identifier':([0,6,9,17,22,23,28,29,37,41,45,46,48,51,53,61,64,74,75,78,97,106,108,109,114,121,127,130,137,148,151,152,158,159,169,173,179,189,195,202,205,206,207,211,214,215,216,219,223,226,228,229,236,242,243,244,252,271,277,282,283,285,288,289,294,296,297,298,303,304,309,322,],[24,24,49,49,57,49,24,99,99,99,99,99,49,132,132,99,99,99,24,168,99,99,99,99,99,24,209,132,99,49,49,132,24,99,99,99,99,99,24,49,24,99,99,99,99,263,99,99,99,24,99,276,99,24,99,24,132,276,99,99,99,24,132,49,99,99,263,132,99,99,99,99,]),'operand3':([29,37,41,46,61,64,74,97,106,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[100,100,100,100,100,100,100,100,100,100,100,231,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'statement_list':([0,121,],[6,205,]),'range_enumeration':([78,],[163,]),'value_array_element':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'declaration':([17,148,],[54,218,]),'do_action':([0,6,28,45,75,121,158,159,195,205,226,242,244,285,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'result_spec':([201,],[247,]),'declaration_list':([17,],[52,]),'synonym_statement':([0,6,121,205,],[32,32,32,32,]),'membership_operator':([98,],[191,]),'builtin_call':([0,6,28,29,37,41,45,46,61,64,74,75,97,106,108,109,114,121,137,158,159,169,173,179,189,195,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,277,282,283,285,294,296,297,303,304,309,322,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'step_enumeration':([78,],[165,]),'boolean_expression':([29,74,97,243,283,309,],[107,160,180,286,312,329,]),'element_mode':([298,],[321,]),'operator2':([89,238,],[173,173,]),'declaration_statement':([0,6,121,205,],[36,36,36,36,]),'dereferenced_reference':([0,6,28,29,37,41,45,46,61,64,74,75,97,106,108,109,114,121,137,158,159,169,173,179,189,195,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,277,282,283,285,294,296,297,303,304,309,322,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'mode':([51,53,130,152,252,288,298,],[138,149,210,222,292,314,320,]),'start_value':([228,],[274,]),'array_mode':([51,53,130,152,252,288,298,],[146,146,146,146,146,146,146,]),'exit_label_id':([22,],[56,]),'else_expression':([237,280,],[281,308,]),'procedure_definition':([45,],[118,]),'synonym_definition':([9,48,],[50,126,]),'loop_counter':([78,],[164,]),'elsif_expression':([237,],[280,]),'primitive_value':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'for_control':([78,],[166,]),'empty_literal':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'array_location':([0,6,28,29,37,41,45,46,61,64,74,75,97,106,108,109,114,121,137,158,159,169,173,179,189,195,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,277,282,283,285,294,296,297,303,304,309,322,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'procedure_statement':([0,6,121,205,],[5,5,5,5,]),'assigning_operator':([26,],[64,]),'result':([37,41,],[115,117,]),'index_mode':([215,297,],[261,319,]),'then_clause':([107,286,],[194,313,]),'formal_parameter_list':([202,],[251,]),'discrete_range_mode':([51,53,130,152,215,229,252,271,288,297,298,],[133,133,133,133,133,133,133,133,133,133,133,]),'end_value':([274,305,],[306,326,]),'upper_bound':([206,277,294,],[254,307,317,]),'then_expression':([180,312,329,],[237,330,335,]),'boolean_mode':([51,53,130,152,215,229,252,271,288,297,298,],[136,136,136,136,136,136,136,136,136,136,136,]),'expression':([29,37,41,46,61,64,74,97,106,114,137,179,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[87,116,116,124,153,157,87,87,193,153,212,234,255,256,258,212,258,258,268,153,272,279,87,255,311,87,255,318,258,323,272,87,272,]),'boolean_literal':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'if_action':([0,6,28,45,75,121,158,159,195,205,226,242,244,285,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'character_string_literal':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'parenthesized_expression':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'builtin_name':([0,6,28,29,37,41,45,46,61,64,74,75,97,106,108,109,114,121,137,158,159,169,173,179,189,195,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,277,282,283,285,294,296,297,303,304,309,322,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'discrete_mode':([51,53,130,152,215,229,252,271,288,297,298,],[143,143,143,143,265,275,143,301,143,265,143,]),'array_slice':([0,6,28,29,37,41,45,46,61,64,74,75,97,106,108,109,114,121,137,158,159,169,173,179,189,195,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,277,282,283,285,294,296,297,303,304,309,322,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'literal':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'action_statement':([0,6,28,75,121,158,195,205,226,242,244,285,],[16,16,77,162,16,77,77,16,162,77,162,162,]),'program':([0,],[18,]),'value_array_slice':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'string_concatenation_operator':([89,238,],[175,175,]),'character_literal':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'newmode_statement':([0,6,121,205,],[39,39,39,39,]),'literal_range':([211,215,216,296,297,],[259,262,266,259,262,]),'result_action':([0,6,28,45,75,121,158,159,195,205,226,242,244,285,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'formal_procedure_head':([45,],[121,]),'integer_expression':([179,303,],[235,324,]),'integer_literal':([29,37,41,46,61,64,74,97,106,109,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'string_mode':([51,53,130,152,252,288,298,],[135,135,135,135,135,135,135,]),'assignment_action':([0,6,28,45,75,121,158,159,195,205,226,242,244,285,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'closed_dyadic_operator':([26,],[65,]),'return_action':([0,6,28,45,75,121,158,159,195,205,226,242,244,285,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'parenthesis_gambiarra':([119,],[201,]),'parameter':([61,114,223,296,],[154,154,269,154,]),'monadic_operator':([29,37,41,46,61,64,74,97,106,114,137,169,173,179,189,206,207,211,214,215,216,219,223,228,236,243,277,282,283,294,296,297,303,304,309,322,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'call_action':([0,6,28,29,37,41,45,46,61,64,74,75,97,106,108,109,114,121,137,158,159,169,173,179,189,195,205,206,207,211,214,215,216,219,223,226,228,236,242,243,244,277,282,283,285,294,296,297,303,304,309,322,],[40,40,40,111,111,111,40,111,111,111,111,40,111,111,111,111,111,40,111,40,40,111,111,111,111,40,40,111,111,111,111,111,111,111,111,40,111,111,40,111,40,111,111,111,40,111,111,111,111,111,111,111,]),'reference_mode':([51,53,130,152,252,288,298,],[134,134,134,134,134,134,134,]),'exit_action':([0,6,28,45,75,121,158,159,195,205,226,242,244,285,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list ASSIGN constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode ASSIGN constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',114),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET ICONST RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',392),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',398),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',404),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',410),
  ('expression -> operand0','expression',1,'p_expression','parser.py',417),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',418),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',424),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',425),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',434),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',440),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',446),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',452),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',453),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',462),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',463),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',470),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',471),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',483),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',488),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',493),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',494),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',502),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',509),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',515),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',519),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',520),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',529),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',534),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',535),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',544),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',550),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',551),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',556),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',561),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',562),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',571),
  ('action -> bracketed_action','action',1,'p_action','parser.py',577),
  ('action -> assignment_action','action',1,'p_action','parser.py',578),
  ('action -> call_action','action',1,'p_action','parser.py',579),
  ('action -> exit_action','action',1,'p_action','parser.py',580),
  ('action -> return_action','action',1,'p_action','parser.py',581),
  ('action -> result_action','action',1,'p_action','parser.py',582),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',588),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',593),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',613),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',622),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',627),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',628),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',637),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',638),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',647),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',648),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',655),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',657),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',658),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',673),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',674),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',675),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',676),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',691),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',692),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',701),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',707),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',712),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',713),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',720),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',725),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',730),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',735),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',736),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',744),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',749),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',750),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',757),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',761),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',762),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',767),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',768),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',775),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',776),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',783),
  ('exit_action -> EXIT exit_label_id','exit_action',2,'p_exit_action','parser.py',791),
  ('exit_label_id -> identifier','exit_label_id',1,'p_exit_label_id','parser.py',795),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',799),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',800),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',807),
  ('result -> expression','result',1,'p_result','parser.py',811),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',816),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',817),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',826),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',827),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',828),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',829),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',830),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',831),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',835),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',839),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',847),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',848),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',856),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',857),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',864),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',865),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',872),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',876),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',877),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',889),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',890),
]
