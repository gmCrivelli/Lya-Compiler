
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST PRINT CHAR DO LOC INT IF DOWN PROC OD END TYPE RETURNS TRUE ASC UPPER LENGTH RETURN BY RESULT WHILE ABS EXIT BOOL ARRAY IN ELSIF FALSE ELSE REF TO LOWER NULL FI READ DCL CHARS FOR SYN THEN NUMprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list initialization\n                              | identifier_list mode initializationnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT label_idreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'SCONST':([5,16,35,47,54,58,60,72,95,96,97,98,99,100,101,102,111,112,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[45,45,45,-122,-123,45,45,45,-140,-141,45,-146,-142,-144,-143,-145,45,45,45,45,45,-119,-118,-117,-111,-112,-113,45,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,45,-101,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'LESS':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,136,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-56,-65,-83,]),'EXIT':([0,2,12,14,25,26,30,34,36,86,87,104,110,115,167,168,172,176,183,184,190,191,226,232,235,236,238,241,274,279,307,],[13,-5,-2,13,-6,13,-7,-4,-8,-3,-128,13,-151,13,-18,-23,-9,-152,13,13,13,13,13,13,13,13,-129,-200,13,-203,-204,]),'MINUS':([4,5,11,16,17,20,22,24,35,45,46,48,49,50,52,53,56,57,58,59,61,62,63,65,66,67,68,70,71,72,73,75,77,78,79,95,96,97,98,99,100,101,102,103,111,112,116,117,118,119,120,121,122,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,197,200,201,202,203,204,206,211,215,217,223,228,229,230,233,242,243,244,245,247,250,251,261,286,292,294,296,299,300,304,315,325,],[-178,47,-179,47,-59,-58,-57,-17,47,-81,-68,-70,-75,-60,-69,-76,-108,-126,47,-78,127,-124,-80,-120,-79,-73,-77,-74,-67,47,-71,-72,-115,-125,-56,-140,-141,47,-146,-142,-144,-143,-145,-61,47,47,47,47,-127,47,-119,-118,-117,-121,-111,-112,-113,47,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,47,-101,47,47,-180,-190,-116,-85,-109,127,47,47,47,47,47,47,47,-62,47,-181,47,-191,47,47,47,-82,-56,47,47,47,47,47,47,-65,-83,47,]),'READ':([0,2,5,12,14,16,25,26,30,34,35,36,47,51,54,58,60,72,86,87,95,96,97,98,99,100,101,102,104,110,111,112,115,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,167,168,172,176,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,238,241,243,245,247,250,274,279,286,292,294,296,299,300,307,325,],[3,-5,3,-2,3,3,-6,3,-7,-4,3,-8,-122,3,-123,3,3,3,-3,-128,-140,-141,3,-146,-142,-144,-143,-145,3,-151,3,3,3,3,3,3,-119,-118,-117,-111,-112,-113,3,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,3,-101,3,3,-18,-23,-9,-152,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-129,-200,3,3,3,3,3,-203,3,3,3,3,3,3,-204,3,]),'DIVCREASE':([4,6,11,17,20,22,23,24,42,79,103,197,200,230,242,244,304,],[-178,-60,-179,-59,-58,-57,102,-17,-56,-56,-61,-180,-190,-62,-181,-191,-65,]),'END':([2,12,25,30,34,36,86,87,167,168,172,191,236,238,241,279,307,],[-5,-2,-6,-7,-4,-8,-3,-128,-18,-23,-9,237,276,-129,-200,-203,-204,]),'RESULT':([0,2,12,14,25,26,30,34,36,86,87,104,110,115,167,168,172,176,183,184,190,191,226,232,235,236,238,241,274,279,307,],[5,-5,-2,5,-6,5,-7,-4,-8,-3,-128,5,-151,5,-18,-23,-9,-152,5,5,5,5,5,5,5,5,-129,-200,5,-203,-204,]),'THEN':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,103,113,114,118,124,143,197,200,201,202,203,204,230,242,244,251,275,288,289,304,312,313,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,-61,190,-90,-127,-121,206,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,190,206,-88,-65,206,-89,-83,]),'LOWER':([0,2,5,12,14,16,25,26,30,34,35,36,47,51,54,58,60,72,86,87,95,96,97,98,99,100,101,102,104,110,111,112,115,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,167,168,172,176,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,238,241,243,245,247,250,274,279,286,292,294,296,299,300,307,325,],[7,-5,7,-2,7,7,-6,7,-7,-4,7,-8,-122,7,-123,7,7,7,-3,-128,-140,-141,7,-146,-142,-144,-143,-145,7,-151,7,7,7,7,7,7,-119,-118,-117,-111,-112,-113,7,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,7,-101,7,7,-18,-23,-9,-152,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-129,-200,7,7,7,7,7,-203,7,7,7,7,7,7,-204,7,]),'ID':([0,2,4,5,8,11,12,13,14,16,17,18,19,20,22,24,25,26,30,34,35,36,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,81,82,83,86,87,93,95,96,97,98,99,100,101,102,103,104,106,110,111,112,115,116,117,118,119,120,121,122,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,152,153,155,166,167,168,169,170,171,172,176,183,184,190,191,197,200,201,202,203,204,206,210,211,213,215,216,217,222,223,226,228,229,230,232,233,235,236,238,240,241,242,243,244,245,247,250,251,268,274,279,282,286,289,292,294,295,296,299,300,304,306,307,311,313,315,325,],[24,-5,-178,24,24,-179,-2,24,24,24,-59,24,24,-58,-57,-17,-6,24,-7,-4,24,-8,-81,-68,-122,-70,-75,-60,24,-69,-76,-123,-108,-126,24,-78,24,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,24,-71,-72,-115,-125,-56,-19,24,-15,24,-3,-128,24,-140,-141,24,-146,-142,-144,-143,-145,-61,24,24,-151,24,24,24,24,24,-127,24,-119,-118,-117,-121,-111,-112,-113,24,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,24,-101,24,24,24,24,-21,-20,-18,-23,24,24,24,-9,-152,24,24,24,24,-180,-190,-116,-85,-109,-96,24,-16,24,-14,24,-22,24,24,24,24,24,24,-62,24,24,24,24,-129,24,-200,-181,24,-191,24,24,24,-82,24,24,-203,24,24,-88,24,24,24,24,24,24,-65,24,-204,24,-89,-83,24,]),'ASC':([0,2,5,12,14,16,25,26,30,34,35,36,47,51,54,58,60,72,86,87,95,96,97,98,99,100,101,102,104,110,111,112,115,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,167,168,172,176,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,238,241,243,245,247,250,274,279,286,292,294,296,299,300,307,325,],[33,-5,33,-2,33,33,-6,33,-7,-4,33,-8,-122,33,-123,33,33,33,-3,-128,-140,-141,33,-146,-142,-144,-143,-145,33,-151,33,33,33,33,33,33,-119,-118,-117,-111,-112,-113,33,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,33,-101,33,33,-18,-23,-9,-152,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-129,-200,33,33,33,33,33,-203,33,33,33,33,33,33,-204,33,]),'MOD':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,62,63,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,120,-126,-78,-124,-80,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,120,-62,-181,-191,-82,-56,-65,-83,]),'INCREASE':([4,6,11,17,20,22,23,24,42,79,103,197,200,230,242,244,304,],[-178,-60,-179,-59,-58,-57,99,-17,-56,-56,-61,-180,-190,-62,-181,-191,-65,]),'ICONST':([5,16,35,47,54,58,60,72,95,96,97,98,99,100,101,102,111,112,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,206,211,214,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[53,53,53,-122,-123,53,53,53,-140,-141,53,-146,-142,-144,-143,-145,53,53,53,53,53,-119,-118,-117,-111,-112,-113,53,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,53,-101,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'NOT':([5,16,35,58,72,95,96,97,98,99,100,101,102,111,112,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[54,54,54,54,54,-140,-141,54,-146,-142,-144,-143,-145,54,54,54,54,54,-119,-118,-117,-111,-112,-113,54,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,54,-101,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'PRINT':([0,2,5,12,14,16,25,26,30,34,35,36,47,51,54,58,60,72,86,87,95,96,97,98,99,100,101,102,104,110,111,112,115,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,167,168,172,176,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,238,241,243,245,247,250,274,279,286,292,294,296,299,300,307,325,],[9,-5,9,-2,9,9,-6,9,-7,-4,9,-8,-122,9,-123,9,9,9,-3,-128,-140,-141,9,-146,-142,-144,-143,-145,9,-151,9,9,9,9,9,9,-119,-118,-117,-111,-112,-113,9,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,9,-101,9,9,-18,-23,-9,-152,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-129,-200,9,9,9,9,9,-203,9,9,9,9,9,9,-204,9,]),'ELSIF':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,87,103,110,118,124,176,189,190,197,200,201,202,203,204,205,230,235,238,242,244,246,249,251,289,304,305,313,314,315,330,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,-128,-61,-151,-127,-121,-152,233,-149,-180,-190,-116,-85,-109,-96,247,-62,-150,-129,-181,-191,286,-91,-82,-88,-65,233,-89,-93,-83,-94,]),'LESSEQ':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,140,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-56,-65,-83,]),'DIVIDE':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,62,63,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,121,-126,-78,-124,-80,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,121,-62,-181,-191,-82,-56,-65,-83,]),'INT':([24,81,82,93,152,170,210,215,222,268,282,294,295,306,],[-17,146,-15,146,146,146,-16,146,146,146,146,146,146,146,]),'RPAREN':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,103,116,117,118,123,124,146,147,148,149,150,151,157,158,159,161,162,163,164,165,195,196,197,198,199,200,201,202,203,204,212,230,240,242,244,251,252,262,270,281,283,284,289,291,293,296,297,304,308,309,313,315,316,318,319,320,327,328,329,333,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,-61,197,200,-127,202,-121,-35,-28,-45,-37,-34,-31,-36,-32,-29,-40,-27,-30,-46,-33,242,-184,-180,-182,244,-190,-116,-85,-109,-96,-44,-62,280,-181,-191,-82,291,297,-43,-207,310,-183,-88,-39,-47,197,-38,-65,-209,-210,-89,-83,-41,-49,-54,-184,332,-211,-208,334,]),'PLUS':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,126,-124,-80,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,126,-62,-181,-191,-82,-56,-65,-83,]),'BOOL':([24,81,82,93,152,170,210,215,222,268,282,294,295,306,],[-17,157,-15,157,157,157,-16,157,157,157,157,157,157,157,]),'SYN':([0,2,12,14,25,30,34,36,86,87,167,168,172,191,236,238,241,279,307,],[8,-5,-2,8,-6,-7,-4,-8,-3,-128,-18,-23,-9,8,8,-129,-200,-203,-204,]),'DIFF':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,134,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-56,-65,-83,]),'FOR':([26,],[106,]),'RETURN':([0,2,12,14,25,26,30,34,36,86,87,104,110,115,167,168,172,176,183,184,190,191,226,232,235,236,238,241,274,279,307,],[16,-5,-2,16,-6,16,-7,-4,-8,-3,-128,16,-151,16,-18,-23,-9,-152,16,16,16,16,16,16,16,16,-129,-200,16,-203,-204,]),'DOWN':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,103,118,124,177,181,197,200,201,202,203,204,230,242,244,251,265,266,267,289,301,304,313,315,321,322,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-169,224,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-174,302,-170,-88,302,-65,-89,-83,-55,-171,]),'PROC':([115,],[193,]),'TYPE':([0,2,12,14,25,30,34,36,86,87,167,168,172,191,236,238,241,279,307,],[18,-5,-2,18,-6,-7,-4,-8,-3,-128,-18,-23,-9,18,18,-129,-200,-203,-204,]),'LENGTH':([0,2,5,12,14,16,25,26,30,34,35,36,47,51,54,58,60,72,86,87,95,96,97,98,99,100,101,102,104,110,111,112,115,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,167,168,172,176,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,238,241,243,245,247,250,274,279,286,292,294,296,299,300,307,325,],[21,-5,21,-2,21,21,-6,21,-7,-4,21,-8,-122,21,-123,21,21,21,-3,-128,-140,-141,21,-146,-142,-144,-143,-145,21,-151,21,21,21,21,21,21,-119,-118,-117,-111,-112,-113,21,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,21,-101,21,21,-18,-23,-9,-152,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-129,-200,21,21,21,21,21,-203,21,21,21,21,21,21,-204,21,]),'DCL':([0,2,12,14,25,30,34,36,86,87,167,168,172,191,236,238,241,279,307,],[19,-5,-2,19,-6,-7,-4,-8,-3,-128,-18,-23,-9,19,19,-129,-200,-203,-204,]),'ARRAY':([24,81,82,93,152,170,210,282,295,306,],[-17,156,-15,156,156,156,-16,156,156,156,]),'LBRACKET':([4,6,11,17,20,22,23,24,28,42,45,46,48,49,50,52,53,57,59,62,63,66,67,68,70,71,73,75,76,79,103,118,154,156,197,200,202,230,242,244,251,261,304,315,],[-178,-60,-179,-59,-58,-57,-66,-17,112,-56,-81,-68,-70,-75,-60,-69,-76,-84,-78,-66,-80,-79,-73,-77,-74,-67,-71,-72,144,-56,-61,-66,214,215,-180,-190,-85,-62,-181,-191,-82,-56,-65,-83,]),'CCONST':([5,16,35,47,54,58,60,72,95,96,97,98,99,100,101,102,111,112,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[66,66,66,-122,-123,66,66,66,-140,-141,66,-146,-142,-144,-143,-145,66,66,66,66,66,-119,-118,-117,-111,-112,-113,66,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,66,-101,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'COMMA':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,81,82,89,90,91,92,93,94,103,118,124,146,147,148,149,150,151,157,158,159,161,162,163,164,165,173,187,188,195,196,197,198,199,200,201,202,203,204,210,212,213,218,219,220,221,230,242,244,251,257,258,259,260,270,272,281,282,283,284,289,291,293,297,304,308,309,313,315,316,317,318,319,320,328,329,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,145,-15,169,145,-24,171,145,-10,-61,-127,-121,-35,-28,-45,-37,-34,-31,-36,-32,-29,-40,-27,-30,-46,-33,-12,-63,229,243,-184,-180,-182,243,-190,-116,-85,-109,-96,-16,-44,-14,-25,-26,-11,-13,-62,-181,-191,-82,-53,-50,-52,294,-43,-64,-207,145,311,-183,-88,-39,-47,-38,-65,-209,-210,-89,-83,-41,-51,-49,-54,-184,-211,-208,]),'EQUAL':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,142,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-56,-65,-83,]),'TIMES':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,62,63,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,122,-126,-78,-124,-80,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,122,-62,-181,-191,-82,-56,-65,-83,]),'DO':([0,2,12,14,25,26,30,34,36,86,87,104,110,115,167,168,172,176,183,184,190,191,226,232,235,236,238,241,274,279,307,],[26,-5,-2,26,-6,26,-7,-4,-8,-3,-128,26,-151,26,-18,-23,-9,-152,26,26,26,26,26,26,26,26,-129,-200,26,-203,-204,]),'OD':([26,87,104,110,176,184,226,238,],[105,-128,175,-151,-152,227,269,-129,]),'DECREASE':([4,6,11,17,20,22,23,24,42,79,103,197,200,230,242,244,304,],[-178,-60,-179,-59,-58,-57,101,-17,-56,-56,-61,-180,-190,-62,-181,-191,-65,]),'ABS':([0,2,5,12,14,16,25,26,30,34,35,36,47,51,54,58,60,72,86,87,95,96,97,98,99,100,101,102,104,110,111,112,115,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,167,168,172,176,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,238,241,243,245,247,250,274,279,286,292,294,296,299,300,307,325,],[27,-5,27,-2,27,27,-6,27,-7,-4,27,-8,-122,27,-123,27,27,27,-3,-128,-140,-141,27,-146,-142,-144,-143,-145,27,-151,27,27,27,27,27,27,-119,-118,-117,-111,-112,-113,27,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,27,-101,27,27,-18,-23,-9,-152,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-129,-200,27,27,27,27,27,-203,27,27,27,27,27,27,-204,27,]),'AND':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,139,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-56,-65,-83,]),'NULL':([5,16,35,47,54,58,60,72,95,96,97,98,99,100,101,102,111,112,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[63,63,63,-122,-123,63,63,63,-140,-141,63,-146,-142,-144,-143,-145,63,63,63,63,63,-119,-118,-117,-111,-112,-113,63,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,63,-101,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'COLON':([4,11,17,20,22,24,40,42,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,103,108,118,124,186,187,197,200,201,202,203,204,207,208,230,242,244,251,253,254,261,289,304,313,315,320,],[-178,-179,-59,-58,-57,-17,115,-130,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,-61,183,-127,-121,228,-42,-180,-190,-116,-85,-109,-96,250,-42,-62,-181,-191,-82,292,-42,-56,-88,-65,-89,-83,-42,]),'GREATEREQ':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,138,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-56,-65,-83,]),'UPPER':([0,2,5,12,14,16,25,26,30,34,35,36,47,51,54,58,60,72,86,87,95,96,97,98,99,100,101,102,104,110,111,112,115,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,167,168,172,176,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,238,241,243,245,247,250,274,279,286,292,294,296,299,300,307,325,],[43,-5,43,-2,43,43,-6,43,-7,-4,43,-8,-122,43,-123,43,43,43,-3,-128,-140,-141,43,-146,-142,-144,-143,-145,43,-151,43,43,43,43,43,43,-119,-118,-117,-111,-112,-113,43,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,43,-101,43,43,-18,-23,-9,-152,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-129,-200,43,43,43,43,43,-203,43,43,43,43,43,43,-204,43,]),'RETURNS':([239,280,310,],[277,-205,-206,]),'LOC':([24,146,147,148,149,150,151,157,158,159,161,162,163,164,165,212,291,293,297,309,318,319,327,],[-17,-35,-28,-45,-37,-34,-31,-36,-32,-29,-40,-27,-30,-46,-33,-44,-39,-47,-38,328,-49,-54,333,]),'MODCREASE':([4,6,11,17,20,22,23,24,42,79,103,197,200,230,242,244,304,],[-178,-60,-179,-59,-58,-57,98,-17,-56,-56,-61,-180,-190,-62,-181,-191,-65,]),'FALSE':([5,16,35,47,54,58,60,72,95,96,97,98,99,100,101,102,111,112,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[68,68,68,-122,-123,68,68,68,-140,-141,68,-146,-142,-144,-143,-145,68,68,68,68,68,-119,-118,-117,-111,-112,-113,68,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,68,-101,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'CHAR':([24,81,82,93,152,170,210,215,222,268,282,294,295,306,],[-17,149,-15,149,149,149,-16,149,149,149,149,149,149,149,]),'MULCREASE':([4,6,11,17,20,22,23,24,42,79,103,197,200,230,242,244,304,],[-178,-60,-179,-59,-58,-57,100,-17,-56,-56,-61,-180,-190,-62,-181,-191,-65,]),'REF':([24,81,82,93,152,170,210,282,295,306,],[-17,152,-15,152,152,152,-16,152,152,152,]),'ASSIGN':([4,6,11,17,20,22,23,24,42,79,81,82,90,103,146,147,148,149,150,151,157,158,159,160,161,162,163,164,165,173,177,181,197,200,210,212,230,242,244,291,293,297,304,318,319,],[-178,-60,-179,-59,-58,-57,95,-17,-56,-56,153,-15,170,-61,-35,-28,-45,-37,-34,-31,-36,-32,-29,153,-40,-27,-30,-46,-33,153,-169,223,-180,-190,-16,-44,-62,-181,-191,-39,-47,-38,-65,-49,-54,]),'CHARS':([24,81,82,93,152,170,210,282,295,306,],[-17,154,-15,154,154,154,-16,154,154,154,]),'LPAREN':([3,5,7,9,16,21,24,27,33,35,39,42,43,44,47,54,58,60,72,79,95,96,97,98,99,100,101,102,111,112,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,146,147,149,150,151,153,157,158,161,165,193,206,211,215,217,223,228,229,233,243,245,247,250,259,261,263,264,277,286,291,292,294,296,297,299,300,303,325,],[-198,58,-196,-199,58,-197,-17,-192,-193,58,-194,116,-195,117,-122,-123,58,58,58,116,-140,-141,58,-146,-142,-144,-143,-145,58,58,58,58,58,-119,-118,-117,-111,-112,-113,58,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,58,-101,58,-35,211,-37,-34,-31,58,-36,-32,217,-33,240,58,58,58,58,58,58,58,58,58,58,58,58,211,296,211,217,306,58,-39,58,58,58,-38,58,58,211,58,]),'SEMI':([1,4,6,10,11,15,16,17,20,22,24,31,32,37,38,41,45,46,48,49,50,52,53,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,74,75,77,78,79,80,83,84,85,88,89,91,92,94,103,105,107,109,114,118,124,146,147,148,149,150,151,155,157,158,159,161,162,163,164,165,166,173,174,175,178,179,180,182,185,192,194,197,200,201,202,203,204,212,213,216,218,219,220,221,225,227,230,234,237,239,242,244,251,263,265,269,273,276,278,280,289,291,293,297,298,303,304,310,313,315,318,319,323,324,331,332,334,],[-131,-178,-133,-137,-179,87,-186,-59,-58,-57,-17,-136,-135,-134,-132,-138,-81,-68,-70,-75,-60,-69,-76,-189,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-188,-72,-115,-125,-56,-19,167,-130,-185,-187,168,-24,172,-10,-61,-157,-161,184,-90,-127,-121,-35,-28,-45,-37,-34,-31,-21,-36,-32,-29,-40,-27,-30,-46,-33,-20,-12,-139,-159,-166,-165,-164,-162,-177,238,241,-180,-190,-116,-85,-109,-96,-44,-14,-22,-25,-26,-11,-13,-163,-158,-62,-147,-201,279,-181,-191,-82,-175,-174,-160,-148,-202,307,-205,-88,-39,-47,-38,-167,-176,-65,-206,-89,-83,-49,-54,-172,-168,-173,-212,-213,]),'IF':([0,2,5,12,14,16,25,26,30,34,35,36,58,72,86,87,95,96,97,98,99,100,101,102,104,110,111,112,115,116,117,144,153,167,168,172,176,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,238,241,243,245,247,250,274,279,286,292,294,296,299,300,307,325,],[35,-5,72,-2,35,72,-6,35,-7,-4,72,-8,72,72,-3,-128,-140,-141,72,-146,-142,-144,-143,-145,35,-151,72,72,35,72,72,72,72,-18,-23,-9,-152,35,35,35,35,72,72,72,72,72,35,72,72,35,72,35,35,-129,-200,72,72,72,72,35,-203,72,72,72,72,72,72,-204,72,]),'STRCAT':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,130,-124,-80,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,130,-62,-181,-191,-82,-56,-65,-83,]),'IN':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,70,71,73,75,77,78,79,103,118,124,177,181,197,200,201,202,203,204,224,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,132,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-169,222,-180,-190,-116,-85,-109,-96,268,-62,-181,-191,-82,-56,-65,-83,]),'GREATER':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,135,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-56,-65,-83,]),'TRUE':([5,16,35,47,54,58,60,72,95,96,97,98,99,100,101,102,111,112,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[59,59,59,-122,-123,59,59,59,-140,-141,59,-146,-142,-144,-143,-145,59,59,59,59,59,-119,-118,-117,-111,-112,-113,59,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,59,-101,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'NUM':([0,2,5,12,14,16,25,26,30,34,35,36,47,51,54,58,60,72,86,87,95,96,97,98,99,100,101,102,104,110,111,112,115,116,117,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,167,168,172,176,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,238,241,243,245,247,250,274,279,286,292,294,296,299,300,307,325,],[39,-5,39,-2,39,39,-6,39,-7,-4,39,-8,-122,39,-123,39,39,39,-3,-128,-140,-141,39,-146,-142,-144,-143,-145,39,-151,39,39,39,39,39,39,-119,-118,-117,-111,-112,-113,39,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,39,-101,39,39,-18,-23,-9,-152,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-129,-200,39,39,39,39,39,-203,39,39,39,39,39,39,-204,39,]),'ELSE':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,87,103,110,118,124,176,189,190,197,200,201,202,203,204,205,230,235,238,242,244,246,249,251,289,304,305,313,314,315,330,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,-128,-61,-151,-127,-121,-152,232,-149,-180,-190,-116,-85,-109,-96,245,-62,-150,-129,-181,-191,245,-91,-82,-88,-65,232,-89,-93,-83,-94,]),'WHILE':([4,11,17,20,22,24,26,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,103,118,124,146,149,150,151,157,158,165,178,179,180,182,197,200,201,202,203,204,230,242,244,251,263,265,289,291,297,298,303,304,313,315,323,324,331,],[-178,-179,-59,-58,-57,-17,111,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-35,-37,-34,-31,-36,-32,-33,-166,-165,-164,111,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-175,-174,-88,-39,-38,-167,-176,-65,-89,-83,-172,-168,-173,]),'BY':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,265,266,267,289,304,313,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-174,299,-170,-88,-65,-89,-83,]),'OR':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,261,304,315,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,137,-120,-79,-73,-77,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-56,-65,-83,]),'FI':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,87,103,110,118,124,176,189,190,197,200,201,202,203,204,230,231,232,235,238,242,244,248,251,274,285,287,289,304,305,313,315,326,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,-128,-61,-151,-127,-121,-152,234,-149,-180,-190,-116,-85,-109,-96,-62,273,-153,-150,-129,-181,-191,289,-82,-154,-92,313,-88,-65,-155,-89,-83,-156,]),'TO':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,103,118,124,197,200,201,202,203,204,230,242,244,251,265,266,267,289,301,302,304,313,315,321,322,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-180,-190,-116,-85,-109,-96,-62,-181,-191,-82,-174,300,-170,-88,300,325,-65,-89,-83,-55,-171,]),'ARROW':([4,5,6,11,16,17,20,22,23,24,35,42,47,50,54,58,60,62,72,79,95,96,97,98,99,100,101,102,103,111,112,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,153,197,200,206,211,215,217,223,228,229,230,233,242,243,244,245,247,250,261,286,292,294,296,299,300,304,325,],[-178,51,-60,-179,51,-59,-58,-57,103,-17,51,-56,-122,-60,-123,51,51,103,51,-56,-140,-141,51,-146,-142,-144,-143,-145,-61,51,51,51,51,103,51,-119,-118,-117,-111,-112,-113,51,-110,-114,-97,-107,-98,-102,-103,-105,-100,-104,-99,-106,51,-101,51,51,-180,-190,51,51,51,51,51,51,51,-62,51,-181,51,-191,51,51,51,-56,51,51,51,51,51,51,-65,51,]),'RBRACKET':([4,11,17,20,22,24,45,46,48,49,50,52,53,56,57,59,61,62,63,64,65,66,67,68,69,70,71,73,75,77,78,79,103,118,124,146,149,150,151,157,158,165,187,188,197,200,201,202,203,204,208,209,230,242,244,251,255,256,257,258,259,260,270,271,272,289,290,291,297,304,313,315,316,317,],[-178,-179,-59,-58,-57,-17,-81,-68,-70,-75,-60,-69,-76,-108,-126,-78,-95,-124,-80,-86,-120,-79,-73,-77,-87,-74,-67,-71,-72,-115,-125,-56,-61,-127,-121,-35,-37,-34,-31,-36,-32,-33,-63,230,-180,-190,-116,-85,-109,-96,-55,251,-62,-181,-191,-82,-48,293,-53,-50,-52,295,-43,304,-64,-88,315,-39,-38,-65,-89,-83,-41,-51,]),'$end':([2,12,14,25,29,30,34,36,86,87,167,168,172,238,241,],[-5,-2,-1,-6,0,-7,-4,-8,-3,-128,-18,-23,-9,-129,-200,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'literal_range':([211,215,217,294,296,],[252,257,262,257,262,]),'bracketed_action':([0,14,26,104,115,183,184,190,191,226,232,235,236,274,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'synonym_statement':([0,14,191,236,],[2,2,2,2,]),'parameter_list':([116,117,296,],[195,199,195,]),'arithmetic_additive_operator':([61,204,],[129,129,]),'lower_bound':([112,144,211,215,217,294,296,],[186,207,253,253,253,253,253,]),'newmode_list':([18,],[89,]),'synonym_definition':([8,83,],[80,166,]),'builtin_call':([0,5,14,16,26,35,51,58,60,72,97,104,111,112,115,116,117,119,128,141,144,153,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,243,245,247,250,274,286,292,294,296,299,300,325,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'expression':([5,16,35,58,72,97,111,112,116,117,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[55,55,114,123,114,174,114,187,196,196,208,213,249,254,254,254,265,270,272,114,196,285,114,270,114,270,254,320,321,265,265,]),'iteration':([106,],[180,]),'statement_list':([0,191,],[14,236,]),'relational_operator':([64,],[131,]),'operator1':([64,],[141,]),'elsif_expression':([205,],[246,]),'element_mode':([295,],[318,]),'step_enumeration':([106,],[179,]),'parameter_spec':([282,],[308,]),'parameter':([116,117,243,296,],[198,198,284,198,]),'array_slice':([0,5,14,16,26,35,51,58,60,72,97,104,111,112,115,116,117,119,128,141,144,153,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,243,245,247,250,274,286,292,294,296,299,300,325,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'mode':([81,93,152,170,282,295,306,],[160,173,212,219,309,319,327,]),'array_element':([0,5,14,16,26,35,51,58,60,72,97,104,111,112,115,116,117,119,128,141,144,153,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,243,245,247,250,274,286,292,294,296,299,300,325,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'while_control':([26,182,],[107,225,]),'monadic_operator':([5,16,35,58,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'array_location':([0,5,14,16,26,35,51,58,60,72,97,104,111,112,115,116,117,119,128,141,144,153,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,243,245,247,250,274,286,292,294,296,299,300,325,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'newmode_statement':([0,14,191,236,],[25,25,25,25,]),'synonym_list':([8,],[83,]),'formal_parameter_list':([240,],[283,]),'declaration_list':([19,],[92,]),'assigning_operator':([23,],[97,]),'range_enumeration':([106,],[178,]),'program':([0,],[29,]),'start_value':([223,],[266,]),'procedure_statement':([0,14,191,236,],[30,30,30,30,]),'dereferenced_reference':([0,5,14,16,26,35,51,58,60,72,97,104,111,112,115,116,117,119,128,141,144,153,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,243,245,247,250,274,286,292,294,296,299,300,325,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'return_action':([0,14,26,104,115,183,184,190,191,226,232,235,236,274,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'discrete_range_mode':([81,93,152,170,215,222,268,282,294,295,306,],[150,150,150,150,150,150,150,150,150,150,150,]),'string_concatenation_operator':([61,204,],[125,125,]),'else_clause':([189,305,],[231,326,]),'mode_name':([81,93,152,170,282,295,306,],[162,162,162,162,162,162,162,]),'declaration_statement':([0,14,191,236,],[34,34,34,34,]),'procedure_definition':([115,],[194,]),'literal':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'control_part':([26,],[109,]),'string_length':([214,],[256,]),'result':([5,16,],[74,88,]),'action_statement':([0,14,26,104,184,190,191,226,232,235,236,274,],[36,36,110,176,110,110,36,176,110,176,36,176,]),'boolean_literal':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'boolean_expression':([35,72,111,233,247,286,],[113,143,185,275,288,312,]),'boolean_mode':([81,93,152,170,215,222,268,282,294,295,306,],[158,158,158,158,158,158,158,158,158,158,158,]),'character_mode':([81,93,152,170,215,222,268,282,294,295,306,],[165,165,165,165,165,165,165,165,165,165,165,]),'do_action':([0,14,26,104,115,183,184,190,191,226,232,235,236,274,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'integer_expression':([144,299,],[209,322,]),'composite_mode':([81,93,152,170,282,295,306,],[163,163,163,163,163,163,163,]),'arithmetic_multiplicative_operator':([56,203,],[119,119,]),'reference_mode':([81,93,152,170,282,295,306,],[159,159,159,159,159,159,159,]),'integer_literal':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,214,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,255,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'operand4':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[65,65,65,65,124,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'value_array_element':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'action_statement_list':([26,184,190,232,],[104,226,235,274,]),'parenthesized_expression':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'procedure_call':([0,5,14,16,26,35,51,58,60,72,97,104,111,112,115,116,117,119,128,141,144,153,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,243,245,247,250,274,286,292,294,296,299,300,325,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'call_action':([0,5,14,16,26,35,51,58,60,72,97,104,111,112,115,116,117,119,128,141,144,153,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,243,245,247,250,274,286,292,294,296,299,300,325,],[6,50,6,50,6,50,50,50,50,50,50,6,50,50,6,50,50,50,50,50,50,50,6,6,6,6,50,50,50,50,50,6,50,50,6,50,6,6,50,50,50,50,6,50,50,50,50,50,50,50,]),'formal_procedure_head':([115,],[191,]),'membership_operator':([64,],[133,]),'if_action':([0,14,26,104,115,183,184,190,191,226,232,235,236,274,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'value_array_slice':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'identifier_list':([8,18,19,83,169,171,240,311,],[81,90,93,81,90,93,282,282,]),'character_string_literal':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'operand0':([5,16,35,58,72,97,111,112,116,117,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'primitive_value':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'loop_counter':([106,],[181,]),'index_mode':([215,294,],[258,317,]),'action':([0,14,26,104,115,183,184,190,191,226,232,235,236,274,],[15,15,15,15,192,192,15,15,15,15,15,15,15,15,]),'operator2':([61,204,],[128,128,]),'expression_list':([112,],[188,]),'operand2':([5,16,35,58,72,97,111,112,116,117,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[56,56,56,56,56,56,56,56,56,56,203,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'statement':([0,14,191,236,],[12,86,12,86,]),'operand1':([5,16,35,58,72,97,111,112,116,117,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[61,61,61,61,61,61,61,61,61,61,204,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'location':([0,5,14,16,26,35,51,58,60,72,97,104,111,112,115,116,117,119,128,141,144,153,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,243,245,247,250,274,286,292,294,296,299,300,325,],[23,62,23,62,23,62,118,62,62,62,62,23,62,62,23,62,62,62,62,62,62,62,23,23,23,23,62,62,62,62,62,23,62,62,23,62,23,23,62,62,62,62,23,62,62,62,62,62,62,62,]),'array_mode':([81,93,152,170,282,295,306,],[164,164,164,164,164,164,164,]),'label_id':([0,13,14,26,104,184,190,191,226,232,235,236,274,],[40,85,40,108,108,108,108,40,108,108,108,40,108,]),'mode_definition':([18,169,],[91,218,]),'closed_dyadic_operator':([23,],[96,]),'result_action':([0,14,26,104,115,183,184,190,191,226,232,235,236,274,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'upper_bound':([228,250,292,],[271,290,316,]),'result_spec':([239,],[278,]),'discrete_mode':([81,93,152,170,215,222,268,282,294,295,306,],[147,147,147,147,259,263,303,147,259,147,147,]),'step_value':([266,],[301,]),'string_mode':([81,93,152,170,282,295,306,],[148,148,148,148,148,148,148,]),'declaration':([19,171,],[94,220,]),'then_clause':([113,275,],[189,305,]),'integer_mode':([81,93,152,170,215,222,268,282,294,295,306,],[151,151,151,151,151,151,151,151,151,151,151,]),'character_literal':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'index_mode_list':([215,],[260,]),'conditional_expression':([5,16,35,58,72,97,111,112,116,117,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'empty_literal':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'referenced_location':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'initialization':([81,160,173,],[155,216,221,]),'parenthesis_gambiarra':([193,],[239,]),'discrete_expression':([223,300,325,],[267,323,331,]),'then_expression':([143,288,312,],[205,314,330,]),'end_value':([266,301,],[298,324,]),'exit_action':([0,14,26,104,115,183,184,190,191,226,232,235,236,274,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'assignment_action':([0,14,26,104,115,183,184,190,191,226,232,235,236,274,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'else_expression':([205,246,],[248,287,]),'array_primitive_value':([5,16,35,58,60,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'operand3':([5,16,35,58,72,97,111,112,116,117,119,128,141,144,153,206,211,215,217,223,228,229,233,243,245,247,250,286,292,294,296,299,300,325,],[77,77,77,77,77,77,77,77,77,77,201,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'formal_parameter':([240,311,],[281,329,]),'identifier':([0,5,8,13,14,16,18,19,26,35,51,58,60,72,81,83,93,97,104,106,111,112,115,116,117,119,128,141,144,145,152,153,169,170,171,183,184,190,191,206,211,215,217,222,223,226,228,229,232,233,235,236,240,243,245,247,250,268,274,282,286,292,294,295,296,299,300,306,311,325,],[42,79,82,84,42,79,82,82,42,79,79,79,79,79,161,82,161,79,42,177,79,79,79,79,79,79,79,79,79,210,161,79,82,161,82,79,42,42,42,79,79,261,79,264,79,42,79,79,42,79,42,42,82,79,79,79,79,264,42,161,79,79,261,161,79,79,79,161,82,79,]),'builtin_name':([0,5,14,16,26,35,51,58,60,72,97,104,111,112,115,116,117,119,128,141,144,153,183,184,190,191,206,211,215,217,223,226,228,229,232,233,235,236,243,245,247,250,274,286,292,294,296,299,300,325,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'for_control':([106,],[182,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',23),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',29),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',30),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',41),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',46),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',51),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',52),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',59),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',60),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',67),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',74),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',75),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',82),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',88),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',96),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',97),
  ('synonym_definition -> identifier_list initialization','synonym_definition',2,'p_synonym_definition','parser.py',104),
  ('synonym_definition -> identifier_list mode initialization','synonym_definition',3,'p_synonym_definition','parser.py',105),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',117),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',123),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',124),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',131),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',137),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',138),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',139),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',140),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',145),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',146),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',153),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',158),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',163),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',168),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',169),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',176),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',186),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',191),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',197),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',203),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',209),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',210),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','parser.py',215),
  ('string_length -> integer_literal','string_length',1,'p_string_length','parser.py',221),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',227),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',233),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',234),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',241),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',242),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',247),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',253),
  ('location -> identifier','location',1,'p_location','parser.py',259),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',260),
  ('location -> array_element','location',1,'p_location','parser.py',261),
  ('location -> array_slice','location',1,'p_location','parser.py',262),
  ('location -> call_action','location',1,'p_location','parser.py',263),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',273),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',313),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',319),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',320),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',327),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',333),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',339),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',340),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',342),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',348),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',349),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',352),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',357),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',363),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',364),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',371),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',377),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',384),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',390),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',396),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',402),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',408),
  ('expression -> operand0','expression',1,'p_expression','parser.py',415),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',416),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',421),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',422),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',431),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',437),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',443),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',449),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',450),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',459),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',460),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',467),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',468),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',473),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',474),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',475),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',480),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',485),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',490),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',491),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',499),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',500),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',505),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',506),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',512),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',516),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',517),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',524),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',525),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',526),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',531),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',532),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',540),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',541),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',546),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',547),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',548),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',553),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',558),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',559),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',568),
  ('action -> bracketed_action','action',1,'p_action','parser.py',574),
  ('action -> assignment_action','action',1,'p_action','parser.py',575),
  ('action -> call_action','action',1,'p_action','parser.py',576),
  ('action -> exit_action','action',1,'p_action','parser.py',577),
  ('action -> return_action','action',1,'p_action','parser.py',578),
  ('action -> result_action','action',1,'p_action','parser.py',579),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',584),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',585),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',590),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',609),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',610),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',615),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',616),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',617),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',624),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',625),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',634),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',635),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',644),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',645),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',652),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',653),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',654),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',655),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',670),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',671),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',672),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',673),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',687),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',688),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',689),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',698),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',703),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',704),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',709),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',710),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',717),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',722),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',727),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',732),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',733),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',741),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',746),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',747),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',754),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',758),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',759),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',764),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',765),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',772),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',773),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',780),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','parser.py',788),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',792),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',793),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',800),
  ('result -> expression','result',1,'p_result','parser.py',804),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',809),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',810),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',817),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',818),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',819),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',820),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',821),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',822),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',823),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',824),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',828),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',832),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',833),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',841),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',849),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',850),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',857),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',858),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',865),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',869),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',870),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',882),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',883),
]
