
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST ARRAY BY CHARS DCL DO DOWN ELSE ELSIF END EXIT FI FOR IF IN LOC TYPE OD PROC REF RESULT RETURN RETURNS SYN THEN TO WHILE ABS ASC BOOL CHAR FALSE INT LENGTH LOWER NULL NUM PRINT READ TRUE UPPERprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list ASSIGN constant_expression\n                              | identifier_list mode ASSIGN constant_expressionconstant_expression : expressionnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : ICONSTarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT exit_label_idexit_label_id :  identifierreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'DCL':([0,2,3,4,5,6,7,8,45,57,118,139,143,148,214,215,217,260,295,],[9,9,-2,-4,-5,-6,-7,-8,-3,-129,-9,-18,-24,9,-202,-130,9,-205,-206,]),'SYN':([0,2,3,4,5,6,7,8,45,57,118,139,143,148,214,215,217,260,295,],[10,10,-2,-4,-5,-6,-7,-8,-3,-129,-9,-18,-24,10,-202,-130,10,-205,-206,]),'TYPE':([0,2,3,4,5,6,7,8,45,57,118,139,143,148,214,215,217,260,295,],[11,11,-2,-4,-5,-6,-7,-8,-3,-129,-9,-18,-24,11,-202,-130,11,-205,-206,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,21,25,26,27,28,29,30,31,32,33,34,45,48,49,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,110,112,113,114,116,117,118,119,121,131,139,140,141,143,144,145,148,150,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,183,184,186,194,195,202,203,204,205,208,209,210,211,214,215,217,219,220,221,222,223,225,226,230,233,234,235,237,239,240,242,243,244,245,258,260,266,270,271,273,274,276,284,289,292,293,294,295,296,298,301,303,310,312,314,323,326,330,],[21,21,-2,-4,-5,-6,-7,-8,21,21,21,-17,-179,-180,21,21,21,21,21,-58,-59,-60,-3,21,-15,21,-19,21,21,-129,21,21,-62,-141,-142,-143,-144,-145,-146,-147,-87,-88,-96,21,-109,-116,-121,21,-125,-126,-127,-123,-124,-57,-61,21,-68,-69,-70,-71,-72,-73,-74,-75,-76,21,-77,-78,-79,-80,-81,-82,21,21,-152,21,21,21,-9,21,21,21,-18,-20,21,-24,21,21,21,-181,21,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,21,-111,-112,-113,-114,-115,21,-118,-119,-120,-122,-128,21,21,21,-153,21,-192,21,-16,21,21,21,-21,-23,21,-202,-130,21,21,-182,21,-97,-110,21,-117,-86,21,21,21,21,21,21,-193,-63,21,21,-22,-205,21,21,21,-83,21,21,21,21,21,21,21,-206,21,21,-89,21,21,21,-66,-90,-84,21,]),'EXIT':([0,2,3,4,5,6,7,8,31,45,56,57,110,113,118,139,143,148,183,184,186,194,214,215,217,233,235,237,260,276,295,],[27,27,-2,-4,-5,-6,-7,-8,27,-3,27,-129,27,-152,-9,-18,-24,27,27,27,-153,27,-202,-130,27,27,27,27,-205,27,-206,]),'RETURN':([0,2,3,4,5,6,7,8,31,45,56,57,110,113,118,139,143,148,183,184,186,194,214,215,217,233,235,237,260,276,295,],[28,28,-2,-4,-5,-6,-7,-8,28,-3,28,-129,28,-152,-9,-18,-24,28,28,28,-153,28,-202,-130,28,28,28,28,-205,28,-206,]),'RESULT':([0,2,3,4,5,6,7,8,31,45,56,57,110,113,118,139,143,148,183,184,186,194,214,215,217,233,235,237,260,276,295,],[29,29,-2,-4,-5,-6,-7,-8,29,-3,29,-129,29,-152,-9,-18,-24,29,29,29,-153,29,-202,-130,29,29,29,29,-205,29,-206,]),'IF':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,98,110,113,114,116,117,118,139,141,143,148,180,183,184,186,194,202,204,205,208,211,214,215,217,221,225,233,234,235,237,239,244,245,260,270,271,274,276,289,293,294,295,303,310,312,330,],[30,30,-2,-4,-5,-6,-7,-8,75,75,75,30,-3,30,-129,75,75,-141,-142,-143,-144,-145,-146,-147,75,75,30,-152,75,75,75,-9,-18,75,-24,30,75,30,30,-153,30,75,75,75,75,75,-202,-130,30,75,75,30,75,30,30,75,75,75,-205,75,75,75,30,75,75,75,-206,75,75,75,75,]),'DO':([0,2,3,4,5,6,7,8,31,45,56,57,110,113,118,139,143,148,183,184,186,194,214,215,217,233,235,237,260,276,295,],[31,31,-2,-4,-5,-6,-7,-8,31,-3,31,-129,31,-152,-9,-18,-24,31,31,31,-153,31,-202,-130,31,31,31,31,-205,31,-206,]),'ABS':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,141,143,148,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,183,184,186,194,202,204,205,208,211,214,215,217,221,225,233,234,235,237,239,244,245,260,270,271,274,276,289,293,294,295,303,310,312,330,],[37,37,-2,-4,-5,-6,-7,-8,37,37,37,37,-3,37,-129,37,37,-141,-142,-143,-144,-145,-146,-147,37,37,-123,-124,37,37,37,-152,37,37,37,-9,-18,37,-24,37,37,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,37,-111,-112,-113,-114,-115,37,-118,-119,-120,37,37,37,-153,37,37,37,37,37,37,-202,-130,37,37,37,37,37,37,37,37,37,37,-205,37,37,37,37,37,37,37,-206,37,37,37,37,]),'ASC':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,141,143,148,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,183,184,186,194,202,204,205,208,211,214,215,217,221,225,233,234,235,237,239,244,245,260,270,271,274,276,289,293,294,295,303,310,312,330,],[38,38,-2,-4,-5,-6,-7,-8,38,38,38,38,-3,38,-129,38,38,-141,-142,-143,-144,-145,-146,-147,38,38,-123,-124,38,38,38,-152,38,38,38,-9,-18,38,-24,38,38,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,38,-111,-112,-113,-114,-115,38,-118,-119,-120,38,38,38,-153,38,38,38,38,38,38,-202,-130,38,38,38,38,38,38,38,38,38,38,-205,38,38,38,38,38,38,38,-206,38,38,38,38,]),'NUM':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,141,143,148,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,183,184,186,194,202,204,205,208,211,214,215,217,221,225,233,234,235,237,239,244,245,260,270,271,274,276,289,293,294,295,303,310,312,330,],[39,39,-2,-4,-5,-6,-7,-8,39,39,39,39,-3,39,-129,39,39,-141,-142,-143,-144,-145,-146,-147,39,39,-123,-124,39,39,39,-152,39,39,39,-9,-18,39,-24,39,39,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,39,-111,-112,-113,-114,-115,39,-118,-119,-120,39,39,39,-153,39,39,39,39,39,39,-202,-130,39,39,39,39,39,39,39,39,39,39,-205,39,39,39,39,39,39,39,-206,39,39,39,39,]),'UPPER':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,141,143,148,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,183,184,186,194,202,204,205,208,211,214,215,217,221,225,233,234,235,237,239,244,245,260,270,271,274,276,289,293,294,295,303,310,312,330,],[40,40,-2,-4,-5,-6,-7,-8,40,40,40,40,-3,40,-129,40,40,-141,-142,-143,-144,-145,-146,-147,40,40,-123,-124,40,40,40,-152,40,40,40,-9,-18,40,-24,40,40,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,40,-111,-112,-113,-114,-115,40,-118,-119,-120,40,40,40,-153,40,40,40,40,40,40,-202,-130,40,40,40,40,40,40,40,40,40,40,-205,40,40,40,40,40,40,40,-206,40,40,40,40,]),'LOWER':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,141,143,148,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,183,184,186,194,202,204,205,208,211,214,215,217,221,225,233,234,235,237,239,244,245,260,270,271,274,276,289,293,294,295,303,310,312,330,],[41,41,-2,-4,-5,-6,-7,-8,41,41,41,41,-3,41,-129,41,41,-141,-142,-143,-144,-145,-146,-147,41,41,-123,-124,41,41,41,-152,41,41,41,-9,-18,41,-24,41,41,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,41,-111,-112,-113,-114,-115,41,-118,-119,-120,41,41,41,-153,41,41,41,41,41,41,-202,-130,41,41,41,41,41,41,41,41,41,41,-205,41,41,41,41,41,41,41,-206,41,41,41,41,]),'LENGTH':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,141,143,148,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,183,184,186,194,202,204,205,208,211,214,215,217,221,225,233,234,235,237,239,244,245,260,270,271,274,276,289,293,294,295,303,310,312,330,],[42,42,-2,-4,-5,-6,-7,-8,42,42,42,42,-3,42,-129,42,42,-141,-142,-143,-144,-145,-146,-147,42,42,-123,-124,42,42,42,-152,42,42,42,-9,-18,42,-24,42,42,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,42,-111,-112,-113,-114,-115,42,-118,-119,-120,42,42,42,-153,42,42,42,42,42,42,-202,-130,42,42,42,42,42,42,42,42,42,42,-205,42,42,42,42,42,42,42,-206,42,42,42,42,]),'READ':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,141,143,148,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,183,184,186,194,202,204,205,208,211,214,215,217,221,225,233,234,235,237,239,244,245,260,270,271,274,276,289,293,294,295,303,310,312,330,],[43,43,-2,-4,-5,-6,-7,-8,43,43,43,43,-3,43,-129,43,43,-141,-142,-143,-144,-145,-146,-147,43,43,-123,-124,43,43,43,-152,43,43,43,-9,-18,43,-24,43,43,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,43,-111,-112,-113,-114,-115,43,-118,-119,-120,43,43,43,-153,43,43,43,43,43,43,-202,-130,43,43,43,43,43,43,43,43,43,43,-205,43,43,43,43,43,43,43,-206,43,43,43,43,]),'PRINT':([0,2,3,4,5,6,7,8,28,29,30,31,45,56,57,58,59,61,62,63,64,65,66,67,75,79,83,84,87,98,110,113,114,116,117,118,139,141,143,148,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,183,184,186,194,202,204,205,208,211,214,215,217,221,225,233,234,235,237,239,244,245,260,270,271,274,276,289,293,294,295,303,310,312,330,],[44,44,-2,-4,-5,-6,-7,-8,44,44,44,44,-3,44,-129,44,44,-141,-142,-143,-144,-145,-146,-147,44,44,-123,-124,44,44,44,-152,44,44,44,-9,-18,44,-24,44,44,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,44,-111,-112,-113,-114,-115,44,-118,-119,-120,44,44,44,-153,44,44,44,44,44,44,-202,-130,44,44,44,44,44,44,44,44,44,44,-205,44,44,44,44,44,44,44,-206,44,44,44,44,]),'$end':([1,2,3,4,5,6,7,8,45,57,118,139,143,214,215,],[0,-1,-2,-4,-5,-6,-7,-8,-3,-129,-9,-18,-24,-202,-130,]),'END':([3,4,5,6,7,8,45,57,118,139,143,148,214,215,217,260,295,],[-2,-4,-5,-6,-7,-8,-3,-129,-9,-18,-24,216,-202,-130,259,-205,-206,]),'COLON':([12,14,21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,115,150,178,179,195,198,199,220,222,223,226,228,229,230,242,243,248,249,257,273,301,314,319,323,326,],[56,-131,-17,-179,-180,-58,-59,-60,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,194,-181,-122,-128,-192,245,-43,-182,-97,-110,-117,274,-43,-86,-193,-63,289,-43,-57,-83,-89,-66,-43,-90,-84,]),'SEMI':([13,15,16,17,18,19,20,21,22,23,25,26,28,32,33,34,46,47,50,51,53,54,60,68,69,70,71,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,105,107,108,109,111,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,140,146,147,150,154,178,179,185,187,188,189,190,193,195,200,201,206,209,210,212,213,216,218,220,222,223,226,230,231,236,238,242,243,246,258,259,261,263,273,275,278,281,282,288,290,291,297,301,308,313,314,316,317,323,326,328,329,333,336,337,],[57,-132,-133,-134,-135,-136,-137,-17,-138,-139,-179,-180,-188,-58,-59,-60,118,-10,139,-19,143,-25,-62,-186,-187,-189,-191,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-190,-91,-158,184,-162,-12,-41,-28,-29,-30,-31,-32,-33,-34,-35,-46,-47,-36,-37,-38,-20,214,215,-181,-140,-122,-128,-160,-163,-165,-166,-167,-178,-192,-11,-13,-45,-21,-23,-26,-27,-203,260,-182,-97,-110,-117,-86,-148,-159,-164,-193,-63,-14,-22,-204,295,-207,-83,-149,-161,-175,-176,-39,-40,-48,-208,-89,-168,-177,-66,-50,-55,-90,-84,-169,-173,-214,-174,-215,]),'ARROW':([14,17,21,24,25,26,28,29,30,32,33,34,58,59,60,61,62,63,64,65,66,67,75,79,80,83,84,85,86,98,114,116,117,141,150,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,179,180,195,202,204,205,208,211,220,221,225,234,239,242,243,244,245,257,270,271,274,289,293,294,303,310,312,314,330,],[-57,-61,-17,60,-179,-180,87,87,87,-58,-59,-60,87,87,-62,-141,-142,-143,-144,-145,-146,-147,87,87,60,-123,-124,-57,-61,87,87,87,87,87,-181,87,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,87,-111,-112,-113,-114,-115,87,-118,-119,-120,60,87,-192,87,87,87,87,87,-182,87,87,87,87,-193,-63,87,87,-57,87,87,87,87,87,87,87,87,87,-66,87,]),'ASSIGN':([14,17,21,24,25,26,32,33,34,49,52,55,60,85,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,142,150,191,192,195,203,206,220,242,243,288,290,291,314,316,317,],[-57,-61,-17,61,-179,-180,-58,-59,-60,-15,141,145,-62,-57,202,-41,-28,-29,-30,-31,-32,-33,-34,-35,-46,-47,-36,-37,-38,211,-181,239,-170,-192,-16,-45,-182,-193,-63,-39,-40,-48,-66,-50,-55,]),'INCREASE':([14,17,21,24,25,26,32,33,34,60,85,150,195,220,242,243,314,],[-57,-61,-17,63,-179,-180,-58,-59,-60,-62,-57,-181,-192,-182,-193,-63,-66,]),'DECREASE':([14,17,21,24,25,26,32,33,34,60,85,150,195,220,242,243,314,],[-57,-61,-17,64,-179,-180,-58,-59,-60,-62,-57,-181,-192,-182,-193,-63,-66,]),'MULCREASE':([14,17,21,24,25,26,32,33,34,60,85,150,195,220,242,243,314,],[-57,-61,-17,65,-179,-180,-58,-59,-60,-62,-57,-181,-192,-182,-193,-63,-66,]),'DIVCREASE':([14,17,21,24,25,26,32,33,34,60,85,150,195,220,242,243,314,],[-57,-61,-17,66,-179,-180,-58,-59,-60,-62,-57,-181,-192,-182,-193,-63,-66,]),'MODCREASE':([14,17,21,24,25,26,32,33,34,60,85,150,195,220,242,243,314,],[-57,-61,-17,67,-179,-180,-58,-59,-60,-62,-57,-181,-192,-182,-193,-63,-66,]),'LBRACKET':([14,17,21,24,25,26,32,33,34,36,60,80,82,85,86,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,137,138,150,179,195,220,230,242,243,257,273,314,326,],[-57,-61,-17,-67,-179,-180,-58,-59,-60,117,-62,-67,-85,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,180,-77,-78,-79,-80,-81,-82,207,208,-181,-67,-192,-182,-86,-193,-63,-57,-83,-66,-84,]),'LPAREN':([14,21,28,29,30,35,37,38,39,40,41,42,43,44,58,59,61,62,63,64,65,66,67,75,79,83,84,85,98,114,116,117,122,124,127,128,129,130,134,135,136,141,149,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,202,204,205,208,211,221,225,234,239,244,245,255,257,262,270,271,274,282,283,288,289,290,293,294,303,310,312,313,330,],[58,-17,98,98,98,116,-194,-195,-196,-197,-198,-199,-200,-201,98,98,-141,-142,-143,-144,-145,-146,-147,98,98,-123,-124,58,98,98,98,98,204,205,-32,-33,-34,-35,-36,-37,-38,98,219,98,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,98,-111,-112,-113,-114,-115,98,-118,-119,-120,98,98,98,98,98,98,98,98,98,98,98,98,205,294,296,98,98,98,205,204,-39,98,-40,98,98,98,98,98,205,98,]),'COMMA':([21,25,26,32,33,34,46,47,48,49,52,53,54,55,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,150,151,152,153,178,179,195,196,197,199,200,201,203,206,212,213,220,222,223,226,230,242,243,246,253,254,255,256,264,265,266,267,273,285,287,288,290,291,299,300,301,314,315,316,317,318,319,321,322,323,326,],[-17,-179,-180,-58,-59,-60,119,-10,121,-15,121,144,-25,121,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-12,-41,-28,-29,-30,-31,-32,-33,-34,-35,-46,-47,-36,-37,-38,-181,221,-183,-185,-122,-128,-192,221,244,-64,-11,-13,-16,-45,-26,-27,-182,-97,-110,-117,-86,-193,-63,-14,293,-51,-53,-54,298,-209,121,-184,-83,-65,-44,-39,-40,-48,-211,-212,-89,-66,-42,-50,-55,-52,-185,-210,-213,-90,-84,]),'REF':([21,48,49,52,131,145,203,266,292,296,],[-17,131,-15,131,131,131,-16,131,131,131,]),'INT':([21,48,49,52,131,145,203,208,240,266,284,292,293,296,],[-17,134,-15,134,134,134,-16,134,134,134,134,134,134,134,]),'BOOL':([21,48,49,52,131,145,203,208,240,266,284,292,293,296,],[-17,135,-15,135,135,135,-16,135,135,135,135,135,135,135,]),'CHAR':([21,48,49,52,131,145,203,208,240,266,284,292,293,296,],[-17,136,-15,136,136,136,-16,136,136,136,136,136,136,136,]),'CHARS':([21,48,49,52,131,145,203,266,292,296,],[-17,137,-15,137,137,137,-16,137,137,137,]),'ARRAY':([21,48,49,52,131,145,203,266,292,296,],[-17,138,-15,138,138,138,-16,138,138,138,]),'TIMES':([21,25,26,32,33,34,60,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,175,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,175,-117,-86,-193,-63,-57,-83,-66,-84,]),'DIVIDE':([21,25,26,32,33,34,60,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,176,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,176,-117,-86,-193,-63,-57,-83,-66,-84,]),'MOD':([21,25,26,32,33,34,60,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,177,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,177,-117,-86,-193,-63,-57,-83,-66,-84,]),'PLUS':([21,25,26,32,33,34,60,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,170,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,170,-110,-117,-86,-193,-63,-57,-83,-66,-84,]),'MINUS':([21,25,26,28,29,30,32,33,34,58,59,60,61,62,63,64,65,66,67,74,75,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,114,116,117,141,150,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,195,202,204,205,208,211,220,221,222,223,225,226,230,234,239,242,243,244,245,257,270,271,273,274,289,293,294,303,310,312,314,326,330,],[-17,-179,-180,83,83,83,-58,-59,-60,83,83,-62,-141,-142,-143,-144,-145,-146,-147,171,83,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,83,-77,-78,-79,-80,-81,-82,83,83,83,83,-181,83,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,83,-111,-112,-113,-114,-115,83,-118,-119,-120,-122,-128,83,-192,83,83,83,83,83,-182,83,171,-110,83,-117,-86,83,83,-193,-63,83,83,-57,83,83,-83,83,83,83,83,83,83,83,-66,-84,83,]),'STRCAT':([21,25,26,32,33,34,60,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,172,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,172,-110,-117,-86,-193,-63,-57,-83,-66,-84,]),'AND':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,158,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,-97,-110,-117,-86,-193,-63,-57,-83,-66,-84,]),'OR':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,159,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,-97,-110,-117,-86,-193,-63,-57,-83,-66,-84,]),'EQUAL':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,160,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,-97,-110,-117,-86,-193,-63,-57,-83,-66,-84,]),'DIFF':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,161,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,-97,-110,-117,-86,-193,-63,-57,-83,-66,-84,]),'GREATER':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,162,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,-97,-110,-117,-86,-193,-63,-57,-83,-66,-84,]),'GREATEREQ':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,163,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,-97,-110,-117,-86,-193,-63,-57,-83,-66,-84,]),'LESS':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,164,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,-97,-110,-117,-86,-193,-63,-57,-83,-66,-84,]),'LESSEQ':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,165,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,-97,-110,-117,-86,-193,-63,-57,-83,-66,-84,]),'IN':([21,25,26,32,33,34,60,72,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,191,192,195,220,222,223,226,230,241,242,243,257,273,314,326,],[-17,-179,-180,-58,-59,-60,-62,166,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,240,-170,-192,-182,-97,-110,-117,-86,284,-193,-63,-57,-83,-66,-84,]),'THEN':([21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,106,107,150,173,178,179,195,220,222,223,226,230,242,243,273,277,301,305,314,323,324,326,],[-17,-179,-180,-58,-59,-60,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,183,-91,-181,225,-122,-128,-192,-182,-97,-110,-117,-86,-193,-63,-83,183,-89,225,-66,-90,225,-84,]),'RPAREN':([21,25,26,32,33,34,58,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,116,122,123,124,125,126,127,128,129,130,132,133,134,135,136,150,151,152,153,178,179,181,195,196,206,219,220,222,223,226,230,242,243,247,250,264,265,267,273,287,288,290,291,294,299,300,301,314,315,316,317,319,320,321,322,323,326,334,],[-17,-179,-180,-58,-59,-60,150,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,195,-41,-28,-29,-30,-31,-32,-33,-34,-35,-46,-47,-36,-37,-38,-181,220,-183,-185,-122,-128,230,-192,242,-45,263,-182,-97,-110,-117,-86,-193,-63,288,290,297,-209,-184,-83,-44,-39,-40,-48,150,-211,-212,-89,-66,-42,-50,-55,-185,333,-210,-213,-90,-84,337,]),'RBRACKET':([21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,127,128,129,130,134,135,136,150,178,179,195,197,199,220,222,223,226,227,229,230,242,243,251,252,253,254,255,256,273,285,286,287,288,290,301,306,314,315,318,323,326,],[-17,-179,-180,-58,-59,-60,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-32,-33,-34,-35,-36,-37,-38,-181,-122,-128,-192,243,-64,-182,-97,-110,-117,273,-56,-86,-193,-63,291,-49,292,-51,-53,-54,-83,-65,314,-44,-39,-40,-89,326,-66,-42,-52,-90,-84,]),'ELSE':([21,25,26,32,33,34,57,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,113,150,178,179,182,183,186,195,215,220,222,223,224,226,230,235,242,243,269,272,273,301,307,314,323,325,326,335,],[-17,-179,-180,-58,-59,-60,-129,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-152,-181,-122,-128,233,-150,-153,-192,-130,-182,-97,-110,270,-117,-86,-151,-193,-63,270,-92,-83,-89,233,-66,-90,-94,-84,-95,]),'ELSIF':([21,25,26,32,33,34,57,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,113,150,178,179,182,183,186,195,215,220,222,223,224,226,230,235,242,243,269,272,273,301,307,314,323,325,326,335,],[-17,-179,-180,-58,-59,-60,-129,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-152,-181,-122,-128,234,-150,-153,-192,-130,-182,-97,-110,271,-117,-86,-151,-193,-63,303,-92,-83,-89,234,-66,-90,-94,-84,-95,]),'TO':([21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,273,279,280,281,301,309,311,314,323,326,331,332,],[-17,-179,-180,-58,-59,-60,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,-97,-110,-117,-86,-193,-63,-83,310,-171,-175,-89,310,330,-66,-90,-84,-172,-56,]),'DOWN':([21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,191,192,195,220,222,223,226,230,242,243,273,279,280,281,301,309,314,323,326,331,332,],[-17,-179,-180,-58,-59,-60,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,241,-170,-192,-182,-97,-110,-117,-86,-193,-63,-83,311,-171,-175,-89,311,-66,-90,-84,-172,-56,]),'BY':([21,25,26,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,150,178,179,195,220,222,223,226,230,242,243,273,279,280,281,301,314,323,326,],[-17,-179,-180,-58,-59,-60,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-181,-122,-128,-192,-182,-97,-110,-117,-86,-193,-63,-83,312,-171,-175,-89,-66,-90,-84,]),'FI':([21,25,26,32,33,34,57,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,113,150,178,179,182,183,186,195,215,220,222,223,226,230,232,233,235,242,243,268,273,276,301,302,304,307,314,323,326,327,],[-17,-179,-180,-58,-59,-60,-129,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-152,-181,-122,-128,231,-150,-153,-192,-130,-182,-97,-110,-117,-86,275,-154,-151,-193,-63,301,-83,-155,-89,323,-93,-156,-66,-90,-84,-157,]),'WHILE':([21,25,26,31,32,33,34,60,72,73,74,76,77,78,80,81,82,85,86,88,89,90,91,92,93,94,95,96,99,100,101,102,103,104,127,128,129,130,134,135,136,150,178,179,187,188,189,190,195,220,222,223,226,230,242,243,273,281,282,288,290,301,308,313,314,323,326,328,329,336,],[-17,-179,-180,114,-58,-59,-60,-62,-87,-88,-96,-109,-116,-121,-125,-126,-127,-57,-61,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-32,-33,-34,-35,-36,-37,-38,-181,-122,-128,114,-165,-166,-167,-192,-182,-97,-110,-117,-86,-193,-63,-83,-175,-176,-39,-40,-89,-168,-177,-66,-90,-84,-169,-173,-174,]),'LOC':([21,122,123,124,125,126,127,128,129,130,132,133,134,135,136,206,288,290,291,300,316,317,320,],[-17,-41,-28,-29,-30,-31,-32,-33,-34,-35,-46,-47,-36,-37,-38,-45,-39,-40,-48,322,-50,-55,334,]),'NOT':([28,29,30,58,59,61,62,63,64,65,66,67,75,98,114,116,117,141,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[84,84,84,84,84,-141,-142,-143,-144,-145,-146,-147,84,84,84,84,84,84,84,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,84,-111,-112,-113,-114,-115,84,-118,-119,-120,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'ICONST':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,141,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,202,204,205,207,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[99,99,99,99,99,-141,-142,-143,-144,-145,-146,-147,99,99,-123,-124,99,99,99,99,99,99,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,99,-111,-112,-113,-114,-115,99,-118,-119,-120,99,99,99,99,252,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'FALSE':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,141,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[100,100,100,100,100,-141,-142,-143,-144,-145,-146,-147,100,100,-123,-124,100,100,100,100,100,100,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,100,-111,-112,-113,-114,-115,100,-118,-119,-120,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'TRUE':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,141,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[101,101,101,101,101,-141,-142,-143,-144,-145,-146,-147,101,101,-123,-124,101,101,101,101,101,101,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,101,-111,-112,-113,-114,-115,101,-118,-119,-120,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'CCONST':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,141,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[102,102,102,102,102,-141,-142,-143,-144,-145,-146,-147,102,102,-123,-124,102,102,102,102,102,102,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,102,-111,-112,-113,-114,-115,102,-118,-119,-120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'NULL':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,141,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[103,103,103,103,103,-141,-142,-143,-144,-145,-146,-147,103,103,-123,-124,103,103,103,103,103,103,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,103,-111,-112,-113,-114,-115,103,-118,-119,-120,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'SCONST':([28,29,30,58,59,61,62,63,64,65,66,67,75,79,83,84,98,114,116,117,141,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[104,104,104,104,104,-141,-142,-143,-144,-145,-146,-147,104,104,-123,-124,104,104,104,104,104,104,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,104,-111,-112,-113,-114,-115,104,-118,-119,-120,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'OD':([31,57,110,113,184,186,215,237,],[108,-129,185,-152,236,-153,-130,278,]),'FOR':([31,],[112,]),'PROC':([56,],[149,]),'RETURNS':([218,263,297,],[262,-207,-208,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,148,],[2,217,]),'statement':([0,2,148,217,],[3,45,3,45,]),'declaration_statement':([0,2,148,217,],[4,4,4,4,]),'synonym_statement':([0,2,148,217,],[5,5,5,5,]),'newmode_statement':([0,2,148,217,],[6,6,6,6,]),'procedure_statement':([0,2,148,217,],[7,7,7,7,]),'action_statement':([0,2,31,110,148,183,184,217,233,235,237,276,],[8,8,113,186,8,113,113,8,113,186,186,186,]),'label_id':([0,2,31,110,148,183,184,217,233,235,237,276,],[12,12,115,115,12,115,115,12,115,115,115,115,]),'action':([0,2,31,56,110,148,183,184,194,217,233,235,237,276,],[13,13,13,147,13,13,13,13,147,13,13,13,13,13,]),'identifier':([0,2,9,10,11,27,28,29,30,31,48,50,52,56,58,59,75,79,87,98,110,112,114,116,117,119,121,131,141,144,145,148,155,167,174,180,183,184,194,202,204,205,208,211,217,219,221,225,233,234,235,237,239,240,244,245,266,270,271,274,276,284,289,292,293,294,296,298,303,310,312,330,],[14,14,49,49,49,69,85,85,85,14,122,49,122,85,85,85,85,85,85,85,14,192,85,85,85,49,203,122,85,49,122,14,85,85,85,85,14,14,85,85,85,85,257,85,14,49,85,85,14,85,14,14,85,283,85,85,122,85,85,85,14,283,85,122,257,85,122,49,85,85,85,85,]),'bracketed_action':([0,2,31,56,110,148,183,184,194,217,233,235,237,276,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'assignment_action':([0,2,31,56,110,148,183,184,194,217,233,235,237,276,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'call_action':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,141,148,155,167,174,180,183,184,194,202,204,205,208,211,217,221,225,233,234,235,237,239,244,245,270,271,274,276,289,293,294,303,310,312,330,],[17,17,86,86,86,17,17,86,86,86,86,86,86,17,86,86,86,86,17,86,86,86,86,17,17,17,86,86,86,86,86,17,86,86,17,86,17,17,86,86,86,86,86,86,17,86,86,86,86,86,86,86,]),'exit_action':([0,2,31,56,110,148,183,184,194,217,233,235,237,276,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'return_action':([0,2,31,56,110,148,183,184,194,217,233,235,237,276,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'result_action':([0,2,31,56,110,148,183,184,194,217,233,235,237,276,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'if_action':([0,2,31,56,110,148,183,184,194,217,233,235,237,276,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'do_action':([0,2,31,56,110,148,183,184,194,217,233,235,237,276,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'location':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,141,148,155,167,174,180,183,184,194,202,204,205,208,211,217,221,225,233,234,235,237,239,244,245,270,271,274,276,289,293,294,303,310,312,330,],[24,24,80,80,80,24,24,80,80,80,80,179,80,24,80,80,80,80,24,80,80,80,80,24,24,24,80,80,80,80,80,24,80,80,24,80,24,24,80,80,80,80,80,80,24,80,80,80,80,80,80,80,]),'procedure_call':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,141,148,155,167,174,180,183,184,194,202,204,205,208,211,217,221,225,233,234,235,237,239,244,245,270,271,274,276,289,293,294,303,310,312,330,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'builtin_call':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,141,148,155,167,174,180,183,184,194,202,204,205,208,211,217,221,225,233,234,235,237,239,244,245,270,271,274,276,289,293,294,303,310,312,330,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'dereferenced_reference':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,141,148,155,167,174,180,183,184,194,202,204,205,208,211,217,221,225,233,234,235,237,239,244,245,270,271,274,276,289,293,294,303,310,312,330,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'array_element':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,141,148,155,167,174,180,183,184,194,202,204,205,208,211,217,221,225,233,234,235,237,239,244,245,270,271,274,276,289,293,294,303,310,312,330,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'array_slice':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,141,148,155,167,174,180,183,184,194,202,204,205,208,211,217,221,225,233,234,235,237,239,244,245,270,271,274,276,289,293,294,303,310,312,330,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'builtin_name':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,141,148,155,167,174,180,183,184,194,202,204,205,208,211,217,221,225,233,234,235,237,239,244,245,270,271,274,276,289,293,294,303,310,312,330,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'array_location':([0,2,28,29,30,31,56,58,59,75,79,87,98,110,114,116,117,141,148,155,167,174,180,183,184,194,202,204,205,208,211,217,221,225,233,234,235,237,239,244,245,270,271,274,276,289,293,294,303,310,312,330,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'declaration_list':([9,],[46,]),'declaration':([9,119,],[47,200,]),'identifier_list':([9,10,11,50,119,144,219,298,],[48,52,55,52,48,55,266,266,]),'synonym_list':([10,],[50,]),'synonym_definition':([10,50,],[51,140,]),'newmode_list':([11,],[53,]),'mode_definition':([11,144,],[54,212,]),'assigning_operator':([24,],[59,]),'closed_dyadic_operator':([24,],[62,]),'exit_label_id':([27,],[68,]),'result':([28,29,],[70,105,]),'expression':([28,29,30,58,59,75,98,114,116,117,141,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[71,71,107,153,154,107,181,107,153,199,210,229,246,249,249,249,210,153,272,107,281,285,287,304,107,287,287,249,319,107,281,332,281,]),'operand0':([28,29,30,58,59,75,98,114,116,117,141,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'conditional_expression':([28,29,30,58,59,75,98,114,116,117,141,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'operand1':([28,29,30,58,59,75,98,114,116,117,141,155,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[74,74,74,74,74,74,74,74,74,74,74,222,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'operand2':([28,29,30,58,59,75,98,114,116,117,141,155,167,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[76,76,76,76,76,76,76,76,76,76,76,76,223,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'operand3':([28,29,30,58,59,75,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[77,77,77,77,77,77,77,77,77,77,77,77,77,226,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'operand4':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[78,78,78,78,78,78,178,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'monadic_operator':([28,29,30,58,59,75,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'referenced_location':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'primitive_value':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'literal':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'value_array_element':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'value_array_slice':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'parenthesized_expression':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'integer_literal':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'boolean_literal':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'character_literal':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'empty_literal':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'character_string_literal':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'array_primitive_value':([28,29,30,58,59,75,79,98,114,116,117,141,155,167,174,180,202,204,205,208,211,221,225,234,239,244,245,270,271,274,289,293,294,303,310,312,330,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'boolean_expression':([30,75,114,234,271,303,],[106,173,193,277,305,324,]),'control_part':([31,],[109,]),'action_statement_list':([31,183,184,233,],[110,235,237,276,]),'while_control':([31,187,],[111,238,]),'mode':([48,52,131,145,266,292,296,],[120,142,206,213,300,317,320,]),'mode_name':([48,52,131,145,266,292,296,],[123,123,123,123,123,123,123,]),'discrete_mode':([48,52,131,145,208,240,266,284,292,293,296,],[124,124,124,124,255,282,124,313,124,255,124,]),'reference_mode':([48,52,131,145,266,292,296,],[125,125,125,125,125,125,125,]),'composite_mode':([48,52,131,145,266,292,296,],[126,126,126,126,126,126,126,]),'integer_mode':([48,52,131,145,208,240,266,284,292,293,296,],[127,127,127,127,127,127,127,127,127,127,127,]),'boolean_mode':([48,52,131,145,208,240,266,284,292,293,296,],[128,128,128,128,128,128,128,128,128,128,128,]),'character_mode':([48,52,131,145,208,240,266,284,292,293,296,],[129,129,129,129,129,129,129,129,129,129,129,]),'discrete_range_mode':([48,52,131,145,208,240,266,284,292,293,296,],[130,130,130,130,130,130,130,130,130,130,130,]),'string_mode':([48,52,131,145,266,292,296,],[132,132,132,132,132,132,132,]),'array_mode':([48,52,131,145,266,292,296,],[133,133,133,133,133,133,133,]),'procedure_definition':([56,],[146,]),'formal_procedure_head':([56,],[148,]),'parameter_list':([58,116,294,],[151,196,151,]),'parameter':([58,116,221,294,],[152,152,267,152,]),'operator1':([72,],[155,]),'relational_operator':([72,],[156,]),'membership_operator':([72,],[157,]),'operator2':([74,222,],[167,167,]),'arithmetic_additive_operator':([74,222,],[168,168,]),'string_concatenation_operator':([74,222,],[169,169,]),'arithmetic_multiplicative_operator':([76,223,],[174,174,]),'then_clause':([106,277,],[182,307,]),'for_control':([112,],[187,]),'iteration':([112,],[188,]),'step_enumeration':([112,],[189,]),'range_enumeration':([112,],[190,]),'loop_counter':([112,],[191,]),'expression_list':([117,],[197,]),'lower_bound':([117,180,204,205,208,293,294,],[198,228,248,248,248,248,248,]),'initialization':([120,],[201,]),'constant_expression':([141,211,],[209,258,]),'parenthesis_gambiarra':([149,],[218,]),'then_expression':([173,305,324,],[224,325,335,]),'integer_expression':([180,312,],[227,331,]),'else_clause':([182,307,],[232,327,]),'literal_range':([204,205,208,293,294,],[247,250,256,256,247,]),'string_length':([207,],[251,]),'index_mode_list':([208,],[253,]),'index_mode':([208,293,],[254,318,]),'result_spec':([218,],[261,]),'formal_parameter_list':([219,],[264,]),'formal_parameter':([219,298,],[265,321,]),'else_expression':([224,269,],[268,302,]),'elsif_expression':([224,],[269,]),'start_value':([239,],[279,]),'discrete_expression':([239,310,330,],[280,329,336,]),'upper_bound':([245,274,289,],[286,306,315,]),'parameter_spec':([266,],[299,]),'end_value':([279,309,],[308,328,]),'step_value':([279,],[309,]),'element_mode':([292,],[316,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list ASSIGN constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode ASSIGN constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',114),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('string_length -> ICONST','string_length',1,'p_string_length','parser.py',223),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',393),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',399),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',405),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',411),
  ('expression -> operand0','expression',1,'p_expression','parser.py',418),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',419),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',424),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',425),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',434),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',440),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',446),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',452),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',453),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',462),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',463),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',470),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',471),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',483),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',488),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',493),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',494),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',502),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',509),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',515),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',519),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',520),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',529),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',534),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',535),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',544),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',550),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',551),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',556),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',561),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',562),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',571),
  ('action -> bracketed_action','action',1,'p_action','parser.py',577),
  ('action -> assignment_action','action',1,'p_action','parser.py',578),
  ('action -> call_action','action',1,'p_action','parser.py',579),
  ('action -> exit_action','action',1,'p_action','parser.py',580),
  ('action -> return_action','action',1,'p_action','parser.py',581),
  ('action -> result_action','action',1,'p_action','parser.py',582),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',588),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',593),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',613),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',622),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',627),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',628),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',637),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',638),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',647),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',648),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',655),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',657),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',658),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',673),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',674),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',675),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',676),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',691),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',692),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',701),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',707),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',712),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',713),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',720),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',725),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',730),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',735),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',736),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',744),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',749),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',750),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',757),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',761),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',762),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',767),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',768),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',775),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',776),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',783),
  ('exit_action -> EXIT exit_label_id','exit_action',2,'p_exit_action','parser.py',791),
  ('exit_label_id -> identifier','exit_label_id',1,'p_exit_label_id','parser.py',795),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',799),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',800),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',807),
  ('result -> expression','result',1,'p_result','parser.py',811),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',816),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',817),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',826),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',827),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',828),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',829),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',830),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',831),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',835),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',839),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',847),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',848),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',856),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',857),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',864),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',865),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',872),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',876),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',877),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',889),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',890),
]
