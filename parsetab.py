
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST PROC READ ABS IF NUM IN INT END BY LENGTH DOWN BOOL ASC TO EXIT LOWER UPPER LOC NULL DO FOR REF WHILE TRUE TYPE THEN RESULT FALSE DCL ELSE PRINT OD CHARS FI RETURN CHAR ARRAY RETURNS SYN ELSIFprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list ASSIGN constant_expression\n                              | identifier_list mode ASSIGN constant_expressionconstant_expression : expressionnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET ICONST RBRACKETarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT exit_label_idexit_label_id :  identifierreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'ASSIGN':([1,9,10,16,17,23,24,30,39,55,57,68,85,108,120,122,138,141,142,144,145,146,147,148,150,152,153,154,155,156,157,158,163,194,213,215,220,225,244,299,304,305,313,324,325,],[-60,-56,-59,63,-17,-58,-179,-57,-178,133,-15,-61,-56,193,200,-169,-180,-37,-33,-34,-35,-32,-30,-46,-41,-29,-31,-36,-47,222,-38,-28,-191,242,-16,-181,-45,-192,-62,-48,-39,-40,-65,-49,-54,]),'MODCREASE':([1,9,10,16,17,23,24,30,39,68,85,138,163,215,225,244,313,],[-60,-56,-59,64,-17,-58,-179,-57,-178,-61,-56,-180,-191,-181,-192,-62,-65,]),'BOOL':([17,57,61,108,133,151,201,213,218,251,256,298,301,302,],[-17,-15,141,141,141,141,141,-16,141,141,141,141,141,141,]),'LESS':([10,17,23,24,30,39,68,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,94,96,97,100,101,102,103,104,105,107,138,163,191,192,215,225,229,235,236,239,244,263,274,313,327,],[-59,-17,-58,-179,-57,-178,-61,-60,-68,-80,-70,-95,-120,-69,-77,-79,173,-56,-108,-124,-125,-71,-76,-73,-81,-75,-126,-74,-67,-115,-78,-72,-180,-191,-127,-121,-181,-192,-109,-96,-116,-85,-62,-56,-82,-65,-83,]),'ELSE':([10,17,23,24,30,39,50,68,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,94,96,97,98,100,101,102,103,104,105,107,117,126,138,163,171,172,191,192,211,215,225,229,234,235,236,237,239,244,274,278,282,307,310,313,327,329,331,335,],[-59,-17,-58,-179,-57,-178,-151,-61,-60,-68,-80,-70,-95,-120,-69,-77,-79,-86,-56,-108,-124,-125,-71,-76,-73,-81,-87,-75,-126,-74,-67,-115,-78,-72,-128,-152,-180,-191,231,-149,-127,-121,-129,-181,-192,-109,-150,-96,-116,280,-85,-62,-82,280,-91,231,-88,-65,-83,-89,-93,-94,]),'TYPE':([0,5,6,25,27,34,38,43,53,117,130,136,160,195,208,210,211,258,297,],[8,8,-6,-4,-7,-8,-2,-5,-3,-128,8,-24,-9,-18,8,-201,-129,-204,-205,]),'MULCREASE':([1,9,10,16,17,23,24,30,39,68,85,138,163,215,225,244,313,],[-60,-56,-59,70,-17,-58,-179,-57,-178,-61,-56,-180,-191,-181,-192,-62,-65,]),'LOWER':([0,4,5,6,20,25,27,34,37,38,40,43,49,50,52,53,54,59,63,64,65,66,67,69,70,71,72,90,91,92,93,95,99,113,117,124,126,127,130,136,160,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,193,195,200,205,208,210,211,216,218,219,221,222,231,233,234,238,242,243,245,258,273,275,280,281,288,291,297,300,301,303,309,317,],[28,28,28,-6,28,-4,-7,-8,28,-2,28,-5,28,-151,28,-3,28,28,-140,-146,-142,-141,-143,28,-144,-145,28,28,-123,28,-122,28,28,28,-128,28,-152,28,28,-24,-9,28,28,-111,-113,-110,-112,-114,28,-105,-107,-97,-101,-102,-106,-104,-99,-98,-103,-100,28,28,-118,-117,-119,28,-18,28,28,28,-201,-129,28,28,28,28,28,28,28,28,28,28,28,28,-204,28,28,28,28,28,28,-205,28,28,28,28,28,]),'NULL':([20,37,40,52,59,63,64,65,66,67,69,70,71,72,90,91,92,93,99,113,164,165,166,167,168,169,170,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[76,76,76,76,76,-140,-146,-142,-141,-143,76,-144,-145,76,76,-123,76,-122,76,76,76,76,-111,-113,-110,-112,-114,-105,-107,-97,-101,-102,-106,-104,-99,-98,-103,-100,76,76,-118,-117,-119,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'DIVCREASE':([1,9,10,16,17,23,24,30,39,68,85,138,163,215,225,244,313,],[-60,-56,-59,71,-17,-58,-179,-57,-178,-61,-56,-180,-191,-181,-192,-62,-65,]),'FOR':([4,],[45,]),'SCONST':([20,37,40,52,59,63,64,65,66,67,69,70,71,72,90,91,92,93,99,113,164,165,166,167,168,169,170,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[97,97,97,97,97,-140,-146,-142,-141,-143,97,-144,-145,97,97,-123,97,-122,97,97,97,97,-111,-113,-110,-112,-114,-105,-107,-97,-101,-102,-106,-104,-99,-98,-103,-100,97,97,-118,-117,-119,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'PROC':([54,],[129,]),'RETURN':([0,4,5,6,25,27,34,38,43,49,50,53,54,117,124,126,127,130,136,160,172,195,205,208,210,211,231,234,258,275,297,],[40,40,40,-6,-4,-7,-8,-2,-5,40,-151,-3,40,-128,40,-152,40,40,-24,-9,40,-18,40,40,-201,-129,40,40,-204,40,-205,]),'WHILE':([4,10,17,23,24,30,39,68,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,94,96,97,98,100,101,102,103,104,105,107,118,119,121,123,138,141,142,144,145,146,154,157,163,191,192,215,225,229,235,236,239,244,248,249,274,287,292,304,305,310,313,316,318,327,329,332,],[52,-59,-17,-58,-179,-57,-178,-61,-60,-68,-80,-70,-95,-120,-69,-77,-79,-86,-56,-108,-124,-125,-71,-76,-73,-81,-87,-75,-126,-74,-67,-115,-78,-72,-164,-165,52,-166,-180,-37,-33,-34,-35,-32,-36,-38,-191,-127,-121,-181,-192,-109,-96,-116,-85,-62,-174,-175,-82,-167,-176,-39,-40,-88,-65,-168,-172,-83,-89,-173,]),'CHAR':([17,57,61,108,133,151,201,213,218,251,256,298,301,302,],[-17,-15,157,157,157,157,157,-16,157,157,157,157,157,157,]),'ARRAY':([17,57,61,108,133,151,213,256,298,302,],[-17,-15,149,149,149,149,-16,149,149,149,]),'RETURNS':([207,253,293,],[259,-206,-207,]),'PLUS':([10,17,23,24,30,39,68,74,75,76,77,78,79,80,82,83,85,86,87,88,89,94,96,97,100,101,102,103,104,105,107,138,163,191,192,215,225,229,235,236,239,244,263,274,313,327,],[-59,-17,-58,-179,-57,-178,-61,-60,-68,-80,-70,169,-120,-69,-77,-79,-56,-108,-124,-125,-71,-76,-73,-81,-75,-126,-74,-67,-115,-78,-72,-180,-191,-127,-121,-181,-192,-109,169,-116,-85,-62,-56,-82,-65,-83,]),'TIMES':([10,17,23,24,30,39,68,74,75,76,77,79,80,82,83,85,86,87,88,89,94,96,97,100,101,102,103,104,105,107,138,163,191,192,215,225,229,236,239,244,263,274,313,327,],[-59,-17,-58,-179,-57,-178,-61,-60,-68,-80,-70,-120,-69,-77,-79,-56,187,-124,-125,-71,-76,-73,-81,-75,-126,-74,-67,-115,-78,-72,-180,-191,-127,-121,-181,-192,187,-116,-85,-62,-56,-82,-65,-83,]),'MOD':([10,17,23,24,30,39,68,74,75,76,77,79,80,82,83,85,86,87,88,89,94,96,97,100,101,102,103,104,105,107,138,163,191,192,215,225,229,236,239,244,263,274,313,327,],[-59,-17,-58,-179,-57,-178,-61,-60,-68,-80,-70,-120,-69,-77,-79,-56,188,-124,-125,-71,-76,-73,-81,-75,-126,-74,-67,-115,-78,-72,-180,-191,-127,-121,-181,-192,188,-116,-85,-62,-56,-82,-65,-83,]),'COMMA':([10,17,23,24,30,39,55,56,57,58,60,61,62,68,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,94,96,97,98,100,101,102,103,104,105,107,108,137,138,139,140,141,142,144,145,146,147,148,150,152,153,154,155,156,157,158,162,163,191,192,197,198,212,213,214,215,220,223,224,225,229,235,236,239,244,254,255,256,261,264,266,267,269,272,274,284,286,295,296,299,304,305,310,313,319,320,322,323,324,325,326,327,329,],[-59,-17,-58,-179,-57,-178,134,135,-15,-25,-10,134,159,-61,-60,-68,-80,-70,-95,-120,-69,-77,-79,-86,-56,-108,-124,-125,-71,-76,-73,-81,-87,-75,-126,-74,-67,-115,-78,-72,134,216,-180,-184,-182,-37,-33,-34,-35,-32,-30,-46,-41,-29,-31,-36,-47,-12,-38,-28,216,-191,-127,-121,243,-63,-27,-16,-26,-181,-45,-13,-11,-192,-109,-96,-116,-85,-62,-208,294,134,-183,-50,-52,301,-53,-14,-82,-64,-44,-210,-211,-48,-39,-40,-88,-65,-209,-212,-184,-51,-49,-54,-42,-83,-89,]),'FALSE':([20,37,40,52,59,63,64,65,66,67,69,70,71,72,90,91,92,93,99,113,164,165,166,167,168,169,170,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[82,82,82,82,82,-140,-146,-142,-141,-143,82,-144,-145,82,82,-123,82,-122,82,82,82,82,-111,-113,-110,-112,-114,-105,-107,-97,-101,-102,-106,-104,-99,-98,-103,-100,82,82,-118,-117,-119,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'DO':([0,4,5,6,25,27,34,38,43,49,50,53,54,117,124,126,127,130,136,160,172,195,205,208,210,211,231,234,258,275,297,],[4,4,4,-6,-4,-7,-8,-2,-5,4,-151,-3,4,-128,4,-152,4,4,-24,-9,4,-18,4,4,-201,-129,4,4,-204,4,-205,]),'REF':([17,57,61,108,133,151,213,256,298,302,],[-17,-15,151,151,151,151,-16,151,151,151,]),'SEMI':([1,2,3,10,11,12,14,17,22,23,24,26,30,39,40,44,47,48,51,56,58,60,62,68,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,94,96,97,98,100,101,102,103,104,105,106,107,109,110,111,112,114,115,116,118,119,121,123,125,128,131,132,138,141,142,144,145,146,147,148,150,152,153,154,155,156,157,158,161,163,191,192,196,203,204,207,209,212,214,215,220,223,224,225,229,230,235,236,239,240,241,244,248,249,252,253,257,260,272,274,276,283,287,292,293,299,304,305,310,313,316,318,324,325,327,329,332,333,336,],[-133,-137,-138,-59,-135,-134,-131,-17,-136,-58,-179,-132,-57,-178,-187,117,-161,-157,127,136,-25,-10,160,-61,-60,-68,-80,-70,-95,-120,-69,-77,-79,-86,-56,-108,-124,-125,-71,-76,-73,-81,-87,-75,-126,-74,-67,-115,-78,-90,-72,195,-19,-185,-186,-190,-189,-188,-164,-165,-162,-166,-159,-177,210,211,-180,-37,-33,-34,-35,-32,-30,-46,-41,-29,-31,-36,-47,-12,-38,-28,-139,-191,-127,-121,-20,-163,-158,258,-202,-27,-26,-181,-45,-13,-11,-192,-109,-147,-96,-116,-85,-23,-21,-62,-174,-175,-160,-206,297,-203,-14,-82,-148,-22,-167,-176,-207,-48,-39,-40,-88,-65,-168,-172,-49,-54,-83,-89,-173,-213,-214,]),'ICONST':([20,37,40,52,59,63,64,65,66,67,69,70,71,72,90,91,92,93,99,113,164,165,166,167,168,169,170,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,193,200,216,217,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[94,94,94,94,94,-140,-146,-142,-141,-143,94,-144,-145,94,94,-123,94,-122,94,94,94,94,-111,-113,-110,-112,-114,-105,-107,-97,-101,-102,-106,-104,-99,-98,-103,-100,94,94,-118,-117,-119,94,94,94,262,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'OD':([4,49,50,117,126,127,205,211,],[48,125,-151,-128,-152,204,252,-129,]),'ID':([0,4,5,6,8,10,15,17,20,23,24,25,27,30,31,33,34,37,38,39,40,43,45,49,50,52,53,54,57,59,61,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,113,117,124,126,127,130,133,134,135,136,138,151,159,160,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,191,192,193,195,196,200,201,205,206,208,210,211,213,215,216,218,219,221,222,225,229,231,233,234,235,236,238,239,240,241,242,243,244,245,251,256,258,273,274,275,280,281,283,288,291,294,297,298,300,301,302,303,309,310,313,317,327,329,],[17,17,17,-6,17,-59,17,-17,17,-58,-179,-4,-7,-57,17,17,-8,17,-2,-178,17,-5,17,17,-151,17,-3,17,-15,17,17,-140,-146,-142,-141,-143,-61,17,-144,-145,17,-60,-68,-80,-70,-95,-120,-69,-77,-79,-86,-56,-108,-124,-125,-71,17,-123,17,-122,-76,17,-73,-81,-87,17,-75,-126,-74,-67,-115,-78,-72,17,17,-19,17,-128,17,-152,17,17,17,17,17,-24,-180,17,17,-9,-191,17,17,-111,-113,-110,-112,-114,17,-105,-107,-97,-101,-102,-106,-104,-99,-98,-103,-100,17,17,-118,-117,-119,-127,-121,17,-18,-20,17,17,17,17,17,-201,-129,-16,-181,17,17,17,17,17,-192,-109,17,17,17,-96,-116,17,-85,-23,-21,17,17,-62,17,17,17,-204,17,-82,17,17,17,-22,17,17,17,-205,17,17,17,17,17,17,-88,-65,17,-83,-89,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'array_primitive_value':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'call_action':([0,4,5,20,37,40,49,52,54,59,69,72,90,92,95,99,113,124,127,130,164,165,172,184,185,193,200,205,208,216,218,219,221,222,231,233,234,238,242,243,245,273,275,280,281,288,291,300,301,303,309,317,],[1,1,1,74,74,74,1,74,1,74,74,74,74,74,74,74,74,1,1,1,74,74,1,74,74,74,74,1,1,74,74,74,74,74,1,74,1,74,74,74,74,74,1,74,74,74,74,74,74,74,74,74,]),'step_enumeration':([45,],[119,]),'if_action':([0,4,5,49,54,124,127,130,172,205,208,231,234,275,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'do_action':([0,4,5,49,54,124,127,130,172,205,208,231,234,275,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'character_mode':([61,108,133,151,201,218,251,256,298,301,302,],[144,144,144,144,144,144,144,144,144,144,144,]),'statement_list':([0,130,],[5,208,]),'declaration_list':([15,],[62,]),'discrete_range_mode':([61,108,133,151,201,218,251,256,298,301,302,],[145,145,145,145,145,145,145,145,145,145,145,]),'label_id':([0,4,5,49,127,130,172,205,208,231,234,275,],[7,46,7,46,46,7,46,46,7,46,46,46,]),'upper_bound':([245,273,303,],[285,306,326,]),'index_mode':([218,301,],[264,323,]),'step_value':([247,],[289,]),'value_array_slice':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'identifier':([0,4,5,8,15,20,31,33,37,40,45,49,52,54,59,61,69,72,90,92,95,99,108,109,113,124,127,130,133,134,135,151,159,164,165,172,184,185,193,200,201,205,206,208,216,218,219,221,222,231,233,234,238,242,243,245,251,256,273,275,280,281,288,291,294,298,300,301,302,303,309,317,],[9,9,9,57,57,85,57,112,85,85,122,9,85,85,85,150,85,85,85,85,85,85,150,57,85,85,9,9,150,213,57,150,57,85,85,9,85,85,85,85,250,9,57,9,85,263,85,85,85,9,85,9,85,85,85,85,250,150,85,9,85,85,85,85,57,150,85,263,150,85,85,85,]),'composite_mode':([61,108,133,151,256,298,302,],[153,153,153,153,153,153,153,]),'builtin_name':([0,4,5,20,37,40,49,52,54,59,69,72,90,92,95,99,113,124,127,130,164,165,172,184,185,193,200,205,208,216,218,219,221,222,231,233,234,238,242,243,245,273,275,280,281,288,291,300,301,303,309,317,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'arithmetic_multiplicative_operator':([86,229,],[185,185,]),'formal_parameter':([206,294,],[254,319,]),'relational_operator':([84,],[175,]),'boolean_mode':([61,108,133,151,201,218,251,256,298,301,302,],[142,142,142,142,142,142,142,142,142,142,142,]),'operand0':([20,37,40,52,59,69,72,90,92,113,164,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'operand3':([20,37,40,52,59,69,72,90,92,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[104,104,104,104,104,104,104,104,104,104,104,104,104,236,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'operand2':([20,37,40,52,59,69,72,90,92,113,164,165,184,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[86,86,86,86,86,86,86,86,86,86,86,229,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'while_control':([4,121,],[47,203,]),'location':([0,4,5,20,37,40,49,52,54,59,69,72,90,92,95,99,113,124,127,130,164,165,172,184,185,193,200,205,208,216,218,219,221,222,231,233,234,238,242,243,245,273,275,280,281,288,291,300,301,303,309,317,],[16,16,16,87,87,87,16,87,16,87,87,87,87,87,191,87,87,16,16,16,87,87,16,87,87,87,87,16,16,87,87,87,87,87,16,87,16,87,87,87,87,87,16,87,87,87,87,87,87,87,87,87,]),'referenced_location':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'operand1':([20,37,40,52,59,69,72,90,92,113,164,184,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[78,78,78,78,78,78,78,78,78,78,78,235,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'formal_parameter_list':([206,],[255,]),'for_control':([45,],[121,]),'empty_literal':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'parenthesized_expression':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'result_action':([0,4,5,49,54,124,127,130,172,205,208,231,234,275,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'array_element':([0,4,5,20,37,40,49,52,54,59,69,72,90,92,95,99,113,124,127,130,164,165,172,184,185,193,200,205,208,216,218,219,221,222,231,233,234,238,242,243,245,273,275,280,281,288,291,300,301,303,309,317,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'builtin_call':([0,4,5,20,37,40,49,52,54,59,69,72,90,92,95,99,113,124,127,130,164,165,172,184,185,193,200,205,208,216,218,219,221,222,231,233,234,238,242,243,245,273,275,280,281,288,291,300,301,303,309,317,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'iteration':([45,],[118,]),'parameter_list':([59,72,300,],[137,162,137,]),'closed_dyadic_operator':([16,],[66,]),'declaration':([15,159,],[60,224,]),'operator2':([78,235,],[165,165,]),'action_statement_list':([4,127,172,231,],[49,205,234,275,]),'reference_mode':([61,108,133,151,256,298,302,],[147,147,147,147,147,147,147,]),'primitive_value':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'action':([0,4,5,49,54,124,127,130,172,205,208,231,234,275,],[44,44,44,44,132,132,44,44,44,44,44,44,44,44,]),'parameter_spec':([256,],[295,]),'action_statement':([0,4,5,49,127,130,172,205,208,231,234,275,],[34,50,34,126,50,34,50,126,34,50,126,126,]),'discrete_mode':([61,108,133,151,201,218,251,256,298,301,302,],[152,152,152,152,249,266,292,152,152,266,152,]),'elsif_expression':([237,],[278,]),'control_part':([4,],[51,]),'literal':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'index_mode_list':([218,],[267,]),'program':([0,],[36,]),'integer_mode':([61,108,133,151,201,218,251,256,298,301,302,],[146,146,146,146,146,146,146,146,146,146,146,]),'statement':([0,5,130,208,],[38,53,38,53,]),'parameter':([59,72,216,300,],[140,140,261,140,]),'integer_expression':([164,288,],[228,315,]),'procedure_call':([0,4,5,20,37,40,49,52,54,59,69,72,90,92,95,99,113,124,127,130,164,165,172,184,185,193,200,205,208,216,218,219,221,222,231,233,234,238,242,243,245,273,275,280,281,288,291,300,301,303,309,317,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'result_spec':([207,],[257,]),'exit_label_id':([33,],[111,]),'else_clause':([171,307,],[232,328,]),'boolean_literal':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'value_array_element':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'parenthesis_gambiarra':([129,],[207,]),'newmode_statement':([0,5,130,208,],[6,6,6,6,]),'synonym_list':([31,],[109,]),'discrete_expression':([200,291,317,],[246,318,332,]),'initialization':([156,],[223,]),'result':([37,40,],[115,116,]),'string_mode':([61,108,133,151,256,298,302,],[148,148,148,148,148,148,148,]),'identifier_list':([8,15,31,109,135,159,206,294,],[55,61,108,108,55,61,256,256,]),'arithmetic_additive_operator':([78,235,],[168,168,]),'boolean_expression':([20,52,90,233,281,309,],[81,128,189,277,312,330,]),'expression_list':([113,],[197,]),'array_slice':([0,4,5,20,37,40,49,52,54,59,69,72,90,92,95,99,113,124,127,130,164,165,172,184,185,193,200,205,208,216,218,219,221,222,231,233,234,238,242,243,245,273,275,280,281,288,291,300,301,303,309,317,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'range_enumeration':([45,],[123,]),'start_value':([200,],[247,]),'return_action':([0,4,5,49,54,124,127,130,172,205,208,231,234,275,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'exit_action':([0,4,5,49,54,124,127,130,172,205,208,231,234,275,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'newmode_list':([8,],[56,]),'else_expression':([237,278,],[279,308,]),'mode':([61,108,133,151,256,298,302,],[156,194,212,220,296,321,325,]),'element_mode':([302,],[324,]),'string_concatenation_operator':([78,235,],[166,166,]),'membership_operator':([84,],[181,]),'then_expression':([189,312,330,],[237,331,335,]),'operator1':([84,],[184,]),'declaration_statement':([0,5,130,208,],[25,25,25,25,]),'assignment_action':([0,4,5,49,54,124,127,130,172,205,208,231,234,275,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'procedure_statement':([0,5,130,208,],[27,27,27,27,]),'integer_literal':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'character_literal':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'formal_procedure_head':([54,],[130,]),'conditional_expression':([20,37,40,52,59,69,72,90,92,113,164,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'procedure_definition':([54,],[131,]),'monadic_operator':([20,37,40,52,59,69,72,90,92,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'end_value':([247,289,],[287,316,]),'synonym_definition':([31,109,],[110,196,]),'character_string_literal':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'operand4':([20,37,40,52,59,69,72,90,92,99,113,164,165,184,185,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[79,79,79,79,79,79,79,79,79,192,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'expression':([20,37,40,52,59,69,72,90,92,113,164,193,200,216,218,219,221,222,233,238,242,243,245,273,280,281,288,291,300,301,303,309,317,],[106,114,114,106,139,161,139,106,190,198,226,240,248,139,265,265,265,272,106,282,240,284,286,286,311,106,314,248,322,265,286,106,248,]),'mode_name':([61,108,133,151,256,298,302,],[158,158,158,158,158,158,158,]),'dereferenced_reference':([0,4,5,20,37,40,49,52,54,59,69,72,90,92,95,99,113,124,127,130,164,165,172,184,185,193,200,205,208,216,218,219,221,222,231,233,234,238,242,243,245,273,275,280,281,288,291,300,301,303,309,317,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'synonym_statement':([0,5,130,208,],[43,43,43,43,]),'then_clause':([81,277,],[171,307,]),'loop_counter':([45,],[120,]),'lower_bound':([113,164,218,219,221,300,301,],[199,227,268,268,268,268,268,]),'array_mode':([61,108,133,151,256,298,302,],[155,155,155,155,155,155,155,]),'mode_definition':([8,135,],[58,214,]),'bracketed_action':([0,4,5,49,54,124,127,130,172,205,208,231,234,275,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'literal_range':([218,219,221,300,301,],[269,270,271,270,269,]),'constant_expression':([193,242,],[241,283,]),'assigning_operator':([16,],[69,]),'array_location':([0,4,5,20,37,40,49,52,54,59,69,72,90,92,95,99,113,124,127,130,164,165,172,184,185,193,200,205,208,216,218,219,221,222,231,233,234,238,242,243,245,273,275,280,281,288,291,300,301,303,309,317,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list ASSIGN constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode ASSIGN constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',114),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET ICONST RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',392),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',398),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',404),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',410),
  ('expression -> operand0','expression',1,'p_expression','parser.py',417),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',418),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',424),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',425),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',434),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',440),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',446),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',452),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',453),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',462),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',463),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',470),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',471),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',483),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',488),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',493),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',494),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',502),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',509),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',515),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',519),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',520),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',529),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',534),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',535),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',544),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',550),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',551),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',556),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',561),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',562),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',571),
  ('action -> bracketed_action','action',1,'p_action','parser.py',577),
  ('action -> assignment_action','action',1,'p_action','parser.py',578),
  ('action -> call_action','action',1,'p_action','parser.py',579),
  ('action -> exit_action','action',1,'p_action','parser.py',580),
  ('action -> return_action','action',1,'p_action','parser.py',581),
  ('action -> result_action','action',1,'p_action','parser.py',582),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',588),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',593),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',613),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',622),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',627),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',628),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',637),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',638),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',647),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',648),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',655),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',657),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',658),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',673),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',674),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',675),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',676),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',691),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',692),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',701),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',707),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',712),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',713),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',720),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',725),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',730),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',735),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',736),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',744),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',749),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',750),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',757),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',761),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',762),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',767),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',768),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',775),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',776),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',783),
  ('exit_action -> EXIT exit_label_id','exit_action',2,'p_exit_action','parser.py',791),
  ('exit_label_id -> identifier','exit_label_id',1,'p_exit_label_id','parser.py',795),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',799),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',800),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',807),
  ('result -> expression','result',1,'p_result','parser.py',811),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',816),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',817),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',826),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',827),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',828),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',829),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',830),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',831),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',835),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',839),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',847),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',848),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',856),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',857),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',864),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',865),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',872),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',876),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',877),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',889),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',890),
]
