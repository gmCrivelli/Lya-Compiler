
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST TO THEN INT ELSE END LENGTH ARRAY FALSE READ NUM TRUE CHAR DO FI PRINT IF SYN DCL IN WHILE TYPE ELSIF RETURNS ASC FOR DOWN REF EXIT BY OD LOC PROC BOOL NULL LOWER CHARS ABS UPPER RETURN RESULTprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list ASSIGN constant_expression\n                              | identifier_list mode ASSIGN constant_expressionconstant_expression : expressionnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET ICONST RBRACKETarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT exit_label_idexit_label_id :  identifierreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'EQUAL':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,135,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,-96,-181,-192,-62,-82,-56,-65,-83,]),'ABS':([0,3,8,20,23,24,25,28,31,37,39,44,47,53,55,59,69,76,82,85,87,89,90,102,103,104,105,106,107,108,109,110,112,113,114,118,119,120,121,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,151,160,161,164,166,169,189,198,202,205,206,207,214,218,220,227,228,229,231,233,234,236,240,242,244,246,249,253,255,280,289,297,299,301,302,303,311,320,],[2,-6,2,-5,2,2,2,2,-7,-4,-2,-8,2,2,-123,2,-122,2,2,-3,2,2,-151,2,2,2,-128,-144,-143,-140,-145,-146,-141,-142,2,2,-118,-117,-119,2,2,2,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,2,-97,-105,-99,-152,2,2,-24,-18,2,2,-9,2,2,2,2,2,2,2,2,2,2,2,-129,-201,2,2,2,2,2,2,2,2,-204,2,2,2,2,2,2,-205,2,]),'IN':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,155,157,191,200,211,212,213,215,217,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,136,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,219,-169,-191,-116,-85,-109,-96,-181,257,-192,-62,-82,-56,-65,-83,]),'END':([3,20,31,37,39,44,85,105,164,166,189,198,233,234,236,280,311,],[-6,-5,-7,-4,-2,-8,-3,-128,-24,-18,235,-9,-129,-201,275,-204,-205,]),'EXIT':([0,3,20,24,28,31,37,39,44,85,87,90,102,105,125,151,160,161,164,166,189,198,206,207,220,233,234,236,253,280,311,],[18,-6,-5,18,18,-7,-4,-2,-8,-3,18,-151,18,-128,18,-152,18,18,-24,-18,18,-9,18,18,18,-129,-201,18,18,-204,-205,]),'PLUS':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,133,-68,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,133,-181,-192,-62,-82,-56,-65,-83,]),'UPPER':([0,3,8,20,23,24,25,28,31,37,39,44,47,53,55,59,69,76,82,85,87,89,90,102,103,104,105,106,107,108,109,110,112,113,114,118,119,120,121,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,151,160,161,164,166,169,189,198,202,205,206,207,214,218,220,227,228,229,231,233,234,236,240,242,244,246,249,253,255,280,289,297,299,301,302,303,311,320,],[5,-6,5,-5,5,5,5,5,-7,-4,-2,-8,5,5,-123,5,-122,5,5,-3,5,5,-151,5,5,5,-128,-144,-143,-140,-145,-146,-141,-142,5,5,-118,-117,-119,5,5,5,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,5,-97,-105,-99,-152,5,5,-24,-18,5,5,-9,5,5,5,5,5,5,5,5,5,5,5,-129,-201,5,5,5,5,5,5,5,5,-204,5,5,5,5,5,5,-205,5,]),'COLON':([9,11,14,21,27,30,33,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,77,78,79,94,111,123,146,147,191,194,195,200,209,210,211,212,213,215,239,241,254,265,266,269,288,313,316,318,325,],[-17,-179,-57,-130,-58,-178,102,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,161,-61,-121,-127,-180,-191,-43,242,-116,-43,255,-85,-109,-96,-181,-192,-62,-82,-43,301,-56,-88,-65,-89,-83,-43,]),'GREATER':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,140,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,-96,-181,-192,-62,-82,-56,-65,-83,]),'IF':([0,3,8,20,23,24,25,28,31,37,39,44,47,59,82,85,87,89,90,102,103,104,105,106,107,108,109,110,112,113,114,125,126,151,160,161,164,166,169,189,198,202,205,206,207,214,218,220,227,228,229,231,233,234,236,240,242,244,246,249,253,255,280,289,297,299,301,302,303,311,320,],[8,-6,47,-5,47,8,47,8,-7,-4,-2,-8,47,47,47,-3,8,47,-151,8,47,47,-128,-144,-143,-140,-145,-146,-141,-142,47,8,47,-152,8,8,-24,-18,47,8,-9,47,47,8,8,47,47,8,47,47,47,47,-129,-201,8,47,47,47,47,47,8,47,-204,47,47,47,47,47,47,-205,47,]),'DECREASE':([9,11,14,19,21,27,30,34,42,48,111,147,191,215,239,241,313,],[-17,-179,-57,-60,-56,-58,-178,-59,107,-56,-61,-180,-191,-181,-192,-62,-65,]),'ID':([0,3,8,9,11,14,18,20,23,24,25,27,28,29,30,31,32,34,37,39,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,82,85,87,89,90,91,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,151,160,161,162,163,164,165,166,167,169,183,189,191,197,198,200,202,205,206,207,211,212,213,214,215,218,219,220,223,225,226,227,228,229,231,233,234,236,237,239,240,241,242,244,246,249,253,254,255,257,267,278,280,288,289,297,299,301,302,303,304,308,311,312,313,316,318,320,],[9,-6,9,-17,-179,-57,9,-5,9,9,9,-58,9,9,-178,-7,9,-59,-4,-2,9,-8,-108,-81,9,-56,-74,-70,-77,-72,9,-125,-123,-60,9,-95,-68,-86,-69,-120,-87,-71,-76,-115,-122,-126,-78,-73,-124,-79,9,-67,-80,-75,9,-3,9,9,-151,9,-15,9,9,-19,9,9,9,-128,-144,-143,-140,-145,-146,-61,-141,-142,9,9,9,-118,-117,-119,-121,9,9,9,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,9,-97,-105,-99,-127,-180,-152,9,9,9,9,-24,9,-18,-20,9,9,9,-191,9,-9,-116,9,9,9,9,-85,-109,-96,9,-181,9,9,9,-16,-23,-21,9,9,9,9,-129,-201,9,9,-192,9,-62,9,9,9,9,9,-82,9,9,-22,9,-204,-88,9,9,9,9,9,9,9,9,-205,9,-65,-89,-83,9,]),'RETURNS':([238,276,307,],[282,-206,-207,]),'LESS':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,144,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,-96,-181,-192,-62,-82,-56,-65,-83,]),'DIVCREASE':([9,11,14,19,21,27,30,34,42,48,111,147,191,215,239,241,313,],[-17,-179,-57,-60,-56,-58,-178,-59,109,-56,-61,-180,-191,-181,-192,-62,-65,]),'FALSE':([8,23,25,47,53,55,59,69,82,89,103,104,106,107,108,109,110,112,113,114,118,119,120,121,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[51,51,51,51,51,-123,51,-122,51,51,51,51,-144,-143,-140,-145,-146,-141,-142,51,51,-118,-117,-119,51,51,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,51,-97,-105,-99,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'TO':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,258,259,260,288,295,296,313,316,318,321,322,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,-96,-181,-192,-62,-82,-170,-174,299,-88,299,320,-65,-89,-83,-171,-55,]),'PRINT':([0,3,8,20,23,24,25,28,31,37,39,44,47,53,55,59,69,76,82,85,87,89,90,102,103,104,105,106,107,108,109,110,112,113,114,118,119,120,121,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,151,160,161,164,166,169,189,198,202,205,206,207,214,218,220,227,228,229,231,233,234,236,240,242,244,246,249,253,255,280,289,297,299,301,302,303,311,320,],[13,-6,13,-5,13,13,13,13,-7,-4,-2,-8,13,13,-123,13,-122,13,13,-3,13,13,-151,13,13,13,-128,-144,-143,-140,-145,-146,-141,-142,13,13,-118,-117,-119,13,13,13,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,13,-97,-105,-99,-152,13,13,-24,-18,13,13,-9,13,13,13,13,13,13,13,13,13,13,13,-129,-201,13,13,13,13,13,13,13,13,-204,13,13,13,13,13,13,-205,13,]),'MODCREASE':([9,11,14,19,21,27,30,34,42,48,111,147,191,215,239,241,313,],[-17,-179,-57,-60,-56,-58,-178,-59,110,-56,-61,-180,-191,-181,-192,-62,-65,]),'BY':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,258,259,260,288,313,316,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,-96,-181,-192,-62,-82,-170,-174,297,-88,-65,-89,-83,]),'FI':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,77,78,79,90,105,111,123,124,125,146,147,151,191,200,203,206,207,211,212,213,215,233,239,241,247,253,254,288,290,291,292,313,316,317,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-151,-128,-61,-121,204,-149,-127,-180,-152,-191,-116,251,-153,-150,-85,-109,-96,-181,-129,-192,-62,288,-154,-82,-88,316,-92,-155,-65,-89,-156,-83,]),'ASSIGN':([9,11,14,19,21,27,30,34,42,48,95,96,100,111,147,155,157,168,170,171,172,173,174,175,176,177,178,179,180,182,184,185,191,199,215,223,230,239,241,300,305,306,313,327,328,],[-17,-179,-57,-60,-56,-58,-178,-59,108,-56,-15,162,169,-61,-180,218,-169,-32,-29,-46,-31,-36,-30,-38,-28,228,-33,-35,-37,-47,-34,-41,-191,244,-181,-16,-45,-192,-62,-40,-39,-48,-65,-49,-54,]),'DCL':([0,3,20,24,31,37,39,44,85,105,164,166,189,198,233,234,236,280,311,],[43,-6,-5,43,-7,-4,-2,-8,-3,-128,-24,-18,43,-9,-129,-201,43,-204,-205,]),'OR':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,138,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,-96,-181,-192,-62,-82,-56,-65,-83,]),'REF':([9,95,100,117,162,183,223,278,304,312,],[-17,-15,183,183,183,183,-16,183,183,183,]),'TIMES':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,61,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,120,-81,-56,-74,-70,-77,-72,-125,-60,-68,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,120,-181,-192,-62,-82,-56,-65,-83,]),'WHILE':([9,11,14,27,28,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,154,156,158,159,168,173,175,178,179,180,184,191,200,211,212,213,215,239,241,254,259,262,288,294,298,300,305,313,316,318,319,323,333,],[-17,-179,-57,-58,89,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,89,-165,-166,-164,-32,-36,-38,-33,-35,-37,-34,-191,-116,-85,-109,-96,-181,-192,-62,-82,-174,-175,-88,-176,-167,-40,-39,-65,-89,-83,-168,-172,-173,]),'READ':([0,3,8,20,23,24,25,28,31,37,39,44,47,53,55,59,69,76,82,85,87,89,90,102,103,104,105,106,107,108,109,110,112,113,114,118,119,120,121,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,151,160,161,164,166,169,189,198,202,205,206,207,214,218,220,227,228,229,231,233,234,236,240,242,244,246,249,253,255,280,289,297,299,301,302,303,311,320,],[4,-6,4,-5,4,4,4,4,-7,-4,-2,-8,4,4,-123,4,-122,4,4,-3,4,4,-151,4,4,4,-128,-144,-143,-140,-145,-146,-141,-142,4,4,-118,-117,-119,4,4,4,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,4,-97,-105,-99,-152,4,4,-24,-18,4,4,-9,4,4,4,4,4,4,4,4,4,4,4,-129,-201,4,4,4,4,4,4,4,4,-204,4,4,4,4,4,4,-205,4,]),'GREATEREQ':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,137,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,-96,-181,-192,-62,-82,-56,-65,-83,]),'$end':([3,20,22,24,31,37,39,44,85,105,164,166,198,233,234,],[-6,-5,0,-1,-7,-4,-2,-8,-3,-128,-24,-18,-9,-129,-201,]),'LESSEQ':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,141,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,-96,-181,-192,-62,-82,-56,-65,-83,]),'NUM':([0,3,8,20,23,24,25,28,31,37,39,44,47,53,55,59,69,76,82,85,87,89,90,102,103,104,105,106,107,108,109,110,112,113,114,118,119,120,121,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,151,160,161,164,166,169,189,198,202,205,206,207,214,218,220,227,228,229,231,233,234,236,240,242,244,246,249,253,255,280,289,297,299,301,302,303,311,320,],[26,-6,26,-5,26,26,26,26,-7,-4,-2,-8,26,26,-123,26,-122,26,26,-3,26,26,-151,26,26,26,-128,-144,-143,-140,-145,-146,-141,-142,26,26,-118,-117,-119,26,26,26,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,26,-97,-105,-99,-152,26,26,-24,-18,26,26,-9,26,26,26,26,26,26,26,26,26,26,26,-129,-201,26,26,26,26,26,26,26,26,-204,26,26,26,26,26,26,-205,26,]),'RESULT':([0,3,20,24,28,31,37,39,44,85,87,90,102,105,125,151,160,161,164,166,189,198,206,207,220,233,234,236,253,280,311,],[23,-6,-5,23,23,-7,-4,-2,-8,-3,23,-151,23,-128,23,-152,23,23,-24,-18,23,-9,23,23,23,-129,-201,23,23,-204,-205,]),'RBRACKET':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,168,173,175,178,179,180,184,191,193,194,200,208,209,211,212,213,215,239,241,254,268,270,271,272,274,283,284,285,288,293,300,305,313,316,318,324,326,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-32,-36,-38,-33,-35,-37,-34,-191,241,-63,-116,254,-55,-85,-109,-96,-181,-192,-62,-82,-52,-53,304,-50,306,-64,313,-44,-88,318,-40,-39,-65,-89,-83,-42,-51,]),'RETURN':([0,3,20,24,28,31,37,39,44,85,87,90,102,105,125,151,160,161,164,166,189,198,206,207,220,233,234,236,253,280,311,],[25,-6,-5,25,25,-7,-4,-2,-8,-3,25,-151,25,-128,25,-152,25,25,-24,-18,25,-9,25,25,25,-129,-201,25,25,-204,-205,]),'LPAREN':([2,4,5,7,8,9,13,17,21,23,25,26,35,36,47,48,53,55,59,69,82,89,103,104,106,107,108,109,110,112,113,114,118,119,120,121,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,168,169,170,173,175,178,179,180,184,185,190,202,205,214,218,227,228,229,231,240,242,244,246,249,255,261,262,268,269,282,289,294,297,299,300,301,302,303,305,320,],[-193,-199,-196,-198,59,-17,-200,-197,82,59,59,-195,103,-194,59,82,59,-123,59,-122,59,59,59,59,-144,-143,-140,-145,-146,-141,-142,59,59,-118,-117,-119,59,59,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,59,-97,-105,-99,-32,59,227,-36,-38,-33,-35,-37,-34,231,237,59,59,59,59,59,59,59,59,59,59,59,59,59,59,231,227,227,302,312,59,227,59,59,-40,59,59,59,-39,59,]),'SCONST':([8,23,25,47,53,55,59,69,82,89,103,104,106,107,108,109,110,112,113,114,118,119,120,121,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[46,46,46,46,46,-123,46,-122,46,46,46,46,-144,-143,-140,-145,-146,-141,-142,46,46,-118,-117,-119,46,46,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,46,-97,-105,-99,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'DO':([0,3,20,24,28,31,37,39,44,85,87,90,102,105,125,151,160,161,164,166,189,198,206,207,220,233,234,236,253,280,311,],[28,-6,-5,28,28,-7,-4,-2,-8,-3,28,-151,28,-128,28,-152,28,28,-24,-18,28,-9,28,28,28,-129,-201,28,28,-204,-205,]),'OD':([28,87,90,105,151,160,220,233,],[92,152,-151,-128,-152,221,263,-129,]),'COMMA':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,77,78,79,95,96,97,98,100,111,115,116,117,123,146,147,148,149,150,168,170,171,172,173,174,175,176,178,179,180,182,184,185,191,192,193,194,199,200,211,212,213,215,222,223,224,230,239,241,243,245,254,256,268,270,271,272,277,278,279,283,285,286,288,300,305,306,309,310,313,316,318,324,325,326,327,328,329,330,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-15,163,-25,165,163,-61,197,-10,163,-121,-127,-180,214,-184,-182,-32,-29,-46,-31,-36,-30,-38,-28,-33,-35,-37,-47,-34,-41,-191,214,240,-63,-12,-116,-85,-109,-96,-181,-27,-16,-26,-45,-192,-62,-11,-13,-82,-183,-52,-53,303,-50,308,163,-208,-64,-44,-14,-88,-40,-39,-48,-211,-210,-65,-89,-83,-42,-184,-51,-49,-54,-209,-212,]),'TYPE':([0,3,20,24,31,37,39,44,85,105,164,166,189,198,233,234,236,280,311,],[29,-6,-5,29,-7,-4,-2,-8,-3,-128,-24,-18,29,-9,-129,-201,29,-204,-205,]),'INT':([9,95,100,117,162,183,219,223,229,257,278,303,304,312,],[-17,-15,173,173,173,173,173,-16,173,173,173,173,173,173,]),'THEN':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,57,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,77,78,79,111,122,123,146,147,191,200,211,212,213,215,239,241,252,254,287,288,313,315,316,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,125,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-90,-124,-79,-67,-80,-75,-61,202,-121,-127,-180,-191,-116,-85,-109,-96,-181,-192,-62,125,-82,202,-88,-65,202,-89,-83,]),'STRCAT':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,131,-68,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,131,-181,-192,-62,-82,-56,-65,-83,]),'LOC':([9,168,170,171,172,173,174,175,176,178,179,180,182,184,185,230,300,305,306,309,327,328,331,],[-17,-32,-29,-46,-31,-36,-30,-38,-28,-33,-35,-37,-47,-34,-41,-45,-40,-39,-48,330,-49,-54,335,]),'LBRACKET':([9,11,14,19,21,27,30,34,40,42,46,48,49,50,51,52,56,58,61,63,66,67,70,71,72,74,75,77,78,79,111,146,147,181,186,191,211,215,239,241,254,269,313,318,],[-17,-179,-57,-60,-56,-58,-178,-59,104,-66,-81,-56,-74,-70,-77,-72,-60,126,-68,-69,-71,-76,-84,-78,-73,-66,-79,-67,-80,-75,-61,-66,-180,229,232,-191,-85,-181,-192,-62,-82,-56,-65,-83,]),'TRUE':([8,23,25,47,53,55,59,69,82,89,103,104,106,107,108,109,110,112,113,114,118,119,120,121,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[71,71,71,71,71,-123,71,-122,71,71,71,71,-144,-143,-140,-145,-146,-141,-142,71,71,-118,-117,-119,71,71,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,71,-97,-105,-99,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'DOWN':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,155,157,191,200,211,212,213,215,239,241,254,258,259,260,288,295,313,316,318,321,322,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,217,-169,-191,-116,-85,-109,-96,-181,-192,-62,-82,-170,-174,296,-88,296,-65,-89,-83,-171,-55,]),'DIVIDE':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,61,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,119,-81,-56,-74,-70,-77,-72,-125,-60,-68,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,119,-181,-192,-62,-82,-56,-65,-83,]),'SYN':([0,3,20,24,31,37,39,44,85,105,164,166,189,198,233,234,236,280,311,],[32,-6,-5,32,-7,-4,-2,-8,-3,-128,-24,-18,32,-9,-129,-201,32,-204,-205,]),'ELSE':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,77,78,79,90,105,111,123,124,125,146,147,151,191,200,201,207,211,212,213,215,233,239,241,248,250,254,288,292,313,314,316,318,332,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-151,-128,-61,-121,206,-149,-127,-180,-152,-191,-116,249,-150,-85,-109,-96,-181,-129,-192,-62,249,-91,-82,-88,206,-65,-93,-89,-83,-94,]),'CHAR':([9,95,100,117,162,183,219,223,229,257,278,303,304,312,],[-17,-15,175,175,175,175,175,-16,175,175,175,175,175,175,]),'RPAREN':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,77,78,79,82,103,111,123,127,146,147,148,149,150,168,170,171,172,173,174,175,176,178,179,180,182,184,185,191,192,200,211,212,213,215,230,237,239,241,254,256,264,273,277,279,285,288,300,302,305,306,309,310,313,316,318,324,325,327,328,329,330,331,335,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,147,191,-61,-121,211,-127,-180,215,-184,-182,-32,-29,-46,-31,-36,-30,-38,-28,-33,-35,-37,-47,-34,-41,-191,239,-116,-85,-109,-96,-181,-45,276,-192,-62,-82,-183,300,305,307,-208,-44,-88,-40,147,-39,-48,-211,-210,-65,-89,-83,-42,-184,-49,-54,-209,-212,334,336,]),'PROC':([102,],[190,]),'ARRAY':([9,95,100,117,162,183,223,278,304,312,],[-17,-15,181,181,181,181,-16,181,181,181,]),'MINUS':([8,9,11,14,23,25,27,30,34,45,46,47,48,49,50,51,52,54,56,59,60,61,63,64,66,67,68,70,71,72,74,75,77,78,79,82,89,103,104,106,107,108,109,110,111,112,113,114,118,119,120,121,123,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,169,191,200,202,205,211,212,213,214,215,218,227,228,229,231,239,240,241,242,244,246,249,254,255,269,289,297,299,301,302,303,313,318,320,],[69,-17,-179,-57,69,69,-58,-178,-59,-108,-81,69,-56,-74,-70,-77,-72,-125,-60,69,132,-68,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,69,69,69,69,-144,-143,-140,-145,-146,-61,-141,-142,69,69,-118,-117,-119,-121,69,69,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,69,-97,-105,-99,-127,-180,69,-191,-116,69,69,-85,-109,132,69,-181,69,69,69,69,69,-192,69,-62,69,69,69,69,-82,69,-56,69,69,69,69,69,69,-65,-83,69,]),'ASC':([0,3,8,20,23,24,25,28,31,37,39,44,47,53,55,59,69,76,82,85,87,89,90,102,103,104,105,106,107,108,109,110,112,113,114,118,119,120,121,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,151,160,161,164,166,169,189,198,202,205,206,207,214,218,220,227,228,229,231,233,234,236,240,242,244,246,249,253,255,280,289,297,299,301,302,303,311,320,],[36,-6,36,-5,36,36,36,36,-7,-4,-2,-8,36,36,-123,36,-122,36,36,-3,36,36,-151,36,36,36,-128,-144,-143,-140,-145,-146,-141,-142,36,36,-118,-117,-119,36,36,36,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,36,-97,-105,-99,-152,36,36,-24,-18,36,36,-9,36,36,36,36,36,36,36,36,36,36,36,-129,-201,36,36,36,36,36,36,36,36,-204,36,36,36,36,36,36,-205,36,]),'BOOL':([9,95,100,117,162,183,219,223,229,257,278,303,304,312,],[-17,-15,180,180,180,180,180,-16,180,180,180,180,180,180,]),'MULCREASE':([9,11,14,19,21,27,30,34,42,48,111,147,191,215,239,241,313,],[-17,-179,-57,-60,-56,-58,-178,-59,106,-56,-61,-180,-191,-181,-192,-62,-65,]),'ARROW':([8,9,11,14,19,21,23,25,27,30,34,42,47,48,53,55,56,59,69,74,82,89,103,104,106,107,108,109,110,111,112,113,114,118,119,120,121,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,169,191,202,205,214,215,218,227,228,229,231,239,240,241,242,244,246,249,255,269,289,297,299,301,302,303,313,320,],[76,-17,-179,-57,-60,-56,76,76,-58,-178,-59,111,76,-56,76,-123,-60,76,-122,111,76,76,76,76,-144,-143,-140,-145,-146,-61,-141,-142,76,76,-118,-117,-119,76,76,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,76,-97,-105,-99,111,-180,76,-191,76,76,76,-181,76,76,76,76,76,-192,76,-62,76,76,76,76,76,-56,76,76,76,76,76,76,-65,76,]),'CHARS':([9,95,100,117,162,183,223,278,304,312,],[-17,-15,186,186,186,186,-16,186,186,186,]),'LENGTH':([0,3,8,20,23,24,25,28,31,37,39,44,47,53,55,59,69,76,82,85,87,89,90,102,103,104,105,106,107,108,109,110,112,113,114,118,119,120,121,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,151,160,161,164,166,169,189,198,202,205,206,207,214,218,220,227,228,229,231,233,234,236,240,242,244,246,249,253,255,280,289,297,299,301,302,303,311,320,],[7,-6,7,-5,7,7,7,7,-7,-4,-2,-8,7,7,-123,7,-122,7,7,-3,7,7,-151,7,7,7,-128,-144,-143,-140,-145,-146,-141,-142,7,7,-118,-117,-119,7,7,7,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,7,-97,-105,-99,-152,7,7,-24,-18,7,7,-9,7,7,7,7,7,7,7,7,7,7,7,-129,-201,7,7,7,7,7,7,7,7,-204,7,7,7,7,7,7,-205,7,]),'DIFF':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,139,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,-96,-181,-192,-62,-82,-56,-65,-83,]),'FOR':([28,],[91,]),'LOWER':([0,3,8,20,23,24,25,28,31,37,39,44,47,53,55,59,69,76,82,85,87,89,90,102,103,104,105,106,107,108,109,110,112,113,114,118,119,120,121,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,151,160,161,164,166,169,189,198,202,205,206,207,214,218,220,227,228,229,231,233,234,236,240,242,244,246,249,253,255,280,289,297,299,301,302,303,311,320,],[17,-6,17,-5,17,17,17,17,-7,-4,-2,-8,17,17,-123,17,-122,17,17,-3,17,17,-151,17,17,17,-128,-144,-143,-140,-145,-146,-141,-142,17,17,-118,-117,-119,17,17,17,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,17,-97,-105,-99,-152,17,17,-24,-18,17,17,-9,17,17,17,17,17,17,17,17,17,17,17,-129,-201,17,17,17,17,17,17,17,17,-204,17,17,17,17,17,17,-205,17,]),'ELSIF':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,77,78,79,90,105,111,123,124,125,146,147,151,191,200,201,207,211,212,213,215,233,239,241,248,250,254,288,292,313,314,316,318,332,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-151,-128,-61,-121,205,-149,-127,-180,-152,-191,-116,246,-150,-85,-109,-96,-181,-129,-192,-62,289,-91,-82,-88,205,-65,-93,-89,-83,-94,]),'CCONST':([8,23,25,47,53,55,59,69,82,89,103,104,106,107,108,109,110,112,113,114,118,119,120,121,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[75,75,75,75,75,-123,75,-122,75,75,75,75,-144,-143,-140,-145,-146,-141,-142,75,75,-118,-117,-119,75,75,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,75,-97,-105,-99,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'SEMI':([1,6,9,10,11,12,14,15,16,19,25,27,30,34,38,41,45,46,48,49,50,51,52,54,56,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,77,78,79,80,81,83,84,86,88,92,93,97,98,99,101,111,115,116,123,146,147,152,153,154,156,158,159,167,168,170,171,172,173,174,175,176,178,179,180,182,184,185,187,188,191,196,199,200,204,211,212,213,215,216,221,222,224,225,226,230,235,238,239,241,243,245,251,254,259,262,263,267,275,276,281,286,288,294,298,300,305,306,307,313,316,318,319,323,327,328,333,334,336,],[-136,-132,-17,-131,-179,-134,-57,-138,-135,-133,-187,-58,-178,-59,-137,105,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,-86,-69,-120,-87,-71,-76,-115,-126,-78,-73,-90,-124,-79,-67,-80,-75,-185,-186,-190,-189,-188,-161,-157,160,-25,164,166,-19,-61,198,-10,-121,-127,-180,-159,-177,-162,-165,-166,-164,-20,-32,-29,-46,-31,-36,-30,-38,-28,-33,-35,-37,-47,-34,-41,233,234,-191,-139,-12,-116,-147,-85,-109,-96,-181,-163,-158,-27,-26,-23,-21,-45,-202,280,-192,-62,-11,-13,-148,-82,-174,-175,-160,-22,-203,-206,311,-14,-88,-176,-167,-40,-39,-48,-207,-65,-89,-83,-168,-172,-49,-54,-173,-213,-214,]),'ICONST':([8,23,25,47,53,55,59,69,82,89,103,104,106,107,108,109,110,112,113,114,118,119,120,121,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,169,202,205,214,218,227,228,229,231,232,240,242,244,246,249,255,289,297,299,301,302,303,320,],[67,67,67,67,67,-123,67,-122,67,67,67,67,-144,-143,-140,-145,-146,-141,-142,67,67,-118,-117,-119,67,67,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,67,-97,-105,-99,67,67,67,67,67,67,67,67,67,274,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'NOT':([8,23,25,47,59,82,89,103,104,106,107,108,109,110,112,113,114,118,119,120,121,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[55,55,55,55,55,55,55,55,55,-144,-143,-140,-145,-146,-141,-142,55,55,-118,-117,-119,55,55,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,55,-97,-105,-99,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'INCREASE':([9,11,14,19,21,27,30,34,42,48,111,147,191,215,239,241,313,],[-17,-179,-57,-60,-56,-58,-178,-59,113,-56,-61,-180,-191,-181,-192,-62,-65,]),'NULL':([8,23,25,47,53,55,59,69,82,89,103,104,106,107,108,109,110,112,113,114,118,119,120,121,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[78,78,78,78,78,-123,78,-122,78,78,78,78,-144,-143,-140,-145,-146,-141,-142,78,78,-118,-117,-119,78,78,-111,-110,-114,-113,-112,-98,-101,-107,-104,-100,-102,-103,-106,78,-97,-105,-99,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'AND':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,60,61,62,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,213,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,-108,-81,-56,-74,-70,-77,-72,-125,-60,-95,-68,145,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,-109,-96,-181,-192,-62,-82,-56,-65,-83,]),'MOD':([9,11,14,27,30,34,45,46,48,49,50,51,52,54,56,61,63,64,66,67,68,70,71,72,74,75,77,78,79,111,123,146,147,191,200,211,212,215,239,241,254,269,313,318,],[-17,-179,-57,-58,-178,-59,121,-81,-56,-74,-70,-77,-72,-125,-60,-68,-69,-120,-71,-76,-115,-126,-78,-73,-124,-79,-67,-80,-75,-61,-121,-127,-180,-191,-116,-85,121,-181,-192,-62,-82,-56,-65,-83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'result_action':([0,24,28,87,102,125,160,161,189,206,207,220,236,253,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'integer_expression':([126,297,],[208,321,]),'operator1':([62,],[142,]),'newmode_statement':([0,24,189,236,],[3,3,3,3,]),'string_mode':([100,117,162,183,278,304,312,],[171,171,171,171,171,171,171,]),'synonym_definition':([32,99,],[101,167,]),'relational_operator':([62,],[143,]),'elsif_expression':([201,],[248,]),'step_enumeration':([91,],[156,]),'exit_label_id':([18,],[80,]),'empty_literal':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'bracketed_action':([0,24,28,87,102,125,160,161,189,206,207,220,236,253,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'builtin_call':([0,8,23,24,25,28,47,53,59,76,82,87,89,102,103,104,114,118,125,126,128,142,160,161,169,189,202,205,206,207,214,218,220,227,228,229,231,236,240,242,244,246,249,253,255,289,297,299,301,302,303,320,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'boolean_mode':([100,117,162,183,219,229,257,278,303,304,312,],[178,178,178,178,178,178,178,178,178,178,178,]),'step_value':([260,],[295,]),'membership_operator':([62,],[134,]),'iteration':([91,],[159,]),'element_mode':([304,],[327,]),'character_string_literal':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'literal_range':([227,229,231,302,303,],[264,270,273,273,270,]),'array_primitive_value':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'call_action':([0,8,23,24,25,28,47,53,59,76,82,87,89,102,103,104,114,118,125,126,128,142,160,161,169,189,202,205,206,207,214,218,220,227,228,229,231,236,240,242,244,246,249,253,255,289,297,299,301,302,303,320,],[19,56,56,19,56,19,56,56,56,56,56,19,56,19,56,56,56,56,19,56,56,56,19,19,56,19,56,56,19,19,56,56,19,56,56,56,56,19,56,56,56,56,56,19,56,56,56,56,56,56,56,56,]),'boolean_expression':([8,47,89,205,246,289,],[57,122,153,252,287,315,]),'program':([0,],[22,]),'if_action':([0,24,28,87,102,125,160,161,189,206,207,220,236,253,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'end_value':([260,295,],[298,319,]),'array_slice':([0,8,23,24,25,28,47,53,59,76,82,87,89,102,103,104,114,118,125,126,128,142,160,161,169,189,202,205,206,207,214,218,220,227,228,229,231,236,240,242,244,246,249,253,255,289,297,299,301,302,303,320,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'array_element':([0,8,23,24,25,28,47,53,59,76,82,87,89,102,103,104,114,118,125,126,128,142,160,161,169,189,202,205,206,207,214,218,220,227,228,229,231,236,240,242,244,246,249,253,255,289,297,299,301,302,303,320,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'mode_definition':([29,165,],[97,224,]),'control_part':([28,],[93,]),'reference_mode':([100,117,162,183,278,304,312,],[174,174,174,174,174,174,174,]),'newmode_list':([29,],[98,]),'formal_procedure_head':([102,],[189,]),'procedure_call':([0,8,23,24,25,28,47,53,59,76,82,87,89,102,103,104,114,118,125,126,128,142,160,161,169,189,202,205,206,207,214,218,220,227,228,229,231,236,240,242,244,246,249,253,255,289,297,299,301,302,303,320,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'procedure_statement':([0,24,189,236,],[31,31,31,31,]),'formal_parameter':([237,308,],[279,329,]),'else_expression':([201,248,],[247,290,]),'mode_name':([100,117,162,183,278,304,312,],[176,176,176,176,176,176,176,]),'range_enumeration':([91,],[158,]),'builtin_name':([0,8,23,24,25,28,47,53,59,76,82,87,89,102,103,104,114,118,125,126,128,142,160,161,169,189,202,205,206,207,214,218,220,227,228,229,231,236,240,242,244,246,249,253,255,289,297,299,301,302,303,320,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'declaration':([43,197,],[116,243,]),'parameter_list':([82,103,302,],[148,192,148,]),'primitive_value':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'for_control':([91,],[154,]),'statement_list':([0,189,],[24,236,]),'identifier_list':([29,32,43,99,165,197,237,308,],[96,100,117,100,96,117,278,278,]),'expression':([8,23,25,47,59,82,89,103,104,114,126,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[73,83,83,73,127,149,73,149,194,196,209,225,250,73,149,259,265,225,265,265,283,285,286,73,291,285,73,322,259,285,325,265,259,]),'else_clause':([124,292,],[203,317,]),'operand0':([8,23,25,47,59,82,89,103,104,114,126,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'synonym_statement':([0,24,189,236,],[20,20,20,20,]),'action_statement':([0,24,28,87,125,160,189,206,207,220,236,253,],[44,44,90,151,90,90,44,90,151,151,44,151,]),'synonym_list':([32,],[99,]),'parameter':([82,103,214,302,],[150,150,256,150,]),'result_spec':([238,],[281,]),'while_control':([28,154,],[88,216,]),'literal':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'result':([23,25,],[84,86,]),'operand2':([8,23,25,47,59,82,89,103,104,114,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[45,45,45,45,45,45,45,45,45,45,45,212,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'integer_mode':([100,117,162,183,219,229,257,278,303,304,312,],[168,168,168,168,168,168,168,168,168,168,168,]),'action_statement_list':([28,125,160,206,],[87,207,220,253,]),'closed_dyadic_operator':([42,],[112,]),'boolean_literal':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'assignment_action':([0,24,28,87,102,125,160,161,189,206,207,220,236,253,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'arithmetic_additive_operator':([60,213,],[130,130,]),'exit_action':([0,24,28,87,102,125,160,161,189,206,207,220,236,253,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'identifier':([0,8,18,23,24,25,28,29,32,43,47,53,59,76,82,87,89,91,99,100,102,103,104,114,117,118,125,126,128,142,160,161,162,163,165,169,183,189,197,202,205,206,207,214,218,219,220,227,228,229,231,236,237,240,242,244,246,249,253,255,257,278,289,297,299,301,302,303,304,308,312,320,],[21,48,81,48,21,48,21,95,95,95,48,48,48,48,48,21,48,157,95,185,48,48,48,48,185,48,21,48,48,48,21,48,185,223,95,48,185,21,95,48,48,21,21,48,48,261,21,48,48,269,48,21,95,48,48,48,48,48,21,48,261,185,48,48,48,48,48,269,185,95,185,48,]),'parenthesized_expression':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'string_concatenation_operator':([60,213,],[129,129,]),'initialization':([199,],[245,]),'mode':([100,117,162,183,278,304,312,],[177,199,222,230,309,328,331,]),'parenthesis_gambiarra':([190,],[238,]),'assigning_operator':([42,],[114,]),'discrete_range_mode':([100,117,162,183,219,229,257,278,303,304,312,],[179,179,179,179,179,179,179,179,179,179,179,]),'declaration_list':([43,],[115,]),'operand3':([8,23,25,47,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[68,68,68,68,68,68,68,68,68,68,200,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'do_action':([0,24,28,87,102,125,160,161,189,206,207,220,236,253,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'return_action':([0,24,28,87,102,125,160,161,189,206,207,220,236,253,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'referenced_location':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'array_mode':([100,117,162,183,278,304,312,],[182,182,182,182,182,182,182,]),'expression_list':([104,],[193,]),'action':([0,24,28,87,102,125,160,161,189,206,207,220,236,253,],[41,41,41,41,187,41,41,187,41,41,41,41,41,41,]),'character_mode':([100,117,162,183,219,229,257,278,303,304,312,],[184,184,184,184,184,184,184,184,184,184,184,]),'arithmetic_multiplicative_operator':([45,212,],[118,118,]),'index_mode_list':([229,],[271,]),'operand1':([8,23,25,47,59,82,89,103,104,114,126,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[60,60,60,60,60,60,60,60,60,60,60,213,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'index_mode':([229,303,],[272,326,]),'label_id':([0,24,28,87,125,160,189,206,207,220,236,253,],[33,33,94,94,94,94,33,94,94,94,33,94,]),'procedure_definition':([102,],[188,]),'dereferenced_reference':([0,8,23,24,25,28,47,53,59,76,82,87,89,102,103,104,114,118,125,126,128,142,160,161,169,189,202,205,206,207,214,218,220,227,228,229,231,236,240,242,244,246,249,253,255,289,297,299,301,302,303,320,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'upper_bound':([242,255,301,],[284,293,324,]),'parameter_spec':([278,],[310,]),'operand4':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[64,64,64,64,123,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'composite_mode':([100,117,162,183,278,304,312,],[172,172,172,172,172,172,172,]),'conditional_expression':([8,23,25,47,59,82,89,103,104,114,126,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'integer_literal':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'monadic_operator':([8,23,25,47,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'operator2':([60,213,],[128,128,]),'discrete_mode':([100,117,162,183,219,229,257,278,303,304,312,],[170,170,170,170,262,268,294,170,268,170,170,]),'value_array_element':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'value_array_slice':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'formal_parameter_list':([237,],[277,]),'declaration_statement':([0,24,189,236,],[37,37,37,37,]),'discrete_expression':([218,299,320,],[258,323,333,]),'then_expression':([122,287,315,],[201,314,332,]),'statement':([0,24,189,236,],[39,85,39,85,]),'array_location':([0,8,23,24,25,28,47,53,59,76,82,87,89,102,103,104,114,118,125,126,128,142,160,161,169,189,202,205,206,207,214,218,220,227,228,229,231,236,240,242,244,246,249,253,255,289,297,299,301,302,303,320,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'character_literal':([8,23,25,47,53,59,82,89,103,104,114,118,126,128,142,169,202,205,214,218,227,228,229,231,240,242,244,246,249,255,289,297,299,301,302,303,320,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'loop_counter':([91,],[155,]),'location':([0,8,23,24,25,28,47,53,59,76,82,87,89,102,103,104,114,118,125,126,128,142,160,161,169,189,202,205,206,207,214,218,220,227,228,229,231,236,240,242,244,246,249,253,255,289,297,299,301,302,303,320,],[42,74,74,42,74,42,74,74,74,146,74,42,74,42,74,74,74,74,42,74,74,74,42,42,74,42,74,74,42,42,74,74,42,74,74,74,74,42,74,74,74,74,74,42,74,74,74,74,74,74,74,74,]),'then_clause':([57,252,],[124,292,]),'lower_bound':([104,126,227,229,231,302,303,],[195,210,266,266,266,266,266,]),'constant_expression':([169,228,],[226,267,]),'start_value':([218,],[260,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list ASSIGN constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode ASSIGN constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',114),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET ICONST RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',392),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',398),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',404),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',410),
  ('expression -> operand0','expression',1,'p_expression','parser.py',417),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',418),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',424),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',425),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',434),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',440),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',446),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',452),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',453),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',462),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',463),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',470),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',471),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',483),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',488),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',493),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',494),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',502),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',509),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',515),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',519),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',520),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',529),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',534),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',535),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',544),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',550),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',551),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',556),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',561),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',562),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',571),
  ('action -> bracketed_action','action',1,'p_action','parser.py',577),
  ('action -> assignment_action','action',1,'p_action','parser.py',578),
  ('action -> call_action','action',1,'p_action','parser.py',579),
  ('action -> exit_action','action',1,'p_action','parser.py',580),
  ('action -> return_action','action',1,'p_action','parser.py',581),
  ('action -> result_action','action',1,'p_action','parser.py',582),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',588),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',593),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',613),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',622),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',627),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',628),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',637),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',638),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',647),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',648),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',655),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',657),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',658),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',673),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',674),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',675),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',676),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',691),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',692),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',701),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',707),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',712),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',713),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',720),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',725),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',730),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',735),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',736),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',744),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',749),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',750),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',757),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',761),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',762),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',767),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',768),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',775),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',776),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',783),
  ('exit_action -> EXIT exit_label_id','exit_action',2,'p_exit_action','parser.py',791),
  ('exit_label_id -> identifier','exit_label_id',1,'p_exit_label_id','parser.py',795),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',799),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',800),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',807),
  ('result -> expression','result',1,'p_result','parser.py',811),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',816),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',817),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',826),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',827),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',828),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',829),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',830),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',831),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',835),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',839),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',847),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',848),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',856),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',857),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',864),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',865),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',872),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',876),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',877),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',889),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',890),
]
