
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST RETURN TYPE LOWER INT OD PROC FOR NUM ASC FI PRINT DOWN CHARS CHAR EXIT ELSE TO RETURNS IN THEN DO DCL ELSIF NULL UPPER ARRAY SYN BOOL IF WHILE LOC READ RESULT BY END LENGTH ABS TRUE REF FALSEprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list initialization\n                              | identifier_list mode initializationnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : ICONSTarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT exit_label_idexit_label_id :  identifierreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'DECREASE':([4,14,16,25,26,29,36,37,44,82,104,139,185,209,232,233,310,],[-57,-58,-60,-56,-59,-179,-178,101,-17,-56,-61,-191,-180,-192,-181,-62,-65,]),'RPAREN':([4,14,26,29,36,44,49,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,96,104,121,122,123,125,126,127,129,130,131,132,134,135,137,138,139,140,141,142,177,182,184,185,186,206,209,215,226,227,228,231,232,233,252,253,256,262,263,272,280,286,289,290,291,296,297,309,310,312,313,314,315,317,318,319,325,328,331,],[-57,-58,-59,-179,-178,-17,139,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,185,-61,-35,-46,-40,-28,-36,-32,-31,-30,-37,-33,-29,-27,-34,-45,-191,-184,209,-182,-121,-127,231,-180,232,-44,-192,261,-96,-109,-116,-85,-181,-62,289,290,-183,-208,294,-82,-43,185,-38,-39,-47,-211,-210,-88,-65,-41,-184,-54,-49,330,-209,-212,-83,-89,334,]),'END':([1,17,20,22,33,41,95,117,118,143,194,196,212,213,216,259,293,],[-2,-8,-7,-4,-6,-5,-128,-3,-9,211,-23,-18,257,-129,-201,-204,-205,]),'INT':([44,45,48,116,128,195,202,208,219,264,270,287,288,292,],[-17,-15,121,121,121,121,121,-16,121,121,121,121,121,121,]),'GREATER':([4,14,26,29,36,44,59,60,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,170,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-56,-82,-65,-83,]),'ASC':([0,1,13,17,18,19,20,22,33,34,41,43,49,50,54,57,58,66,68,77,86,87,93,95,96,97,100,101,102,103,105,106,107,108,117,118,143,153,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,190,194,196,200,202,203,205,210,212,213,216,218,222,229,234,235,236,237,238,259,273,275,276,283,285,286,288,293,299,302,307,320,],[15,-2,15,-8,15,15,-7,-4,-6,15,-5,15,15,15,15,15,-151,-123,15,-122,15,15,15,-128,15,15,-145,-143,-140,-142,-146,-141,15,-144,-3,-9,15,15,15,-152,15,-101,-105,-106,-97,-107,-102,-99,15,-100,-104,-98,-103,-113,-110,-114,15,-111,-112,-119,-118,15,-117,15,-23,-18,15,15,15,15,15,15,-129,-201,15,15,15,15,15,15,15,15,-204,15,15,15,15,15,15,15,-205,15,15,15,15,]),'DCL':([0,1,17,20,22,33,41,43,95,117,118,143,194,196,212,213,216,259,293,],[5,-2,-8,-7,-4,-6,-5,5,-128,-3,-9,5,-23,-18,5,-129,-201,-204,-205,]),'IN':([4,14,26,29,36,44,59,60,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,149,152,177,182,185,209,220,226,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,163,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-169,219,-121,-127,-180,-192,270,-96,-109,-116,-85,-181,-62,-56,-82,-65,-83,]),'FOR':([13,],[51,]),'NULL':([18,19,34,49,54,66,68,77,87,93,96,97,100,101,102,103,105,106,107,108,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[85,85,85,85,85,-123,85,-122,85,85,85,85,-145,-143,-140,-142,-146,-141,85,-144,85,-101,-105,-106,-97,-107,-102,-99,85,-100,-104,-98,-103,-113,-110,-114,85,-111,-112,-119,-118,85,-117,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'READ':([0,1,13,17,18,19,20,22,33,34,41,43,49,50,54,57,58,66,68,77,86,87,93,95,96,97,100,101,102,103,105,106,107,108,117,118,143,153,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,190,194,196,200,202,203,205,210,212,213,216,218,222,229,234,235,236,237,238,259,273,275,276,283,285,286,288,293,299,302,307,320,],[6,-2,6,-8,6,6,-7,-4,-6,6,-5,6,6,6,6,6,-151,-123,6,-122,6,6,6,-128,6,6,-145,-143,-140,-142,-146,-141,6,-144,-3,-9,6,6,6,-152,6,-101,-105,-106,-97,-107,-102,-99,6,-100,-104,-98,-103,-113,-110,-114,6,-111,-112,-119,-118,6,-117,6,-23,-18,6,6,6,6,6,6,-129,-201,6,6,6,6,6,6,6,6,-204,6,6,6,6,6,6,6,-205,6,6,6,6,]),'DIVCREASE':([4,14,16,25,26,29,36,37,44,82,104,139,185,209,232,233,310,],[-57,-58,-60,-56,-59,-179,-178,100,-17,-56,-61,-191,-180,-192,-181,-62,-65,]),'MODCREASE':([4,14,16,25,26,29,36,37,44,82,104,139,185,209,232,233,310,],[-57,-58,-60,-56,-59,-179,-178,105,-17,-56,-61,-191,-180,-192,-181,-62,-65,]),'LOC':([44,121,122,123,125,126,127,129,130,131,132,134,135,137,138,206,289,290,291,296,314,315,317,],[-17,-35,-46,-40,-28,-36,-32,-31,-30,-37,-33,-29,-27,-34,-45,-44,-38,-39,-47,319,-54,-49,331,]),'ARRAY':([44,45,48,116,128,195,208,264,287,292,],[-17,-15,120,120,120,120,-16,120,120,120,]),'DOWN':([4,14,26,29,36,44,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,149,152,177,182,185,209,226,227,228,231,232,233,265,266,267,272,300,309,310,323,324,325,328,],[-57,-58,-59,-179,-178,-17,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-169,220,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-174,-170,298,-82,298,-88,-65,-171,-55,-83,-89,]),'TO':([4,14,26,29,36,44,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,265,266,267,272,298,300,309,310,323,324,325,328,],[-57,-58,-59,-179,-178,-17,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-174,-170,299,-82,320,299,-88,-65,-171,-55,-83,-89,]),'CCONST':([18,19,34,49,54,66,68,77,87,93,96,97,100,101,102,103,105,106,107,108,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[65,65,65,65,65,-123,65,-122,65,65,65,65,-145,-143,-140,-142,-146,-141,65,-144,65,-101,-105,-106,-97,-107,-102,-99,65,-100,-104,-98,-103,-113,-110,-114,65,-111,-112,-119,-118,65,-117,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'NOT':([18,19,34,49,54,87,93,96,97,100,101,102,103,105,106,107,108,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[66,66,66,66,66,66,66,66,66,-145,-143,-140,-142,-146,-141,66,-144,66,-101,-105,-106,-97,-107,-102,-99,66,-100,-104,-98,-103,-113,-110,-114,66,-111,-112,-119,-118,66,-117,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'FALSE':([18,19,34,49,54,66,68,77,87,93,96,97,100,101,102,103,105,106,107,108,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[83,83,83,83,83,-123,83,-122,83,83,83,83,-145,-143,-140,-142,-146,-141,83,-144,83,-101,-105,-106,-97,-107,-102,-99,83,-100,-104,-98,-103,-113,-110,-114,83,-111,-112,-119,-118,83,-117,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'ELSIF':([4,14,26,29,36,44,58,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,95,104,139,157,177,182,185,190,191,209,213,226,227,228,230,231,232,233,236,272,274,277,309,310,311,325,326,328,333,],[-57,-58,-59,-179,-178,-17,-151,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-128,-61,-191,-152,-121,-127,-180,-149,237,-192,-129,-96,-109,-116,275,-85,-181,-62,-150,-82,-91,307,-88,-65,237,-83,-93,-89,-94,]),'ASSIGN':([4,14,16,25,26,29,36,37,44,45,82,104,113,116,121,122,123,124,125,126,127,129,130,131,132,134,135,137,138,139,149,152,185,199,206,208,209,232,233,289,290,291,310,314,315,],[-57,-58,-60,-56,-59,-179,-178,102,-17,-15,-56,-61,195,200,-35,-46,-40,200,-28,-36,-32,-31,-30,-37,-33,-29,-27,-34,-45,-191,-169,218,-180,200,-44,-16,-192,-181,-62,-38,-39,-47,-65,-54,-49,]),'RBRACKET':([4,14,26,29,36,44,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,121,126,127,129,131,132,137,139,177,182,185,187,189,209,223,225,226,227,228,231,232,233,245,246,249,251,254,255,272,279,280,281,289,290,304,309,310,312,316,325,328,],[-57,-58,-59,-179,-178,-17,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-35,-36,-32,-31,-37,-33,-34,-191,-121,-127,-180,233,-63,-192,272,-55,-96,-109,-116,-85,-181,-62,-52,-53,-50,287,-48,291,-82,-64,-43,310,-38,-39,325,-88,-65,-41,-51,-83,-89,]),'SEMI':([2,4,8,9,12,14,16,18,24,26,28,29,30,35,36,44,46,47,52,55,56,59,60,61,63,64,65,67,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,88,89,90,91,92,94,98,104,109,110,111,112,114,115,121,122,123,124,125,126,127,129,130,131,132,134,135,137,138,139,144,146,147,148,150,151,154,156,177,182,185,192,197,198,201,204,206,209,211,214,217,221,226,227,228,231,232,233,239,241,242,243,244,257,260,261,265,269,271,272,284,289,290,291,294,301,303,309,310,314,315,321,322,325,328,330,332,334,],[-137,-57,-131,-138,-135,-58,-133,-187,95,-59,-136,-179,-132,-134,-178,-17,118,-10,-161,155,-157,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-188,-81,-190,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-189,-90,-61,-186,-185,194,-24,-19,196,-35,-46,-40,-12,-28,-36,-32,-31,-30,-37,-33,-29,-27,-34,-45,-191,213,216,-162,-166,-164,-165,-177,-159,-121,-127,-180,-139,-20,-21,-11,-13,-44,-192,-202,259,-163,-158,-96,-109,-116,-85,-181,-62,-147,-25,-26,-22,-14,-203,293,-206,-174,-175,-160,-82,-148,-38,-39,-47,-207,-167,-176,-88,-65,-54,-49,-172,-168,-83,-89,-213,-173,-214,]),'DO':([0,1,13,17,20,22,33,41,43,50,57,58,95,117,118,143,153,155,157,190,194,196,212,213,216,222,236,238,259,283,293,],[13,-2,13,-8,-7,-4,-6,-5,13,13,13,-151,-128,-3,-9,13,13,13,-152,13,-23,-18,13,-129,-201,13,13,13,-204,13,-205,]),'WHILE':([4,13,14,26,29,36,44,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,121,126,127,129,131,132,137,139,147,148,150,151,177,182,185,209,226,227,228,231,232,233,265,269,272,289,290,301,303,309,310,321,322,325,328,332,],[-57,54,-58,-59,-179,-178,-17,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-35,-36,-32,-31,-37,-33,-34,-191,54,-166,-164,-165,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-174,-175,-82,-38,-39,-167,-176,-88,-65,-172,-168,-83,-89,-173,]),'NUM':([0,1,13,17,18,19,20,22,33,34,41,43,49,50,54,57,58,66,68,77,86,87,93,95,96,97,100,101,102,103,105,106,107,108,117,118,143,153,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,190,194,196,200,202,203,205,210,212,213,216,218,222,229,234,235,236,237,238,259,273,275,276,283,285,286,288,293,299,302,307,320,],[3,-2,3,-8,3,3,-7,-4,-6,3,-5,3,3,3,3,3,-151,-123,3,-122,3,3,3,-128,3,3,-145,-143,-140,-142,-146,-141,3,-144,-3,-9,3,3,3,-152,3,-101,-105,-106,-97,-107,-102,-99,3,-100,-104,-98,-103,-113,-110,-114,3,-111,-112,-119,-118,3,-117,3,-23,-18,3,3,3,3,3,3,-129,-201,3,3,3,3,3,3,3,3,-204,3,3,3,3,3,3,3,-205,3,3,3,3,]),'FI':([4,14,26,29,36,44,58,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,95,104,139,157,177,182,185,190,191,209,213,226,227,228,231,232,233,236,238,240,272,278,283,306,308,309,310,311,325,328,329,],[-57,-58,-59,-179,-178,-17,-151,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-128,-61,-191,-152,-121,-127,-180,-149,239,-192,-129,-96,-109,-116,-85,-181,-62,-150,-153,284,-82,309,-154,-92,328,-88,-65,-155,-83,-89,-156,]),'$end':([1,17,20,22,33,40,41,43,95,117,118,194,196,213,216,],[-2,-8,-7,-4,-6,0,-5,-1,-128,-3,-9,-23,-18,-129,-201,]),'BY':([4,14,26,29,36,44,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,265,266,267,272,309,310,325,328,],[-57,-58,-59,-179,-178,-17,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-174,-170,302,-82,-88,-65,-83,-89,]),'UPPER':([0,1,13,17,18,19,20,22,33,34,41,43,49,50,54,57,58,66,68,77,86,87,93,95,96,97,100,101,102,103,105,106,107,108,117,118,143,153,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,190,194,196,200,202,203,205,210,212,213,216,218,222,229,234,235,236,237,238,259,273,275,276,283,285,286,288,293,299,302,307,320,],[7,-2,7,-8,7,7,-7,-4,-6,7,-5,7,7,7,7,7,-151,-123,7,-122,7,7,7,-128,7,7,-145,-143,-140,-142,-146,-141,7,-144,-3,-9,7,7,7,-152,7,-101,-105,-106,-97,-107,-102,-99,7,-100,-104,-98,-103,-113,-110,-114,7,-111,-112,-119,-118,7,-117,7,-23,-18,7,7,7,7,7,7,-129,-201,7,7,7,7,7,7,7,7,-204,7,7,7,7,7,7,7,-205,7,7,7,7,]),'DIFF':([4,14,26,29,36,44,59,60,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,164,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-56,-82,-65,-83,]),'OR':([4,14,26,29,36,44,59,60,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,167,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-56,-82,-65,-83,]),'CHARS':([44,45,48,116,128,195,208,264,287,292,],[-17,-15,133,133,133,133,-16,133,133,133,]),'RETURN':([0,1,13,17,20,22,33,41,43,50,57,58,95,117,118,143,153,155,157,190,194,196,212,213,216,222,236,238,259,283,293,],[18,-2,18,-8,-7,-4,-6,-5,18,18,18,-151,-128,-3,-9,18,18,18,-152,18,-23,-18,18,-129,-201,18,18,18,-204,18,-205,]),'AND':([4,14,26,29,36,44,59,60,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,165,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-56,-82,-65,-83,]),'RESULT':([0,1,13,17,20,22,33,41,43,50,57,58,95,117,118,143,153,155,157,190,194,196,212,213,216,222,236,238,259,283,293,],[19,-2,19,-8,-7,-4,-6,-5,19,19,19,-151,-128,-3,-9,19,19,19,-152,19,-23,-18,19,-129,-201,19,19,19,-204,19,-205,]),'LPAREN':([3,6,7,10,15,18,19,21,23,25,27,32,34,44,49,54,66,68,77,82,87,93,96,97,100,101,102,103,105,106,107,108,121,123,125,126,127,129,131,132,137,145,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,200,202,203,205,210,218,229,234,235,237,245,250,258,268,269,273,275,276,285,286,288,289,290,299,302,303,307,320,],[-195,-199,-196,49,-194,93,93,-198,-200,96,-197,-193,93,-17,93,93,-123,93,-122,96,93,93,93,93,-145,-143,-140,-142,-146,-141,93,-144,-35,203,205,-36,-32,-31,-37,-33,-34,215,93,-101,-105,-106,-97,-107,-102,-99,93,-100,-104,-98,-103,-113,-110,-114,93,-111,-112,-119,-118,93,-117,93,93,93,93,93,93,93,93,93,93,205,286,292,203,205,93,93,93,93,93,93,-38,-39,93,93,205,93,93,]),'REF':([44,45,48,116,128,195,208,264,287,292,],[-17,-15,128,128,128,128,-16,128,128,128,]),'LENGTH':([0,1,13,17,18,19,20,22,33,34,41,43,49,50,54,57,58,66,68,77,86,87,93,95,96,97,100,101,102,103,105,106,107,108,117,118,143,153,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,190,194,196,200,202,203,205,210,212,213,216,218,222,229,234,235,236,237,238,259,273,275,276,283,285,286,288,293,299,302,307,320,],[21,-2,21,-8,21,21,-7,-4,-6,21,-5,21,21,21,21,21,-151,-123,21,-122,21,21,21,-128,21,21,-145,-143,-140,-142,-146,-141,21,-144,-3,-9,21,21,21,-152,21,-101,-105,-106,-97,-107,-102,-99,21,-100,-104,-98,-103,-113,-110,-114,21,-111,-112,-119,-118,21,-117,21,-23,-18,21,21,21,21,21,21,-129,-201,21,21,21,21,21,21,21,21,-204,21,21,21,21,21,21,21,-205,21,21,21,21,]),'DIVIDE':([4,14,26,29,36,44,59,60,64,65,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,-73,-79,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,179,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,179,-116,-85,-181,-62,-56,-82,-65,-83,]),'MINUS':([4,14,18,19,26,29,34,36,44,49,54,59,60,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,87,88,89,90,91,92,93,96,97,100,101,102,103,104,105,106,107,108,139,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,185,200,202,203,205,209,210,218,226,227,228,229,231,232,233,234,235,237,250,272,273,275,276,285,286,288,299,302,307,310,320,325,],[-57,-58,77,77,-59,-179,77,-178,-17,77,77,-70,-78,-73,-79,171,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,77,-68,-76,-115,-126,-75,77,77,77,-145,-143,-140,-142,-61,-146,-141,77,-144,-191,77,-101,-105,-106,-97,-107,-102,-99,77,-100,-104,-98,-103,-113,-110,-114,77,-111,-112,-121,-119,-118,77,-117,-127,-180,77,77,77,77,-192,77,77,171,-109,-116,77,-85,-181,-62,77,77,77,-56,-82,77,77,77,77,77,77,77,77,77,-65,77,-83,]),'SCONST':([18,19,34,49,54,66,68,77,87,93,96,97,100,101,102,103,105,106,107,108,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[78,78,78,78,78,-123,78,-122,78,78,78,78,-145,-143,-140,-142,-146,-141,78,-144,78,-101,-105,-106,-97,-107,-102,-99,78,-100,-104,-98,-103,-113,-110,-114,78,-111,-112,-119,-118,78,-117,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'ABS':([0,1,13,17,18,19,20,22,33,34,41,43,49,50,54,57,58,66,68,77,86,87,93,95,96,97,100,101,102,103,105,106,107,108,117,118,143,153,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,190,194,196,200,202,203,205,210,212,213,216,218,222,229,234,235,236,237,238,259,273,275,276,283,285,286,288,293,299,302,307,320,],[32,-2,32,-8,32,32,-7,-4,-6,32,-5,32,32,32,32,32,-151,-123,32,-122,32,32,32,-128,32,32,-145,-143,-140,-142,-146,-141,32,-144,-3,-9,32,32,32,-152,32,-101,-105,-106,-97,-107,-102,-99,32,-100,-104,-98,-103,-113,-110,-114,32,-111,-112,-119,-118,32,-117,32,-23,-18,32,32,32,32,32,32,-129,-201,32,32,32,32,32,32,32,32,-204,32,32,32,32,32,32,32,-205,32,32,32,32,]),'EQUAL':([4,14,26,29,36,44,59,60,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,159,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-56,-82,-65,-83,]),'PRINT':([0,1,13,17,18,19,20,22,33,34,41,43,49,50,54,57,58,66,68,77,86,87,93,95,96,97,100,101,102,103,105,106,107,108,117,118,143,153,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,190,194,196,200,202,203,205,210,212,213,216,218,222,229,234,235,236,237,238,259,273,275,276,283,285,286,288,293,299,302,307,320,],[23,-2,23,-8,23,23,-7,-4,-6,23,-5,23,23,23,23,23,-151,-123,23,-122,23,23,23,-128,23,23,-145,-143,-140,-142,-146,-141,23,-144,-3,-9,23,23,23,-152,23,-101,-105,-106,-97,-107,-102,-99,23,-100,-104,-98,-103,-113,-110,-114,23,-111,-112,-119,-118,23,-117,23,-23,-18,23,23,23,23,23,23,-129,-201,23,23,23,23,23,23,23,23,-204,23,23,23,23,23,23,23,-205,23,23,23,23,]),'ELSE':([4,14,26,29,36,44,58,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,95,104,139,157,177,182,185,190,191,209,213,226,227,228,230,231,232,233,236,272,274,277,309,310,311,325,326,328,333,],[-57,-58,-59,-179,-178,-17,-151,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-128,-61,-191,-152,-121,-127,-180,-149,238,-192,-129,-96,-109,-116,276,-85,-181,-62,-150,-82,-91,276,-88,-65,238,-83,-93,-89,-94,]),'LOWER':([0,1,13,17,18,19,20,22,33,34,41,43,49,50,54,57,58,66,68,77,86,87,93,95,96,97,100,101,102,103,105,106,107,108,117,118,143,153,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,190,194,196,200,202,203,205,210,212,213,216,218,222,229,234,235,236,237,238,259,273,275,276,283,285,286,288,293,299,302,307,320,],[27,-2,27,-8,27,27,-7,-4,-6,27,-5,27,27,27,27,27,-151,-123,27,-122,27,27,27,-128,27,27,-145,-143,-140,-142,-146,-141,27,-144,-3,-9,27,27,27,-152,27,-101,-105,-106,-97,-107,-102,-99,27,-100,-104,-98,-103,-113,-110,-114,27,-111,-112,-119,-118,27,-117,27,-23,-18,27,27,27,27,27,27,-129,-201,27,27,27,27,27,27,27,27,-204,27,27,27,27,27,27,27,-205,27,27,27,27,]),'PLUS':([4,14,26,29,36,44,59,60,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,-73,-79,176,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,176,-109,-116,-85,-181,-62,-56,-82,-65,-83,]),'THEN':([4,14,26,29,36,44,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,98,99,104,139,177,182,183,185,209,226,227,228,231,232,233,272,282,305,309,310,325,327,328,],[-57,-58,-59,-179,-178,-17,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-90,190,-61,-191,-121,-127,229,-180,-192,-96,-109,-116,-85,-181,-62,-82,190,229,-88,-65,-83,229,-89,]),'ICONST':([18,19,34,49,54,66,68,77,87,93,96,97,100,101,102,103,105,106,107,108,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,200,202,203,205,207,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[89,89,89,89,89,-123,89,-122,89,89,89,89,-145,-143,-140,-142,-146,-141,89,-144,89,-101,-105,-106,-97,-107,-102,-99,89,-100,-104,-98,-103,-113,-110,-114,89,-111,-112,-119,-118,89,-117,89,89,89,89,254,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'ID':([0,1,4,5,13,14,17,18,19,20,22,26,29,33,34,36,38,39,41,42,43,44,45,48,49,50,51,54,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,128,136,139,143,153,155,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,185,190,193,194,195,196,197,198,200,202,203,205,208,209,210,212,213,215,216,218,219,222,226,227,228,229,231,232,233,234,235,236,237,238,243,244,259,264,270,272,273,275,276,283,285,286,287,288,292,293,295,299,302,307,309,310,320,325,328,],[44,-2,-57,44,44,-58,-8,44,44,-7,-4,-59,-179,-6,44,-178,44,44,-5,44,44,-17,-15,44,44,44,44,44,44,-151,-70,-78,-87,-86,-73,-79,-123,-95,44,-71,-72,-69,-124,-60,-67,-125,-122,-81,-74,-120,-56,-77,-108,-80,44,44,-68,-76,-115,-126,-75,44,-128,44,44,-145,-143,-140,-142,-61,-146,-141,44,-144,-19,44,44,-3,-9,44,44,44,-191,44,44,44,-152,44,-101,-105,-106,-97,-107,-102,-99,44,-100,-104,-98,-103,-113,-110,-114,44,-111,-112,-121,-119,-118,44,-117,-127,-180,44,44,-23,44,-18,-20,-21,44,44,44,44,-16,-192,44,44,-129,44,-201,44,44,44,-96,-109,-116,44,-85,-181,-62,44,44,44,44,44,-22,-14,-204,44,44,-82,44,44,44,44,44,44,44,44,44,-205,44,44,44,44,-88,-65,44,-83,-89,]),'COLON':([4,11,14,25,26,29,36,44,53,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,188,189,209,224,225,226,227,228,231,232,233,247,248,250,272,309,310,313,325,328,],[-57,50,-58,-130,-59,-179,-178,-17,153,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,235,-42,-192,273,-42,-96,-109,-116,-85,-181,-62,285,-42,-56,-82,-88,-65,-42,-83,-89,]),'ARROW':([4,14,16,18,19,25,26,29,34,36,37,44,49,54,66,68,72,73,77,82,87,93,96,97,100,101,102,103,104,105,106,107,108,139,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,182,185,200,202,203,205,209,210,218,229,232,233,234,235,237,250,273,275,276,285,286,288,299,302,307,310,320,],[-57,-58,-60,86,86,-56,-59,-179,86,-178,104,-17,86,86,-123,86,104,-60,-122,-56,86,86,86,86,-145,-143,-140,-142,-61,-146,-141,86,-144,-191,86,-101,-105,-106,-97,-107,-102,-99,86,-100,-104,-98,-103,-113,-110,-114,86,-111,-112,-119,-118,86,-117,104,-180,86,86,86,86,-192,86,86,86,-181,-62,86,86,86,-56,86,86,86,86,86,86,86,86,86,-65,86,]),'MULCREASE':([4,14,16,25,26,29,36,37,44,82,104,139,185,209,232,233,310,],[-57,-58,-60,-56,-59,-179,-178,108,-17,-56,-61,-191,-180,-192,-181,-62,-65,]),'TIMES':([4,14,26,29,36,44,59,60,64,65,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,-73,-79,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,181,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,181,-116,-85,-181,-62,-56,-82,-65,-83,]),'RETURNS':([214,261,294,],[258,-206,-207,]),'LESS':([4,14,26,29,36,44,59,60,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,160,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-56,-82,-65,-83,]),'LESSEQ':([4,14,26,29,36,44,59,60,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,161,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-56,-82,-65,-83,]),'IF':([0,1,13,17,18,19,20,22,33,34,41,43,49,50,54,57,58,87,93,95,96,97,100,101,102,103,105,106,107,108,117,118,143,153,155,157,158,190,194,196,200,202,203,205,210,212,213,216,218,222,229,234,235,236,237,238,259,273,275,276,283,285,286,288,293,299,302,307,320,],[34,-2,34,-8,87,87,-7,-4,-6,87,-5,34,87,34,87,34,-151,87,87,-128,87,87,-145,-143,-140,-142,-146,-141,87,-144,-3,-9,34,34,34,-152,87,34,-23,-18,87,87,87,87,87,34,-129,-201,87,34,87,87,87,34,87,34,-204,87,87,87,34,87,87,87,-205,87,87,87,87,]),'STRCAT':([4,14,26,29,36,44,59,60,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,-73,-79,173,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,173,-109,-116,-85,-181,-62,-56,-82,-65,-83,]),'CHAR':([44,45,48,116,128,195,202,208,219,264,270,287,288,292,],[-17,-15,131,131,131,131,131,-16,131,131,131,131,131,131,]),'INCREASE':([4,14,16,25,26,29,36,37,44,82,104,139,185,209,232,233,310,],[-57,-58,-60,-56,-59,-179,-178,103,-17,-56,-61,-191,-180,-192,-181,-62,-65,]),'OD':([13,57,58,95,155,157,213,222,],[56,156,-151,-128,221,-152,-129,271,]),'PROC':([50,],[145,]),'EXIT':([0,1,13,17,20,22,33,41,43,50,57,58,95,117,118,143,153,155,157,190,194,196,212,213,216,222,236,238,259,283,293,],[38,-2,38,-8,-7,-4,-6,-5,38,38,38,-151,-128,-3,-9,38,38,38,-152,38,-23,-18,38,-129,-201,38,38,38,-204,38,-205,]),'BOOL':([44,45,48,116,128,195,202,208,219,264,270,287,288,292,],[-17,-15,126,126,126,126,126,-16,126,126,126,126,126,126,]),'TYPE':([0,1,17,20,22,33,41,43,95,117,118,143,194,196,212,213,216,259,293,],[39,-2,-8,-7,-4,-6,-5,39,-128,-3,-9,39,-23,-18,39,-129,-201,-204,-205,]),'MOD':([4,14,26,29,36,44,59,60,64,65,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,-73,-79,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,178,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,178,-116,-85,-181,-62,-56,-82,-65,-83,]),'LBRACKET':([4,14,16,25,26,29,31,36,37,44,59,60,62,64,65,69,70,71,72,73,74,78,80,82,83,85,88,89,91,92,104,120,133,139,182,185,209,231,232,233,250,272,310,325,],[-57,-58,-60,-56,-59,-179,97,-178,-66,-17,-70,-78,158,-73,-79,-71,-72,-69,-66,-60,-67,-81,-74,-56,-77,-80,-68,-76,-84,-75,-61,202,207,-191,-66,-180,-192,-85,-181,-62,-56,-82,-65,-83,]),'TRUE':([18,19,34,49,54,66,68,77,87,93,96,97,100,101,102,103,105,106,107,108,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[60,60,60,60,60,-123,60,-122,60,60,60,60,-145,-143,-140,-142,-146,-141,60,-144,60,-101,-105,-106,-97,-107,-102,-99,60,-100,-104,-98,-103,-113,-110,-114,60,-111,-112,-119,-118,60,-117,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'SYN':([0,1,17,20,22,33,41,43,95,117,118,143,194,196,212,213,216,259,293,],[42,-2,-8,-7,-4,-6,-5,42,-128,-3,-9,42,-23,-18,42,-129,-201,-204,-205,]),'COMMA':([4,14,26,29,36,44,45,46,47,48,59,60,61,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,111,112,113,116,121,122,123,124,125,126,127,129,130,131,132,134,135,137,138,139,140,141,142,177,182,185,186,187,189,201,204,206,208,209,226,227,228,231,232,233,241,242,244,245,246,249,251,256,262,263,264,272,279,280,289,290,291,296,297,309,310,312,313,314,315,316,318,319,325,328,],[-57,-58,-59,-179,-178,-17,-15,119,-10,136,-70,-78,-87,-86,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,193,-24,136,136,-35,-46,-40,-12,-28,-36,-32,-31,-30,-37,-33,-29,-27,-34,-45,-191,-184,210,-182,-121,-127,-180,210,234,-63,-11,-13,-44,-16,-192,-96,-109,-116,-85,-181,-62,-25,-26,-14,-52,-53,-50,288,-183,-208,295,136,-82,-64,-43,-38,-39,-47,-211,-210,-88,-65,-41,-184,-54,-49,-51,-209,-212,-83,-89,]),'GREATEREQ':([4,14,26,29,36,44,59,60,63,64,65,67,69,70,71,72,73,74,75,78,80,81,82,83,84,85,88,89,90,91,92,104,139,177,182,185,209,226,227,228,231,232,233,250,272,310,325,],[-57,-58,-59,-179,-178,-17,-70,-78,168,-73,-79,-95,-71,-72,-69,-124,-60,-67,-125,-81,-74,-120,-56,-77,-108,-80,-68,-76,-115,-126,-75,-61,-191,-121,-127,-180,-192,-96,-109,-116,-85,-181,-62,-56,-82,-65,-83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,43,143,212,],[1,117,1,117,]),'if_action':([0,13,43,50,57,143,153,155,190,212,222,236,238,283,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'declaration_list':([5,],[46,]),'conditional_expression':([18,19,34,49,54,87,93,96,97,107,158,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'initialization':([116,124,199,],[198,204,243,]),'result_spec':([214,],[260,]),'operand0':([18,19,34,49,54,87,93,96,97,107,158,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'formal_parameter':([215,295,],[262,318,]),'formal_procedure_head':([50,],[143,]),'character_literal':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'step_enumeration':([51,],[151,]),'bracketed_action':([0,13,43,50,57,143,153,155,190,212,222,236,238,283,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'do_action':([0,13,43,50,57,143,153,155,190,212,222,236,238,283,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'exit_label_id':([38,],[110,]),'operand1':([18,19,34,49,54,87,93,96,97,107,158,166,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[67,67,67,67,67,67,67,67,67,67,67,226,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'integer_literal':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'while_control':([13,147,],[52,217,]),'for_control':([51,],[147,]),'location':([0,13,18,19,34,43,49,50,54,57,68,86,87,93,96,97,107,143,153,155,158,166,174,180,190,200,202,203,205,210,212,218,222,229,234,235,236,237,238,273,275,276,283,285,286,288,299,302,307,320,],[37,37,72,72,72,37,72,37,72,37,72,182,72,72,72,72,72,37,37,37,72,72,72,72,37,72,72,72,72,72,37,72,37,72,72,72,37,72,37,72,72,72,37,72,72,72,72,72,72,72,]),'array_element':([0,13,18,19,34,43,49,50,54,57,68,86,87,93,96,97,107,143,153,155,158,166,174,180,190,200,202,203,205,210,212,218,222,229,234,235,236,237,238,273,275,276,283,285,286,288,299,302,307,320,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'else_expression':([230,277,],[278,308,]),'call_action':([0,13,18,19,34,43,49,50,54,57,68,86,87,93,96,97,107,143,153,155,158,166,174,180,190,200,202,203,205,210,212,218,222,229,234,235,236,237,238,273,275,276,283,285,286,288,299,302,307,320,],[16,16,73,73,73,16,73,16,73,16,73,73,73,73,73,73,73,16,16,16,73,73,73,73,16,73,73,73,73,73,16,73,16,73,73,73,16,73,16,73,73,73,16,73,73,73,73,73,73,73,]),'literal':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'closed_dyadic_operator':([37,],[106,]),'result':([18,19,],[76,94,]),'mode_name':([48,116,128,195,264,287,292,],[135,135,135,135,135,135,135,]),'builtin_call':([0,13,18,19,34,43,49,50,54,57,68,86,87,93,96,97,107,143,153,155,158,166,174,180,190,200,202,203,205,210,212,218,222,229,234,235,236,237,238,273,275,276,283,285,286,288,299,302,307,320,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'operator2':([67,226,],[174,174,]),'identifier_list':([5,39,42,115,119,193,215,295,],[48,113,116,116,48,113,264,264,]),'end_value':([267,300,],[301,322,]),'reference_mode':([48,116,128,195,264,287,292,],[134,134,134,134,134,134,134,]),'procedure_statement':([0,43,143,212,],[20,20,20,20,]),'declaration_statement':([0,43,143,212,],[22,22,22,22,]),'then_expression':([183,305,327,],[230,326,333,]),'array_slice':([0,13,18,19,34,43,49,50,54,57,68,86,87,93,96,97,107,143,153,155,158,166,174,180,190,200,202,203,205,210,212,218,222,229,234,235,236,237,238,273,275,276,283,285,286,288,299,302,307,320,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'string_concatenation_operator':([67,226,],[175,175,]),'elsif_expression':([230,],[277,]),'boolean_mode':([48,116,128,195,202,219,264,270,287,288,292,],[127,127,127,127,127,127,127,127,127,127,127,]),'synonym_definition':([42,115,],[114,197,]),'discrete_expression':([218,299,320,],[266,321,332,]),'monadic_operator':([18,19,34,49,54,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'newmode_statement':([0,43,143,212,],[33,33,33,33,]),'relational_operator':([63,],[162,]),'procedure_call':([0,13,18,19,34,43,49,50,54,57,68,86,87,93,96,97,107,143,153,155,158,166,174,180,190,200,202,203,205,210,212,218,222,229,234,235,236,237,238,273,275,276,283,285,286,288,299,302,307,320,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'arithmetic_multiplicative_operator':([84,227,],[180,180,]),'element_mode':([287,],[315,]),'step_value':([267,],[300,]),'action_statement_list':([13,155,190,238,],[57,222,236,283,]),'operator1':([63,],[166,]),'primitive_value':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'arithmetic_additive_operator':([67,226,],[172,172,]),'upper_bound':([235,273,285,],[281,304,312,]),'character_string_literal':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'newmode_list':([39,],[111,]),'discrete_range_mode':([48,116,128,195,202,219,264,270,287,288,292,],[137,137,137,137,137,137,137,137,137,137,137,]),'character_mode':([48,116,128,195,202,219,264,270,287,288,292,],[132,132,132,132,132,132,132,132,132,132,132,]),'statement_list':([0,143,],[43,212,]),'composite_mode':([48,116,128,195,264,287,292,],[130,130,130,130,130,130,130,]),'then_clause':([99,282,],[191,311,]),'parenthesized_expression':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'string_length':([207,],[255,]),'mode_definition':([39,193,],[112,241,]),'declaration':([5,119,],[47,201,]),'array_primitive_value':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'discrete_mode':([48,116,128,195,202,219,264,270,287,288,292,],[125,125,125,125,245,269,125,303,125,245,125,]),'synonym_list':([42,],[115,]),'value_array_element':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'return_action':([0,13,43,50,57,143,153,155,190,212,222,236,238,283,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'parameter_spec':([264,],[297,]),'integer_mode':([48,116,128,195,202,219,264,270,287,288,292,],[129,129,129,129,129,129,129,129,129,129,129,]),'label_id':([0,13,43,57,143,155,190,212,222,236,238,283,],[11,53,11,53,11,53,53,11,53,53,53,53,]),'parameter_list':([49,96,286,],[141,186,186,]),'value_array_slice':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'synonym_statement':([0,43,143,212,],[41,41,41,41,]),'else_clause':([191,311,],[240,329,]),'iteration':([51,],[150,]),'referenced_location':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'control_part':([13,],[55,]),'integer_expression':([158,302,],[223,323,]),'assigning_operator':([37,],[107,]),'string_mode':([48,116,128,195,264,287,292,],[138,138,138,138,138,138,138,]),'lower_bound':([97,158,202,203,205,286,288,],[188,224,247,247,247,247,247,]),'expression':([18,19,34,49,54,87,93,96,97,107,158,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[79,79,98,140,98,98,184,140,189,192,225,244,248,248,248,140,265,274,279,280,98,280,98,306,280,313,248,265,324,98,265,]),'array_mode':([48,116,128,195,264,287,292,],[122,122,122,122,122,122,122,]),'operand4':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[81,81,81,81,81,177,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'action':([0,13,43,50,57,143,153,155,190,212,222,236,238,283,],[24,24,24,144,24,24,144,24,24,24,24,24,24,24,]),'identifier':([0,5,13,18,19,34,38,39,42,43,48,49,50,51,54,57,68,86,87,93,96,97,107,115,116,119,128,136,143,153,155,158,166,174,180,190,193,195,200,202,203,205,210,212,215,218,219,222,229,234,235,236,237,238,264,270,273,275,276,283,285,286,287,288,292,295,299,302,307,320,],[25,45,25,82,82,82,109,45,45,25,123,82,82,149,82,25,82,82,82,82,82,82,82,45,123,45,123,208,25,82,25,82,82,82,82,25,45,123,82,250,82,82,82,25,45,82,268,25,82,82,82,25,82,25,123,268,82,82,82,25,82,82,123,250,123,45,82,82,82,82,]),'index_mode_list':([202,],[251,]),'literal_range':([202,203,205,286,288,],[246,252,253,252,246,]),'mode':([48,116,128,195,264,287,292,],[124,199,206,242,296,314,317,]),'result_action':([0,13,43,50,57,143,153,155,190,212,222,236,238,283,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'operand2':([18,19,34,49,54,87,93,96,97,107,158,166,174,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[84,84,84,84,84,84,84,84,84,84,84,84,227,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'start_value':([218,],[267,]),'assignment_action':([0,13,43,50,57,143,153,155,190,212,222,236,238,283,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'builtin_name':([0,13,18,19,34,43,49,50,54,57,68,86,87,93,96,97,107,143,153,155,158,166,174,180,190,200,202,203,205,210,212,218,222,229,234,235,236,237,238,273,275,276,283,285,286,288,299,302,307,320,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'formal_parameter_list':([215,],[263,]),'parenthesis_gambiarra':([145,],[214,]),'array_location':([0,13,18,19,34,43,49,50,54,57,68,86,87,93,96,97,107,143,153,155,158,166,174,180,190,200,202,203,205,210,212,218,222,229,234,235,236,237,238,273,275,276,283,285,286,288,299,302,307,320,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'boolean_literal':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'boolean_expression':([34,54,87,237,275,307,],[99,154,183,282,305,327,]),'loop_counter':([51,],[152,]),'exit_action':([0,13,43,50,57,143,153,155,190,212,222,236,238,283,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'range_enumeration':([51,],[148,]),'parameter':([49,96,210,286,],[142,142,256,142,]),'empty_literal':([18,19,34,49,54,68,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'procedure_definition':([50,],[146,]),'action_statement':([0,13,43,57,143,155,190,212,222,236,238,283,],[17,58,17,157,17,58,58,17,157,157,58,157,]),'operand3':([18,19,34,49,54,87,93,96,97,107,158,166,174,180,200,202,203,205,210,218,229,234,235,237,273,275,276,285,286,288,299,302,307,320,],[90,90,90,90,90,90,90,90,90,90,90,90,90,228,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'program':([0,],[40,]),'dereferenced_reference':([0,13,18,19,34,43,49,50,54,57,68,86,87,93,96,97,107,143,153,155,158,166,174,180,190,200,202,203,205,210,212,218,222,229,234,235,236,237,238,273,275,276,283,285,286,288,299,302,307,320,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'index_mode':([202,288,],[249,316,]),'membership_operator':([63,],[169,]),'expression_list':([97,],[187,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list initialization','synonym_definition',2,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode initialization','synonym_definition',3,'p_synonym_definition','parser.py',107),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('string_length -> ICONST','string_length',1,'p_string_length','parser.py',223),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',393),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',399),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',405),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',411),
  ('expression -> operand0','expression',1,'p_expression','parser.py',418),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',419),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',424),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',425),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',434),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',440),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',446),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',452),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',453),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',462),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',463),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',470),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',471),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',483),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',488),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',493),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',494),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',502),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',509),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',515),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',519),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',520),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',529),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',534),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',535),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',544),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',550),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',551),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',556),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',561),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',562),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',571),
  ('action -> bracketed_action','action',1,'p_action','parser.py',577),
  ('action -> assignment_action','action',1,'p_action','parser.py',578),
  ('action -> call_action','action',1,'p_action','parser.py',579),
  ('action -> exit_action','action',1,'p_action','parser.py',580),
  ('action -> return_action','action',1,'p_action','parser.py',581),
  ('action -> result_action','action',1,'p_action','parser.py',582),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',588),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',593),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',613),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',622),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',627),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',628),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',637),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',638),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',647),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',648),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',655),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',657),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',658),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',673),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',674),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',675),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',676),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',691),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',692),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',701),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',707),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',712),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',713),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',720),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',725),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',730),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',735),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',736),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',744),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',749),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',750),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',757),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',761),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',762),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',767),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',768),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',775),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',776),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',783),
  ('exit_action -> EXIT exit_label_id','exit_action',2,'p_exit_action','parser.py',791),
  ('exit_label_id -> identifier','exit_label_id',1,'p_exit_label_id','parser.py',795),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',799),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',800),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',807),
  ('result -> expression','result',1,'p_result','parser.py',811),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',816),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',817),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',826),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',827),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',828),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',829),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',830),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',831),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',835),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',839),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',847),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',848),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',856),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',857),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',864),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',865),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',872),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',876),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',877),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',889),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',890),
]
