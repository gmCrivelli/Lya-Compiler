
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST RESULT WHILE PRINT SYN LENGTH BOOL NUM REF FALSE CHAR ELSIF LOWER DO IN EXIT RETURNS OD BY ASC ABS DOWN INT PROC TRUE UPPER ELSE NULL READ LOC THEN END RETURN FOR TO DCL TYPE CHARS FI IF ARRAYprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list initialization\n                              | identifier_list mode initializationnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : integer_literalarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT label_idreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'READ':([0,4,19,20,21,26,29,33,35,36,43,44,45,46,48,49,50,51,52,53,54,55,56,57,64,67,68,72,83,84,99,100,105,109,110,127,130,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,165,167,174,194,197,198,201,202,204,206,208,209,217,224,225,228,231,234,236,237,241,254,259,260,263,266,291,293,300,301,306,307,308,324,],[24,-4,24,24,-6,-5,24,24,-7,24,-2,-8,24,-145,-141,24,-142,-140,-146,-144,-143,24,24,-128,24,-122,24,24,-123,24,-3,24,24,24,-151,24,-23,24,-119,-118,-117,24,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,24,24,-113,-111,-114,-110,-112,24,24,-152,24,-9,-18,24,24,24,24,-200,24,-129,24,24,24,24,24,24,24,24,24,-203,24,24,24,24,-204,24,24,24,24,24,24,24,]),'PRINT':([0,4,19,20,21,26,29,33,35,36,43,44,45,46,48,49,50,51,52,53,54,55,56,57,64,67,68,72,83,84,99,100,105,109,110,127,130,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,165,167,174,194,197,198,201,202,204,206,208,209,217,224,225,228,231,234,236,237,241,254,259,260,263,266,291,293,300,301,306,307,308,324,],[6,-4,6,6,-6,-5,6,6,-7,6,-2,-8,6,-145,-141,6,-142,-140,-146,-144,-143,6,6,-128,6,-122,6,6,-123,6,-3,6,6,6,-151,6,-23,6,-119,-118,-117,6,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,6,6,-113,-111,-114,-110,-112,6,6,-152,6,-9,-18,6,6,6,6,-200,6,-129,6,6,6,6,6,6,6,6,6,-203,6,6,6,6,-204,6,6,6,6,6,6,6,]),'COMMA':([5,9,11,13,27,28,47,58,59,60,61,62,63,65,66,69,70,71,73,74,75,76,78,79,80,82,85,86,87,88,90,91,92,93,94,95,96,112,113,114,117,119,120,122,123,124,125,135,154,163,164,176,177,178,181,182,183,184,185,186,187,188,189,190,192,193,203,205,212,213,214,215,218,219,223,229,239,240,242,243,246,247,248,251,252,253,262,277,278,280,281,285,286,287,294,305,310,311,312,313,315,318,325,326,327,328,329,],[-178,-57,-179,-59,-17,-58,-61,-24,131,-15,133,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,-86,-87,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-10,133,195,133,202,-63,204,-182,-190,-184,-121,-127,204,-180,-31,-40,-46,-27,-30,-37,-35,-29,-32,-34,-12,-45,-33,-28,-36,-62,-191,-25,-26,-16,-85,-116,-96,-109,-181,-13,-44,-11,-14,-43,-64,-183,133,288,-207,-82,-53,-50,308,-52,-65,-209,-210,-88,-38,-47,-39,-211,-208,-89,-83,-41,-184,-51,-49,-54,]),'DIFF':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,79,82,85,86,87,88,90,91,92,93,94,95,96,124,135,154,164,203,205,215,218,219,223,229,262,279,285,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,144,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,-96,-109,-181,-82,-56,-65,-83,]),'MINUS':([5,9,11,13,19,20,27,28,36,45,46,47,48,49,50,51,52,53,54,55,62,63,64,65,66,69,70,71,72,73,74,75,76,78,82,85,86,87,88,90,91,92,93,94,95,96,100,109,124,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,164,198,201,202,203,204,205,215,217,218,219,223,225,229,231,236,237,241,259,260,262,263,279,285,293,300,301,306,307,308,318,324,],[-178,-57,-179,-59,67,67,-17,-58,67,67,-145,-61,-141,67,-142,-140,-146,-144,-143,67,-71,-68,67,-124,-79,-78,-72,-126,67,-56,-73,-60,-74,-108,-115,-125,-70,-75,-77,-69,156,-120,-80,-67,-76,-81,67,67,-190,-121,67,-119,-118,-117,67,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,67,-127,67,-113,-111,-114,-110,-112,-180,67,67,67,-62,67,-191,-85,67,-116,156,-109,67,-181,67,67,67,67,67,67,-82,67,-56,-65,67,67,67,67,67,67,-83,67,]),'DECREASE':([3,5,9,11,13,25,27,28,30,47,73,124,164,203,205,229,285,],[54,-178,-57,-179,-59,-60,-17,-58,-56,-61,-56,-190,-180,-62,-191,-181,-65,]),'REF':([27,60,113,117,132,191,214,251,290,309,],[-17,-15,191,191,191,191,-16,191,191,191,]),'IN':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,79,82,85,86,87,88,90,91,92,93,94,95,96,124,135,154,164,172,173,203,205,215,218,219,223,229,233,262,279,285,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,147,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-190,-121,-127,-180,232,-169,-62,-191,-85,-116,-96,-109,-181,272,-82,-56,-65,-83,]),'ID':([0,4,5,9,11,13,16,19,20,21,26,27,28,29,31,33,35,36,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,83,84,85,86,87,88,90,91,92,93,94,95,96,99,100,105,106,109,110,113,115,116,117,124,127,130,131,132,133,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,165,167,174,191,194,195,196,197,198,199,201,202,203,204,205,206,208,209,210,214,215,217,218,219,223,224,225,228,229,231,232,234,236,237,241,243,244,251,254,259,260,262,263,266,272,285,288,290,291,293,294,300,301,306,307,308,309,315,318,324,],[27,-4,-178,-57,-179,-59,27,27,27,-6,-5,-17,-58,27,27,27,-7,27,27,27,-2,-8,27,-145,-61,-141,27,-142,-140,-146,-144,-143,27,27,-128,-15,-71,-68,27,-124,-79,-122,27,-78,-72,-126,27,-56,-73,-60,-74,-108,-86,-87,-115,-123,27,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-3,27,27,27,27,-151,27,-19,27,27,-190,27,-23,27,27,27,-121,27,-119,-118,-117,27,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,27,-127,27,-113,-111,-114,-110,-112,27,-180,27,-152,27,27,-9,27,-20,-18,27,-21,27,27,-62,27,-191,-200,27,-129,27,-16,-85,27,-116,-96,-109,27,27,27,-181,27,27,27,27,27,27,-14,-22,27,-203,27,27,-82,27,27,27,-65,27,27,-204,27,-88,27,27,27,27,27,27,-89,-83,27,]),'PLUS':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,82,85,86,87,88,90,91,92,93,94,95,96,124,135,154,164,203,205,215,218,219,223,229,262,279,285,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,-115,-125,-70,-75,-77,-69,160,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,160,-109,-181,-82,-56,-65,-83,]),'ARRAY':([27,60,113,117,132,191,214,251,290,309,],[-17,-15,179,179,179,179,-16,179,179,179,]),'LESSEQ':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,79,82,85,86,87,88,90,91,92,93,94,95,96,124,135,154,164,203,205,215,218,219,223,229,262,279,285,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,148,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,-96,-109,-181,-82,-56,-65,-83,]),'NULL':([19,20,36,45,46,48,49,50,51,52,53,54,55,64,67,68,72,83,100,109,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[93,93,93,93,-145,-141,93,-142,-140,-146,-144,-143,93,93,-122,93,93,-123,93,93,93,-119,-118,-117,93,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,93,93,-113,-111,-114,-110,-112,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'CHARS':([27,60,113,117,132,191,214,251,290,309,],[-17,-15,180,180,180,180,-16,180,180,180,]),'MULCREASE':([3,5,9,11,13,25,27,28,30,47,73,124,164,203,205,229,285,],[53,-178,-57,-179,-59,-60,-17,-58,-56,-61,-56,-190,-180,-62,-191,-181,-65,]),'GREATEREQ':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,79,82,85,86,87,88,90,91,92,93,94,95,96,124,135,154,164,203,205,215,218,219,223,229,262,279,285,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,150,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,-96,-109,-181,-82,-56,-65,-83,]),'LBRACKET':([2,3,5,9,11,13,25,27,28,30,47,62,63,65,66,69,70,71,73,74,75,76,81,86,87,88,90,93,94,95,96,124,154,164,179,180,203,205,215,229,262,279,285,318,],[45,-66,-178,-57,-179,-59,-60,-17,-58,-56,-61,-71,-68,-66,-79,-78,-72,-84,-56,-73,-60,-74,153,-70,-75,-77,-69,-80,-67,-76,-81,-190,-66,-180,237,238,-62,-191,-85,-181,-82,-56,-65,-83,]),'CHAR':([27,60,113,117,132,191,214,232,237,251,272,290,308,309,],[-17,-15,183,183,183,183,-16,183,183,183,183,183,183,183,]),'ABS':([0,4,19,20,21,26,29,33,35,36,43,44,45,46,48,49,50,51,52,53,54,55,56,57,64,67,68,72,83,84,99,100,105,109,110,127,130,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,165,167,174,194,197,198,201,202,204,206,208,209,217,224,225,228,231,234,236,237,241,254,259,260,263,266,291,293,300,301,306,307,308,324,],[14,-4,14,14,-6,-5,14,14,-7,14,-2,-8,14,-145,-141,14,-142,-140,-146,-144,-143,14,14,-128,14,-122,14,14,-123,14,-3,14,14,14,-151,14,-23,14,-119,-118,-117,14,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,14,14,-113,-111,-114,-110,-112,14,14,-152,14,-9,-18,14,14,14,14,-200,14,-129,14,14,14,14,14,14,14,14,14,-203,14,14,14,14,-204,14,14,14,14,14,14,14,]),'RBRACKET':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,79,80,82,85,86,87,88,90,91,92,93,94,95,96,119,120,124,135,154,164,176,183,184,186,187,190,193,203,205,215,218,219,220,222,223,229,245,246,247,262,277,278,280,281,282,283,285,294,297,305,311,315,318,325,327,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,-86,-87,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,203,-63,-190,-121,-127,-180,-31,-37,-35,-32,-34,-33,-36,-62,-191,-85,-116,-96,262,-55,-109,-181,285,-43,-64,-82,-53,-50,309,-52,-48,310,-65,-88,318,-38,-39,-89,-83,-41,-51,]),'LOC':([27,176,177,178,181,182,183,184,185,186,187,189,190,192,193,240,287,305,310,311,314,328,329,],[-17,-31,-40,-46,-27,-30,-37,-35,-29,-32,-34,-45,-33,-28,-36,-44,312,-38,-47,-39,331,-49,-54,]),'END':([4,21,26,35,43,44,57,99,127,130,194,197,206,208,209,254,291,],[-4,-6,-5,-7,-2,-8,-128,-3,207,-23,-9,-18,-200,249,-129,-203,-204,]),'DCL':([0,4,21,26,29,35,43,44,57,99,127,130,194,197,206,208,209,254,291,],[38,-4,-6,-5,38,-7,-2,-8,-128,-3,38,-23,-9,-18,-200,38,-129,-203,-204,]),'GREATER':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,79,82,85,86,87,88,90,91,92,93,94,95,96,124,135,154,164,203,205,215,218,219,223,229,262,279,285,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,146,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,-96,-109,-181,-82,-56,-65,-83,]),'MOD':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,82,85,86,87,88,90,92,93,94,95,96,124,135,154,164,203,205,215,218,223,229,262,279,285,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,138,-115,-125,-70,-75,-77,-69,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,138,-181,-82,-56,-65,-83,]),'COLON':([5,9,10,11,13,27,28,30,47,62,63,65,66,69,70,71,73,74,75,76,78,79,80,82,85,86,87,88,90,91,92,93,94,95,96,103,118,120,124,135,154,164,203,205,215,218,219,221,222,223,229,262,275,276,279,285,294,315,318,326,],[-178,-57,56,-179,-59,-17,-58,-130,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,-86,-87,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,165,201,-42,-190,-121,-127,-180,-62,-191,-85,-116,-96,263,-42,-109,-181,-82,306,-42,-56,-65,-88,-89,-83,-42,]),'ELSIF':([5,9,11,13,27,28,47,57,62,63,65,66,69,70,71,73,74,75,76,78,79,80,82,85,86,87,88,90,91,92,93,94,95,96,110,124,135,154,161,162,164,167,203,205,209,215,216,218,219,223,224,229,257,261,262,285,294,298,315,317,318,332,],[-178,-57,-179,-59,-17,-58,-61,-128,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,-86,-87,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-151,-190,-121,-127,-149,225,-180,-152,-62,-191,-129,-85,260,-116,-96,-109,-150,-181,293,-91,-82,-65,-88,225,-89,-93,-83,-94,]),'NOT':([19,20,36,45,46,48,49,50,51,52,53,54,55,64,72,100,109,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[83,83,83,83,-145,-141,83,-142,-140,-146,-144,-143,83,83,83,83,83,83,-119,-118,-117,83,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,83,83,-113,-111,-114,-110,-112,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'FI':([5,9,11,13,27,28,47,57,62,63,65,66,69,70,71,73,74,75,76,78,79,80,82,85,86,87,88,90,91,92,93,94,95,96,110,124,135,154,161,162,164,167,203,205,209,215,218,219,223,224,226,228,229,258,262,266,285,292,294,295,298,315,318,319,],[-178,-57,-179,-59,-17,-58,-61,-128,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,-86,-87,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-151,-190,-121,-127,-149,227,-180,-152,-62,-191,-129,-85,-116,-96,-109,-150,265,-153,-181,294,-82,-154,-65,315,-88,-92,-155,-89,-83,-156,]),'RETURN':([0,4,21,26,29,33,35,43,44,56,57,99,105,110,127,130,161,165,167,174,194,197,206,208,209,224,228,234,254,266,291,],[19,-4,-6,-5,19,19,-7,-2,-8,19,-128,-3,19,-151,19,-23,19,19,-152,19,-9,-18,-200,19,-129,19,19,19,-203,19,-204,]),'IF':([0,4,19,20,21,26,29,33,35,36,43,44,45,46,48,49,50,51,52,53,54,55,56,57,64,72,99,100,105,109,110,127,130,153,161,165,167,174,194,197,198,201,202,204,206,208,209,217,224,225,228,231,234,236,237,241,254,259,260,263,266,291,293,300,301,306,307,308,324,],[20,-4,72,72,-6,-5,20,20,-7,72,-2,-8,72,-145,-141,72,-142,-140,-146,-144,-143,72,20,-128,72,72,-3,72,20,72,-151,20,-23,72,20,20,-152,20,-9,-18,72,72,72,72,-200,20,-129,72,20,72,20,72,20,72,72,72,-203,72,72,72,20,-204,72,72,72,72,72,72,72,]),'SYN':([0,4,21,26,29,35,43,44,57,99,127,130,194,197,206,208,209,254,291,],[40,-4,-6,-5,40,-7,-2,-8,-128,-3,40,-23,-9,-18,-200,40,-129,-203,-204,]),'FALSE':([19,20,36,45,46,48,49,50,51,52,53,54,55,64,67,68,72,83,100,109,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[88,88,88,88,-145,-141,88,-142,-140,-146,-144,-143,88,88,-122,88,88,-123,88,88,88,-119,-118,-117,88,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,88,88,-113,-111,-114,-110,-112,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'PROC':([56,],[129,]),'STRCAT':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,82,85,86,87,88,90,91,92,93,94,95,96,124,135,154,164,203,205,215,218,219,223,229,262,279,285,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,-115,-125,-70,-75,-77,-69,158,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,158,-109,-181,-82,-56,-65,-83,]),'BY':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,79,80,82,85,86,87,88,90,91,92,93,94,95,96,124,135,154,164,203,205,215,218,219,223,229,262,267,268,269,285,294,315,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,-86,-87,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,-96,-109,-181,-82,-170,300,-174,-65,-88,-89,-83,]),'DIVIDE':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,82,85,86,87,88,90,92,93,94,95,96,124,135,154,164,203,205,215,218,223,229,262,279,285,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,139,-115,-125,-70,-75,-77,-69,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,139,-181,-82,-56,-65,-83,]),'ELSE':([5,9,11,13,27,28,47,57,62,63,65,66,69,70,71,73,74,75,76,78,79,80,82,85,86,87,88,90,91,92,93,94,95,96,110,124,135,154,161,162,164,167,203,205,209,215,216,218,219,223,224,229,257,261,262,285,294,298,315,317,318,332,],[-178,-57,-179,-59,-17,-58,-61,-128,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,-86,-87,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-151,-190,-121,-127,-149,228,-180,-152,-62,-191,-129,-85,259,-116,-96,-109,-150,-181,259,-91,-82,-65,-88,228,-89,-93,-83,-94,]),'DIVCREASE':([3,5,9,11,13,25,27,28,30,47,73,124,164,203,205,229,285,],[46,-178,-57,-179,-59,-60,-17,-58,-56,-61,-56,-190,-180,-62,-191,-181,-65,]),'LPAREN':([6,7,14,15,19,20,23,24,27,30,32,34,36,37,45,46,48,49,50,51,52,53,54,55,64,67,68,72,73,83,100,109,129,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,176,177,183,184,186,187,190,192,193,198,201,202,204,217,225,231,236,237,241,255,259,260,263,270,271,279,281,293,300,301,304,305,306,307,308,311,324,],[-199,55,-192,-193,64,64,-194,-198,-17,100,-196,-197,64,-195,64,-145,-141,64,-142,-140,-146,-144,-143,64,64,-122,64,64,100,-123,64,64,210,64,-119,-118,-117,64,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,64,64,-113,-111,-114,-110,-112,-31,236,-37,-35,-32,-34,-33,241,-36,64,64,64,64,64,64,64,64,64,64,290,64,64,64,236,241,307,241,64,64,64,241,-38,64,64,64,-39,64,]),'TRUE':([19,20,36,45,46,48,49,50,51,52,53,54,55,64,67,68,72,83,100,109,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[69,69,69,69,-145,-141,69,-142,-140,-146,-144,-143,69,69,-122,69,69,-123,69,69,69,-119,-118,-117,69,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,69,69,-113,-111,-114,-110,-112,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'OR':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,79,82,85,86,87,88,90,91,92,93,94,95,96,124,135,154,164,203,205,215,218,219,223,229,262,279,285,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,145,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,-96,-109,-181,-82,-56,-65,-83,]),'NUM':([0,4,19,20,21,26,29,33,35,36,43,44,45,46,48,49,50,51,52,53,54,55,56,57,64,67,68,72,83,84,99,100,105,109,110,127,130,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,165,167,174,194,197,198,201,202,204,206,208,209,217,224,225,228,231,234,236,237,241,254,259,260,263,266,291,293,300,301,306,307,308,324,],[23,-4,23,23,-6,-5,23,23,-7,23,-2,-8,23,-145,-141,23,-142,-140,-146,-144,-143,23,23,-128,23,-122,23,23,-123,23,-3,23,23,23,-151,23,-23,23,-119,-118,-117,23,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,23,23,-113,-111,-114,-110,-112,23,23,-152,23,-9,-18,23,23,23,23,-200,23,-129,23,23,23,23,23,23,23,23,23,-203,23,23,23,23,-204,23,23,23,23,23,23,23,]),'TO':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,79,80,82,85,86,87,88,90,91,92,93,94,95,96,124,135,154,164,203,205,215,218,219,223,229,262,267,268,269,285,294,299,303,315,318,321,322,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,-108,-86,-87,-115,-125,-70,-75,-77,-69,-95,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,-96,-109,-181,-82,-170,301,-174,-65,-88,301,324,-89,-83,-171,-55,]),'EXIT':([0,4,21,26,29,33,35,43,44,56,57,99,105,110,127,130,161,165,167,174,194,197,206,208,209,224,228,234,254,266,291,],[31,-4,-6,-5,31,31,-7,-2,-8,31,-128,-3,31,-151,31,-23,31,31,-152,31,-9,-18,-200,31,-129,31,31,31,-203,31,-204,]),'LOWER':([0,4,19,20,21,26,29,33,35,36,43,44,45,46,48,49,50,51,52,53,54,55,56,57,64,67,68,72,83,84,99,100,105,109,110,127,130,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,165,167,174,194,197,198,201,202,204,206,208,209,217,224,225,228,231,234,236,237,241,254,259,260,263,266,291,293,300,301,306,307,308,324,],[32,-4,32,32,-6,-5,32,32,-7,32,-2,-8,32,-145,-141,32,-142,-140,-146,-144,-143,32,32,-128,32,-122,32,32,-123,32,-3,32,32,32,-151,32,-23,32,-119,-118,-117,32,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,32,32,-113,-111,-114,-110,-112,32,32,-152,32,-9,-18,32,32,32,32,-200,32,-129,32,32,32,32,32,32,32,32,32,-203,32,32,32,32,-204,32,32,32,32,32,32,32,]),'TIMES':([5,9,11,13,27,28,47,62,63,65,66,69,70,71,73,74,75,76,78,82,85,86,87,88,90,92,93,94,95,96,124,135,154,164,203,205,215,218,223,229,262,279,285,318,],[-178,-57,-179,-59,-17,-58,-61,-71,-68,-124,-79,-78,-72,-126,-56,-73,-60,-74,140,-115,-125,-70,-75,-77,-69,-120,-80,-67,-76,-81,-190,-121,-127,-180,-62,-191,-85,-116,140,-181,-82,-56,-65,-83,]),'DO':([0,4,21,26,29,33,35,43,44,56,57,99,105,110,127,130,161,165,167,174,194,197,206,208,209,224,228,234,254,266,291,],[33,-4,-6,-5,33,33,-7,-2,-8,33,-128,-3,33,-151,33,-23,33,33,-152,33,-9,-18,-200,33,-129,33,33,33,-203,33,-204,]),'LENGTH':([0,4,19,20,21,26,29,33,35,36,43,44,45,46,48,49,50,51,52,53,54,55,56,57,64,67,68,72,83,84,99,100,105,109,110,127,130,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,165,167,174,194,197,198,201,202,204,206,208,209,217,224,225,228,231,234,236,237,241,254,259,260,263,266,291,293,300,301,306,307,308,324,],[34,-4,34,34,-6,-5,34,34,-7,34,-2,-8,34,-145,-141,34,-142,-140,-146,-144,-143,34,34,-128,34,-122,34,34,-123,34,-3,34,34,34,-151,34,-23,34,-119,-118,-117,34,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,34,34,-113,-111,-114,-110,-112,34,34,-152,34,-9,-18,34,34,34,34,-200,34,-129,34,34,34,34,34,34,34,34,34,-203,34,34,34,34,-204,34,34,34,34,34,34,34,]),'CCONST':([19,20,36,45,46,48,49,50,51,52,53,54,55,64,67,68,72,83,100,109,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[66,66,66,66,-145,-141,66,-142,-140,-146,-144,-143,66,66,-122,66,66,-123,66,66,66,-119,-118,-117,66,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,66,66,-113,-111,-114,-110,-112,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'ARROW':([3,5,9,11,13,19,20,25,27,28,30,36,45,46,47,48,49,50,51,52,53,54,55,64,65,67,68,72,73,75,83,100,109,124,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,164,198,201,202,203,204,205,217,225,229,231,236,237,241,259,260,263,279,285,293,300,301,306,307,308,324,],[47,-178,-57,-179,-59,84,84,-60,-17,-58,-56,84,84,-145,-61,-141,84,-142,-140,-146,-144,-143,84,84,47,-122,84,84,-56,-60,-123,84,84,-190,84,-119,-118,-117,84,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,84,47,84,-113,-111,-114,-110,-112,-180,84,84,84,-62,84,-191,84,84,-181,84,84,84,84,84,84,84,-56,-65,84,84,84,84,84,84,84,]),'ICONST':([19,20,36,45,46,48,49,50,51,52,53,54,55,64,67,68,72,83,100,109,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,198,201,202,204,217,225,231,236,237,238,241,259,260,263,293,300,301,306,307,308,324,],[95,95,95,95,-145,-141,95,-142,-140,-146,-144,-143,95,95,-122,95,95,-123,95,95,95,-119,-118,-117,95,-98,-99,-102,-100,-103,-107,-106,-101,-104,-105,-97,95,95,-113,-111,-114,-110,-112,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'ASSIGN':([3,5,9,11,13,25,27,28,30,47,60,61,73,117,124,164,172,173,176,177,178,181,182,183,184,185,186,187,188,189,190,192,193,200,203,205,214,229,240,285,305,310,311,328,329,],[51,-178,-57,-179,-59,-60,-17,-58,-56,-61,-15,132,-56,198,-190,-180,231,-169,-31,-40,-46,-27,-30,-37,-35,-29,-32,-34,198,-45,-33,-28,-36,198,-62,-191,-16,-181,-44,-65,-38,-47,-39,-49,-54,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'newmode_list':([16,],[59,]),'operator1':([79,],[141,]),'control_part':([33,],[108,]),'procedure_definition':([56,],[126,]),'upper_bound':([201,263,306,],[245,297,325,]),'location':([0,19,20,29,33,36,45,49,55,56,64,68,72,84,100,105,109,127,137,141,153,155,161,165,174,198,201,202,204,208,217,224,225,228,231,234,236,237,241,259,260,263,266,293,300,301,306,307,308,324,],[3,65,65,3,3,65,65,65,65,3,65,65,65,154,65,3,65,3,65,65,65,65,3,3,3,65,65,65,65,3,65,3,65,3,65,3,65,65,65,65,65,65,3,65,65,65,65,65,65,65,]),'assignment_action':([0,29,33,56,105,127,161,165,174,208,224,228,234,266,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'operand4':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[92,92,92,92,92,92,92,135,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'label_id':([0,29,31,33,105,127,161,174,208,224,228,234,266,],[10,10,102,103,103,10,103,103,10,103,103,103,103,]),'integer_expression':([153,300,],[220,321,]),'builtin_call':([0,19,20,29,33,36,45,49,55,56,64,68,72,84,100,105,109,127,137,141,153,155,161,165,174,198,201,202,204,208,217,224,225,228,231,234,236,237,241,259,260,263,266,293,300,301,306,307,308,324,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'end_value':([268,299,],[302,320,]),'action':([0,29,33,56,105,127,161,165,174,208,224,228,234,266,],[12,12,12,128,12,12,12,128,12,12,12,12,12,12,]),'array_slice':([0,19,20,29,33,36,45,49,55,56,64,68,72,84,100,105,109,127,137,141,153,155,161,165,174,198,201,202,204,208,217,224,225,228,231,234,236,237,241,259,260,263,266,293,300,301,306,307,308,324,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'synonym_definition':([40,116,],[115,196,]),'character_string_literal':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'mode':([113,117,132,191,251,290,309,],[188,200,213,240,287,314,329,]),'boolean_mode':([113,117,132,191,232,237,251,272,290,308,309,],[186,186,186,186,186,186,186,186,186,186,186,]),'element_mode':([309,],[328,]),'formal_parameter':([210,288,],[253,313,]),'boolean_literal':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'parameter_spec':([251,],[286,]),'literal_range':([236,237,241,307,308,],[274,277,284,274,277,]),'newmode_statement':([0,29,127,208,],[21,21,21,21,]),'declaration_list':([38,],[114,]),'index_mode_list':([237,],[280,]),'call_action':([0,19,20,29,33,36,45,49,55,56,64,68,72,84,100,105,109,127,137,141,153,155,161,165,174,198,201,202,204,208,217,224,225,228,231,234,236,237,241,259,260,263,266,293,300,301,306,307,308,324,],[25,75,75,25,25,75,75,75,75,25,75,75,75,75,75,25,75,25,75,75,75,75,25,25,25,75,75,75,75,25,75,25,75,25,75,25,75,75,75,75,75,75,25,75,75,75,75,75,75,75,]),'empty_literal':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'integer_literal':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,238,241,259,260,263,293,300,301,306,307,308,324,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,282,62,62,62,62,62,62,62,62,62,62,62,]),'for_control':([106,],[168,]),'declaration_statement':([0,29,127,208,],[4,4,4,4,]),'else_clause':([162,298,],[226,319,]),'discrete_mode':([113,117,132,191,232,237,251,272,290,308,309,],[192,192,192,192,271,281,192,304,192,281,192,]),'expression':([19,20,36,45,49,55,64,72,100,109,153,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[89,98,89,120,121,125,134,98,125,98,222,243,246,247,125,261,98,269,276,276,276,295,98,246,98,322,269,246,326,276,269,]),'then_expression':([136,296,316,],[216,317,332,]),'conditional_expression':([19,20,36,45,49,55,64,72,100,109,153,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'array_mode':([113,117,132,191,251,290,309,],[178,178,178,178,178,178,178,]),'operand3':([19,20,36,45,49,55,64,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[82,82,82,82,82,82,82,82,82,82,218,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'procedure_statement':([0,29,127,208,],[35,35,35,35,]),'parenthesis_gambiarra':([129,],[211,]),'parameter':([55,100,204,307,],[123,123,248,123,]),'value_array_slice':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'operand1':([19,20,36,45,49,55,64,72,100,109,141,153,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[91,91,91,91,91,91,91,91,91,91,219,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'string_length':([238,],[283,]),'operand2':([19,20,36,45,49,55,64,72,100,109,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[78,78,78,78,78,78,78,78,78,78,78,78,223,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'parameter_list':([55,100,307,],[122,163,163,]),'string_mode':([113,117,132,191,251,290,309,],[189,189,189,189,189,189,189,]),'loop_counter':([106,],[172,]),'bracketed_action':([0,29,33,56,105,127,161,165,174,208,224,228,234,266,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'closed_dyadic_operator':([3,],[48,]),'if_action':([0,29,33,56,105,127,161,165,174,208,224,228,234,266,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'statement':([0,29,127,208,],[43,99,43,99,]),'arithmetic_multiplicative_operator':([78,223,],[137,137,]),'synonym_statement':([0,29,127,208,],[26,26,26,26,]),'program':([0,],[1,]),'string_concatenation_operator':([91,219,],[157,157,]),'value_array_element':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'declaration':([38,195,],[112,242,]),'range_enumeration':([106,],[169,]),'return_action':([0,29,33,56,105,127,161,165,174,208,224,228,234,266,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'primitive_value':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'array_element':([0,19,20,29,33,36,45,49,55,56,64,68,72,84,100,105,109,127,137,141,153,155,161,165,174,198,201,202,204,208,217,224,225,228,231,234,236,237,241,259,260,263,266,293,300,301,306,307,308,324,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'procedure_call':([0,19,20,29,33,36,45,49,55,56,64,68,72,84,100,105,109,127,137,141,153,155,161,165,174,198,201,202,204,208,217,224,225,228,231,234,236,237,241,259,260,263,266,293,300,301,306,307,308,324,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'formal_parameter_list':([210,],[252,]),'step_value':([268,],[299,]),'builtin_name':([0,19,20,29,33,36,45,49,55,56,64,68,72,84,100,105,109,127,137,141,153,155,161,165,174,198,201,202,204,208,217,224,225,228,231,234,236,237,241,259,260,263,266,293,300,301,306,307,308,324,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'formal_procedure_head':([56,],[127,]),'dereferenced_reference':([0,19,20,29,33,36,45,49,55,56,64,68,72,84,100,105,109,127,137,141,153,155,161,165,174,198,201,202,204,208,217,224,225,228,231,234,236,237,241,259,260,263,266,293,300,301,306,307,308,324,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'arithmetic_additive_operator':([91,219,],[159,159,]),'lower_bound':([45,153,236,237,241,307,308,],[118,221,275,275,275,275,275,]),'while_control':([33,168,],[104,230,]),'action_statement_list':([33,161,174,228,],[105,224,234,266,]),'assigning_operator':([3,],[49,]),'reference_mode':([113,117,132,191,251,290,309,],[185,185,185,185,185,185,185,]),'exit_action':([0,29,33,56,105,127,161,165,174,208,224,228,234,266,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'else_expression':([216,257,],[258,292,]),'discrete_range_mode':([113,117,132,191,232,237,251,272,290,308,309,],[187,187,187,187,187,187,187,187,187,187,187,]),'discrete_expression':([231,301,324,],[267,323,333,]),'boolean_expression':([20,72,109,225,260,293,],[97,136,175,264,296,316,]),'operator2':([91,219,],[155,155,]),'expression_list':([45,],[119,]),'do_action':([0,29,33,56,105,127,161,165,174,208,224,228,234,266,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'index_mode':([237,308,],[278,327,]),'start_value':([231,],[268,]),'monadic_operator':([19,20,36,45,49,55,64,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'character_literal':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'relational_operator':([79,],[152,]),'result':([19,36,],[77,111,]),'integer_mode':([113,117,132,191,232,237,251,272,290,308,309,],[176,176,176,176,176,176,176,176,176,176,176,]),'statement_list':([0,127,],[29,208,]),'identifier':([0,16,19,20,29,31,33,36,38,40,45,49,55,56,64,68,72,84,100,105,106,109,113,116,117,127,131,132,133,137,141,153,155,161,165,174,191,195,198,201,202,204,208,210,217,224,225,228,231,232,234,236,237,241,251,259,260,263,266,272,288,290,293,300,301,306,307,308,309,324,],[30,60,73,73,30,101,30,73,60,60,73,73,73,73,73,73,73,73,73,30,173,73,177,60,177,30,60,177,214,73,73,73,73,30,73,30,177,60,73,73,73,73,30,60,73,30,73,30,73,270,30,73,279,73,177,73,73,73,30,270,60,177,73,73,73,73,73,279,177,73,]),'iteration':([106,],[170,]),'operand0':([19,20,36,45,49,55,64,72,100,109,153,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'array_primitive_value':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'referenced_location':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'parenthesized_expression':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'elsif_expression':([216,],[257,]),'mode_name':([113,117,132,191,251,290,309,],[181,181,181,181,181,181,181,]),'composite_mode':([113,117,132,191,251,290,309,],[182,182,182,182,182,182,182,]),'then_clause':([97,264,],[162,298,]),'step_enumeration':([106,],[171,]),'array_location':([0,19,20,29,33,36,45,49,55,56,64,68,72,84,100,105,109,127,137,141,153,155,161,165,174,198,201,202,204,208,217,224,225,228,231,234,236,237,241,259,260,263,266,293,300,301,306,307,308,324,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'membership_operator':([79,],[142,]),'synonym_list':([40,],[116,]),'initialization':([117,188,200,],[199,239,244,]),'result_spec':([211,],[256,]),'result_action':([0,29,33,56,105,127,161,165,174,208,224,228,234,266,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'mode_definition':([16,131,],[58,212,]),'literal':([19,20,36,45,49,55,64,68,72,100,109,137,141,153,155,198,201,202,204,217,225,231,236,237,241,259,260,263,293,300,301,306,307,308,324,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'character_mode':([113,117,132,191,232,237,251,272,290,308,309,],[190,190,190,190,190,190,190,190,190,190,190,]),'action_statement':([0,29,33,105,127,161,174,208,224,228,234,266,],[44,44,110,167,44,110,110,44,167,110,167,167,]),'identifier_list':([16,38,40,116,131,195,210,288,],[61,113,117,117,61,113,251,251,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list initialization','synonym_definition',2,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode initialization','synonym_definition',3,'p_synonym_definition','parser.py',107),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('string_length -> integer_literal','string_length',1,'p_string_length','parser.py',223),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',392),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',398),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',404),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',410),
  ('expression -> operand0','expression',1,'p_expression','parser.py',417),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',418),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',423),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',424),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',433),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',439),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',445),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',451),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',452),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',461),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',462),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',469),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',470),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',475),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',482),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',487),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',492),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',493),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',501),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',502),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',507),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',514),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',518),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',519),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',526),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',533),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',534),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',542),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',548),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',550),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',555),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',560),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',561),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',570),
  ('action -> bracketed_action','action',1,'p_action','parser.py',576),
  ('action -> assignment_action','action',1,'p_action','parser.py',577),
  ('action -> call_action','action',1,'p_action','parser.py',578),
  ('action -> exit_action','action',1,'p_action','parser.py',579),
  ('action -> return_action','action',1,'p_action','parser.py',580),
  ('action -> result_action','action',1,'p_action','parser.py',581),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',586),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',592),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',611),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',617),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',626),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',627),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',636),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',637),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',646),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',647),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',654),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',655),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',657),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',672),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',673),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',674),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',675),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',689),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',691),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',700),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',705),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',711),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',712),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',719),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',724),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',729),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',734),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',735),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',743),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',748),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',749),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',756),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',760),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',761),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',766),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',767),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',774),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',775),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',782),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','parser.py',790),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',794),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',795),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',802),
  ('result -> expression','result',1,'p_result','parser.py',806),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',811),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',812),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',819),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',820),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',821),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',822),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',823),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',826),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',830),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',834),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',835),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',842),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',843),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',851),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',852),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',859),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',860),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',867),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',871),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',872),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',884),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',885),
]
