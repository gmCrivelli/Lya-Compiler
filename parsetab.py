
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST THEN IN TRUE PRINT ABS TO EXIT CHARS RETURN INT END BY ELSE DO OD UPPER RETURNS TYPE PROC READ ASC CHAR LOC LENGTH IF WHILE ELSIF FALSE SYN ARRAY LOWER NULL FOR REF DOWN DCL RESULT BOOL NUM FIprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list initialization\n                              | identifier_list mode initializationnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : ICONSTarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT label_idreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {'LPAREN':([1,2,3,14,19,22,23,24,25,30,35,36,40,44,45,46,47,48,49,50,51,53,54,55,75,87,92,97,101,103,114,115,140,142,144,146,150,152,153,155,158,159,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,197,201,205,212,214,216,225,231,235,237,250,251,260,261,265,267,270,281,285,287,289,291,292,293,295,297,301,312,],[45,-198,-199,-192,-196,-194,103,103,-17,115,103,-193,-197,-195,103,-144,-141,-145,-143,-146,103,-142,-140,103,45,103,-123,103,-122,103,103,103,212,214,-31,-34,-35,-33,-36,-37,-32,103,103,-110,-112,-113,-114,-111,-119,103,-117,-118,103,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,103,239,103,103,103,103,103,103,103,103,103,212,214,214,295,103,103,103,310,214,103,103,103,-38,-39,103,103,103,103,]),'BOOL':([25,63,69,73,135,149,206,209,216,246,279,296,297,310,],[-17,-15,153,153,153,153,153,-16,153,153,153,153,153,153,]),'RETURNS':([240,280,307,],[281,-205,-206,]),'READ':([0,7,9,12,23,24,31,34,35,37,41,43,45,46,47,48,49,50,51,53,54,55,56,62,70,74,87,92,97,101,103,106,114,115,116,125,132,133,137,139,159,161,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,241,242,243,265,267,270,271,282,287,289,291,295,297,301,311,312,],[2,2,-6,2,2,2,-2,-7,2,-5,-4,-8,2,-144,-141,-145,-143,-146,2,-142,-140,2,2,-151,-3,-128,2,-123,2,-122,2,2,2,2,2,-152,2,2,-23,-18,2,-9,2,-110,-112,-113,-114,-111,-119,2,-117,-118,2,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-200,-129,2,2,2,2,2,-203,2,2,2,2,2,2,-204,2,]),'PRINT':([0,7,9,12,23,24,31,34,35,37,41,43,45,46,47,48,49,50,51,53,54,55,56,62,70,74,87,92,97,101,103,106,114,115,116,125,132,133,137,139,159,161,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,241,242,243,265,267,270,271,282,287,289,291,295,297,301,311,312,],[3,3,-6,3,3,3,-2,-7,3,-5,-4,-8,3,-144,-141,-145,-143,-146,3,-142,-140,3,3,-151,-3,-128,3,-123,3,-122,3,3,3,3,3,-152,3,3,-23,-18,3,-9,3,-110,-112,-113,-114,-111,-119,3,-117,-118,3,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-200,-129,3,3,3,3,3,-203,3,3,3,3,3,3,-204,3,]),'AND':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,179,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-56,-82,-65,-83,]),'ELSIF':([6,13,16,20,25,38,52,62,74,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,119,125,173,188,190,191,195,202,221,222,223,224,226,234,236,238,242,266,268,269,298,304,305,322,324,325,331,],[-58,-57,-179,-59,-17,-178,-61,-151,-128,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-180,-152,-121,-127,231,-149,-190,-181,-109,-116,-96,267,-85,-150,-62,-191,-129,301,-91,-82,-88,231,-65,-89,-93,-83,-94,]),'TIMES':([6,13,16,20,25,38,52,75,76,77,78,79,82,83,84,85,86,88,89,90,93,94,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-70,171,-77,-115,-81,-79,-72,-80,-74,-68,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,171,-116,-85,-62,-191,-56,-82,-65,-83,]),'MULCREASE':([1,5,6,13,16,20,25,28,38,52,75,119,195,202,236,238,305,],[-56,46,-58,-57,-179,-59,-17,-60,-178,-61,-56,-180,-190,-181,-62,-191,-65,]),'PROC':([116,],[197,]),'ELSE':([6,13,16,20,25,38,52,62,74,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,119,125,173,188,190,191,195,202,221,222,223,224,226,234,236,238,242,266,268,269,298,304,305,322,324,325,331,],[-58,-57,-179,-59,-17,-178,-61,-151,-128,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-180,-152,-121,-127,230,-149,-190,-181,-109,-116,-96,265,-85,-150,-62,-191,-129,265,-91,-82,-88,230,-65,-89,-93,-83,-94,]),'EXIT':([0,7,9,12,31,34,37,41,43,56,62,70,74,116,125,132,133,137,139,161,191,200,207,230,234,241,242,243,271,282,311,],[27,27,-6,27,-2,-7,-5,-4,-8,27,-151,-3,-128,27,-152,27,27,-23,-18,-9,27,27,27,27,27,-200,-129,27,27,-203,-204,]),'RBRACKET':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,119,144,146,150,152,153,155,158,173,188,193,194,195,202,221,222,223,226,227,229,236,238,257,258,259,260,262,263,269,274,275,276,292,293,298,303,305,317,321,322,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-180,-31,-34,-35,-33,-36,-37,-32,-121,-127,-63,236,-190,-181,-109,-116,-96,-85,269,-55,-62,-191,294,-48,-50,-52,296,-53,-82,-43,305,-64,-38,-39,-88,325,-65,-41,-51,-89,-83,]),'MODCREASE':([1,5,6,13,16,20,25,28,38,52,75,119,195,202,236,238,305,],[-56,50,-58,-57,-179,-59,-17,-60,-178,-61,-56,-180,-190,-181,-62,-191,-65,]),'DO':([0,7,9,12,31,34,37,41,43,56,62,70,74,116,125,132,133,137,139,161,191,200,207,230,234,241,242,243,271,282,311,],[7,7,-6,7,-2,-7,-5,-4,-8,7,-151,-3,-128,7,-152,7,7,-23,-18,-9,7,7,7,7,7,-200,-129,7,7,-203,-204,]),'TYPE':([0,9,12,31,34,37,41,43,70,74,137,139,161,200,241,242,243,282,311,],[8,-6,8,-2,-7,-5,-4,-8,-3,-128,-23,-18,-9,8,-200,-129,8,-203,-204,]),'SEMI':([4,6,13,16,17,18,20,21,23,25,26,28,33,38,39,42,52,58,59,61,65,66,67,68,71,72,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,94,95,96,98,99,100,102,104,105,107,108,110,112,113,117,119,122,123,124,127,129,130,131,138,140,142,144,145,146,148,150,151,152,153,154,155,156,157,158,162,173,188,195,198,199,202,203,208,210,211,213,217,218,219,220,221,222,223,226,232,236,238,240,244,247,251,252,269,273,280,283,284,285,290,292,293,294,298,305,307,315,316,319,320,322,325,330,333,334,],[-135,-58,-57,-179,-131,74,-59,-132,-186,-17,-138,-133,-137,-178,-134,-136,-61,132,-161,-157,-24,137,-19,139,161,-10,-56,-75,-69,-76,-124,-189,-95,-70,-108,-77,-115,-81,-79,-72,-80,-187,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-90,-130,-185,-188,-180,-139,-177,-159,-162,-165,-164,-166,-20,-40,-28,-31,-45,-34,-29,-35,-21,-33,-36,-46,-37,-30,-27,-32,-12,-121,-127,-190,241,242,-181,-163,-158,-26,-25,-22,-44,-14,-11,-13,-109,-116,-96,-85,-147,-62,-191,282,-201,-174,-175,-160,-82,-148,-205,311,-202,-176,-167,-38,-39,-47,-88,-65,-206,-168,-172,-54,-49,-89,-83,-173,-212,-213,]),'FALSE':([23,24,35,45,46,47,48,49,50,51,53,54,55,87,92,97,101,103,114,115,159,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[84,84,84,84,-144,-141,-145,-143,-146,84,-142,-140,84,84,-123,84,-122,84,84,84,84,84,-110,-112,-113,-114,-111,-119,84,-117,-118,84,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'RPAREN':([6,13,16,20,25,38,45,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,115,118,119,120,121,140,142,144,145,146,148,150,152,153,154,155,156,157,158,173,187,188,195,196,202,217,221,222,223,226,236,238,239,245,255,256,269,274,277,278,292,293,294,295,298,305,308,309,317,318,319,320,322,325,327,328,329,332,],[-58,-57,-179,-59,-17,-178,119,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,195,-184,-180,-182,202,-40,-28,-31,-45,-34,-29,-35,-33,-36,-46,-37,-30,-27,-32,-121,226,-127,-190,238,-181,-44,-109,-116,-96,-85,-62,-191,280,-183,292,293,-82,-43,307,-207,-38,-39,-47,119,-88,-65,-210,-209,-41,-184,-54,-49,-89,-83,-208,-211,333,334,]),'DIVIDE':([6,13,16,20,25,38,52,75,76,77,78,79,82,83,84,85,86,88,89,90,93,94,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-70,172,-77,-115,-81,-79,-72,-80,-74,-68,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,172,-116,-85,-62,-191,-56,-82,-65,-83,]),'TRUE':([23,24,35,45,46,47,48,49,50,51,53,54,55,87,92,97,101,103,114,115,159,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[102,102,102,102,-144,-141,-145,-143,-146,102,-142,-140,102,102,-123,102,-122,102,102,102,102,102,-110,-112,-113,-114,-111,-119,102,-117,-118,102,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'ABS':([0,7,9,12,23,24,31,34,35,37,41,43,45,46,47,48,49,50,51,53,54,55,56,62,70,74,87,92,97,101,103,106,114,115,116,125,132,133,137,139,159,161,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,241,242,243,265,267,270,271,282,287,289,291,295,297,301,311,312,],[14,14,-6,14,14,14,-2,-7,14,-5,-4,-8,14,-144,-141,-145,-143,-146,14,-142,-140,14,14,-151,-3,-128,14,-123,14,-122,14,14,14,14,14,-152,14,14,-23,-18,14,-9,14,-110,-112,-113,-114,-111,-119,14,-117,-118,14,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-200,-129,14,14,14,14,14,-203,14,14,14,14,14,14,-204,14,]),'SYN':([0,9,12,31,34,37,41,43,70,74,137,139,161,200,241,242,243,282,311,],[11,-6,11,-2,-7,-5,-4,-8,-3,-128,-23,-18,-9,11,-200,-129,11,-203,-204,]),'THEN':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,110,111,119,173,186,188,195,202,221,222,223,226,236,238,269,272,298,302,305,322,323,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-90,191,-180,-121,225,-127,-190,-181,-109,-116,-96,-85,-62,-191,-82,191,-88,225,-65,-89,225,-83,]),'TO':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,247,248,249,269,286,288,298,305,313,314,322,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-174,289,-170,-82,312,289,-88,-65,-171,-55,-89,-83,]),'SCONST':([23,24,35,45,46,47,48,49,50,51,53,54,55,87,92,97,101,103,114,115,159,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[86,86,86,86,-144,-141,-145,-143,-146,86,-142,-140,86,86,-123,86,-122,86,86,86,86,86,-110,-112,-113,-114,-111,-119,86,-117,-118,86,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'MOD':([6,13,16,20,25,38,52,75,76,77,78,79,82,83,84,85,86,88,89,90,93,94,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-70,169,-77,-115,-81,-79,-72,-80,-74,-68,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,169,-116,-85,-62,-191,-56,-82,-65,-83,]),'CHAR':([25,63,69,73,135,149,206,209,216,246,279,296,297,310,],[-17,-15,155,155,155,155,155,-16,155,155,155,155,155,155,]),'CCONST':([23,24,35,45,46,47,48,49,50,51,53,54,55,87,92,97,101,103,114,115,159,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[88,88,88,88,-144,-141,-145,-143,-146,88,-142,-140,88,88,-123,88,-122,88,88,88,88,88,-110,-112,-113,-114,-111,-119,88,-117,-118,88,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'DCL':([0,9,12,31,34,37,41,43,70,74,137,139,161,200,241,242,243,282,311,],[15,-6,15,-2,-7,-5,-4,-8,-3,-128,-23,-18,-9,15,-200,-129,15,-203,-204,]),'DECREASE':([1,5,6,13,16,20,25,28,38,52,75,119,195,202,236,238,305,],[-56,49,-58,-57,-179,-59,-17,-60,-178,-61,-56,-180,-190,-181,-62,-191,-65,]),'WHILE':([6,7,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,119,127,129,130,131,144,146,150,152,153,155,158,173,188,195,202,221,222,223,226,236,238,247,251,269,285,290,292,293,298,305,315,316,322,325,330,],[-58,55,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-180,55,-165,-164,-166,-31,-34,-35,-33,-36,-37,-32,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-174,-175,-82,-176,-167,-38,-39,-88,-65,-168,-172,-89,-83,-173,]),'LESSEQ':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,183,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-56,-82,-65,-83,]),'DIVCREASE':([1,5,6,13,16,20,25,28,38,52,75,119,195,202,236,238,305,],[-56,48,-58,-57,-179,-59,-17,-60,-178,-61,-56,-180,-190,-181,-62,-191,-65,]),'ASSIGN':([1,5,6,13,16,20,25,28,38,52,63,64,69,75,119,126,128,140,141,142,144,145,146,148,150,152,153,154,155,156,157,158,162,195,202,209,217,236,238,292,293,294,305,319,320,],[-56,54,-58,-57,-179,-59,-17,-60,-178,-61,-15,135,159,-56,-180,-169,205,-40,159,-28,-31,-45,-34,-29,-35,-33,-36,-46,-37,-30,-27,-32,159,-190,-181,-16,-44,-62,-191,-38,-39,-47,-65,-54,-49,]),'GREATEREQ':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,175,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-56,-82,-65,-83,]),'COMMA':([6,13,16,20,25,38,52,63,64,65,66,69,71,72,73,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,118,119,120,121,140,142,144,145,146,148,150,152,153,154,155,156,157,158,162,173,188,193,194,195,196,202,209,210,211,217,218,219,220,221,222,223,226,236,238,245,259,260,262,263,269,274,276,277,278,279,292,293,294,298,305,308,309,317,318,319,320,321,322,325,327,328,],[-58,-57,-179,-59,-17,-178,-61,-15,134,-24,136,134,160,-10,134,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-184,-180,-182,201,-40,-28,-31,-45,-34,-29,-35,-33,-36,-46,-37,-30,-27,-32,-12,-121,-127,-63,237,-190,201,-181,-16,-26,-25,-44,-14,-11,-13,-109,-116,-96,-85,-62,-191,-183,-50,-52,297,-53,-82,-43,-64,306,-207,134,-38,-39,-47,-88,-65,-210,-209,-41,-184,-54,-49,-51,-89,-83,-208,-211,]),'LOWER':([0,7,9,12,23,24,31,34,35,37,41,43,45,46,47,48,49,50,51,53,54,55,56,62,70,74,87,92,97,101,103,106,114,115,116,125,132,133,137,139,159,161,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,241,242,243,265,267,270,271,282,287,289,291,295,297,301,311,312,],[19,19,-6,19,19,19,-2,-7,19,-5,-4,-8,19,-144,-141,-145,-143,-146,19,-142,-140,19,19,-151,-3,-128,19,-123,19,-122,19,19,19,19,19,-152,19,19,-23,-18,19,-9,19,-110,-112,-113,-114,-111,-119,19,-117,-118,19,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-200,-129,19,19,19,19,19,-203,19,19,19,19,19,19,-204,19,]),'NULL':([23,24,35,45,46,47,48,49,50,51,53,54,55,87,92,97,101,103,114,115,159,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[90,90,90,90,-144,-141,-145,-143,-146,90,-142,-140,90,90,-123,90,-122,90,90,90,90,90,-110,-112,-113,-114,-111,-119,90,-117,-118,90,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'ARRAY':([25,63,69,73,135,149,209,279,296,310,],[-17,-15,147,147,147,147,-16,147,147,147,]),'LESS':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,180,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-56,-82,-65,-83,]),'$end':([9,10,12,31,34,37,41,43,70,74,137,139,161,241,242,],[-6,0,-1,-2,-7,-5,-4,-8,-3,-128,-23,-18,-9,-200,-129,]),'NUM':([0,7,9,12,23,24,31,34,35,37,41,43,45,46,47,48,49,50,51,53,54,55,56,62,70,74,87,92,97,101,103,106,114,115,116,125,132,133,137,139,159,161,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,241,242,243,265,267,270,271,282,287,289,291,295,297,301,311,312,],[22,22,-6,22,22,22,-2,-7,22,-5,-4,-8,22,-144,-141,-145,-143,-146,22,-142,-140,22,22,-151,-3,-128,22,-123,22,-122,22,22,22,22,22,-152,22,22,-23,-18,22,-9,22,-110,-112,-113,-114,-111,-119,22,-117,-118,22,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-200,-129,22,22,22,22,22,-203,22,22,22,22,22,22,-204,22,]),'INCREASE':([1,5,6,13,16,20,25,28,38,52,75,119,195,202,236,238,305,],[-56,53,-58,-57,-179,-59,-17,-60,-178,-61,-56,-180,-190,-181,-62,-191,-65,]),'RETURN':([0,7,9,12,31,34,37,41,43,56,62,70,74,116,125,132,133,137,139,161,191,200,207,230,234,241,242,243,271,282,311,],[23,23,-6,23,-2,-7,-5,-4,-8,23,-151,-3,-128,23,-152,23,23,-23,-18,-9,23,23,23,23,23,-200,-129,23,23,-203,-204,]),'ICONST':([23,24,35,45,46,47,48,49,50,51,53,54,55,87,92,97,101,103,114,115,159,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,201,205,212,214,215,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[78,78,78,78,-144,-141,-145,-143,-146,78,-142,-140,78,78,-123,78,-122,78,78,78,78,78,-110,-112,-113,-114,-111,-119,78,-117,-118,78,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,78,78,78,78,78,258,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'IF':([0,7,9,12,23,24,31,34,35,37,41,43,45,46,47,48,49,50,51,53,54,55,56,62,70,74,97,103,114,115,116,125,132,133,137,139,159,161,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,241,242,243,265,267,270,271,282,287,289,291,295,297,301,311,312,],[24,24,-6,24,97,97,-2,-7,97,-5,-4,-8,97,-144,-141,-145,-143,-146,97,-142,-140,97,24,-151,-3,-128,97,97,97,97,24,-152,24,24,-23,-18,97,-9,97,24,24,97,97,24,97,97,97,97,24,97,24,97,97,-200,-129,24,97,97,97,24,-203,97,97,97,97,97,97,-204,97,]),'ID':([0,6,7,8,9,11,12,13,15,16,20,23,24,25,27,31,34,35,37,38,41,43,45,46,47,48,49,50,51,52,53,54,55,56,57,62,63,67,68,69,70,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,119,125,132,133,134,135,136,137,138,139,149,151,159,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,188,189,191,195,200,201,202,205,206,207,209,212,213,214,216,218,221,222,223,225,226,230,231,234,235,236,237,238,239,241,242,243,246,265,267,269,270,271,279,282,287,289,291,295,296,297,298,301,305,306,310,311,312,322,325,],[25,-58,25,25,-6,25,25,-57,25,-179,-59,25,25,-17,25,-2,-7,25,-5,-178,-4,-8,25,-144,-141,-145,-143,-146,25,-61,-142,-140,25,25,25,-151,-15,-19,25,25,-3,25,-128,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,25,-79,-72,-80,-123,-74,-68,-86,-87,25,-125,-60,-73,-122,-78,25,-120,-126,25,-71,-67,25,25,25,-180,-152,25,25,25,25,25,-23,-20,-18,25,-21,25,25,-9,25,-110,-112,-113,-114,-111,-119,25,-117,-118,-121,25,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,-127,25,25,-190,25,25,-181,25,25,25,-16,25,-22,25,25,-14,-109,-116,-96,25,-85,25,25,25,25,-62,25,-191,25,-200,-129,25,25,25,25,-82,25,25,25,-203,25,25,25,25,25,25,-88,25,-65,25,25,-204,25,-89,-83,]),'DOWN':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,119,126,128,173,188,195,202,221,222,223,226,236,238,247,248,249,269,288,298,305,313,314,322,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-180,-169,204,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-174,286,-170,-82,286,-88,-65,-171,-55,-89,-83,]),'INT':([25,63,69,73,135,149,206,209,216,246,279,296,297,310,],[-17,-15,150,150,150,150,150,-16,150,150,150,150,150,150,]),'MINUS':([6,13,16,20,23,24,25,35,38,45,46,47,48,49,50,51,52,53,54,55,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,97,98,99,100,102,103,104,105,107,108,114,115,119,159,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,188,189,195,201,202,205,212,214,216,221,222,223,225,226,231,235,236,237,238,261,265,267,269,270,287,289,291,295,297,301,305,312,325,],[-58,-57,-179,-59,101,101,-17,101,-178,101,-144,-141,-145,-143,-146,101,-61,-142,-140,101,-56,-75,-69,-76,-124,166,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,101,-125,-60,-73,-78,101,-120,-126,-71,-67,101,101,-180,101,101,-110,-112,-113,-114,-111,-119,101,-117,-118,-121,101,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,-127,101,-190,101,-181,101,101,101,101,-109,-116,166,101,-85,101,101,-62,101,-191,-56,101,101,-82,101,101,101,101,101,101,101,-65,101,-83,]),'NOT':([23,24,35,45,46,47,48,49,50,51,53,54,55,97,103,114,115,159,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[92,92,92,92,-144,-141,-145,-143,-146,92,-142,-140,92,92,92,92,92,92,92,-110,-112,-113,-114,-111,-119,92,-117,-118,92,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'IN':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,98,99,100,102,104,105,107,108,119,126,128,173,188,195,202,204,221,222,223,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,185,-125,-60,-73,-78,-120,-126,-71,-67,-180,-169,206,-121,-127,-190,-181,246,-109,-116,-96,-85,-62,-191,-56,-82,-65,-83,]),'END':([9,31,34,37,41,43,70,74,137,139,161,200,241,242,243,282,311,],[-6,-2,-7,-5,-4,-8,-3,-128,-23,-18,-9,244,-200,-129,284,-203,-204,]),'PLUS':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,165,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,165,-85,-62,-191,-56,-82,-65,-83,]),'OR':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,176,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-56,-82,-65,-83,]),'EQUAL':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,177,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-56,-82,-65,-83,]),'REF':([25,63,69,73,135,149,209,279,296,310,],[-17,-15,149,149,149,149,-16,149,149,149,]),'LBRACKET':([1,5,6,13,16,20,25,28,29,38,52,75,76,77,78,79,82,84,86,88,89,90,93,94,99,100,102,105,107,108,109,119,143,147,188,195,202,226,236,238,261,269,305,325,],[-56,-66,-58,-57,-179,-59,-17,-60,114,-178,-61,-56,-75,-69,-76,-66,-70,-77,-81,-79,-72,-80,-74,-68,-60,-73,-78,-84,-71,-67,189,-180,215,216,-66,-190,-181,-85,-62,-191,-56,-82,-65,-83,]),'BY':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,247,248,249,269,298,305,322,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-174,287,-170,-82,-88,-65,-89,-83,]),'GREATER':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,182,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-56,-82,-65,-83,]),'STRCAT':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,167,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,167,-85,-62,-191,-56,-82,-65,-83,]),'RESULT':([0,7,9,12,31,34,37,41,43,56,62,70,74,116,125,132,133,137,139,161,191,200,207,230,234,241,242,243,271,282,311,],[35,35,-6,35,-2,-7,-5,-4,-8,35,-151,-3,-128,35,-152,35,35,-23,-18,-9,35,35,35,35,35,-200,-129,35,35,-203,-204,]),'ASC':([0,7,9,12,23,24,31,34,35,37,41,43,45,46,47,48,49,50,51,53,54,55,56,62,70,74,87,92,97,101,103,106,114,115,116,125,132,133,137,139,159,161,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,241,242,243,265,267,270,271,282,287,289,291,295,297,301,311,312,],[36,36,-6,36,36,36,-2,-7,36,-5,-4,-8,36,-144,-141,-145,-143,-146,36,-142,-140,36,36,-151,-3,-128,36,-123,36,-122,36,36,36,36,36,-152,36,36,-23,-18,36,-9,36,-110,-112,-113,-114,-111,-119,36,-117,-118,36,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-200,-129,36,36,36,36,36,-203,36,36,36,36,36,36,-204,36,]),'ARROW':([1,5,6,13,16,20,23,24,25,28,35,38,45,46,47,48,49,50,51,52,53,54,55,75,79,87,92,97,99,101,103,114,115,119,159,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,188,189,195,201,202,205,212,214,216,225,231,235,236,237,238,261,265,267,270,287,289,291,295,297,301,305,312,],[-56,52,-58,-57,-179,-59,106,106,-17,-60,106,-178,106,-144,-141,-145,-143,-146,106,-61,-142,-140,106,-56,52,106,-123,106,-60,-122,106,106,106,-180,106,106,-110,-112,-113,-114,-111,-119,106,-117,-118,106,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,52,106,-190,106,-181,106,106,106,106,106,106,106,-62,106,-191,-56,106,106,106,106,106,106,106,106,106,-65,106,]),'OD':([7,56,62,74,125,132,207,242,],[61,124,-151,-128,-152,208,252,-129,]),'DIFF':([6,13,16,20,25,38,52,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,98,99,100,102,104,105,107,108,119,173,188,195,202,221,222,223,226,236,238,261,269,305,325,],[-58,-57,-179,-59,-17,-178,-61,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,181,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,-190,-181,-109,-116,-96,-85,-62,-191,-56,-82,-65,-83,]),'LENGTH':([0,7,9,12,23,24,31,34,35,37,41,43,45,46,47,48,49,50,51,53,54,55,56,62,70,74,87,92,97,101,103,106,114,115,116,125,132,133,137,139,159,161,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,241,242,243,265,267,270,271,282,287,289,291,295,297,301,311,312,],[40,40,-6,40,40,40,-2,-7,40,-5,-4,-8,40,-144,-141,-145,-143,-146,40,-142,-140,40,40,-151,-3,-128,40,-123,40,-122,40,40,40,40,40,-152,40,40,-23,-18,40,-9,40,-110,-112,-113,-114,-111,-119,40,-117,-118,40,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-200,-129,40,40,40,40,40,-203,40,40,40,40,40,40,-204,40,]),'FI':([6,13,16,20,25,38,52,62,74,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,119,125,173,188,190,191,195,202,221,222,223,226,230,233,234,236,238,242,264,269,271,298,299,300,304,305,322,325,326,],[-58,-57,-179,-59,-17,-178,-61,-151,-128,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-180,-152,-121,-127,232,-149,-190,-181,-109,-116,-96,-85,-153,273,-150,-62,-191,-129,298,-82,-154,-88,-92,322,-155,-65,-89,-83,-156,]),'LOC':([25,140,142,144,145,146,148,150,152,153,154,155,156,157,158,217,292,293,294,308,319,320,329,],[-17,-40,-28,-31,-45,-34,-29,-35,-33,-36,-46,-37,-30,-27,-32,-44,-38,-39,-47,328,-54,-49,332,]),'COLON':([1,6,13,16,20,25,32,38,52,60,75,76,77,78,79,81,82,83,84,85,86,88,89,90,93,94,95,96,98,99,100,102,104,105,107,108,119,173,188,192,193,195,202,221,222,223,226,228,229,236,238,253,254,261,269,298,305,318,322,325,],[-130,-58,-57,-179,-59,-17,116,-178,-61,133,-56,-75,-69,-76,-124,-95,-70,-108,-77,-115,-81,-79,-72,-80,-74,-68,-86,-87,-125,-60,-73,-78,-120,-126,-71,-67,-180,-121,-127,235,-42,-190,-181,-109,-116,-96,-85,270,-42,-62,-191,291,-42,-56,-82,-88,-65,-42,-89,-83,]),'CHARS':([25,63,69,73,135,149,209,279,296,310,],[-17,-15,143,143,143,143,-16,143,143,143,]),'FOR':([7,],[57,]),'UPPER':([0,7,9,12,23,24,31,34,35,37,41,43,45,46,47,48,49,50,51,53,54,55,56,62,70,74,87,92,97,101,103,106,114,115,116,125,132,133,137,139,159,161,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,179,180,181,182,183,184,185,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,241,242,243,265,267,270,271,282,287,289,291,295,297,301,311,312,],[44,44,-6,44,44,44,-2,-7,44,-5,-4,-8,44,-144,-141,-145,-143,-146,44,-142,-140,44,44,-151,-3,-128,44,-123,44,-122,44,44,44,44,44,-152,44,44,-23,-18,44,-9,44,-110,-112,-113,-114,-111,-119,44,-117,-118,44,-104,-100,-101,-97,-99,-105,-102,-103,-106,-98,-107,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-200,-129,44,44,44,44,44,-203,44,44,44,44,44,44,-204,44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'elsif_expression':([224,],[266,]),'index_mode_list':([216,],[262,]),'discrete_mode':([69,73,135,149,206,216,246,279,296,297,310,],[142,142,142,142,251,260,285,142,142,260,142,]),'location':([0,7,12,23,24,35,45,51,55,56,87,97,103,106,114,115,116,132,133,159,163,170,174,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,243,265,267,270,271,287,289,291,295,297,301,312,],[5,5,5,79,79,79,79,79,79,5,79,79,79,188,79,79,5,5,5,79,79,79,79,79,5,5,79,79,5,79,79,79,79,5,79,5,79,79,5,79,79,79,5,79,79,79,79,79,79,79,]),'array_element':([0,7,12,23,24,35,45,51,55,56,87,97,103,106,114,115,116,132,133,159,163,170,174,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,243,265,267,270,271,287,289,291,295,297,301,312,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'expression':([23,24,35,45,51,55,97,103,114,115,159,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[80,110,80,118,122,110,110,187,193,118,218,229,118,247,254,254,254,268,110,274,276,299,110,274,314,247,274,318,254,110,247,]),'discrete_range_mode':([69,73,135,149,206,216,246,279,296,297,310,],[146,146,146,146,146,146,146,146,146,146,146,]),'array_location':([0,7,12,23,24,35,45,51,55,56,87,97,103,106,114,115,116,132,133,159,163,170,174,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,243,265,267,270,271,287,289,291,295,297,301,312,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'expression_list':([114,],[194,]),'end_value':([248,288,],[290,315,]),'result_spec':([240,],[283,]),'operator2':([81,223,],[163,163,]),'operand2':([23,24,35,45,51,55,97,103,114,115,159,163,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[83,83,83,83,83,83,83,83,83,83,83,221,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'parameter_spec':([279,],[309,]),'formal_parameter_list':([239,],[277,]),'operand3':([23,24,35,45,51,55,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[85,85,85,85,85,85,85,85,85,85,85,85,222,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'mode_definition':([8,136,],[65,211,]),'iteration':([57,],[130,]),'empty_literal':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'boolean_expression':([24,55,97,231,267,301,],[111,123,186,272,302,323,]),'action_statement_list':([7,132,191,230,],[56,207,234,271,]),'return_action':([0,7,12,56,116,132,133,191,200,207,230,234,243,271,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'value_array_element':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'declaration':([15,160,],[72,219,]),'relational_operator':([95,],[178,]),'assignment_action':([0,7,12,56,116,132,133,191,200,207,230,234,243,271,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'for_control':([57,],[127,]),'literal_range':([212,214,216,295,297,],[255,256,263,255,263,]),'assigning_operator':([5,],[51,]),'declaration_list':([15,],[71,]),'referenced_location':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'call_action':([0,7,12,23,24,35,45,51,55,56,87,97,103,106,114,115,116,132,133,159,163,170,174,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,243,265,267,270,271,287,289,291,295,297,301,312,],[28,28,28,99,99,99,99,99,99,28,99,99,99,99,99,99,28,28,28,99,99,99,99,99,28,28,99,99,28,99,99,99,99,28,99,28,99,99,28,99,99,99,28,99,99,99,99,99,99,99,]),'control_part':([7,],[58,]),'parenthesized_expression':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'boolean_mode':([69,73,135,149,206,216,246,279,296,297,310,],[158,158,158,158,158,158,158,158,158,158,158,]),'closed_dyadic_operator':([5,],[47,]),'builtin_name':([0,7,12,23,24,35,45,51,55,56,87,97,103,106,114,115,116,132,133,159,163,170,174,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,243,265,267,270,271,287,289,291,295,297,301,312,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'synonym_definition':([11,68,],[67,138,]),'statement':([0,12,200,243,],[31,70,31,70,]),'membership_operator':([95,],[184,]),'arithmetic_additive_operator':([81,223,],[164,164,]),'label_id':([0,7,12,27,56,132,191,200,207,230,234,243,271,],[32,60,32,113,60,60,60,32,60,60,60,32,60,]),'procedure_statement':([0,12,200,243,],[34,34,34,34,]),'formal_parameter':([239,306,],[278,327,]),'primitive_value':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'string_concatenation_operator':([81,223,],[168,168,]),'synonym_statement':([0,12,200,243,],[37,37,37,37,]),'array_mode':([69,73,135,149,279,296,310,],[154,154,154,154,154,154,154,]),'if_action':([0,7,12,56,116,132,133,191,200,207,230,234,243,271,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'synonym_list':([11,],[68,]),'then_expression':([186,302,323,],[224,324,331,]),'composite_mode':([69,73,135,149,279,296,310,],[156,156,156,156,156,156,156,]),'action_statement':([0,7,12,56,132,191,200,207,230,234,243,271,],[43,62,43,125,62,62,43,125,62,125,43,125,]),'operand4':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[104,104,104,104,104,104,173,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'formal_procedure_head':([116,],[200,]),'identifier':([0,7,8,11,12,15,23,24,27,35,45,51,55,56,57,68,69,73,87,97,103,106,114,115,116,132,133,134,135,136,149,159,160,163,170,174,189,191,200,201,205,206,207,212,214,216,225,230,231,234,235,237,239,243,246,265,267,270,271,279,287,289,291,295,296,297,301,306,310,312,],[1,1,63,63,1,63,75,75,112,75,75,75,75,1,126,63,140,140,75,75,75,75,75,75,75,1,75,209,140,63,140,75,63,75,75,75,75,1,1,75,75,250,1,75,75,261,75,1,75,1,75,75,63,1,250,75,75,75,1,140,75,75,75,75,140,261,75,63,140,75,]),'operator1':([95,],[174,]),'integer_expression':([189,287,],[227,313,]),'index_mode':([216,297,],[259,321,]),'mode':([69,73,135,149,279,296,310,],[141,162,210,217,308,319,329,]),'lower_bound':([114,189,212,214,216,295,297,],[192,228,253,253,253,253,253,]),'element_mode':([296,],[320,]),'value_array_slice':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'string_mode':([69,73,135,149,279,296,310,],[145,145,145,145,145,145,145,]),'procedure_call':([0,7,12,23,24,35,45,51,55,56,87,97,103,106,114,115,116,132,133,159,163,170,174,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,243,265,267,270,271,287,289,291,295,297,301,312,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'operand1':([23,24,35,45,51,55,97,103,114,115,159,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[81,81,81,81,81,81,81,81,81,81,81,223,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'procedure_definition':([116,],[198,]),'range_enumeration':([57,],[131,]),'newmode_statement':([0,12,200,243,],[9,9,9,9,]),'identifier_list':([8,11,15,68,136,160,239,306,],[64,69,73,69,64,73,279,279,]),'array_slice':([0,7,12,23,24,35,45,51,55,56,87,97,103,106,114,115,116,132,133,159,163,170,174,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,243,265,267,270,271,287,289,291,295,297,301,312,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'while_control':([7,127,],[59,203,]),'program':([0,],[10,]),'step_value':([248,],[288,]),'statement_list':([0,200,],[12,243,]),'monadic_operator':([23,24,35,45,51,55,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'character_string_literal':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'dereferenced_reference':([0,7,12,23,24,35,45,51,55,56,87,97,103,106,114,115,116,132,133,159,163,170,174,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,243,265,267,270,271,287,289,291,295,297,301,312,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'boolean_literal':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'result':([23,35,],[91,117,]),'builtin_call':([0,7,12,23,24,35,45,51,55,56,87,97,103,106,114,115,116,132,133,159,163,170,174,189,191,200,201,205,207,212,214,216,225,230,231,234,235,237,243,265,267,270,271,287,289,291,295,297,301,312,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'bracketed_action':([0,7,12,56,116,132,133,191,200,207,230,234,243,271,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'declaration_statement':([0,12,200,243,],[41,41,41,41,]),'parenthesis_gambiarra':([197,],[240,]),'action':([0,7,12,56,116,132,133,191,200,207,230,234,243,271,],[18,18,18,18,199,18,199,18,18,18,18,18,18,18,]),'else_expression':([224,266,],[264,300,]),'operand0':([23,24,35,45,51,55,97,103,114,115,159,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'then_clause':([111,272,],[190,304,]),'integer_mode':([69,73,135,149,206,216,246,279,296,297,310,],[144,144,144,144,144,144,144,144,144,144,144,]),'conditional_expression':([23,24,35,45,51,55,97,103,114,115,159,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'parameter':([45,115,201,295,],[120,120,245,120,]),'character_literal':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'else_clause':([190,304,],[233,326,]),'arithmetic_multiplicative_operator':([83,221,],[170,170,]),'newmode_list':([8,],[66,]),'reference_mode':([69,73,135,149,279,296,310,],[148,148,148,148,148,148,148,]),'start_value':([205,],[248,]),'exit_action':([0,7,12,56,116,132,133,191,200,207,230,234,243,271,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'string_length':([215,],[257,]),'initialization':([69,141,162,],[151,213,220,]),'character_mode':([69,73,135,149,206,216,246,279,296,297,310,],[152,152,152,152,152,152,152,152,152,152,152,]),'literal':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'step_enumeration':([57,],[129,]),'discrete_expression':([205,289,312,],[249,316,330,]),'parameter_list':([45,115,295,],[121,196,121,]),'result_action':([0,7,12,56,116,132,133,191,200,207,230,234,243,271,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'integer_literal':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'do_action':([0,7,12,56,116,132,133,191,200,207,230,234,243,271,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'loop_counter':([57,],[128,]),'upper_bound':([235,270,291,],[275,303,317,]),'mode_name':([69,73,135,149,279,296,310,],[157,157,157,157,157,157,157,]),'array_primitive_value':([23,24,35,45,51,55,87,97,103,114,115,159,163,170,174,189,201,205,212,214,216,225,231,235,237,265,267,270,287,289,291,295,297,301,312,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list initialization','synonym_definition',2,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode initialization','synonym_definition',3,'p_synonym_definition','parser.py',107),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('string_length -> ICONST','string_length',1,'p_string_length','parser.py',223),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',392),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',398),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',404),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',410),
  ('expression -> operand0','expression',1,'p_expression','parser.py',417),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',418),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',423),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',424),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',433),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',439),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',445),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',451),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',452),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',461),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',462),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',469),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',470),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',475),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',482),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',487),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',492),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',493),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',501),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',502),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',507),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',514),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',518),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',519),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',526),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',533),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',534),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',542),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',548),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',550),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',555),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',560),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',561),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',570),
  ('action -> bracketed_action','action',1,'p_action','parser.py',576),
  ('action -> assignment_action','action',1,'p_action','parser.py',577),
  ('action -> call_action','action',1,'p_action','parser.py',578),
  ('action -> exit_action','action',1,'p_action','parser.py',579),
  ('action -> return_action','action',1,'p_action','parser.py',580),
  ('action -> result_action','action',1,'p_action','parser.py',581),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',586),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',592),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',611),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',617),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',626),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',627),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',636),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',637),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',646),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',647),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',654),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',655),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',657),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',672),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',673),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',674),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',675),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',689),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',691),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',700),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',705),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',711),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',712),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',719),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',724),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',729),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',734),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',735),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',743),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',748),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',749),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',756),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',760),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',761),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',766),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',767),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',774),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',775),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',782),
  ('exit_action -> EXIT label_id','exit_action',2,'p_exit_action','parser.py',790),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',794),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',795),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',802),
  ('result -> expression','result',1,'p_result','parser.py',806),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',811),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',812),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',819),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',820),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',821),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',822),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',823),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',826),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',830),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',834),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',835),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',842),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',843),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',851),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',852),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',859),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',860),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',867),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',871),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',872),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',884),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',885),
]
