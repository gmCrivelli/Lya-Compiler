
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programID PLUS MINUS TIMES DIVIDE ASSIGN COMMA COLON SEMI ARROW LPAREN RPAREN LBRACKET RBRACKET LESS LESSEQ GREATER GREATEREQ EQUAL AND OR STRCAT INCREASE DECREASE MULCREASE DIVCREASE MODCREASE DIFF MOD NOT ICONST CCONST SCONST LOC TYPE PROC IN ABS SYN ELSIF BY RETURNS DCL EXIT TO NULL IF RETURN LOWER ASC FALSE DO LENGTH READ ARRAY RESULT DOWN BOOL INT WHILE FOR CHAR CHARS REF UPPER TRUE OD END NUM THEN FI ELSE PRINTprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration_statement\n                     | synonym_statement\n                     | newmode_statement\n                     | procedure_statement\n                     | action_statementdeclaration_statement : DCL declaration_list SEMIdeclaration_list : declaration\n                            | declaration_list COMMA declarationdeclaration : identifier_list mode\n                       | identifier_list mode initializationinitialization : ASSIGN expressionidentifier_list : identifier\n                           | identifier_list COMMA identifieridentifier : IDsynonym_statement : SYN synonym_list SEMIsynonym_list : synonym_definition\n                        | synonym_list synonym_definitionsynonym_definition : identifier_list ASSIGN constant_expression\n                              | identifier_list mode ASSIGN constant_expressionconstant_expression : expressionnewmode_statement : TYPE newmode_list SEMInewmode_list : mode_definition\n                        | newmode_list COMMA mode_definitionmode_definition : identifier_list ASSIGN modemode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modediscrete_mode : integer_mode\n                | boolean_mode\n                | character_mode\n                | discrete_range_modeinteger_mode : INTboolean_mode : BOOLcharacter_mode : CHARdiscrete_range_mode : identifier LPAREN literal_range RPAREN\n                               | discrete_mode LPAREN literal_range RPAREN mode_name : identifierliteral_range : lower_bound COLON upper_boundlower_bound : expressionupper_bound : expressionreference_mode : REF modecomposite_mode : string_mode\n                          | array_modestring_mode : CHARS LBRACKET string_length RBRACKETstring_length : ICONSTarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeindex_mode_list : index_mode\n                           | index_mode_list COMMA index_modeindex_mode : discrete_mode\n                      | literal_rangeelement_mode : modeinteger_expression : expressionlocation : identifier\n                    | dereferenced_reference\n                    | array_element\n                    | array_slice\n                    | call_action dereferenced_reference : location ARROWarray_element : array_location LBRACKET expression_list RBRACKETexpression_list : expression\n                           | expression_list COMMA expressionarray_slice : array_location LBRACKET lower_bound COLON upper_bound RBRACKETarray_location : locationprimitive_value : literal\n                           | value_array_element\n                           | value_array_slice\n                           | parenthesized_expression literal : integer_literal\n                   | boolean_literal\n                   | character_literal\n                   | empty_literal\n                   | character_string_literal integer_literal : ICONSTboolean_literal : FALSE\n                           | TRUEcharacter_literal : CCONST empty_literal : NULLcharacter_string_literal : SCONSTvalue_array_element : array_primitive_value LBRACKET integer_expression RBRACKETvalue_array_slice : array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPAREN expression RPARENexpression : operand0\n                      | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                  | IF boolean_expression then_expression elsif_expression else_expression FI boolean_expression : expressionthen_expression : THEN expressionelse_expression : ELSE expressionelsif_expression : ELSIF boolean_expression then_expression\n                            | elsif_expression ELSIF boolean_expression then_expression operand0 :  operand1\n            | operand0 operator1 operand1operator1 :  relational_operator\n            | membership_operatorrelational_operator :  AND\n            | OR\n            | EQUAL\n            | DIFF\n            | GREATER\n            | GREATEREQ\n            | LESS\n            | LESSEQmembership_operator :  INoperand1 :  operand2\n            | operand1 operator2 operand2operator2 :  arithmetic_additive_operator\n                     | string_concatenation_operatorarithmetic_additive_operator :  PLUS\n            | MINUSstring_concatenation_operator :  STRCAToperand2 :  operand3\n            | operand2 arithmetic_multiplicative_operator operand3arithmetic_multiplicative_operator :  TIMES\n            | DIVIDE\n            | MODoperand3 : operand4\n            | monadic_operator operand4monadic_operator :  MINUS\n            | NOToperand4 :  location\n            | referenced_location\n            | primitive_valuereferenced_location :  ARROW locationaction_statement :  action SEMI\n            | label_id COLON action SEMIlabel_id :  identifieraction :  bracketed_action\n            | assignment_action\n            | call_action\n            | exit_action\n            | return_action\n            | result_actionbracketed_action :  if_action\n            | do_actionassignment_action :  location assigning_operator expressionassigning_operator : ASSIGN\n                              | closed_dyadic_operatorclosed_dyadic_operator : INCREASE\n                                  | DECREASE\n                                  | MULCREASE\n                                  | DIVCREASE\n                                  | MODCREASEif_action :  IF boolean_expression then_clause FI\n                     | IF boolean_expression then_clause else_clause FIthen_clause :  THEN\n                       |  THEN action_statement_listaction_statement_list : action_statement\n                                 | action_statement_list action_statementelse_clause :  ELSE\n                        | ELSE action_statement_list\n                        | ELSIF boolean_expression then_clause\n                        | ELSIF boolean_expression then_clause else_clause do_action :  DO OD\n                     |  DO control_part SEMI OD\n                     |  DO action_statement_list OD\n                     |  DO control_part SEMI action_statement_list ODcontrol_part : while_control\n                        | FOR for_control\n                        | FOR for_control while_controlfor_control : iterationiteration : step_enumeration\n                     | range_enumerationstep_enumeration : loop_counter ASSIGN start_value end_value\n                            | loop_counter ASSIGN start_value step_value end_valueloop_counter :  identifierstart_value :  discrete_expressionstep_value :  BY integer_expressionend_value : TO discrete_expression\n                     | DOWN TO discrete_expressiondiscrete_expression : expressionrange_enumeration : loop_counter IN discrete_mode\n                             | loop_counter DOWN IN discrete_modewhile_control :  WHILE boolean_expressioncall_action :  procedure_call\n                        | builtin_callprocedure_call : identifier LPAREN RPAREN\n                          | identifier LPAREN parameter_list RPARENparameter_list :  parameter\n                          |  parameter_list COMMA parameterparameter :  expressionexit_action :  EXIT exit_label_idexit_label_id :  identifierreturn_action :  RETURN\n                         |  RETURN resultresult_action :  RESULT resultresult :  expressionbuiltin_call : builtin_name LPAREN RPAREN\n                        | builtin_name LPAREN parameter_list RPARENbuiltin_name : ABS\n                        | ASC\n                        | NUM\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINTprocedure_statement :  label_id COLON procedure_definition SEMIprocedure_definition :  formal_procedure_head END\n                                |  formal_procedure_head statement_list ENDformal_procedure_head : PROC parenthesis_gambiarra SEMI\n                                 | PROC parenthesis_gambiarra result_spec SEMIparenthesis_gambiarra : LPAREN RPAREN\n                                 | LPAREN formal_parameter_list RPARENformal_parameter_list :  formal_parameter\n                                 |  formal_parameter_list COMMA formal_parameterformal_parameter :  identifier_list parameter_specparameter_spec :  mode\n                          |  mode LOCresult_spec  :  RETURNS LPAREN mode RPAREN\n                        |  RETURNS LPAREN mode LOC RPAREN'
    
_lr_action_items = {end':([5,10,21,25,29,32,36,42,104,105,118,123,182,211,216,],[-2,-8,-6,-5,0,-1,-4,-7,-3,-129,-24,-18,-9,-202,-130,]),'SCONST':([26,40,41,54,55,56,57,58,59,60,61,62,65,68,69,95,99,100,109,114,126,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[88,88,88,-145,-142,-147,-143,-141,-144,88,-146,88,-123,88,88,88,-124,88,88,88,88,88,88,-113,-114,-112,-115,-111,-99,-102,-104,-101,88,-100,-106,-108,-107,-105,-98,-103,-118,-119,-120,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'COMMA':([9,18,22,24,30,34,45,46,47,48,51,53,66,67,70,71,72,73,74,76,77,78,79,80,81,83,84,85,87,88,89,90,91,92,94,96,97,98,101,102,103,124,125,127,128,129,130,131,132,133,136,137,138,141,142,149,150,151,160,178,179,180,181,184,196,197,200,201,202,207,218,220,224,225,226,230,231,233,240,251,253,254,255,259,260,262,266,268,270,276,277,289,290,294,295,296,301,304,315,316,317,318,319,320,321,323,324,],[-59,-60,-17,-180,-58,-179,-15,119,121,-25,121,-62,-75,-73,-76,-78,-57,-79,-126,-69,-68,-72,-96,-71,-121,-80,-125,-70,-127,-82,-87,-109,-77,-116,-74,-88,-81,-61,183,-10,121,-33,-32,-30,-28,-47,-37,-31,-35,-29,-46,-41,-36,-38,-34,219,-64,-122,-128,229,-183,-181,-185,-12,229,-192,-26,-27,-16,-45,-63,-86,-110,-97,-117,-182,-11,-13,-193,-54,293,-51,-53,121,297,-209,-44,-65,-83,-184,-14,-40,-39,-48,-211,-212,-66,-89,-42,-185,-50,-55,-52,-213,-210,-84,-90,]),'END':([5,10,21,25,36,42,104,105,118,123,144,182,211,212,216,263,299,],[-2,-8,-6,-5,-4,-7,-3,-129,-24,-18,213,-9,-202,258,-130,-205,-206,]),'DECREASE':([9,13,18,20,22,24,28,30,34,53,72,180,197,218,230,240,301,],[-59,59,-60,-61,-17,-180,-57,-58,-179,-62,-57,-181,-192,-63,-182,-193,-66,]),'MULCREASE':([9,13,18,20,22,24,28,30,34,53,72,180,197,218,230,240,301,],[-59,54,-60,-61,-17,-180,-57,-58,-179,-62,-57,-181,-192,-63,-182,-193,-66,]),'INT':([22,45,51,103,120,135,202,209,234,259,283,292,293,300,],[-17,-15,138,138,138,138,-16,138,138,138,138,138,138,138,]),'UPPER':([0,5,10,21,25,26,32,35,36,40,41,42,52,54,55,56,57,58,59,60,61,62,65,68,69,82,95,99,100,104,105,107,109,112,114,118,123,126,144,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,182,185,193,195,198,205,206,208,209,211,212,216,217,219,227,229,232,235,239,241,242,243,263,269,272,275,285,288,291,293,299,306,311,312,328,],[37,-2,-8,-6,-5,37,37,37,-4,37,37,-7,37,-145,-142,-147,-143,-141,-144,37,-146,37,-123,37,37,37,37,-124,37,-3,-129,-152,37,37,37,-24,-18,37,37,37,37,-113,-114,-112,-115,-111,-99,-102,-104,-101,37,-100,-106,-108,-107,-105,-98,-103,-118,-119,-120,37,-9,37,37,-153,37,37,37,37,37,-202,37,-130,37,37,37,37,37,37,37,37,37,37,-205,37,37,37,37,37,37,37,-206,37,37,37,37,]),'TRUE':([26,40,41,54,55,56,57,58,59,60,61,62,65,68,69,95,99,100,109,114,126,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[73,73,73,-145,-142,-147,-143,-141,-144,73,-146,73,-123,73,73,73,-124,73,73,73,73,73,73,-113,-114,-112,-115,-111,-99,-102,-104,-101,73,-100,-106,-108,-107,-105,-98,-103,-118,-119,-120,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'READ':([0,5,10,21,25,26,32,35,36,40,41,42,52,54,55,56,57,58,59,60,61,62,65,68,69,82,95,99,100,104,105,107,109,112,114,118,123,126,144,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,182,185,193,195,198,205,206,208,209,211,212,216,217,219,227,229,232,235,239,241,242,243,263,269,272,275,285,288,291,293,299,306,311,312,328,],[15,-2,-8,-6,-5,15,15,15,-4,15,15,-7,15,-145,-142,-147,-143,-141,-144,15,-146,15,-123,15,15,15,15,-124,15,-3,-129,-152,15,15,15,-24,-18,15,15,15,15,-113,-114,-112,-115,-111,-99,-102,-104,-101,15,-100,-106,-108,-107,-105,-98,-103,-118,-119,-120,15,-9,15,15,-153,15,15,15,15,15,-202,15,-130,15,15,15,15,15,15,15,15,15,15,-205,15,15,15,15,15,15,15,-206,15,15,15,15,]),'THEN':([9,18,22,24,30,34,53,66,67,70,71,72,73,74,76,77,78,79,80,81,83,84,85,87,88,89,90,91,92,94,96,97,98,116,117,151,160,177,180,197,218,220,224,225,226,230,240,270,286,301,304,307,323,324,325,],[-59,-60,-17,-180,-58,-179,-62,-75,-73,-76,-78,-57,-79,-126,-69,-68,-72,-96,-71,-121,-80,-125,-70,-127,-82,-87,-109,-77,-116,-74,-88,-81,-61,-91,198,-122,-128,227,-181,-192,-63,-86,-110,-97,-117,-182,-193,-83,198,-66,-89,227,-84,-90,227,]),'IF':([0,5,10,21,25,26,32,35,36,40,41,42,52,54,55,56,57,58,59,60,61,62,69,95,100,104,105,107,109,112,114,118,123,126,144,153,182,185,193,195,198,205,206,208,209,211,212,216,217,219,227,229,232,235,239,241,242,243,263,269,272,275,285,288,291,293,299,306,311,312,328,],[41,-2,-8,-6,-5,95,41,41,-4,95,95,-7,41,-145,-142,-147,-143,-141,-144,95,-146,95,95,95,95,-3,-129,-152,95,41,95,-24,-18,95,41,95,-9,41,41,-153,41,95,95,95,95,-202,41,-130,95,95,95,95,95,95,41,41,41,95,-205,95,95,95,41,95,95,95,-206,95,95,95,95,]),'DIFF':([9,18,22,24,30,34,53,66,67,70,71,72,73,74,76,77,78,79,80,81,83,84,85,87,88,89,90,91,92,94,97,98,151,160,180,197,218,220,224,225,226,230,240,252,270,301,323,],[-59,-60,-17,-180,-58,-179,-62,-75,-73,-76,-78,-57,-79,-126,-69,-68,-72,-96,-71,-121,-80,-125,-70,-127,-82,172,-109,-77,-116,-74,-81,-61,-122,-128,-181,-192,-63,-86,-110,-97,-117,-182,-193,-57,-83,-66,-84,]),'NULL':([26,40,41,54,55,56,57,58,59,60,61,62,65,68,69,95,99,100,109,114,126,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[97,97,97,-145,-142,-147,-143,-141,-144,97,-146,97,-123,97,97,97,-124,97,97,97,97,97,97,-113,-114,-112,-115,-111,-99,-102,-104,-101,97,-100,-106,-108,-107,-105,-98,-103,-118,-119,-120,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'MOD':([9,18,22,24,30,34,53,66,67,70,71,72,73,74,76,77,78,80,81,83,84,85,87,88,90,91,92,94,97,98,151,160,180,197,218,220,224,226,230,240,252,270,301,323,],[-59,-60,-17,-180,-58,-179,-62,-75,-73,-76,-78,-57,-79,-126,-69,-68,-72,-71,-121,-80,-125,-70,-127,-82,175,-77,-116,-74,-81,-61,-122,-128,-181,-192,-63,-86,175,-117,-182,-193,-57,-83,-66,-84,]),'DO':([0,5,10,21,25,32,35,36,42,52,104,105,107,112,118,123,144,182,185,193,195,198,211,212,216,239,241,242,263,285,299,],[35,-2,-8,-6,-5,35,35,-4,-7,35,-3,-129,-152,35,-24,-18,35,-9,35,35,-153,35,-202,35,-130,35,35,35,-205,35,-206,]),'NOT':([26,40,41,54,55,56,57,58,59,60,61,62,69,95,100,109,114,126,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[99,99,99,-145,-142,-147,-143,-141,-144,99,-146,99,99,99,99,99,99,99,99,99,-113,-114,-112,-115,-111,-99,-102,-104,-101,99,-100,-106,-108,-107,-105,-98,-103,-118,-119,-120,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'FI':([9,18,22,24,30,34,53,66,67,70,71,72,73,74,76,77,78,79,80,81,83,84,85,87,88,89,90,91,92,94,96,97,98,105,107,151,160,180,195,197,198,199,216,218,220,224,225,226,230,240,241,242,244,270,273,285,301,303,304,305,314,323,324,332,],[-59,-60,-17,-180,-58,-179,-62,-75,-73,-76,-78,-57,-79,-126,-69,-68,-72,-96,-71,-121,-80,-125,-70,-127,-82,-87,-109,-77,-116,-74,-88,-81,-61,-129,-152,-122,-128,-181,-153,-192,-150,245,-130,-63,-86,-110,-97,-117,-182,-193,-151,-154,287,-83,304,-155,-66,-93,-89,324,-156,-84,-90,-157,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'mode':([51,103,120,135,259,292,300,],[134,184,201,207,296,318,322,]),'array_element':([0,26,32,35,40,41,52,60,62,68,69,82,95,100,109,112,114,126,144,153,154,165,176,185,193,198,205,206,208,209,212,217,219,227,229,232,235,239,241,242,243,269,272,275,285,288,291,293,306,311,312,328,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'value_array_slice':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'else_expression':([228,274,],[273,305,]),'initialization':([184,],[233,]),'statement':([0,32,144,212,],[5,104,5,104,]),'boolean_literal':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'range_enumeration':([108,],[188,]),'label_id':([0,32,35,112,144,193,198,212,239,241,242,285,],[6,6,106,106,6,106,106,6,106,106,106,106,]),'lower_bound':([62,153,205,208,209,291,293,],[148,222,247,247,247,247,247,]),'else_clause':([199,314,],[244,332,]),'literal_range':([205,208,209,291,293,],[248,250,251,250,251,]),'monadic_operator':([26,40,41,60,62,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'discrete_range_mode':([51,103,120,135,209,234,259,283,292,293,300,],[132,132,132,132,132,132,132,132,132,132,132,]),'for_control':([108,],[190,]),'parameter_list':([100,114,291,],[178,196,178,]),'assignment_action':([0,32,35,52,112,144,185,193,198,212,239,241,242,285,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'location':([0,26,32,35,40,41,52,60,62,68,69,82,95,100,109,112,114,126,144,153,154,165,176,185,193,198,205,206,208,209,212,217,219,227,229,232,235,239,241,242,243,269,272,275,285,288,291,293,306,311,312,328,],[13,84,13,13,84,84,13,84,84,84,84,160,84,84,84,13,84,84,13,84,84,84,84,13,13,13,84,84,84,84,13,84,84,84,84,84,84,13,13,13,84,84,84,84,13,84,84,84,84,84,84,84,]),'synonym_list':([4,],[49,]),'exit_action':([0,32,35,52,112,144,185,193,198,212,239,241,242,285,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'mode_definition':([1,119,],[48,200,]),'end_value':([280,309,],[308,327,]),'boolean_expression':([41,95,109,243,275,306,],[117,177,192,286,307,325,]),'result':([26,40,],[86,115,]),'synonym_definition':([4,49,],[50,122,]),'start_value':([235,],[280,]),'array_primitive_value':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'builtin_call':([0,26,32,35,40,41,52,60,62,68,69,82,95,100,109,112,114,126,144,153,154,165,176,185,193,198,205,206,208,209,212,217,219,227,229,232,235,239,241,242,243,269,272,275,285,288,291,293,306,311,312,328,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'loop_counter':([108,],[186,]),'operand1':([26,40,41,60,62,69,95,100,109,114,126,153,165,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[79,79,79,79,79,79,79,79,79,79,79,79,225,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'operator2':([79,225,],[154,154,]),'newmode_statement':([0,32,144,212,],[21,21,21,21,]),'parenthesized_expression':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'result_spec':([215,],[264,]),'iteration':([108,],[189,]),'element_mode':([292,],[317,]),'newmode_list':([1,],[46,]),'then_clause':([117,286,],[199,314,]),'identifier_list':([1,4,31,49,119,183,214,297,],[47,51,103,51,47,103,259,259,]),'program':([0,],[29,]),'arithmetic_multiplicative_operator':([90,224,],[176,176,]),'discrete_mode':([51,103,120,135,209,234,259,283,292,293,300,],[133,133,133,133,255,279,133,313,133,255,133,]),'primitive_value':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'string_mode':([51,103,120,135,259,292,300,],[136,136,136,136,136,136,136,]),'parameter':([100,114,229,291,],[179,179,276,179,]),'referenced_location':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'integer_expression':([153,311,],[223,330,]),'conditional_expression':([26,40,41,60,62,69,95,100,109,114,126,153,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'action_statement_list':([35,193,198,242,],[112,239,241,285,]),'builtin_name':([0,26,32,35,40,41,52,60,62,68,69,82,95,100,109,112,114,126,144,153,154,165,176,185,193,198,205,206,208,209,212,217,219,227,229,232,235,239,241,242,243,269,272,275,285,288,291,293,306,311,312,328,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'operand3':([26,40,41,60,62,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,226,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'expression':([26,40,41,60,62,69,95,100,109,114,126,153,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[93,93,116,147,150,152,116,181,116,181,203,221,246,203,246,246,266,268,271,181,277,281,116,266,303,116,266,316,246,116,329,281,281,]),'string_length':([210,],[257,]),'procedure_statement':([0,32,144,212,],[42,42,42,42,]),'upper_bound':([217,269,288,],[267,302,315,]),'statement_list':([0,144,],[32,212,]),'index_mode':([209,293,],[254,319,]),'action':([0,32,35,52,112,144,185,193,198,212,239,241,242,285,],[33,33,33,146,33,33,146,33,33,33,33,33,33,33,]),'then_expression':([177,307,325,],[228,326,335,]),'boolean_mode':([51,103,120,135,209,234,259,283,292,293,300,],[124,124,124,124,124,124,124,124,124,124,124,]),'integer_mode':([51,103,120,135,209,234,259,283,292,293,300,],[125,125,125,125,125,125,125,125,125,125,125,]),'do_action':([0,32,35,52,112,144,185,193,198,212,239,241,242,285,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'procedure_definition':([52,],[143,]),'empty_literal':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'declaration_list':([31,],[101,]),'if_action':([0,32,35,52,112,144,185,193,198,212,239,241,242,285,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'action_statement':([0,32,35,112,144,193,198,212,239,241,242,285,],[10,10,107,195,10,107,107,10,195,195,107,195,]),'parameter_spec':([259,],[295,]),'result_action':([0,32,35,52,112,144,185,193,198,212,239,241,242,285,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'array_mode':([51,103,120,135,259,292,300,],[129,129,129,129,129,129,129,]),'arithmetic_additive_operator':([79,225,],[159,159,]),'closed_dyadic_operator':([13,],[55,]),'step_value':([280,],[309,]),'index_mode_list':([209,],[253,]),'array_location':([0,26,32,35,40,41,52,60,62,68,69,82,95,100,109,112,114,126,144,153,154,165,176,185,193,198,205,206,208,209,212,217,219,227,229,232,235,239,241,242,243,269,272,275,285,288,291,293,306,311,312,328,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'formal_procedure_head':([52,],[144,]),'bracketed_action':([0,32,35,52,112,144,185,193,198,212,239,241,242,285,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'operator1':([89,],[165,]),'exit_label_id':([23,],[64,]),'elsif_expression':([228,],[274,]),'value_array_element':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'literal':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'discrete_expression':([235,312,328,],[282,331,336,]),'formal_parameter':([214,297,],[262,321,]),'integer_literal':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'synonym_statement':([0,32,144,212,],[25,25,25,25,]),'control_part':([35,],[110,]),'array_slice':([0,26,32,35,40,41,52,60,62,68,69,82,95,100,109,112,114,126,144,153,154,165,176,185,193,198,205,206,208,209,212,217,219,227,229,232,235,239,241,242,243,269,272,275,285,288,291,293,306,311,312,328,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'string_concatenation_operator':([79,225,],[157,157,]),'reference_mode':([51,103,120,135,259,292,300,],[127,127,127,127,127,127,127,]),'character_string_literal':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'constant_expression':([126,206,],[204,249,]),'identifier':([0,1,4,23,26,31,32,35,40,41,49,51,52,60,62,68,69,82,95,100,103,108,109,112,114,119,120,121,126,135,144,153,154,165,176,183,185,193,198,205,206,208,209,212,214,217,219,227,229,232,234,235,239,241,242,243,259,269,272,275,283,285,288,291,292,293,297,300,306,311,312,328,],[28,45,45,63,72,45,28,28,72,72,45,137,72,72,72,72,72,72,72,72,137,187,72,28,72,45,137,202,72,137,28,72,72,72,72,45,72,28,28,72,72,72,252,28,45,72,72,72,72,72,278,72,28,28,28,72,137,72,72,72,278,28,72,72,137,252,45,137,72,72,72,72,]),'composite_mode':([51,103,120,135,259,292,300,],[131,131,131,131,131,131,131,]),'declaration':([31,183,],[102,231,]),'mode_name':([51,103,120,135,259,292,300,],[128,128,128,128,128,128,128,]),'dereferenced_reference':([0,26,32,35,40,41,52,60,62,68,69,82,95,100,109,112,114,126,144,153,154,165,176,185,193,198,205,206,208,209,212,217,219,227,229,232,235,239,241,242,243,269,272,275,285,288,291,293,306,311,312,328,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'step_enumeration':([108,],[191,]),'membership_operator':([89,],[161,]),'expression_list':([62,],[149,]),'return_action':([0,32,35,52,112,144,185,193,198,212,239,241,242,285,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'procedure_call':([0,26,32,35,40,41,52,60,62,68,69,82,95,100,109,112,114,126,144,153,154,165,176,185,193,198,205,206,208,209,212,217,219,227,229,232,235,239,241,242,243,269,272,275,285,288,291,293,306,311,312,328,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'operand0':([26,40,41,60,62,69,95,100,109,114,126,153,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'operand2':([26,40,41,60,62,69,95,100,109,114,126,153,154,165,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[90,90,90,90,90,90,90,90,90,90,90,90,224,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'parenthesis_gambiarra':([145,],[215,]),'declaration_statement':([0,32,144,212,],[36,36,36,36,]),'formal_parameter_list':([214,],[260,]),'while_control':([35,190,],[113,237,]),'call_action':([0,26,32,35,40,41,52,60,62,68,69,82,95,100,109,112,114,126,144,153,154,165,176,185,193,198,205,206,208,209,212,217,219,227,229,232,235,239,241,242,243,269,272,275,285,288,291,293,306,311,312,328,],[20,98,20,20,98,98,20,98,98,98,98,98,98,98,98,20,98,98,20,98,98,98,98,20,20,20,98,98,98,98,20,98,98,98,98,98,98,20,20,20,98,98,98,98,20,98,98,98,98,98,98,98,]),'character_literal':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'operand4':([26,40,41,60,62,68,69,95,100,109,114,126,153,154,165,176,205,206,208,209,217,219,227,229,232,235,243,269,272,275,288,291,293,306,311,312,328,],[81,81,81,81,81,151,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'relational_operator':([89,],[171,]),'assigning_operator':([13,],[60,]),'character_mode':([51,103,120,135,209,234,259,283,292,293,300,],[142,142,142,142,142,142,142,142,142,142,142,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',41),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',42),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',43),
  ('declaration_statement -> DCL declaration_list SEMI','declaration_statement',3,'p_declaration_statement','parser.py',48),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',53),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',54),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',61),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',62),
  ('initialization -> ASSIGN expression','initialization',2,'p_initialization','parser.py',69),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',76),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',77),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',84),
  ('synonym_statement -> SYN synonym_list SEMI','synonym_statement',3,'p_synonym_statement','parser.py',90),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',98),
  ('synonym_list -> synonym_list synonym_definition','synonym_list',2,'p_synonym_list','parser.py',99),
  ('synonym_definition -> identifier_list ASSIGN constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',106),
  ('synonym_definition -> identifier_list mode ASSIGN constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',107),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',114),
  ('newmode_statement -> TYPE newmode_list SEMI','newmode_statement',3,'p_newmode_statement','parser.py',119),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',125),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',126),
  ('mode_definition -> identifier_list ASSIGN mode','mode_definition',3,'p_mode_definition','parser.py',133),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',139),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',140),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',141),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',142),
  ('discrete_mode -> integer_mode','discrete_mode',1,'p_discrete_mode','parser.py',147),
  ('discrete_mode -> boolean_mode','discrete_mode',1,'p_discrete_mode','parser.py',148),
  ('discrete_mode -> character_mode','discrete_mode',1,'p_discrete_mode','parser.py',149),
  ('discrete_mode -> discrete_range_mode','discrete_mode',1,'p_discrete_mode','parser.py',150),
  ('integer_mode -> INT','integer_mode',1,'p_integer_mode','parser.py',155),
  ('boolean_mode -> BOOL','boolean_mode',1,'p_boolean_mode','parser.py',160),
  ('character_mode -> CHAR','character_mode',1,'p_character_mode','parser.py',165),
  ('discrete_range_mode -> identifier LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',170),
  ('discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN','discrete_range_mode',4,'p_discrete_range_mode','parser.py',171),
  ('mode_name -> identifier','mode_name',1,'p_mode_name','parser.py',178),
  ('literal_range -> lower_bound COLON upper_bound','literal_range',3,'p_literal_range','parser.py',188),
  ('lower_bound -> expression','lower_bound',1,'p_lower_bound','parser.py',193),
  ('upper_bound -> expression','upper_bound',1,'p_upper_bound','parser.py',199),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',205),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',211),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',212),
  ('string_mode -> CHARS LBRACKET string_length RBRACKET','string_mode',4,'p_string_mode','parser.py',217),
  ('string_length -> ICONST','string_length',1,'p_string_length','parser.py',223),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',229),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',235),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',236),
  ('index_mode -> discrete_mode','index_mode',1,'p_index_mode','parser.py',243),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',244),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',249),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','parser.py',255),
  ('location -> identifier','location',1,'p_location','parser.py',261),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',262),
  ('location -> array_element','location',1,'p_location','parser.py',263),
  ('location -> array_slice','location',1,'p_location','parser.py',264),
  ('location -> call_action','location',1,'p_location','parser.py',265),
  ('dereferenced_reference -> location ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',275),
  ('array_element -> array_location LBRACKET expression_list RBRACKET','array_element',4,'p_array_element','parser.py',315),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',322),
  ('array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET','array_slice',6,'p_array_slice','parser.py',329),
  ('array_location -> location','array_location',1,'p_array_location','parser.py',335),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',341),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',342),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',343),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',344),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',350),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',351),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',352),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',353),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',354),
  ('integer_literal -> ICONST','integer_literal',1,'p_integer_literal','parser.py',359),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',365),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',366),
  ('character_literal -> CCONST','character_literal',1,'p_character_literal','parser.py',373),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',379),
  ('character_string_literal -> SCONST','character_string_literal',1,'p_character_string_literal','parser.py',386),
  ('value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET','value_array_element',4,'p_value_array_element','parser.py',393),
  ('value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',399),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',405),
  ('parenthesized_expression -> LPAREN expression RPAREN','parenthesized_expression',3,'p_parenthesized_expression','parser.py',411),
  ('expression -> operand0','expression',1,'p_expression','parser.py',418),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',419),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',424),
  ('conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',425),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',434),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',440),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',446),
  ('elsif_expression -> ELSIF boolean_expression then_expression','elsif_expression',3,'p_elsif_expression','parser.py',452),
  ('elsif_expression -> elsif_expression ELSIF boolean_expression then_expression','elsif_expression',4,'p_elsif_expression','parser.py',453),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',462),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',463),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',470),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',471),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',476),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',477),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',478),
  ('relational_operator -> DIFF','relational_operator',1,'p_relational_operator','parser.py',479),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','parser.py',480),
  ('relational_operator -> GREATEREQ','relational_operator',1,'p_relational_operator','parser.py',481),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','parser.py',482),
  ('relational_operator -> LESSEQ','relational_operator',1,'p_relational_operator','parser.py',483),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',488),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',493),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',494),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',502),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',503),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',508),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',509),
  ('string_concatenation_operator -> STRCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',515),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',519),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',520),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',527),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',528),
  ('arithmetic_multiplicative_operator -> MOD','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',529),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',534),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',535),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',543),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',544),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',549),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',550),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',551),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',556),
  ('action_statement -> action SEMI','action_statement',2,'p_action_statement','parser.py',561),
  ('action_statement -> label_id COLON action SEMI','action_statement',4,'p_action_statement','parser.py',562),
  ('label_id -> identifier','label_id',1,'p_label_id','parser.py',571),
  ('action -> bracketed_action','action',1,'p_action','parser.py',577),
  ('action -> assignment_action','action',1,'p_action','parser.py',578),
  ('action -> call_action','action',1,'p_action','parser.py',579),
  ('action -> exit_action','action',1,'p_action','parser.py',580),
  ('action -> return_action','action',1,'p_action','parser.py',581),
  ('action -> result_action','action',1,'p_action','parser.py',582),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',587),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',588),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',593),
  ('assigning_operator -> ASSIGN','assigning_operator',1,'p_assigning_operator','parser.py',612),
  ('assigning_operator -> closed_dyadic_operator','assigning_operator',1,'p_assigning_operator','parser.py',613),
  ('closed_dyadic_operator -> INCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',618),
  ('closed_dyadic_operator -> DECREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',619),
  ('closed_dyadic_operator -> MULCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',620),
  ('closed_dyadic_operator -> DIVCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',621),
  ('closed_dyadic_operator -> MODCREASE','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',622),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',627),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',628),
  ('then_clause -> THEN','then_clause',1,'p_then_clause','parser.py',637),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',638),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',647),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',648),
  ('else_clause -> ELSE','else_clause',1,'p_else_clause','parser.py',655),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',656),
  ('else_clause -> ELSIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',657),
  ('else_clause -> ELSIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',658),
  ('do_action -> DO OD','do_action',2,'p_do_action','parser.py',673),
  ('do_action -> DO control_part SEMI OD','do_action',4,'p_do_action','parser.py',674),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',675),
  ('do_action -> DO control_part SEMI action_statement_list OD','do_action',5,'p_do_action','parser.py',676),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',690),
  ('control_part -> FOR for_control','control_part',2,'p_control_part','parser.py',691),
  ('control_part -> FOR for_control while_control','control_part',3,'p_control_part','parser.py',692),
  ('for_control -> iteration','for_control',1,'p_for_control','parser.py',701),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',706),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',707),
  ('step_enumeration -> loop_counter ASSIGN start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',712),
  ('step_enumeration -> loop_counter ASSIGN start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',713),
  ('loop_counter -> identifier','loop_counter',1,'p_loop_counter','parser.py',720),
  ('start_value -> discrete_expression','start_value',1,'p_start_value','parser.py',725),
  ('step_value -> BY integer_expression','step_value',2,'p_step_value','parser.py',730),
  ('end_value -> TO discrete_expression','end_value',2,'p_end_value','parser.py',735),
  ('end_value -> DOWN TO discrete_expression','end_value',3,'p_end_value','parser.py',736),
  ('discrete_expression -> expression','discrete_expression',1,'p_discrete_expression','parser.py',744),
  ('range_enumeration -> loop_counter IN discrete_mode','range_enumeration',3,'p_range_enumeration','parser.py',749),
  ('range_enumeration -> loop_counter DOWN IN discrete_mode','range_enumeration',4,'p_range_enumeration','parser.py',750),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',757),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',761),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',762),
  ('procedure_call -> identifier LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',767),
  ('procedure_call -> identifier LPAREN parameter_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',768),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',775),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',776),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',783),
  ('exit_action -> EXIT exit_label_id','exit_action',2,'p_exit_action','parser.py',791),
  ('exit_label_id -> identifier','exit_label_id',1,'p_exit_label_id','parser.py',795),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',799),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',800),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',807),
  ('result -> expression','result',1,'p_result','parser.py',811),
  ('builtin_call -> builtin_name LPAREN RPAREN','builtin_call',3,'p_builtin_call','parser.py',816),
  ('builtin_call -> builtin_name LPAREN parameter_list RPAREN','builtin_call',4,'p_builtin_call','parser.py',817),
  ('builtin_name -> ABS','builtin_name',1,'p_builtin_name','parser.py',824),
  ('builtin_name -> ASC','builtin_name',1,'p_builtin_name','parser.py',825),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',826),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',827),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',828),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',829),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',830),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',831),
  ('procedure_statement -> label_id COLON procedure_definition SEMI','procedure_statement',4,'p_procedure_statement','parser.py',835),
  ('procedure_definition -> formal_procedure_head END','procedure_definition',2,'p_procedure_definition','parser.py',839),
  ('procedure_definition -> formal_procedure_head statement_list END','procedure_definition',3,'p_procedure_definition','parser.py',840),
  ('formal_procedure_head -> PROC parenthesis_gambiarra SEMI','formal_procedure_head',3,'p_formal_procedure_head','parser.py',847),
  ('formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI','formal_procedure_head',4,'p_formal_procedure_head','parser.py',848),
  ('parenthesis_gambiarra -> LPAREN RPAREN','parenthesis_gambiarra',2,'p_parenthesis_gambiarra','parser.py',856),
  ('parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN','parenthesis_gambiarra',3,'p_parenthesis_gambiarra','parser.py',857),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',864),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',865),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',872),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',876),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',877),
  ('result_spec -> RETURNS LPAREN mode RPAREN','result_spec',4,'p_result_spec','parser.py',889),
  ('result_spec -> RETURNS LPAREN mode LOC RPAREN','result_spec',5,'p_result_spec','parser.py',890),
]
