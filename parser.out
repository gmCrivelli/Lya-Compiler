Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     statement -> newmode_statement
Rule 7     statement -> procedure_statement
Rule 8     statement -> action_statement
Rule 9     declaration_statement -> DCL declaration_list SEMI
Rule 10    declaration_list -> declaration
Rule 11    declaration_list -> declaration_list COMMA declaration
Rule 12    declaration -> identifier_list mode
Rule 13    declaration -> identifier_list mode initialization
Rule 14    initialization -> ASSIGN expression
Rule 15    identifier_list -> identifier
Rule 16    identifier_list -> identifier_list COMMA identifier
Rule 17    identifier -> ID
Rule 18    synonym_statement -> SYN synonym_list SEMI
Rule 19    synonym_list -> synonym_definition
Rule 20    synonym_list -> synonym_list synonym_definition
Rule 21    synonym_definition -> identifier_list ASSIGN constant_expression
Rule 22    synonym_definition -> identifier_list mode ASSIGN constant_expression
Rule 23    constant_expression -> expression
Rule 24    newmode_statement -> TYPE newmode_list SEMI
Rule 25    newmode_list -> mode_definition
Rule 26    newmode_list -> newmode_list COMMA mode_definition
Rule 27    mode_definition -> identifier_list ASSIGN mode
Rule 28    mode -> mode_name
Rule 29    mode -> discrete_mode
Rule 30    mode -> reference_mode
Rule 31    mode -> composite_mode
Rule 32    discrete_mode -> integer_mode
Rule 33    discrete_mode -> boolean_mode
Rule 34    discrete_mode -> character_mode
Rule 35    discrete_mode -> discrete_range_mode
Rule 36    integer_mode -> INT
Rule 37    boolean_mode -> BOOL
Rule 38    character_mode -> CHAR
Rule 39    discrete_range_mode -> identifier LPAREN literal_range RPAREN
Rule 40    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 41    mode_name -> identifier
Rule 42    literal_range -> lower_bound COLON upper_bound
Rule 43    lower_bound -> expression
Rule 44    upper_bound -> expression
Rule 45    reference_mode -> REF mode
Rule 46    composite_mode -> string_mode
Rule 47    composite_mode -> array_mode
Rule 48    string_mode -> CHARS LBRACKET ICONST RBRACKET
Rule 49    array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode
Rule 50    index_mode_list -> index_mode
Rule 51    index_mode_list -> index_mode_list COMMA index_mode
Rule 52    index_mode -> discrete_mode
Rule 53    index_mode -> literal_range
Rule 54    element_mode -> mode
Rule 55    integer_expression -> expression
Rule 56    location -> identifier
Rule 57    location -> dereferenced_reference
Rule 58    location -> array_element
Rule 59    location -> array_slice
Rule 60    location -> call_action
Rule 61    dereferenced_reference -> location ARROW
Rule 62    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 63    expression_list -> expression
Rule 64    expression_list -> expression_list COMMA expression
Rule 65    array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 66    array_location -> location
Rule 67    primitive_value -> literal
Rule 68    primitive_value -> value_array_element
Rule 69    primitive_value -> value_array_slice
Rule 70    primitive_value -> parenthesized_expression
Rule 71    literal -> integer_literal
Rule 72    literal -> boolean_literal
Rule 73    literal -> character_literal
Rule 74    literal -> empty_literal
Rule 75    literal -> character_string_literal
Rule 76    integer_literal -> ICONST
Rule 77    boolean_literal -> FALSE
Rule 78    boolean_literal -> TRUE
Rule 79    character_literal -> CCONST
Rule 80    empty_literal -> NULL
Rule 81    character_string_literal -> SCONST
Rule 82    value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET
Rule 83    value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 84    array_primitive_value -> primitive_value
Rule 85    parenthesized_expression -> LPAREN expression RPAREN
Rule 86    expression -> operand0
Rule 87    expression -> conditional_expression
Rule 88    conditional_expression -> IF boolean_expression then_expression else_expression FI
Rule 89    conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI
Rule 90    boolean_expression -> expression
Rule 91    then_expression -> THEN expression
Rule 92    else_expression -> ELSE expression
Rule 93    elsif_expression -> ELSIF boolean_expression then_expression
Rule 94    elsif_expression -> elsif_expression ELSIF boolean_expression then_expression
Rule 95    operand0 -> operand1
Rule 96    operand0 -> operand0 operator1 operand1
Rule 97    operator1 -> relational_operator
Rule 98    operator1 -> membership_operator
Rule 99    relational_operator -> AND
Rule 100   relational_operator -> OR
Rule 101   relational_operator -> EQUAL
Rule 102   relational_operator -> DIFF
Rule 103   relational_operator -> GREATER
Rule 104   relational_operator -> GREATEREQ
Rule 105   relational_operator -> LESS
Rule 106   relational_operator -> LESSEQ
Rule 107   membership_operator -> IN
Rule 108   operand1 -> operand2
Rule 109   operand1 -> operand1 operator2 operand2
Rule 110   operator2 -> arithmetic_additive_operator
Rule 111   operator2 -> string_concatenation_operator
Rule 112   arithmetic_additive_operator -> PLUS
Rule 113   arithmetic_additive_operator -> MINUS
Rule 114   string_concatenation_operator -> STRCAT
Rule 115   operand2 -> operand3
Rule 116   operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 117   arithmetic_multiplicative_operator -> TIMES
Rule 118   arithmetic_multiplicative_operator -> DIVIDE
Rule 119   arithmetic_multiplicative_operator -> MOD
Rule 120   operand3 -> operand4
Rule 121   operand3 -> monadic_operator operand4
Rule 122   monadic_operator -> MINUS
Rule 123   monadic_operator -> NOT
Rule 124   operand4 -> location
Rule 125   operand4 -> referenced_location
Rule 126   operand4 -> primitive_value
Rule 127   referenced_location -> ARROW location
Rule 128   action_statement -> action SEMI
Rule 129   action_statement -> label_id COLON action SEMI
Rule 130   label_id -> identifier
Rule 131   action -> bracketed_action
Rule 132   action -> assignment_action
Rule 133   action -> call_action
Rule 134   action -> exit_action
Rule 135   action -> return_action
Rule 136   action -> result_action
Rule 137   bracketed_action -> if_action
Rule 138   bracketed_action -> do_action
Rule 139   assignment_action -> location assigning_operator expression
Rule 140   assigning_operator -> ASSIGN
Rule 141   assigning_operator -> closed_dyadic_operator
Rule 142   closed_dyadic_operator -> INCREASE
Rule 143   closed_dyadic_operator -> DECREASE
Rule 144   closed_dyadic_operator -> MULCREASE
Rule 145   closed_dyadic_operator -> DIVCREASE
Rule 146   closed_dyadic_operator -> MODCREASE
Rule 147   if_action -> IF boolean_expression then_clause FI
Rule 148   if_action -> IF boolean_expression then_clause else_clause FI
Rule 149   then_clause -> THEN
Rule 150   then_clause -> THEN action_statement_list
Rule 151   action_statement_list -> action_statement
Rule 152   action_statement_list -> action_statement_list action_statement
Rule 153   else_clause -> ELSE
Rule 154   else_clause -> ELSE action_statement_list
Rule 155   else_clause -> ELSIF boolean_expression then_clause
Rule 156   else_clause -> ELSIF boolean_expression then_clause else_clause
Rule 157   do_action -> DO OD
Rule 158   do_action -> DO control_part SEMI OD
Rule 159   do_action -> DO action_statement_list OD
Rule 160   do_action -> DO control_part SEMI action_statement_list OD
Rule 161   control_part -> while_control
Rule 162   control_part -> FOR for_control
Rule 163   control_part -> FOR for_control while_control
Rule 164   for_control -> iteration
Rule 165   iteration -> step_enumeration
Rule 166   iteration -> range_enumeration
Rule 167   step_enumeration -> loop_counter ASSIGN start_value end_value
Rule 168   step_enumeration -> loop_counter ASSIGN start_value step_value end_value
Rule 169   loop_counter -> identifier
Rule 170   start_value -> discrete_expression
Rule 171   step_value -> BY integer_expression
Rule 172   end_value -> TO discrete_expression
Rule 173   end_value -> DOWN TO discrete_expression
Rule 174   discrete_expression -> expression
Rule 175   range_enumeration -> loop_counter IN discrete_mode
Rule 176   range_enumeration -> loop_counter DOWN IN discrete_mode
Rule 177   while_control -> WHILE boolean_expression
Rule 178   call_action -> procedure_call
Rule 179   call_action -> builtin_call
Rule 180   procedure_call -> identifier LPAREN RPAREN
Rule 181   procedure_call -> identifier LPAREN parameter_list RPAREN
Rule 182   parameter_list -> parameter
Rule 183   parameter_list -> parameter_list COMMA parameter
Rule 184   parameter -> expression
Rule 185   exit_action -> EXIT exit_label_id
Rule 186   exit_label_id -> identifier
Rule 187   return_action -> RETURN
Rule 188   return_action -> RETURN result
Rule 189   result_action -> RESULT result
Rule 190   result -> expression
Rule 191   builtin_call -> builtin_name LPAREN RPAREN
Rule 192   builtin_call -> builtin_name LPAREN parameter_list RPAREN
Rule 193   builtin_name -> ABS
Rule 194   builtin_name -> ASC
Rule 195   builtin_name -> NUM
Rule 196   builtin_name -> UPPER
Rule 197   builtin_name -> LOWER
Rule 198   builtin_name -> LENGTH
Rule 199   builtin_name -> READ
Rule 200   builtin_name -> PRINT
Rule 201   procedure_statement -> label_id COLON procedure_definition SEMI
Rule 202   procedure_definition -> formal_procedure_head END
Rule 203   procedure_definition -> formal_procedure_head statement_list END
Rule 204   formal_procedure_head -> PROC parenthesis_gambiarra SEMI
Rule 205   formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI
Rule 206   parenthesis_gambiarra -> LPAREN RPAREN
Rule 207   parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN
Rule 208   formal_parameter_list -> formal_parameter
Rule 209   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 210   formal_parameter -> identifier_list parameter_spec
Rule 211   parameter_spec -> mode
Rule 212   parameter_spec -> mode LOC
Rule 213   result_spec -> RETURNS LPAREN mode RPAREN
Rule 214   result_spec -> RETURNS LPAREN mode LOC RPAREN

Terminals, with rules where they appear

ABS                  : 193
AND                  : 99
ARRAY                : 49
ARROW                : 61 127
ASC                  : 194
ASSIGN               : 14 21 22 27 140 167 168
BOOL                 : 37
BY                   : 171
CCONST               : 79
CHAR                 : 38
CHARS                : 48
COLON                : 42 65 83 129 201
COMMA                : 11 16 26 51 64 183 209
DCL                  : 9
DECREASE             : 143
DIFF                 : 102
DIVCREASE            : 145
DIVIDE               : 118
DO                   : 157 158 159 160
DOWN                 : 173 176
ELSE                 : 92 153 154
ELSIF                : 93 94 155 156
END                  : 202 203
EQUAL                : 101
EXIT                 : 185
FALSE                : 77
FI                   : 88 89 147 148
FOR                  : 162 163
GREATER              : 103
GREATEREQ            : 104
ICONST               : 48 76
ID                   : 17
IF                   : 88 89 147 148
IN                   : 107 175 176
INCREASE             : 142
INT                  : 36
LBRACKET             : 48 49 62 65 82 83
LENGTH               : 198
LESS                 : 105
LESSEQ               : 106
LOC                  : 212 214
LOWER                : 197
LPAREN               : 39 40 85 180 181 191 192 206 207 213 214
MINUS                : 113 122
MOD                  : 119
MODCREASE            : 146
MULCREASE            : 144
NOT                  : 123
NULL                 : 80
NUM                  : 195
OD                   : 157 158 159 160
OR                   : 100
PLUS                 : 112
PRINT                : 200
PROC                 : 204 205
RBRACKET             : 48 49 62 65 82 83
READ                 : 199
REF                  : 45
RESULT               : 189
RETURN               : 187 188
RETURNS              : 213 214
RPAREN               : 39 40 85 180 181 191 192 206 207 213 214
SCONST               : 81
SEMI                 : 9 18 24 128 129 158 160 201 204 205
STRCAT               : 114
SYN                  : 18
THEN                 : 91 149 150
TIMES                : 117
TO                   : 172 173
TRUE                 : 78
TYPE                 : 24
UPPER                : 196
WHILE                : 177
error                : 

Nonterminals, with rules where they appear

action               : 128 129
action_statement     : 8 151 152
action_statement_list : 150 152 154 159 160
arithmetic_additive_operator : 110
arithmetic_multiplicative_operator : 116
array_element        : 58
array_location       : 62 65
array_mode           : 47
array_primitive_value : 82 83
array_slice          : 59
assigning_operator   : 139
assignment_action    : 132
boolean_expression   : 88 89 93 94 147 148 155 156 177
boolean_literal      : 72
boolean_mode         : 33
bracketed_action     : 131
builtin_call         : 179
builtin_name         : 191 192
call_action          : 60 133
character_literal    : 73
character_mode       : 34
character_string_literal : 75
closed_dyadic_operator : 141
composite_mode       : 31
conditional_expression : 87
constant_expression  : 21 22
control_part         : 158 160
declaration          : 10 11
declaration_list     : 9 11
declaration_statement : 4
dereferenced_reference : 57
discrete_expression  : 170 172 173
discrete_mode        : 29 40 52 175 176
discrete_range_mode  : 35
do_action            : 138
element_mode         : 49
else_clause          : 148 156
else_expression      : 88 89
elsif_expression     : 89 94
empty_literal        : 74
end_value            : 167 168
exit_action          : 134
exit_label_id        : 185
expression           : 14 23 43 44 55 63 64 85 90 91 92 139 174 184 190
expression_list      : 62 64
for_control          : 162 163
formal_parameter     : 208 209
formal_parameter_list : 207 209
formal_procedure_head : 202 203
identifier           : 15 16 39 41 56 130 169 180 181 186
identifier_list      : 12 13 16 21 22 27 210
if_action            : 137
index_mode           : 50 51
index_mode_list      : 49 51
initialization       : 13
integer_expression   : 82 171
integer_literal      : 71
integer_mode         : 32
iteration            : 164
label_id             : 129 201
literal              : 67
literal_range        : 39 40 53
location             : 61 66 124 127 139
loop_counter         : 167 168 175 176
lower_bound          : 42 65 83
membership_operator  : 98
mode                 : 12 13 22 27 45 54 211 212 213 214
mode_definition      : 25 26
mode_name            : 28
monadic_operator     : 121
newmode_list         : 24 26
newmode_statement    : 6
operand0             : 86 96
operand1             : 95 96 109
operand2             : 108 109 116
operand3             : 115 116
operand4             : 120 121
operator1            : 96
operator2            : 109
parameter            : 182 183
parameter_list       : 181 183 192
parameter_spec       : 210
parenthesis_gambiarra : 204 205
parenthesized_expression : 70
primitive_value      : 84 126
procedure_call       : 178
procedure_definition : 201
procedure_statement  : 7
program              : 0
range_enumeration    : 166
reference_mode       : 30
referenced_location  : 125
relational_operator  : 97
result               : 188 189
result_action        : 136
result_spec          : 205
return_action        : 135
start_value          : 167 168
statement            : 2 3
statement_list       : 1 3 203
step_enumeration     : 165
step_value           : 168
string_concatenation_operator : 111
string_mode          : 46
synonym_definition   : 19 20
synonym_list         : 18 20
synonym_statement    : 5
then_clause          : 147 148 155 156
then_expression      : 88 89 93 94
upper_bound          : 42 65 83
value_array_element  : 68
value_array_slice    : 69
while_control        : 161 163

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (201) procedure_statement -> . label_id COLON procedure_definition SEMI
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (130) label_id -> . identifier
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    DCL             shift and go to state 39
    SYN             shift and go to state 7
    TYPE            shift and go to state 3
    ID              shift and go to state 32
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    identifier                     shift and go to state 2
    return_action                  shift and go to state 6
    procedure_statement            shift and go to state 5
    dereferenced_reference         shift and go to state 27
    procedure_call                 shift and go to state 8
    array_location                 shift and go to state 33
    statement_list                 shift and go to state 10
    exit_action                    shift and go to state 13
    program                        shift and go to state 17
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    action_statement               shift and go to state 9
    call_action                    shift and go to state 21
    synonym_statement              shift and go to state 22
    bracketed_action               shift and go to state 23
    statement                      shift and go to state 24
    newmode_statement              shift and go to state 25
    declaration_statement          shift and go to state 26
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    action                         shift and go to state 30
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    do_action                      shift and go to state 41
    label_id                       shift and go to state 43

state 1

    (157) do_action -> DO . OD
    (158) do_action -> DO . control_part SEMI OD
    (159) do_action -> DO . action_statement_list OD
    (160) do_action -> DO . control_part SEMI action_statement_list OD
    (161) control_part -> . while_control
    (162) control_part -> . FOR for_control
    (163) control_part -> . FOR for_control while_control
    (151) action_statement_list -> . action_statement
    (152) action_statement_list -> . action_statement_list action_statement
    (177) while_control -> . WHILE boolean_expression
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (130) label_id -> . identifier
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (17) identifier -> . ID
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    OD              shift and go to state 46
    FOR             shift and go to state 48
    WHILE           shift and go to state 45
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    ID              shift and go to state 32
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 21
    action_statement_list          shift and go to state 50
    bracketed_action               shift and go to state 23
    identifier                     shift and go to state 2
    action_statement               shift and go to state 49
    dereferenced_reference         shift and go to state 27
    builtin_name                   shift and go to state 28
    return_action                  shift and go to state 6
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    control_part                   shift and go to state 47
    action                         shift and go to state 30
    while_control                  shift and go to state 51
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    exit_action                    shift and go to state 13
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    do_action                      shift and go to state 41
    label_id                       shift and go to state 52

state 2

    (130) label_id -> identifier .
    (56) location -> identifier .
    (180) procedure_call -> identifier . LPAREN RPAREN
    (181) procedure_call -> identifier . LPAREN parameter_list RPAREN

    COLON           reduce using rule 130 (label_id -> identifier .)
    ARROW           reduce using rule 56 (location -> identifier .)
    ASSIGN          reduce using rule 56 (location -> identifier .)
    INCREASE        reduce using rule 56 (location -> identifier .)
    DECREASE        reduce using rule 56 (location -> identifier .)
    MULCREASE       reduce using rule 56 (location -> identifier .)
    DIVCREASE       reduce using rule 56 (location -> identifier .)
    MODCREASE       reduce using rule 56 (location -> identifier .)
    LBRACKET        reduce using rule 56 (location -> identifier .)
    LPAREN          shift and go to state 53


state 3

    (24) newmode_statement -> TYPE . newmode_list SEMI
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . newmode_list COMMA mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 32

    identifier                     shift and go to state 56
    newmode_list                   shift and go to state 54
    mode_definition                shift and go to state 55
    identifier_list                shift and go to state 57

state 4

    (196) builtin_name -> UPPER .

    LPAREN          reduce using rule 196 (builtin_name -> UPPER .)


state 5

    (7) statement -> procedure_statement .

    END             reduce using rule 7 (statement -> procedure_statement .)
    DCL             reduce using rule 7 (statement -> procedure_statement .)
    SYN             reduce using rule 7 (statement -> procedure_statement .)
    TYPE            reduce using rule 7 (statement -> procedure_statement .)
    ID              reduce using rule 7 (statement -> procedure_statement .)
    EXIT            reduce using rule 7 (statement -> procedure_statement .)
    RETURN          reduce using rule 7 (statement -> procedure_statement .)
    RESULT          reduce using rule 7 (statement -> procedure_statement .)
    IF              reduce using rule 7 (statement -> procedure_statement .)
    DO              reduce using rule 7 (statement -> procedure_statement .)
    ABS             reduce using rule 7 (statement -> procedure_statement .)
    ASC             reduce using rule 7 (statement -> procedure_statement .)
    NUM             reduce using rule 7 (statement -> procedure_statement .)
    UPPER           reduce using rule 7 (statement -> procedure_statement .)
    LOWER           reduce using rule 7 (statement -> procedure_statement .)
    LENGTH          reduce using rule 7 (statement -> procedure_statement .)
    READ            reduce using rule 7 (statement -> procedure_statement .)
    PRINT           reduce using rule 7 (statement -> procedure_statement .)
    $end            reduce using rule 7 (statement -> procedure_statement .)


state 6

    (135) action -> return_action .

    SEMI            reduce using rule 135 (action -> return_action .)


state 7

    (18) synonym_statement -> SYN . synonym_list SEMI
    (19) synonym_list -> . synonym_definition
    (20) synonym_list -> . synonym_list synonym_definition
    (21) synonym_definition -> . identifier_list ASSIGN constant_expression
    (22) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 32

    identifier                     shift and go to state 56
    synonym_list                   shift and go to state 58
    synonym_definition             shift and go to state 59
    identifier_list                shift and go to state 60

state 8

    (178) call_action -> procedure_call .

    ARROW           reduce using rule 178 (call_action -> procedure_call .)
    TIMES           reduce using rule 178 (call_action -> procedure_call .)
    DIVIDE          reduce using rule 178 (call_action -> procedure_call .)
    MOD             reduce using rule 178 (call_action -> procedure_call .)
    PLUS            reduce using rule 178 (call_action -> procedure_call .)
    MINUS           reduce using rule 178 (call_action -> procedure_call .)
    STRCAT          reduce using rule 178 (call_action -> procedure_call .)
    AND             reduce using rule 178 (call_action -> procedure_call .)
    OR              reduce using rule 178 (call_action -> procedure_call .)
    EQUAL           reduce using rule 178 (call_action -> procedure_call .)
    DIFF            reduce using rule 178 (call_action -> procedure_call .)
    GREATER         reduce using rule 178 (call_action -> procedure_call .)
    GREATEREQ       reduce using rule 178 (call_action -> procedure_call .)
    LESS            reduce using rule 178 (call_action -> procedure_call .)
    LESSEQ          reduce using rule 178 (call_action -> procedure_call .)
    IN              reduce using rule 178 (call_action -> procedure_call .)
    SEMI            reduce using rule 178 (call_action -> procedure_call .)
    LBRACKET        reduce using rule 178 (call_action -> procedure_call .)
    THEN            reduce using rule 178 (call_action -> procedure_call .)
    TO              reduce using rule 178 (call_action -> procedure_call .)
    DOWN            reduce using rule 178 (call_action -> procedure_call .)
    WHILE           reduce using rule 178 (call_action -> procedure_call .)
    ASSIGN          reduce using rule 178 (call_action -> procedure_call .)
    INCREASE        reduce using rule 178 (call_action -> procedure_call .)
    DECREASE        reduce using rule 178 (call_action -> procedure_call .)
    MULCREASE       reduce using rule 178 (call_action -> procedure_call .)
    DIVCREASE       reduce using rule 178 (call_action -> procedure_call .)
    MODCREASE       reduce using rule 178 (call_action -> procedure_call .)
    RPAREN          reduce using rule 178 (call_action -> procedure_call .)
    COMMA           reduce using rule 178 (call_action -> procedure_call .)
    RBRACKET        reduce using rule 178 (call_action -> procedure_call .)
    COLON           reduce using rule 178 (call_action -> procedure_call .)
    ID              reduce using rule 178 (call_action -> procedure_call .)
    BY              reduce using rule 178 (call_action -> procedure_call .)
    ELSE            reduce using rule 178 (call_action -> procedure_call .)
    ELSIF           reduce using rule 178 (call_action -> procedure_call .)
    FI              reduce using rule 178 (call_action -> procedure_call .)


state 9

    (8) statement -> action_statement .

    END             reduce using rule 8 (statement -> action_statement .)
    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    RETURN          reduce using rule 8 (statement -> action_statement .)
    RESULT          reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    DO              reduce using rule 8 (statement -> action_statement .)
    ABS             reduce using rule 8 (statement -> action_statement .)
    ASC             reduce using rule 8 (statement -> action_statement .)
    NUM             reduce using rule 8 (statement -> action_statement .)
    UPPER           reduce using rule 8 (statement -> action_statement .)
    LOWER           reduce using rule 8 (statement -> action_statement .)
    LENGTH          reduce using rule 8 (statement -> action_statement .)
    READ            reduce using rule 8 (statement -> action_statement .)
    PRINT           reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)


state 10

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (201) procedure_statement -> . label_id COLON procedure_definition SEMI
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (130) label_id -> . identifier
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 39
    SYN             shift and go to state 7
    TYPE            shift and go to state 3
    ID              shift and go to state 32
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 21
    synonym_statement              shift and go to state 22
    bracketed_action               shift and go to state 23
    statement                      shift and go to state 61
    identifier                     shift and go to state 2
    dereferenced_reference         shift and go to state 27
    procedure_statement            shift and go to state 5
    builtin_name                   shift and go to state 28
    declaration_statement          shift and go to state 26
    return_action                  shift and go to state 6
    procedure_call                 shift and go to state 8
    action                         shift and go to state 30
    builtin_call                   shift and go to state 29
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    exit_action                    shift and go to state 13
    newmode_statement              shift and go to state 25
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    do_action                      shift and go to state 41
    action_statement               shift and go to state 9
    label_id                       shift and go to state 43

state 11

    (198) builtin_name -> LENGTH .

    LPAREN          reduce using rule 198 (builtin_name -> LENGTH .)


state 12

    (189) result_action -> RESULT . result
    (190) result -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    integer_literal                shift and go to state 85
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    result                         shift and go to state 69
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 64
    conditional_expression         shift and go to state 96

state 13

    (134) action -> exit_action .

    SEMI            reduce using rule 134 (action -> exit_action .)


state 14

    (200) builtin_name -> PRINT .

    LPAREN          reduce using rule 200 (builtin_name -> PRINT .)


state 15

    (193) builtin_name -> ABS .

    LPAREN          reduce using rule 193 (builtin_name -> ABS .)


state 16

    (147) if_action -> IF . boolean_expression then_clause FI
    (148) if_action -> IF . boolean_expression then_clause else_clause FI
    (90) boolean_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    boolean_literal                shift and go to state 62
    identifier                     shift and go to state 65
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 98
    value_array_slice              shift and go to state 68
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    empty_literal                  shift and go to state 75
    array_location                 shift and go to state 33
    character_string_literal       shift and go to state 73
    operand2                       shift and go to state 74
    array_slice                    shift and go to state 18
    literal                        shift and go to state 77
    operand0                       shift and go to state 79
    character_literal              shift and go to state 80
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    builtin_name                   shift and go to state 28
    primitive_value                shift and go to state 87
    builtin_call                   shift and go to state 29
    operand3                       shift and go to state 90
    parenthesized_expression       shift and go to state 91
    array_element                  shift and go to state 34
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    value_array_element            shift and go to state 95
    expression                     shift and go to state 97
    conditional_expression         shift and go to state 96

state 17

    (0) S' -> program .



state 18

    (59) location -> array_slice .

    ARROW           reduce using rule 59 (location -> array_slice .)
    TIMES           reduce using rule 59 (location -> array_slice .)
    DIVIDE          reduce using rule 59 (location -> array_slice .)
    MOD             reduce using rule 59 (location -> array_slice .)
    PLUS            reduce using rule 59 (location -> array_slice .)
    MINUS           reduce using rule 59 (location -> array_slice .)
    STRCAT          reduce using rule 59 (location -> array_slice .)
    AND             reduce using rule 59 (location -> array_slice .)
    OR              reduce using rule 59 (location -> array_slice .)
    EQUAL           reduce using rule 59 (location -> array_slice .)
    DIFF            reduce using rule 59 (location -> array_slice .)
    GREATER         reduce using rule 59 (location -> array_slice .)
    GREATEREQ       reduce using rule 59 (location -> array_slice .)
    LESS            reduce using rule 59 (location -> array_slice .)
    LESSEQ          reduce using rule 59 (location -> array_slice .)
    IN              reduce using rule 59 (location -> array_slice .)
    THEN            reduce using rule 59 (location -> array_slice .)
    LBRACKET        reduce using rule 59 (location -> array_slice .)
    RBRACKET        reduce using rule 59 (location -> array_slice .)
    ASSIGN          reduce using rule 59 (location -> array_slice .)
    INCREASE        reduce using rule 59 (location -> array_slice .)
    DECREASE        reduce using rule 59 (location -> array_slice .)
    MULCREASE       reduce using rule 59 (location -> array_slice .)
    DIVCREASE       reduce using rule 59 (location -> array_slice .)
    MODCREASE       reduce using rule 59 (location -> array_slice .)
    SEMI            reduce using rule 59 (location -> array_slice .)
    ID              reduce using rule 59 (location -> array_slice .)
    TO              reduce using rule 59 (location -> array_slice .)
    DOWN            reduce using rule 59 (location -> array_slice .)
    BY              reduce using rule 59 (location -> array_slice .)
    RPAREN          reduce using rule 59 (location -> array_slice .)
    COMMA           reduce using rule 59 (location -> array_slice .)
    COLON           reduce using rule 59 (location -> array_slice .)
    ELSE            reduce using rule 59 (location -> array_slice .)
    ELSIF           reduce using rule 59 (location -> array_slice .)
    FI              reduce using rule 59 (location -> array_slice .)
    WHILE           reduce using rule 59 (location -> array_slice .)


state 19

    (136) action -> result_action .

    SEMI            reduce using rule 136 (action -> result_action .)


state 20

    (199) builtin_name -> READ .

    LPAREN          reduce using rule 199 (builtin_name -> READ .)


state 21

    (133) action -> call_action .
    (60) location -> call_action .

    SEMI            reduce using rule 133 (action -> call_action .)
    ARROW           reduce using rule 60 (location -> call_action .)
    ASSIGN          reduce using rule 60 (location -> call_action .)
    INCREASE        reduce using rule 60 (location -> call_action .)
    DECREASE        reduce using rule 60 (location -> call_action .)
    MULCREASE       reduce using rule 60 (location -> call_action .)
    DIVCREASE       reduce using rule 60 (location -> call_action .)
    MODCREASE       reduce using rule 60 (location -> call_action .)
    LBRACKET        reduce using rule 60 (location -> call_action .)


state 22

    (5) statement -> synonym_statement .

    END             reduce using rule 5 (statement -> synonym_statement .)
    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    TYPE            reduce using rule 5 (statement -> synonym_statement .)
    ID              reduce using rule 5 (statement -> synonym_statement .)
    EXIT            reduce using rule 5 (statement -> synonym_statement .)
    RETURN          reduce using rule 5 (statement -> synonym_statement .)
    RESULT          reduce using rule 5 (statement -> synonym_statement .)
    IF              reduce using rule 5 (statement -> synonym_statement .)
    DO              reduce using rule 5 (statement -> synonym_statement .)
    ABS             reduce using rule 5 (statement -> synonym_statement .)
    ASC             reduce using rule 5 (statement -> synonym_statement .)
    NUM             reduce using rule 5 (statement -> synonym_statement .)
    UPPER           reduce using rule 5 (statement -> synonym_statement .)
    LOWER           reduce using rule 5 (statement -> synonym_statement .)
    LENGTH          reduce using rule 5 (statement -> synonym_statement .)
    READ            reduce using rule 5 (statement -> synonym_statement .)
    PRINT           reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)


state 23

    (131) action -> bracketed_action .

    SEMI            reduce using rule 131 (action -> bracketed_action .)


state 24

    (2) statement_list -> statement .

    DCL             reduce using rule 2 (statement_list -> statement .)
    SYN             reduce using rule 2 (statement_list -> statement .)
    TYPE            reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    EXIT            reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    RESULT          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    DO              reduce using rule 2 (statement_list -> statement .)
    ABS             reduce using rule 2 (statement_list -> statement .)
    ASC             reduce using rule 2 (statement_list -> statement .)
    NUM             reduce using rule 2 (statement_list -> statement .)
    UPPER           reduce using rule 2 (statement_list -> statement .)
    LOWER           reduce using rule 2 (statement_list -> statement .)
    LENGTH          reduce using rule 2 (statement_list -> statement .)
    READ            reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    END             reduce using rule 2 (statement_list -> statement .)


state 25

    (6) statement -> newmode_statement .

    END             reduce using rule 6 (statement -> newmode_statement .)
    DCL             reduce using rule 6 (statement -> newmode_statement .)
    SYN             reduce using rule 6 (statement -> newmode_statement .)
    TYPE            reduce using rule 6 (statement -> newmode_statement .)
    ID              reduce using rule 6 (statement -> newmode_statement .)
    EXIT            reduce using rule 6 (statement -> newmode_statement .)
    RETURN          reduce using rule 6 (statement -> newmode_statement .)
    RESULT          reduce using rule 6 (statement -> newmode_statement .)
    IF              reduce using rule 6 (statement -> newmode_statement .)
    DO              reduce using rule 6 (statement -> newmode_statement .)
    ABS             reduce using rule 6 (statement -> newmode_statement .)
    ASC             reduce using rule 6 (statement -> newmode_statement .)
    NUM             reduce using rule 6 (statement -> newmode_statement .)
    UPPER           reduce using rule 6 (statement -> newmode_statement .)
    LOWER           reduce using rule 6 (statement -> newmode_statement .)
    LENGTH          reduce using rule 6 (statement -> newmode_statement .)
    READ            reduce using rule 6 (statement -> newmode_statement .)
    PRINT           reduce using rule 6 (statement -> newmode_statement .)
    $end            reduce using rule 6 (statement -> newmode_statement .)


state 26

    (4) statement -> declaration_statement .

    END             reduce using rule 4 (statement -> declaration_statement .)
    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    TYPE            reduce using rule 4 (statement -> declaration_statement .)
    ID              reduce using rule 4 (statement -> declaration_statement .)
    EXIT            reduce using rule 4 (statement -> declaration_statement .)
    RETURN          reduce using rule 4 (statement -> declaration_statement .)
    RESULT          reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    DO              reduce using rule 4 (statement -> declaration_statement .)
    ABS             reduce using rule 4 (statement -> declaration_statement .)
    ASC             reduce using rule 4 (statement -> declaration_statement .)
    NUM             reduce using rule 4 (statement -> declaration_statement .)
    UPPER           reduce using rule 4 (statement -> declaration_statement .)
    LOWER           reduce using rule 4 (statement -> declaration_statement .)
    LENGTH          reduce using rule 4 (statement -> declaration_statement .)
    READ            reduce using rule 4 (statement -> declaration_statement .)
    PRINT           reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)


state 27

    (57) location -> dereferenced_reference .

    ARROW           reduce using rule 57 (location -> dereferenced_reference .)
    TIMES           reduce using rule 57 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 57 (location -> dereferenced_reference .)
    MOD             reduce using rule 57 (location -> dereferenced_reference .)
    PLUS            reduce using rule 57 (location -> dereferenced_reference .)
    MINUS           reduce using rule 57 (location -> dereferenced_reference .)
    STRCAT          reduce using rule 57 (location -> dereferenced_reference .)
    AND             reduce using rule 57 (location -> dereferenced_reference .)
    OR              reduce using rule 57 (location -> dereferenced_reference .)
    EQUAL           reduce using rule 57 (location -> dereferenced_reference .)
    DIFF            reduce using rule 57 (location -> dereferenced_reference .)
    GREATER         reduce using rule 57 (location -> dereferenced_reference .)
    GREATEREQ       reduce using rule 57 (location -> dereferenced_reference .)
    LESS            reduce using rule 57 (location -> dereferenced_reference .)
    LESSEQ          reduce using rule 57 (location -> dereferenced_reference .)
    IN              reduce using rule 57 (location -> dereferenced_reference .)
    THEN            reduce using rule 57 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 57 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 57 (location -> dereferenced_reference .)
    ASSIGN          reduce using rule 57 (location -> dereferenced_reference .)
    INCREASE        reduce using rule 57 (location -> dereferenced_reference .)
    DECREASE        reduce using rule 57 (location -> dereferenced_reference .)
    MULCREASE       reduce using rule 57 (location -> dereferenced_reference .)
    DIVCREASE       reduce using rule 57 (location -> dereferenced_reference .)
    MODCREASE       reduce using rule 57 (location -> dereferenced_reference .)
    SEMI            reduce using rule 57 (location -> dereferenced_reference .)
    ID              reduce using rule 57 (location -> dereferenced_reference .)
    TO              reduce using rule 57 (location -> dereferenced_reference .)
    DOWN            reduce using rule 57 (location -> dereferenced_reference .)
    BY              reduce using rule 57 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 57 (location -> dereferenced_reference .)
    COMMA           reduce using rule 57 (location -> dereferenced_reference .)
    COLON           reduce using rule 57 (location -> dereferenced_reference .)
    ELSE            reduce using rule 57 (location -> dereferenced_reference .)
    ELSIF           reduce using rule 57 (location -> dereferenced_reference .)
    FI              reduce using rule 57 (location -> dereferenced_reference .)
    WHILE           reduce using rule 57 (location -> dereferenced_reference .)


state 28

    (191) builtin_call -> builtin_name . LPAREN RPAREN
    (192) builtin_call -> builtin_name . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 99


state 29

    (179) call_action -> builtin_call .

    ARROW           reduce using rule 179 (call_action -> builtin_call .)
    TIMES           reduce using rule 179 (call_action -> builtin_call .)
    DIVIDE          reduce using rule 179 (call_action -> builtin_call .)
    MOD             reduce using rule 179 (call_action -> builtin_call .)
    PLUS            reduce using rule 179 (call_action -> builtin_call .)
    MINUS           reduce using rule 179 (call_action -> builtin_call .)
    STRCAT          reduce using rule 179 (call_action -> builtin_call .)
    AND             reduce using rule 179 (call_action -> builtin_call .)
    OR              reduce using rule 179 (call_action -> builtin_call .)
    EQUAL           reduce using rule 179 (call_action -> builtin_call .)
    DIFF            reduce using rule 179 (call_action -> builtin_call .)
    GREATER         reduce using rule 179 (call_action -> builtin_call .)
    GREATEREQ       reduce using rule 179 (call_action -> builtin_call .)
    LESS            reduce using rule 179 (call_action -> builtin_call .)
    LESSEQ          reduce using rule 179 (call_action -> builtin_call .)
    IN              reduce using rule 179 (call_action -> builtin_call .)
    SEMI            reduce using rule 179 (call_action -> builtin_call .)
    LBRACKET        reduce using rule 179 (call_action -> builtin_call .)
    THEN            reduce using rule 179 (call_action -> builtin_call .)
    TO              reduce using rule 179 (call_action -> builtin_call .)
    DOWN            reduce using rule 179 (call_action -> builtin_call .)
    WHILE           reduce using rule 179 (call_action -> builtin_call .)
    ASSIGN          reduce using rule 179 (call_action -> builtin_call .)
    INCREASE        reduce using rule 179 (call_action -> builtin_call .)
    DECREASE        reduce using rule 179 (call_action -> builtin_call .)
    MULCREASE       reduce using rule 179 (call_action -> builtin_call .)
    DIVCREASE       reduce using rule 179 (call_action -> builtin_call .)
    MODCREASE       reduce using rule 179 (call_action -> builtin_call .)
    RPAREN          reduce using rule 179 (call_action -> builtin_call .)
    COMMA           reduce using rule 179 (call_action -> builtin_call .)
    RBRACKET        reduce using rule 179 (call_action -> builtin_call .)
    COLON           reduce using rule 179 (call_action -> builtin_call .)
    ID              reduce using rule 179 (call_action -> builtin_call .)
    BY              reduce using rule 179 (call_action -> builtin_call .)
    ELSE            reduce using rule 179 (call_action -> builtin_call .)
    ELSIF           reduce using rule 179 (call_action -> builtin_call .)
    FI              reduce using rule 179 (call_action -> builtin_call .)


state 30

    (128) action_statement -> action . SEMI

    SEMI            shift and go to state 100


state 31

    (187) return_action -> RETURN .
    (188) return_action -> RETURN . result
    (190) result -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    SEMI            reduce using rule 187 (return_action -> RETURN .)
    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    integer_literal                shift and go to state 85
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    result                         shift and go to state 101
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 64
    conditional_expression         shift and go to state 96

state 32

    (17) identifier -> ID .

    LPAREN          reduce using rule 17 (identifier -> ID .)
    ARROW           reduce using rule 17 (identifier -> ID .)
    TIMES           reduce using rule 17 (identifier -> ID .)
    DIVIDE          reduce using rule 17 (identifier -> ID .)
    MOD             reduce using rule 17 (identifier -> ID .)
    PLUS            reduce using rule 17 (identifier -> ID .)
    MINUS           reduce using rule 17 (identifier -> ID .)
    STRCAT          reduce using rule 17 (identifier -> ID .)
    AND             reduce using rule 17 (identifier -> ID .)
    OR              reduce using rule 17 (identifier -> ID .)
    EQUAL           reduce using rule 17 (identifier -> ID .)
    DIFF            reduce using rule 17 (identifier -> ID .)
    GREATER         reduce using rule 17 (identifier -> ID .)
    GREATEREQ       reduce using rule 17 (identifier -> ID .)
    LESS            reduce using rule 17 (identifier -> ID .)
    LESSEQ          reduce using rule 17 (identifier -> ID .)
    IN              reduce using rule 17 (identifier -> ID .)
    RBRACKET        reduce using rule 17 (identifier -> ID .)
    LBRACKET        reduce using rule 17 (identifier -> ID .)
    ASSIGN          reduce using rule 17 (identifier -> ID .)
    COMMA           reduce using rule 17 (identifier -> ID .)
    REF             reduce using rule 17 (identifier -> ID .)
    ID              reduce using rule 17 (identifier -> ID .)
    INT             reduce using rule 17 (identifier -> ID .)
    BOOL            reduce using rule 17 (identifier -> ID .)
    CHAR            reduce using rule 17 (identifier -> ID .)
    CHARS           reduce using rule 17 (identifier -> ID .)
    ARRAY           reduce using rule 17 (identifier -> ID .)
    WHILE           reduce using rule 17 (identifier -> ID .)
    SEMI            reduce using rule 17 (identifier -> ID .)
    THEN            reduce using rule 17 (identifier -> ID .)
    RPAREN          reduce using rule 17 (identifier -> ID .)
    COLON           reduce using rule 17 (identifier -> ID .)
    TO              reduce using rule 17 (identifier -> ID .)
    DOWN            reduce using rule 17 (identifier -> ID .)
    BY              reduce using rule 17 (identifier -> ID .)
    ELSE            reduce using rule 17 (identifier -> ID .)
    ELSIF           reduce using rule 17 (identifier -> ID .)
    FI              reduce using rule 17 (identifier -> ID .)
    INCREASE        reduce using rule 17 (identifier -> ID .)
    DECREASE        reduce using rule 17 (identifier -> ID .)
    MULCREASE       reduce using rule 17 (identifier -> ID .)
    DIVCREASE       reduce using rule 17 (identifier -> ID .)
    MODCREASE       reduce using rule 17 (identifier -> ID .)
    LOC             reduce using rule 17 (identifier -> ID .)


state 33

    (62) array_element -> array_location . LBRACKET expression_list RBRACKET
    (65) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

    LBRACKET        shift and go to state 102


state 34

    (58) location -> array_element .

    ARROW           reduce using rule 58 (location -> array_element .)
    TIMES           reduce using rule 58 (location -> array_element .)
    DIVIDE          reduce using rule 58 (location -> array_element .)
    MOD             reduce using rule 58 (location -> array_element .)
    PLUS            reduce using rule 58 (location -> array_element .)
    MINUS           reduce using rule 58 (location -> array_element .)
    STRCAT          reduce using rule 58 (location -> array_element .)
    AND             reduce using rule 58 (location -> array_element .)
    OR              reduce using rule 58 (location -> array_element .)
    EQUAL           reduce using rule 58 (location -> array_element .)
    DIFF            reduce using rule 58 (location -> array_element .)
    GREATER         reduce using rule 58 (location -> array_element .)
    GREATEREQ       reduce using rule 58 (location -> array_element .)
    LESS            reduce using rule 58 (location -> array_element .)
    LESSEQ          reduce using rule 58 (location -> array_element .)
    IN              reduce using rule 58 (location -> array_element .)
    THEN            reduce using rule 58 (location -> array_element .)
    LBRACKET        reduce using rule 58 (location -> array_element .)
    RBRACKET        reduce using rule 58 (location -> array_element .)
    ASSIGN          reduce using rule 58 (location -> array_element .)
    INCREASE        reduce using rule 58 (location -> array_element .)
    DECREASE        reduce using rule 58 (location -> array_element .)
    MULCREASE       reduce using rule 58 (location -> array_element .)
    DIVCREASE       reduce using rule 58 (location -> array_element .)
    MODCREASE       reduce using rule 58 (location -> array_element .)
    SEMI            reduce using rule 58 (location -> array_element .)
    ID              reduce using rule 58 (location -> array_element .)
    TO              reduce using rule 58 (location -> array_element .)
    DOWN            reduce using rule 58 (location -> array_element .)
    BY              reduce using rule 58 (location -> array_element .)
    RPAREN          reduce using rule 58 (location -> array_element .)
    COMMA           reduce using rule 58 (location -> array_element .)
    COLON           reduce using rule 58 (location -> array_element .)
    ELSE            reduce using rule 58 (location -> array_element .)
    ELSIF           reduce using rule 58 (location -> array_element .)
    FI              reduce using rule 58 (location -> array_element .)
    WHILE           reduce using rule 58 (location -> array_element .)


state 35

    (139) assignment_action -> location . assigning_operator expression
    (61) dereferenced_reference -> location . ARROW
    (66) array_location -> location .
    (140) assigning_operator -> . ASSIGN
    (141) assigning_operator -> . closed_dyadic_operator
    (142) closed_dyadic_operator -> . INCREASE
    (143) closed_dyadic_operator -> . DECREASE
    (144) closed_dyadic_operator -> . MULCREASE
    (145) closed_dyadic_operator -> . DIVCREASE
    (146) closed_dyadic_operator -> . MODCREASE

    ARROW           shift and go to state 109
    LBRACKET        reduce using rule 66 (array_location -> location .)
    ASSIGN          shift and go to state 111
    INCREASE        shift and go to state 110
    DECREASE        shift and go to state 106
    MULCREASE       shift and go to state 108
    DIVCREASE       shift and go to state 105
    MODCREASE       shift and go to state 103

    closed_dyadic_operator         shift and go to state 107
    assigning_operator             shift and go to state 104

state 36

    (132) action -> assignment_action .

    SEMI            reduce using rule 132 (action -> assignment_action .)


state 37

    (137) bracketed_action -> if_action .

    SEMI            reduce using rule 137 (bracketed_action -> if_action .)


state 38

    (194) builtin_name -> ASC .

    LPAREN          reduce using rule 194 (builtin_name -> ASC .)


state 39

    (9) declaration_statement -> DCL . declaration_list SEMI
    (10) declaration_list -> . declaration
    (11) declaration_list -> . declaration_list COMMA declaration
    (12) declaration -> . identifier_list mode
    (13) declaration -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 32

    declaration                    shift and go to state 112
    identifier                     shift and go to state 56
    declaration_list               shift and go to state 113
    identifier_list                shift and go to state 114

state 40

    (197) builtin_name -> LOWER .

    LPAREN          reduce using rule 197 (builtin_name -> LOWER .)


state 41

    (138) bracketed_action -> do_action .

    SEMI            reduce using rule 138 (bracketed_action -> do_action .)


state 42

    (185) exit_action -> EXIT . exit_label_id
    (186) exit_label_id -> . identifier
    (17) identifier -> . ID

    ID              shift and go to state 32

    identifier                     shift and go to state 115
    exit_label_id                  shift and go to state 116

state 43

    (201) procedure_statement -> label_id . COLON procedure_definition SEMI
    (129) action_statement -> label_id . COLON action SEMI

    COLON           shift and go to state 117


state 44

    (195) builtin_name -> NUM .

    LPAREN          reduce using rule 195 (builtin_name -> NUM .)


state 45

    (177) while_control -> WHILE . boolean_expression
    (90) boolean_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 118
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 97
    conditional_expression         shift and go to state 96

state 46

    (157) do_action -> DO OD .

    SEMI            reduce using rule 157 (do_action -> DO OD .)


state 47

    (158) do_action -> DO control_part . SEMI OD
    (160) do_action -> DO control_part . SEMI action_statement_list OD

    SEMI            shift and go to state 119


state 48

    (162) control_part -> FOR . for_control
    (163) control_part -> FOR . for_control while_control
    (164) for_control -> . iteration
    (165) iteration -> . step_enumeration
    (166) iteration -> . range_enumeration
    (167) step_enumeration -> . loop_counter ASSIGN start_value end_value
    (168) step_enumeration -> . loop_counter ASSIGN start_value step_value end_value
    (175) range_enumeration -> . loop_counter IN discrete_mode
    (176) range_enumeration -> . loop_counter DOWN IN discrete_mode
    (169) loop_counter -> . identifier
    (17) identifier -> . ID

    ID              shift and go to state 32

    for_control                    shift and go to state 123
    step_enumeration               shift and go to state 120
    identifier                     shift and go to state 121
    iteration                      shift and go to state 124
    range_enumeration              shift and go to state 122
    loop_counter                   shift and go to state 125

state 49

    (151) action_statement_list -> action_statement .

    EXIT            reduce using rule 151 (action_statement_list -> action_statement .)
    RETURN          reduce using rule 151 (action_statement_list -> action_statement .)
    RESULT          reduce using rule 151 (action_statement_list -> action_statement .)
    ID              reduce using rule 151 (action_statement_list -> action_statement .)
    IF              reduce using rule 151 (action_statement_list -> action_statement .)
    DO              reduce using rule 151 (action_statement_list -> action_statement .)
    ABS             reduce using rule 151 (action_statement_list -> action_statement .)
    ASC             reduce using rule 151 (action_statement_list -> action_statement .)
    NUM             reduce using rule 151 (action_statement_list -> action_statement .)
    UPPER           reduce using rule 151 (action_statement_list -> action_statement .)
    LOWER           reduce using rule 151 (action_statement_list -> action_statement .)
    LENGTH          reduce using rule 151 (action_statement_list -> action_statement .)
    READ            reduce using rule 151 (action_statement_list -> action_statement .)
    PRINT           reduce using rule 151 (action_statement_list -> action_statement .)
    FI              reduce using rule 151 (action_statement_list -> action_statement .)
    ELSE            reduce using rule 151 (action_statement_list -> action_statement .)
    ELSIF           reduce using rule 151 (action_statement_list -> action_statement .)
    OD              reduce using rule 151 (action_statement_list -> action_statement .)


state 50

    (159) do_action -> DO action_statement_list . OD
    (152) action_statement_list -> action_statement_list . action_statement
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (130) label_id -> . identifier
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (17) identifier -> . ID
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    OD              shift and go to state 126
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    ID              shift and go to state 32
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 21
    bracketed_action               shift and go to state 23
    identifier                     shift and go to state 2
    action_statement               shift and go to state 127
    dereferenced_reference         shift and go to state 27
    return_action                  shift and go to state 6
    builtin_name                   shift and go to state 28
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    action                         shift and go to state 30
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    exit_action                    shift and go to state 13
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    do_action                      shift and go to state 41
    label_id                       shift and go to state 52

state 51

    (161) control_part -> while_control .

    SEMI            reduce using rule 161 (control_part -> while_control .)


state 52

    (129) action_statement -> label_id . COLON action SEMI

    COLON           shift and go to state 128


state 53

    (180) procedure_call -> identifier LPAREN . RPAREN
    (181) procedure_call -> identifier LPAREN . parameter_list RPAREN
    (182) parameter_list -> . parameter
    (183) parameter_list -> . parameter_list COMMA parameter
    (184) parameter -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    RPAREN          shift and go to state 132
    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    parameter                      shift and go to state 130
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    parameter_list                 shift and go to state 131
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 129
    conditional_expression         shift and go to state 96

state 54

    (24) newmode_statement -> TYPE newmode_list . SEMI
    (26) newmode_list -> newmode_list . COMMA mode_definition

    SEMI            shift and go to state 133
    COMMA           shift and go to state 134


state 55

    (25) newmode_list -> mode_definition .

    SEMI            reduce using rule 25 (newmode_list -> mode_definition .)
    COMMA           reduce using rule 25 (newmode_list -> mode_definition .)


state 56

    (15) identifier_list -> identifier .

    ASSIGN          reduce using rule 15 (identifier_list -> identifier .)
    COMMA           reduce using rule 15 (identifier_list -> identifier .)
    REF             reduce using rule 15 (identifier_list -> identifier .)
    ID              reduce using rule 15 (identifier_list -> identifier .)
    INT             reduce using rule 15 (identifier_list -> identifier .)
    BOOL            reduce using rule 15 (identifier_list -> identifier .)
    CHAR            reduce using rule 15 (identifier_list -> identifier .)
    CHARS           reduce using rule 15 (identifier_list -> identifier .)
    ARRAY           reduce using rule 15 (identifier_list -> identifier .)


state 57

    (27) mode_definition -> identifier_list . ASSIGN mode
    (16) identifier_list -> identifier_list . COMMA identifier

    ASSIGN          shift and go to state 136
    COMMA           shift and go to state 135


state 58

    (18) synonym_statement -> SYN synonym_list . SEMI
    (20) synonym_list -> synonym_list . synonym_definition
    (21) synonym_definition -> . identifier_list ASSIGN constant_expression
    (22) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    SEMI            shift and go to state 138
    ID              shift and go to state 32

    identifier                     shift and go to state 56
    synonym_definition             shift and go to state 137
    identifier_list                shift and go to state 60

state 59

    (19) synonym_list -> synonym_definition .

    SEMI            reduce using rule 19 (synonym_list -> synonym_definition .)
    ID              reduce using rule 19 (synonym_list -> synonym_definition .)


state 60

    (21) synonym_definition -> identifier_list . ASSIGN constant_expression
    (22) synonym_definition -> identifier_list . mode ASSIGN constant_expression
    (16) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (45) reference_mode -> . REF mode
    (46) composite_mode -> . string_mode
    (47) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (48) string_mode -> . CHARS LBRACKET ICONST RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    ASSIGN          shift and go to state 152
    COMMA           shift and go to state 135
    REF             shift and go to state 153
    ID              shift and go to state 32
    INT             shift and go to state 142
    BOOL            shift and go to state 155
    CHAR            shift and go to state 149
    CHARS           shift and go to state 156
    ARRAY           shift and go to state 157

    character_mode                 shift and go to state 147
    integer_mode                   shift and go to state 139
    reference_mode                 shift and go to state 140
    identifier                     shift and go to state 141
    mode_name                      shift and go to state 154
    string_mode                    shift and go to state 148
    composite_mode                 shift and go to state 150
    array_mode                     shift and go to state 151
    discrete_mode                  shift and go to state 143
    mode                           shift and go to state 144
    discrete_range_mode            shift and go to state 145
    boolean_mode                   shift and go to state 146

state 61

    (3) statement_list -> statement_list statement .

    DCL             reduce using rule 3 (statement_list -> statement_list statement .)
    SYN             reduce using rule 3 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    EXIT            reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    RESULT          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    DO              reduce using rule 3 (statement_list -> statement_list statement .)
    ABS             reduce using rule 3 (statement_list -> statement_list statement .)
    ASC             reduce using rule 3 (statement_list -> statement_list statement .)
    NUM             reduce using rule 3 (statement_list -> statement_list statement .)
    UPPER           reduce using rule 3 (statement_list -> statement_list statement .)
    LOWER           reduce using rule 3 (statement_list -> statement_list statement .)
    LENGTH          reduce using rule 3 (statement_list -> statement_list statement .)
    READ            reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    END             reduce using rule 3 (statement_list -> statement_list statement .)


state 62

    (72) literal -> boolean_literal .

    TIMES           reduce using rule 72 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 72 (literal -> boolean_literal .)
    MOD             reduce using rule 72 (literal -> boolean_literal .)
    PLUS            reduce using rule 72 (literal -> boolean_literal .)
    MINUS           reduce using rule 72 (literal -> boolean_literal .)
    STRCAT          reduce using rule 72 (literal -> boolean_literal .)
    AND             reduce using rule 72 (literal -> boolean_literal .)
    OR              reduce using rule 72 (literal -> boolean_literal .)
    EQUAL           reduce using rule 72 (literal -> boolean_literal .)
    DIFF            reduce using rule 72 (literal -> boolean_literal .)
    GREATER         reduce using rule 72 (literal -> boolean_literal .)
    GREATEREQ       reduce using rule 72 (literal -> boolean_literal .)
    LESS            reduce using rule 72 (literal -> boolean_literal .)
    LESSEQ          reduce using rule 72 (literal -> boolean_literal .)
    IN              reduce using rule 72 (literal -> boolean_literal .)
    SEMI            reduce using rule 72 (literal -> boolean_literal .)
    LBRACKET        reduce using rule 72 (literal -> boolean_literal .)
    THEN            reduce using rule 72 (literal -> boolean_literal .)
    TO              reduce using rule 72 (literal -> boolean_literal .)
    DOWN            reduce using rule 72 (literal -> boolean_literal .)
    WHILE           reduce using rule 72 (literal -> boolean_literal .)
    COLON           reduce using rule 72 (literal -> boolean_literal .)
    RPAREN          reduce using rule 72 (literal -> boolean_literal .)
    COMMA           reduce using rule 72 (literal -> boolean_literal .)
    ID              reduce using rule 72 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 72 (literal -> boolean_literal .)
    FI              reduce using rule 72 (literal -> boolean_literal .)
    BY              reduce using rule 72 (literal -> boolean_literal .)
    ELSE            reduce using rule 72 (literal -> boolean_literal .)
    ELSIF           reduce using rule 72 (literal -> boolean_literal .)


state 63

    (127) referenced_location -> ARROW . location
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    ID              shift and go to state 32
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 93
    dereferenced_reference         shift and go to state 27
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    identifier                     shift and go to state 65
    location                       shift and go to state 158
    builtin_name                   shift and go to state 28
    array_slice                    shift and go to state 18
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29

state 64

    (190) result -> expression .

    SEMI            reduce using rule 190 (result -> expression .)


state 65

    (56) location -> identifier .
    (180) procedure_call -> identifier . LPAREN RPAREN
    (181) procedure_call -> identifier . LPAREN parameter_list RPAREN

    ARROW           reduce using rule 56 (location -> identifier .)
    TIMES           reduce using rule 56 (location -> identifier .)
    DIVIDE          reduce using rule 56 (location -> identifier .)
    MOD             reduce using rule 56 (location -> identifier .)
    PLUS            reduce using rule 56 (location -> identifier .)
    MINUS           reduce using rule 56 (location -> identifier .)
    STRCAT          reduce using rule 56 (location -> identifier .)
    AND             reduce using rule 56 (location -> identifier .)
    OR              reduce using rule 56 (location -> identifier .)
    EQUAL           reduce using rule 56 (location -> identifier .)
    DIFF            reduce using rule 56 (location -> identifier .)
    GREATER         reduce using rule 56 (location -> identifier .)
    GREATEREQ       reduce using rule 56 (location -> identifier .)
    LESS            reduce using rule 56 (location -> identifier .)
    LESSEQ          reduce using rule 56 (location -> identifier .)
    IN              reduce using rule 56 (location -> identifier .)
    THEN            reduce using rule 56 (location -> identifier .)
    LBRACKET        reduce using rule 56 (location -> identifier .)
    RBRACKET        reduce using rule 56 (location -> identifier .)
    SEMI            reduce using rule 56 (location -> identifier .)
    ID              reduce using rule 56 (location -> identifier .)
    TO              reduce using rule 56 (location -> identifier .)
    DOWN            reduce using rule 56 (location -> identifier .)
    BY              reduce using rule 56 (location -> identifier .)
    RPAREN          reduce using rule 56 (location -> identifier .)
    COMMA           reduce using rule 56 (location -> identifier .)
    COLON           reduce using rule 56 (location -> identifier .)
    ELSE            reduce using rule 56 (location -> identifier .)
    ELSIF           reduce using rule 56 (location -> identifier .)
    FI              reduce using rule 56 (location -> identifier .)
    WHILE           reduce using rule 56 (location -> identifier .)
    ASSIGN          reduce using rule 56 (location -> identifier .)
    INCREASE        reduce using rule 56 (location -> identifier .)
    DECREASE        reduce using rule 56 (location -> identifier .)
    MULCREASE       reduce using rule 56 (location -> identifier .)
    DIVCREASE       reduce using rule 56 (location -> identifier .)
    MODCREASE       reduce using rule 56 (location -> identifier .)
    LPAREN          shift and go to state 53


state 66

    (125) operand4 -> referenced_location .

    TIMES           reduce using rule 125 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 125 (operand4 -> referenced_location .)
    MOD             reduce using rule 125 (operand4 -> referenced_location .)
    PLUS            reduce using rule 125 (operand4 -> referenced_location .)
    MINUS           reduce using rule 125 (operand4 -> referenced_location .)
    STRCAT          reduce using rule 125 (operand4 -> referenced_location .)
    AND             reduce using rule 125 (operand4 -> referenced_location .)
    OR              reduce using rule 125 (operand4 -> referenced_location .)
    EQUAL           reduce using rule 125 (operand4 -> referenced_location .)
    DIFF            reduce using rule 125 (operand4 -> referenced_location .)
    GREATER         reduce using rule 125 (operand4 -> referenced_location .)
    GREATEREQ       reduce using rule 125 (operand4 -> referenced_location .)
    LESS            reduce using rule 125 (operand4 -> referenced_location .)
    LESSEQ          reduce using rule 125 (operand4 -> referenced_location .)
    IN              reduce using rule 125 (operand4 -> referenced_location .)
    SEMI            reduce using rule 125 (operand4 -> referenced_location .)
    COLON           reduce using rule 125 (operand4 -> referenced_location .)
    TO              reduce using rule 125 (operand4 -> referenced_location .)
    DOWN            reduce using rule 125 (operand4 -> referenced_location .)
    BY              reduce using rule 125 (operand4 -> referenced_location .)
    THEN            reduce using rule 125 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 125 (operand4 -> referenced_location .)
    COMMA           reduce using rule 125 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 125 (operand4 -> referenced_location .)
    ID              reduce using rule 125 (operand4 -> referenced_location .)
    ELSE            reduce using rule 125 (operand4 -> referenced_location .)
    ELSIF           reduce using rule 125 (operand4 -> referenced_location .)
    FI              reduce using rule 125 (operand4 -> referenced_location .)
    WHILE           reduce using rule 125 (operand4 -> referenced_location .)


state 67

    (81) character_string_literal -> SCONST .

    TIMES           reduce using rule 81 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 81 (character_string_literal -> SCONST .)
    MOD             reduce using rule 81 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 81 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 81 (character_string_literal -> SCONST .)
    STRCAT          reduce using rule 81 (character_string_literal -> SCONST .)
    AND             reduce using rule 81 (character_string_literal -> SCONST .)
    OR              reduce using rule 81 (character_string_literal -> SCONST .)
    EQUAL           reduce using rule 81 (character_string_literal -> SCONST .)
    DIFF            reduce using rule 81 (character_string_literal -> SCONST .)
    GREATER         reduce using rule 81 (character_string_literal -> SCONST .)
    GREATEREQ       reduce using rule 81 (character_string_literal -> SCONST .)
    LESS            reduce using rule 81 (character_string_literal -> SCONST .)
    LESSEQ          reduce using rule 81 (character_string_literal -> SCONST .)
    IN              reduce using rule 81 (character_string_literal -> SCONST .)
    COLON           reduce using rule 81 (character_string_literal -> SCONST .)
    LBRACKET        reduce using rule 81 (character_string_literal -> SCONST .)
    TO              reduce using rule 81 (character_string_literal -> SCONST .)
    DOWN            reduce using rule 81 (character_string_literal -> SCONST .)
    BY              reduce using rule 81 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 81 (character_string_literal -> SCONST .)
    ID              reduce using rule 81 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 81 (character_string_literal -> SCONST .)
    THEN            reduce using rule 81 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 81 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 81 (character_string_literal -> SCONST .)
    ELSE            reduce using rule 81 (character_string_literal -> SCONST .)
    ELSIF           reduce using rule 81 (character_string_literal -> SCONST .)
    FI              reduce using rule 81 (character_string_literal -> SCONST .)
    WHILE           reduce using rule 81 (character_string_literal -> SCONST .)


state 68

    (69) primitive_value -> value_array_slice .

    TIMES           reduce using rule 69 (primitive_value -> value_array_slice .)
    DIVIDE          reduce using rule 69 (primitive_value -> value_array_slice .)
    MOD             reduce using rule 69 (primitive_value -> value_array_slice .)
    PLUS            reduce using rule 69 (primitive_value -> value_array_slice .)
    MINUS           reduce using rule 69 (primitive_value -> value_array_slice .)
    STRCAT          reduce using rule 69 (primitive_value -> value_array_slice .)
    AND             reduce using rule 69 (primitive_value -> value_array_slice .)
    OR              reduce using rule 69 (primitive_value -> value_array_slice .)
    EQUAL           reduce using rule 69 (primitive_value -> value_array_slice .)
    DIFF            reduce using rule 69 (primitive_value -> value_array_slice .)
    GREATER         reduce using rule 69 (primitive_value -> value_array_slice .)
    GREATEREQ       reduce using rule 69 (primitive_value -> value_array_slice .)
    LESS            reduce using rule 69 (primitive_value -> value_array_slice .)
    LESSEQ          reduce using rule 69 (primitive_value -> value_array_slice .)
    IN              reduce using rule 69 (primitive_value -> value_array_slice .)
    RPAREN          reduce using rule 69 (primitive_value -> value_array_slice .)
    COMMA           reduce using rule 69 (primitive_value -> value_array_slice .)
    LBRACKET        reduce using rule 69 (primitive_value -> value_array_slice .)
    RBRACKET        reduce using rule 69 (primitive_value -> value_array_slice .)
    SEMI            reduce using rule 69 (primitive_value -> value_array_slice .)
    ID              reduce using rule 69 (primitive_value -> value_array_slice .)
    COLON           reduce using rule 69 (primitive_value -> value_array_slice .)
    TO              reduce using rule 69 (primitive_value -> value_array_slice .)
    DOWN            reduce using rule 69 (primitive_value -> value_array_slice .)
    THEN            reduce using rule 69 (primitive_value -> value_array_slice .)
    FI              reduce using rule 69 (primitive_value -> value_array_slice .)
    BY              reduce using rule 69 (primitive_value -> value_array_slice .)
    ELSE            reduce using rule 69 (primitive_value -> value_array_slice .)
    ELSIF           reduce using rule 69 (primitive_value -> value_array_slice .)
    WHILE           reduce using rule 69 (primitive_value -> value_array_slice .)


state 69

    (189) result_action -> RESULT result .

    SEMI            reduce using rule 189 (result_action -> RESULT result .)


state 70

    (77) boolean_literal -> FALSE .

    TIMES           reduce using rule 77 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 77 (boolean_literal -> FALSE .)
    MOD             reduce using rule 77 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 77 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 77 (boolean_literal -> FALSE .)
    STRCAT          reduce using rule 77 (boolean_literal -> FALSE .)
    AND             reduce using rule 77 (boolean_literal -> FALSE .)
    OR              reduce using rule 77 (boolean_literal -> FALSE .)
    EQUAL           reduce using rule 77 (boolean_literal -> FALSE .)
    DIFF            reduce using rule 77 (boolean_literal -> FALSE .)
    GREATER         reduce using rule 77 (boolean_literal -> FALSE .)
    GREATEREQ       reduce using rule 77 (boolean_literal -> FALSE .)
    LESS            reduce using rule 77 (boolean_literal -> FALSE .)
    LESSEQ          reduce using rule 77 (boolean_literal -> FALSE .)
    IN              reduce using rule 77 (boolean_literal -> FALSE .)
    TO              reduce using rule 77 (boolean_literal -> FALSE .)
    DOWN            reduce using rule 77 (boolean_literal -> FALSE .)
    LBRACKET        reduce using rule 77 (boolean_literal -> FALSE .)
    COLON           reduce using rule 77 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 77 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 77 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 77 (boolean_literal -> FALSE .)
    THEN            reduce using rule 77 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 77 (boolean_literal -> FALSE .)
    ID              reduce using rule 77 (boolean_literal -> FALSE .)
    BY              reduce using rule 77 (boolean_literal -> FALSE .)
    ELSE            reduce using rule 77 (boolean_literal -> FALSE .)
    ELSIF           reduce using rule 77 (boolean_literal -> FALSE .)
    FI              reduce using rule 77 (boolean_literal -> FALSE .)
    WHILE           reduce using rule 77 (boolean_literal -> FALSE .)


state 71

    (88) conditional_expression -> IF . boolean_expression then_expression else_expression FI
    (89) conditional_expression -> IF . boolean_expression then_expression elsif_expression else_expression FI
    (90) boolean_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 159
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 97
    conditional_expression         shift and go to state 96

state 72

    (122) monadic_operator -> MINUS .

    ARROW           reduce using rule 122 (monadic_operator -> MINUS .)
    ID              reduce using rule 122 (monadic_operator -> MINUS .)
    LPAREN          reduce using rule 122 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 122 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 122 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 122 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 122 (monadic_operator -> MINUS .)
    NULL            reduce using rule 122 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 122 (monadic_operator -> MINUS .)
    ABS             reduce using rule 122 (monadic_operator -> MINUS .)
    ASC             reduce using rule 122 (monadic_operator -> MINUS .)
    NUM             reduce using rule 122 (monadic_operator -> MINUS .)
    UPPER           reduce using rule 122 (monadic_operator -> MINUS .)
    LOWER           reduce using rule 122 (monadic_operator -> MINUS .)
    LENGTH          reduce using rule 122 (monadic_operator -> MINUS .)
    READ            reduce using rule 122 (monadic_operator -> MINUS .)
    PRINT           reduce using rule 122 (monadic_operator -> MINUS .)


state 73

    (75) literal -> character_string_literal .

    TIMES           reduce using rule 75 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 75 (literal -> character_string_literal .)
    MOD             reduce using rule 75 (literal -> character_string_literal .)
    PLUS            reduce using rule 75 (literal -> character_string_literal .)
    MINUS           reduce using rule 75 (literal -> character_string_literal .)
    STRCAT          reduce using rule 75 (literal -> character_string_literal .)
    AND             reduce using rule 75 (literal -> character_string_literal .)
    OR              reduce using rule 75 (literal -> character_string_literal .)
    EQUAL           reduce using rule 75 (literal -> character_string_literal .)
    DIFF            reduce using rule 75 (literal -> character_string_literal .)
    GREATER         reduce using rule 75 (literal -> character_string_literal .)
    GREATEREQ       reduce using rule 75 (literal -> character_string_literal .)
    LESS            reduce using rule 75 (literal -> character_string_literal .)
    LESSEQ          reduce using rule 75 (literal -> character_string_literal .)
    IN              reduce using rule 75 (literal -> character_string_literal .)
    SEMI            reduce using rule 75 (literal -> character_string_literal .)
    LBRACKET        reduce using rule 75 (literal -> character_string_literal .)
    THEN            reduce using rule 75 (literal -> character_string_literal .)
    TO              reduce using rule 75 (literal -> character_string_literal .)
    DOWN            reduce using rule 75 (literal -> character_string_literal .)
    WHILE           reduce using rule 75 (literal -> character_string_literal .)
    COLON           reduce using rule 75 (literal -> character_string_literal .)
    RPAREN          reduce using rule 75 (literal -> character_string_literal .)
    COMMA           reduce using rule 75 (literal -> character_string_literal .)
    ID              reduce using rule 75 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 75 (literal -> character_string_literal .)
    FI              reduce using rule 75 (literal -> character_string_literal .)
    BY              reduce using rule 75 (literal -> character_string_literal .)
    ELSE            reduce using rule 75 (literal -> character_string_literal .)
    ELSIF           reduce using rule 75 (literal -> character_string_literal .)


state 74

    (108) operand1 -> operand2 .
    (116) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (117) arithmetic_multiplicative_operator -> . TIMES
    (118) arithmetic_multiplicative_operator -> . DIVIDE
    (119) arithmetic_multiplicative_operator -> . MOD

    PLUS            reduce using rule 108 (operand1 -> operand2 .)
    MINUS           reduce using rule 108 (operand1 -> operand2 .)
    STRCAT          reduce using rule 108 (operand1 -> operand2 .)
    AND             reduce using rule 108 (operand1 -> operand2 .)
    OR              reduce using rule 108 (operand1 -> operand2 .)
    EQUAL           reduce using rule 108 (operand1 -> operand2 .)
    DIFF            reduce using rule 108 (operand1 -> operand2 .)
    GREATER         reduce using rule 108 (operand1 -> operand2 .)
    GREATEREQ       reduce using rule 108 (operand1 -> operand2 .)
    LESS            reduce using rule 108 (operand1 -> operand2 .)
    LESSEQ          reduce using rule 108 (operand1 -> operand2 .)
    IN              reduce using rule 108 (operand1 -> operand2 .)
    WHILE           reduce using rule 108 (operand1 -> operand2 .)
    SEMI            reduce using rule 108 (operand1 -> operand2 .)
    ID              reduce using rule 108 (operand1 -> operand2 .)
    THEN            reduce using rule 108 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 108 (operand1 -> operand2 .)
    COMMA           reduce using rule 108 (operand1 -> operand2 .)
    COLON           reduce using rule 108 (operand1 -> operand2 .)
    ELSE            reduce using rule 108 (operand1 -> operand2 .)
    ELSIF           reduce using rule 108 (operand1 -> operand2 .)
    TO              reduce using rule 108 (operand1 -> operand2 .)
    DOWN            reduce using rule 108 (operand1 -> operand2 .)
    BY              reduce using rule 108 (operand1 -> operand2 .)
    RPAREN          reduce using rule 108 (operand1 -> operand2 .)
    FI              reduce using rule 108 (operand1 -> operand2 .)
    TIMES           shift and go to state 161
    DIVIDE          shift and go to state 163
    MOD             shift and go to state 160

    arithmetic_multiplicative_operator shift and go to state 162

state 75

    (74) literal -> empty_literal .

    TIMES           reduce using rule 74 (literal -> empty_literal .)
    DIVIDE          reduce using rule 74 (literal -> empty_literal .)
    MOD             reduce using rule 74 (literal -> empty_literal .)
    PLUS            reduce using rule 74 (literal -> empty_literal .)
    MINUS           reduce using rule 74 (literal -> empty_literal .)
    STRCAT          reduce using rule 74 (literal -> empty_literal .)
    AND             reduce using rule 74 (literal -> empty_literal .)
    OR              reduce using rule 74 (literal -> empty_literal .)
    EQUAL           reduce using rule 74 (literal -> empty_literal .)
    DIFF            reduce using rule 74 (literal -> empty_literal .)
    GREATER         reduce using rule 74 (literal -> empty_literal .)
    GREATEREQ       reduce using rule 74 (literal -> empty_literal .)
    LESS            reduce using rule 74 (literal -> empty_literal .)
    LESSEQ          reduce using rule 74 (literal -> empty_literal .)
    IN              reduce using rule 74 (literal -> empty_literal .)
    SEMI            reduce using rule 74 (literal -> empty_literal .)
    LBRACKET        reduce using rule 74 (literal -> empty_literal .)
    THEN            reduce using rule 74 (literal -> empty_literal .)
    TO              reduce using rule 74 (literal -> empty_literal .)
    DOWN            reduce using rule 74 (literal -> empty_literal .)
    WHILE           reduce using rule 74 (literal -> empty_literal .)
    COLON           reduce using rule 74 (literal -> empty_literal .)
    RPAREN          reduce using rule 74 (literal -> empty_literal .)
    COMMA           reduce using rule 74 (literal -> empty_literal .)
    ID              reduce using rule 74 (literal -> empty_literal .)
    RBRACKET        reduce using rule 74 (literal -> empty_literal .)
    FI              reduce using rule 74 (literal -> empty_literal .)
    BY              reduce using rule 74 (literal -> empty_literal .)
    ELSE            reduce using rule 74 (literal -> empty_literal .)
    ELSIF           reduce using rule 74 (literal -> empty_literal .)


state 76

    (80) empty_literal -> NULL .

    TIMES           reduce using rule 80 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 80 (empty_literal -> NULL .)
    MOD             reduce using rule 80 (empty_literal -> NULL .)
    PLUS            reduce using rule 80 (empty_literal -> NULL .)
    MINUS           reduce using rule 80 (empty_literal -> NULL .)
    STRCAT          reduce using rule 80 (empty_literal -> NULL .)
    AND             reduce using rule 80 (empty_literal -> NULL .)
    OR              reduce using rule 80 (empty_literal -> NULL .)
    EQUAL           reduce using rule 80 (empty_literal -> NULL .)
    DIFF            reduce using rule 80 (empty_literal -> NULL .)
    GREATER         reduce using rule 80 (empty_literal -> NULL .)
    GREATEREQ       reduce using rule 80 (empty_literal -> NULL .)
    LESS            reduce using rule 80 (empty_literal -> NULL .)
    LESSEQ          reduce using rule 80 (empty_literal -> NULL .)
    IN              reduce using rule 80 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 80 (empty_literal -> NULL .)
    LBRACKET        reduce using rule 80 (empty_literal -> NULL .)
    RPAREN          reduce using rule 80 (empty_literal -> NULL .)
    COMMA           reduce using rule 80 (empty_literal -> NULL .)
    THEN            reduce using rule 80 (empty_literal -> NULL .)
    SEMI            reduce using rule 80 (empty_literal -> NULL .)
    COLON           reduce using rule 80 (empty_literal -> NULL .)
    ID              reduce using rule 80 (empty_literal -> NULL .)
    TO              reduce using rule 80 (empty_literal -> NULL .)
    DOWN            reduce using rule 80 (empty_literal -> NULL .)
    BY              reduce using rule 80 (empty_literal -> NULL .)
    ELSE            reduce using rule 80 (empty_literal -> NULL .)
    ELSIF           reduce using rule 80 (empty_literal -> NULL .)
    FI              reduce using rule 80 (empty_literal -> NULL .)
    WHILE           reduce using rule 80 (empty_literal -> NULL .)


state 77

    (67) primitive_value -> literal .

    TIMES           reduce using rule 67 (primitive_value -> literal .)
    DIVIDE          reduce using rule 67 (primitive_value -> literal .)
    MOD             reduce using rule 67 (primitive_value -> literal .)
    PLUS            reduce using rule 67 (primitive_value -> literal .)
    MINUS           reduce using rule 67 (primitive_value -> literal .)
    STRCAT          reduce using rule 67 (primitive_value -> literal .)
    AND             reduce using rule 67 (primitive_value -> literal .)
    OR              reduce using rule 67 (primitive_value -> literal .)
    EQUAL           reduce using rule 67 (primitive_value -> literal .)
    DIFF            reduce using rule 67 (primitive_value -> literal .)
    GREATER         reduce using rule 67 (primitive_value -> literal .)
    GREATEREQ       reduce using rule 67 (primitive_value -> literal .)
    LESS            reduce using rule 67 (primitive_value -> literal .)
    LESSEQ          reduce using rule 67 (primitive_value -> literal .)
    IN              reduce using rule 67 (primitive_value -> literal .)
    RPAREN          reduce using rule 67 (primitive_value -> literal .)
    COMMA           reduce using rule 67 (primitive_value -> literal .)
    LBRACKET        reduce using rule 67 (primitive_value -> literal .)
    RBRACKET        reduce using rule 67 (primitive_value -> literal .)
    SEMI            reduce using rule 67 (primitive_value -> literal .)
    ID              reduce using rule 67 (primitive_value -> literal .)
    COLON           reduce using rule 67 (primitive_value -> literal .)
    TO              reduce using rule 67 (primitive_value -> literal .)
    DOWN            reduce using rule 67 (primitive_value -> literal .)
    THEN            reduce using rule 67 (primitive_value -> literal .)
    FI              reduce using rule 67 (primitive_value -> literal .)
    BY              reduce using rule 67 (primitive_value -> literal .)
    ELSE            reduce using rule 67 (primitive_value -> literal .)
    ELSIF           reduce using rule 67 (primitive_value -> literal .)
    WHILE           reduce using rule 67 (primitive_value -> literal .)


state 78

    (78) boolean_literal -> TRUE .

    TIMES           reduce using rule 78 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 78 (boolean_literal -> TRUE .)
    MOD             reduce using rule 78 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 78 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 78 (boolean_literal -> TRUE .)
    STRCAT          reduce using rule 78 (boolean_literal -> TRUE .)
    AND             reduce using rule 78 (boolean_literal -> TRUE .)
    OR              reduce using rule 78 (boolean_literal -> TRUE .)
    EQUAL           reduce using rule 78 (boolean_literal -> TRUE .)
    DIFF            reduce using rule 78 (boolean_literal -> TRUE .)
    GREATER         reduce using rule 78 (boolean_literal -> TRUE .)
    GREATEREQ       reduce using rule 78 (boolean_literal -> TRUE .)
    LESS            reduce using rule 78 (boolean_literal -> TRUE .)
    LESSEQ          reduce using rule 78 (boolean_literal -> TRUE .)
    IN              reduce using rule 78 (boolean_literal -> TRUE .)
    TO              reduce using rule 78 (boolean_literal -> TRUE .)
    DOWN            reduce using rule 78 (boolean_literal -> TRUE .)
    LBRACKET        reduce using rule 78 (boolean_literal -> TRUE .)
    COLON           reduce using rule 78 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 78 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 78 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 78 (boolean_literal -> TRUE .)
    THEN            reduce using rule 78 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 78 (boolean_literal -> TRUE .)
    ID              reduce using rule 78 (boolean_literal -> TRUE .)
    BY              reduce using rule 78 (boolean_literal -> TRUE .)
    ELSE            reduce using rule 78 (boolean_literal -> TRUE .)
    ELSIF           reduce using rule 78 (boolean_literal -> TRUE .)
    FI              reduce using rule 78 (boolean_literal -> TRUE .)
    WHILE           reduce using rule 78 (boolean_literal -> TRUE .)


state 79

    (86) expression -> operand0 .
    (96) operand0 -> operand0 . operator1 operand1
    (97) operator1 -> . relational_operator
    (98) operator1 -> . membership_operator
    (99) relational_operator -> . AND
    (100) relational_operator -> . OR
    (101) relational_operator -> . EQUAL
    (102) relational_operator -> . DIFF
    (103) relational_operator -> . GREATER
    (104) relational_operator -> . GREATEREQ
    (105) relational_operator -> . LESS
    (106) relational_operator -> . LESSEQ
    (107) membership_operator -> . IN

    THEN            reduce using rule 86 (expression -> operand0 .)
    RBRACKET        reduce using rule 86 (expression -> operand0 .)
    COMMA           reduce using rule 86 (expression -> operand0 .)
    COLON           reduce using rule 86 (expression -> operand0 .)
    RPAREN          reduce using rule 86 (expression -> operand0 .)
    FI              reduce using rule 86 (expression -> operand0 .)
    WHILE           reduce using rule 86 (expression -> operand0 .)
    SEMI            reduce using rule 86 (expression -> operand0 .)
    TO              reduce using rule 86 (expression -> operand0 .)
    DOWN            reduce using rule 86 (expression -> operand0 .)
    ELSE            reduce using rule 86 (expression -> operand0 .)
    ELSIF           reduce using rule 86 (expression -> operand0 .)
    BY              reduce using rule 86 (expression -> operand0 .)
    ID              reduce using rule 86 (expression -> operand0 .)
    AND             shift and go to state 166
    OR              shift and go to state 164
    EQUAL           shift and go to state 167
    DIFF            shift and go to state 170
    GREATER         shift and go to state 174
    GREATEREQ       shift and go to state 172
    LESS            shift and go to state 175
    LESSEQ          shift and go to state 171
    IN              shift and go to state 168

    membership_operator            shift and go to state 173
    relational_operator            shift and go to state 165
    operator1                      shift and go to state 169

state 80

    (73) literal -> character_literal .

    TIMES           reduce using rule 73 (literal -> character_literal .)
    DIVIDE          reduce using rule 73 (literal -> character_literal .)
    MOD             reduce using rule 73 (literal -> character_literal .)
    PLUS            reduce using rule 73 (literal -> character_literal .)
    MINUS           reduce using rule 73 (literal -> character_literal .)
    STRCAT          reduce using rule 73 (literal -> character_literal .)
    AND             reduce using rule 73 (literal -> character_literal .)
    OR              reduce using rule 73 (literal -> character_literal .)
    EQUAL           reduce using rule 73 (literal -> character_literal .)
    DIFF            reduce using rule 73 (literal -> character_literal .)
    GREATER         reduce using rule 73 (literal -> character_literal .)
    GREATEREQ       reduce using rule 73 (literal -> character_literal .)
    LESS            reduce using rule 73 (literal -> character_literal .)
    LESSEQ          reduce using rule 73 (literal -> character_literal .)
    IN              reduce using rule 73 (literal -> character_literal .)
    SEMI            reduce using rule 73 (literal -> character_literal .)
    LBRACKET        reduce using rule 73 (literal -> character_literal .)
    THEN            reduce using rule 73 (literal -> character_literal .)
    TO              reduce using rule 73 (literal -> character_literal .)
    DOWN            reduce using rule 73 (literal -> character_literal .)
    WHILE           reduce using rule 73 (literal -> character_literal .)
    COLON           reduce using rule 73 (literal -> character_literal .)
    RPAREN          reduce using rule 73 (literal -> character_literal .)
    COMMA           reduce using rule 73 (literal -> character_literal .)
    ID              reduce using rule 73 (literal -> character_literal .)
    RBRACKET        reduce using rule 73 (literal -> character_literal .)
    FI              reduce using rule 73 (literal -> character_literal .)
    BY              reduce using rule 73 (literal -> character_literal .)
    ELSE            reduce using rule 73 (literal -> character_literal .)
    ELSIF           reduce using rule 73 (literal -> character_literal .)


state 81

    (82) value_array_element -> array_primitive_value . LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> array_primitive_value . LBRACKET lower_bound COLON upper_bound RBRACKET

    LBRACKET        shift and go to state 176


state 82

    (95) operand0 -> operand1 .
    (109) operand1 -> operand1 . operator2 operand2
    (110) operator2 -> . arithmetic_additive_operator
    (111) operator2 -> . string_concatenation_operator
    (112) arithmetic_additive_operator -> . PLUS
    (113) arithmetic_additive_operator -> . MINUS
    (114) string_concatenation_operator -> . STRCAT

    AND             reduce using rule 95 (operand0 -> operand1 .)
    OR              reduce using rule 95 (operand0 -> operand1 .)
    EQUAL           reduce using rule 95 (operand0 -> operand1 .)
    DIFF            reduce using rule 95 (operand0 -> operand1 .)
    GREATER         reduce using rule 95 (operand0 -> operand1 .)
    GREATEREQ       reduce using rule 95 (operand0 -> operand1 .)
    LESS            reduce using rule 95 (operand0 -> operand1 .)
    LESSEQ          reduce using rule 95 (operand0 -> operand1 .)
    IN              reduce using rule 95 (operand0 -> operand1 .)
    SEMI            reduce using rule 95 (operand0 -> operand1 .)
    THEN            reduce using rule 95 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 95 (operand0 -> operand1 .)
    COMMA           reduce using rule 95 (operand0 -> operand1 .)
    RPAREN          reduce using rule 95 (operand0 -> operand1 .)
    ID              reduce using rule 95 (operand0 -> operand1 .)
    COLON           reduce using rule 95 (operand0 -> operand1 .)
    WHILE           reduce using rule 95 (operand0 -> operand1 .)
    TO              reduce using rule 95 (operand0 -> operand1 .)
    DOWN            reduce using rule 95 (operand0 -> operand1 .)
    BY              reduce using rule 95 (operand0 -> operand1 .)
    ELSE            reduce using rule 95 (operand0 -> operand1 .)
    ELSIF           reduce using rule 95 (operand0 -> operand1 .)
    FI              reduce using rule 95 (operand0 -> operand1 .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 182
    STRCAT          shift and go to state 177

    arithmetic_additive_operator   shift and go to state 180
    string_concatenation_operator  shift and go to state 181
    operator2                      shift and go to state 179

state 83

    (120) operand3 -> operand4 .

    TIMES           reduce using rule 120 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 120 (operand3 -> operand4 .)
    MOD             reduce using rule 120 (operand3 -> operand4 .)
    PLUS            reduce using rule 120 (operand3 -> operand4 .)
    MINUS           reduce using rule 120 (operand3 -> operand4 .)
    STRCAT          reduce using rule 120 (operand3 -> operand4 .)
    AND             reduce using rule 120 (operand3 -> operand4 .)
    OR              reduce using rule 120 (operand3 -> operand4 .)
    EQUAL           reduce using rule 120 (operand3 -> operand4 .)
    DIFF            reduce using rule 120 (operand3 -> operand4 .)
    GREATER         reduce using rule 120 (operand3 -> operand4 .)
    GREATEREQ       reduce using rule 120 (operand3 -> operand4 .)
    LESS            reduce using rule 120 (operand3 -> operand4 .)
    LESSEQ          reduce using rule 120 (operand3 -> operand4 .)
    IN              reduce using rule 120 (operand3 -> operand4 .)
    FI              reduce using rule 120 (operand3 -> operand4 .)
    TO              reduce using rule 120 (operand3 -> operand4 .)
    DOWN            reduce using rule 120 (operand3 -> operand4 .)
    BY              reduce using rule 120 (operand3 -> operand4 .)
    SEMI            reduce using rule 120 (operand3 -> operand4 .)
    ID              reduce using rule 120 (operand3 -> operand4 .)
    THEN            reduce using rule 120 (operand3 -> operand4 .)
    RPAREN          reduce using rule 120 (operand3 -> operand4 .)
    COMMA           reduce using rule 120 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 120 (operand3 -> operand4 .)
    COLON           reduce using rule 120 (operand3 -> operand4 .)
    ELSE            reduce using rule 120 (operand3 -> operand4 .)
    ELSIF           reduce using rule 120 (operand3 -> operand4 .)
    WHILE           reduce using rule 120 (operand3 -> operand4 .)


state 84

    (76) integer_literal -> ICONST .

    TIMES           reduce using rule 76 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 76 (integer_literal -> ICONST .)
    MOD             reduce using rule 76 (integer_literal -> ICONST .)
    PLUS            reduce using rule 76 (integer_literal -> ICONST .)
    MINUS           reduce using rule 76 (integer_literal -> ICONST .)
    STRCAT          reduce using rule 76 (integer_literal -> ICONST .)
    AND             reduce using rule 76 (integer_literal -> ICONST .)
    OR              reduce using rule 76 (integer_literal -> ICONST .)
    EQUAL           reduce using rule 76 (integer_literal -> ICONST .)
    DIFF            reduce using rule 76 (integer_literal -> ICONST .)
    GREATER         reduce using rule 76 (integer_literal -> ICONST .)
    GREATEREQ       reduce using rule 76 (integer_literal -> ICONST .)
    LESS            reduce using rule 76 (integer_literal -> ICONST .)
    LESSEQ          reduce using rule 76 (integer_literal -> ICONST .)
    IN              reduce using rule 76 (integer_literal -> ICONST .)
    SEMI            reduce using rule 76 (integer_literal -> ICONST .)
    LBRACKET        reduce using rule 76 (integer_literal -> ICONST .)
    THEN            reduce using rule 76 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 76 (integer_literal -> ICONST .)
    COMMA           reduce using rule 76 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 76 (integer_literal -> ICONST .)
    COLON           reduce using rule 76 (integer_literal -> ICONST .)
    ID              reduce using rule 76 (integer_literal -> ICONST .)
    TO              reduce using rule 76 (integer_literal -> ICONST .)
    DOWN            reduce using rule 76 (integer_literal -> ICONST .)
    BY              reduce using rule 76 (integer_literal -> ICONST .)
    ELSE            reduce using rule 76 (integer_literal -> ICONST .)
    ELSIF           reduce using rule 76 (integer_literal -> ICONST .)
    FI              reduce using rule 76 (integer_literal -> ICONST .)
    WHILE           reduce using rule 76 (integer_literal -> ICONST .)


state 85

    (71) literal -> integer_literal .

    TIMES           reduce using rule 71 (literal -> integer_literal .)
    DIVIDE          reduce using rule 71 (literal -> integer_literal .)
    MOD             reduce using rule 71 (literal -> integer_literal .)
    PLUS            reduce using rule 71 (literal -> integer_literal .)
    MINUS           reduce using rule 71 (literal -> integer_literal .)
    STRCAT          reduce using rule 71 (literal -> integer_literal .)
    AND             reduce using rule 71 (literal -> integer_literal .)
    OR              reduce using rule 71 (literal -> integer_literal .)
    EQUAL           reduce using rule 71 (literal -> integer_literal .)
    DIFF            reduce using rule 71 (literal -> integer_literal .)
    GREATER         reduce using rule 71 (literal -> integer_literal .)
    GREATEREQ       reduce using rule 71 (literal -> integer_literal .)
    LESS            reduce using rule 71 (literal -> integer_literal .)
    LESSEQ          reduce using rule 71 (literal -> integer_literal .)
    IN              reduce using rule 71 (literal -> integer_literal .)
    SEMI            reduce using rule 71 (literal -> integer_literal .)
    LBRACKET        reduce using rule 71 (literal -> integer_literal .)
    THEN            reduce using rule 71 (literal -> integer_literal .)
    TO              reduce using rule 71 (literal -> integer_literal .)
    DOWN            reduce using rule 71 (literal -> integer_literal .)
    WHILE           reduce using rule 71 (literal -> integer_literal .)
    COLON           reduce using rule 71 (literal -> integer_literal .)
    RPAREN          reduce using rule 71 (literal -> integer_literal .)
    COMMA           reduce using rule 71 (literal -> integer_literal .)
    ID              reduce using rule 71 (literal -> integer_literal .)
    RBRACKET        reduce using rule 71 (literal -> integer_literal .)
    FI              reduce using rule 71 (literal -> integer_literal .)
    BY              reduce using rule 71 (literal -> integer_literal .)
    ELSE            reduce using rule 71 (literal -> integer_literal .)
    ELSIF           reduce using rule 71 (literal -> integer_literal .)


state 86

    (85) parenthesized_expression -> LPAREN . expression RPAREN
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 183
    conditional_expression         shift and go to state 96

state 87

    (126) operand4 -> primitive_value .
    (84) array_primitive_value -> primitive_value .

    TIMES           reduce using rule 126 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 126 (operand4 -> primitive_value .)
    MOD             reduce using rule 126 (operand4 -> primitive_value .)
    PLUS            reduce using rule 126 (operand4 -> primitive_value .)
    MINUS           reduce using rule 126 (operand4 -> primitive_value .)
    STRCAT          reduce using rule 126 (operand4 -> primitive_value .)
    AND             reduce using rule 126 (operand4 -> primitive_value .)
    OR              reduce using rule 126 (operand4 -> primitive_value .)
    EQUAL           reduce using rule 126 (operand4 -> primitive_value .)
    DIFF            reduce using rule 126 (operand4 -> primitive_value .)
    GREATER         reduce using rule 126 (operand4 -> primitive_value .)
    GREATEREQ       reduce using rule 126 (operand4 -> primitive_value .)
    LESS            reduce using rule 126 (operand4 -> primitive_value .)
    LESSEQ          reduce using rule 126 (operand4 -> primitive_value .)
    IN              reduce using rule 126 (operand4 -> primitive_value .)
    SEMI            reduce using rule 126 (operand4 -> primitive_value .)
    COLON           reduce using rule 126 (operand4 -> primitive_value .)
    TO              reduce using rule 126 (operand4 -> primitive_value .)
    DOWN            reduce using rule 126 (operand4 -> primitive_value .)
    BY              reduce using rule 126 (operand4 -> primitive_value .)
    THEN            reduce using rule 126 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 126 (operand4 -> primitive_value .)
    COMMA           reduce using rule 126 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 126 (operand4 -> primitive_value .)
    ID              reduce using rule 126 (operand4 -> primitive_value .)
    ELSE            reduce using rule 126 (operand4 -> primitive_value .)
    ELSIF           reduce using rule 126 (operand4 -> primitive_value .)
    FI              reduce using rule 126 (operand4 -> primitive_value .)
    WHILE           reduce using rule 126 (operand4 -> primitive_value .)
    LBRACKET        reduce using rule 84 (array_primitive_value -> primitive_value .)


state 88

    (79) character_literal -> CCONST .

    TIMES           reduce using rule 79 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 79 (character_literal -> CCONST .)
    MOD             reduce using rule 79 (character_literal -> CCONST .)
    PLUS            reduce using rule 79 (character_literal -> CCONST .)
    MINUS           reduce using rule 79 (character_literal -> CCONST .)
    STRCAT          reduce using rule 79 (character_literal -> CCONST .)
    AND             reduce using rule 79 (character_literal -> CCONST .)
    OR              reduce using rule 79 (character_literal -> CCONST .)
    EQUAL           reduce using rule 79 (character_literal -> CCONST .)
    DIFF            reduce using rule 79 (character_literal -> CCONST .)
    GREATER         reduce using rule 79 (character_literal -> CCONST .)
    GREATEREQ       reduce using rule 79 (character_literal -> CCONST .)
    LESS            reduce using rule 79 (character_literal -> CCONST .)
    LESSEQ          reduce using rule 79 (character_literal -> CCONST .)
    IN              reduce using rule 79 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 79 (character_literal -> CCONST .)
    COMMA           reduce using rule 79 (character_literal -> CCONST .)
    LBRACKET        reduce using rule 79 (character_literal -> CCONST .)
    THEN            reduce using rule 79 (character_literal -> CCONST .)
    SEMI            reduce using rule 79 (character_literal -> CCONST .)
    COLON           reduce using rule 79 (character_literal -> CCONST .)
    ID              reduce using rule 79 (character_literal -> CCONST .)
    TO              reduce using rule 79 (character_literal -> CCONST .)
    DOWN            reduce using rule 79 (character_literal -> CCONST .)
    BY              reduce using rule 79 (character_literal -> CCONST .)
    WHILE           reduce using rule 79 (character_literal -> CCONST .)
    RPAREN          reduce using rule 79 (character_literal -> CCONST .)
    ELSE            reduce using rule 79 (character_literal -> CCONST .)
    ELSIF           reduce using rule 79 (character_literal -> CCONST .)
    FI              reduce using rule 79 (character_literal -> CCONST .)


state 89

    (123) monadic_operator -> NOT .

    ARROW           reduce using rule 123 (monadic_operator -> NOT .)
    ID              reduce using rule 123 (monadic_operator -> NOT .)
    LPAREN          reduce using rule 123 (monadic_operator -> NOT .)
    ICONST          reduce using rule 123 (monadic_operator -> NOT .)
    FALSE           reduce using rule 123 (monadic_operator -> NOT .)
    TRUE            reduce using rule 123 (monadic_operator -> NOT .)
    CCONST          reduce using rule 123 (monadic_operator -> NOT .)
    NULL            reduce using rule 123 (monadic_operator -> NOT .)
    SCONST          reduce using rule 123 (monadic_operator -> NOT .)
    ABS             reduce using rule 123 (monadic_operator -> NOT .)
    ASC             reduce using rule 123 (monadic_operator -> NOT .)
    NUM             reduce using rule 123 (monadic_operator -> NOT .)
    UPPER           reduce using rule 123 (monadic_operator -> NOT .)
    LOWER           reduce using rule 123 (monadic_operator -> NOT .)
    LENGTH          reduce using rule 123 (monadic_operator -> NOT .)
    READ            reduce using rule 123 (monadic_operator -> NOT .)
    PRINT           reduce using rule 123 (monadic_operator -> NOT .)


state 90

    (115) operand2 -> operand3 .

    TIMES           reduce using rule 115 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 115 (operand2 -> operand3 .)
    MOD             reduce using rule 115 (operand2 -> operand3 .)
    PLUS            reduce using rule 115 (operand2 -> operand3 .)
    MINUS           reduce using rule 115 (operand2 -> operand3 .)
    STRCAT          reduce using rule 115 (operand2 -> operand3 .)
    AND             reduce using rule 115 (operand2 -> operand3 .)
    OR              reduce using rule 115 (operand2 -> operand3 .)
    EQUAL           reduce using rule 115 (operand2 -> operand3 .)
    DIFF            reduce using rule 115 (operand2 -> operand3 .)
    GREATER         reduce using rule 115 (operand2 -> operand3 .)
    GREATEREQ       reduce using rule 115 (operand2 -> operand3 .)
    LESS            reduce using rule 115 (operand2 -> operand3 .)
    LESSEQ          reduce using rule 115 (operand2 -> operand3 .)
    IN              reduce using rule 115 (operand2 -> operand3 .)
    COLON           reduce using rule 115 (operand2 -> operand3 .)
    THEN            reduce using rule 115 (operand2 -> operand3 .)
    SEMI            reduce using rule 115 (operand2 -> operand3 .)
    RPAREN          reduce using rule 115 (operand2 -> operand3 .)
    COMMA           reduce using rule 115 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 115 (operand2 -> operand3 .)
    ID              reduce using rule 115 (operand2 -> operand3 .)
    TO              reduce using rule 115 (operand2 -> operand3 .)
    DOWN            reduce using rule 115 (operand2 -> operand3 .)
    BY              reduce using rule 115 (operand2 -> operand3 .)
    ELSE            reduce using rule 115 (operand2 -> operand3 .)
    ELSIF           reduce using rule 115 (operand2 -> operand3 .)
    FI              reduce using rule 115 (operand2 -> operand3 .)
    WHILE           reduce using rule 115 (operand2 -> operand3 .)


state 91

    (70) primitive_value -> parenthesized_expression .

    TIMES           reduce using rule 70 (primitive_value -> parenthesized_expression .)
    DIVIDE          reduce using rule 70 (primitive_value -> parenthesized_expression .)
    MOD             reduce using rule 70 (primitive_value -> parenthesized_expression .)
    PLUS            reduce using rule 70 (primitive_value -> parenthesized_expression .)
    MINUS           reduce using rule 70 (primitive_value -> parenthesized_expression .)
    STRCAT          reduce using rule 70 (primitive_value -> parenthesized_expression .)
    AND             reduce using rule 70 (primitive_value -> parenthesized_expression .)
    OR              reduce using rule 70 (primitive_value -> parenthesized_expression .)
    EQUAL           reduce using rule 70 (primitive_value -> parenthesized_expression .)
    DIFF            reduce using rule 70 (primitive_value -> parenthesized_expression .)
    GREATER         reduce using rule 70 (primitive_value -> parenthesized_expression .)
    GREATEREQ       reduce using rule 70 (primitive_value -> parenthesized_expression .)
    LESS            reduce using rule 70 (primitive_value -> parenthesized_expression .)
    LESSEQ          reduce using rule 70 (primitive_value -> parenthesized_expression .)
    IN              reduce using rule 70 (primitive_value -> parenthesized_expression .)
    RPAREN          reduce using rule 70 (primitive_value -> parenthesized_expression .)
    COMMA           reduce using rule 70 (primitive_value -> parenthesized_expression .)
    LBRACKET        reduce using rule 70 (primitive_value -> parenthesized_expression .)
    RBRACKET        reduce using rule 70 (primitive_value -> parenthesized_expression .)
    SEMI            reduce using rule 70 (primitive_value -> parenthesized_expression .)
    ID              reduce using rule 70 (primitive_value -> parenthesized_expression .)
    COLON           reduce using rule 70 (primitive_value -> parenthesized_expression .)
    TO              reduce using rule 70 (primitive_value -> parenthesized_expression .)
    DOWN            reduce using rule 70 (primitive_value -> parenthesized_expression .)
    THEN            reduce using rule 70 (primitive_value -> parenthesized_expression .)
    FI              reduce using rule 70 (primitive_value -> parenthesized_expression .)
    BY              reduce using rule 70 (primitive_value -> parenthesized_expression .)
    ELSE            reduce using rule 70 (primitive_value -> parenthesized_expression .)
    ELSIF           reduce using rule 70 (primitive_value -> parenthesized_expression .)
    WHILE           reduce using rule 70 (primitive_value -> parenthesized_expression .)


state 92

    (124) operand4 -> location .
    (61) dereferenced_reference -> location . ARROW
    (66) array_location -> location .

    TIMES           reduce using rule 124 (operand4 -> location .)
    DIVIDE          reduce using rule 124 (operand4 -> location .)
    MOD             reduce using rule 124 (operand4 -> location .)
    PLUS            reduce using rule 124 (operand4 -> location .)
    MINUS           reduce using rule 124 (operand4 -> location .)
    STRCAT          reduce using rule 124 (operand4 -> location .)
    AND             reduce using rule 124 (operand4 -> location .)
    OR              reduce using rule 124 (operand4 -> location .)
    EQUAL           reduce using rule 124 (operand4 -> location .)
    DIFF            reduce using rule 124 (operand4 -> location .)
    GREATER         reduce using rule 124 (operand4 -> location .)
    GREATEREQ       reduce using rule 124 (operand4 -> location .)
    LESS            reduce using rule 124 (operand4 -> location .)
    LESSEQ          reduce using rule 124 (operand4 -> location .)
    IN              reduce using rule 124 (operand4 -> location .)
    SEMI            reduce using rule 124 (operand4 -> location .)
    COLON           reduce using rule 124 (operand4 -> location .)
    TO              reduce using rule 124 (operand4 -> location .)
    DOWN            reduce using rule 124 (operand4 -> location .)
    BY              reduce using rule 124 (operand4 -> location .)
    THEN            reduce using rule 124 (operand4 -> location .)
    RPAREN          reduce using rule 124 (operand4 -> location .)
    COMMA           reduce using rule 124 (operand4 -> location .)
    RBRACKET        reduce using rule 124 (operand4 -> location .)
    ID              reduce using rule 124 (operand4 -> location .)
    ELSE            reduce using rule 124 (operand4 -> location .)
    ELSIF           reduce using rule 124 (operand4 -> location .)
    FI              reduce using rule 124 (operand4 -> location .)
    WHILE           reduce using rule 124 (operand4 -> location .)
    ARROW           shift and go to state 109
    LBRACKET        reduce using rule 66 (array_location -> location .)


state 93

    (60) location -> call_action .

    ARROW           reduce using rule 60 (location -> call_action .)
    TIMES           reduce using rule 60 (location -> call_action .)
    DIVIDE          reduce using rule 60 (location -> call_action .)
    MOD             reduce using rule 60 (location -> call_action .)
    PLUS            reduce using rule 60 (location -> call_action .)
    MINUS           reduce using rule 60 (location -> call_action .)
    STRCAT          reduce using rule 60 (location -> call_action .)
    AND             reduce using rule 60 (location -> call_action .)
    OR              reduce using rule 60 (location -> call_action .)
    EQUAL           reduce using rule 60 (location -> call_action .)
    DIFF            reduce using rule 60 (location -> call_action .)
    GREATER         reduce using rule 60 (location -> call_action .)
    GREATEREQ       reduce using rule 60 (location -> call_action .)
    LESS            reduce using rule 60 (location -> call_action .)
    LESSEQ          reduce using rule 60 (location -> call_action .)
    IN              reduce using rule 60 (location -> call_action .)
    THEN            reduce using rule 60 (location -> call_action .)
    LBRACKET        reduce using rule 60 (location -> call_action .)
    RBRACKET        reduce using rule 60 (location -> call_action .)
    SEMI            reduce using rule 60 (location -> call_action .)
    ID              reduce using rule 60 (location -> call_action .)
    TO              reduce using rule 60 (location -> call_action .)
    DOWN            reduce using rule 60 (location -> call_action .)
    BY              reduce using rule 60 (location -> call_action .)
    RPAREN          reduce using rule 60 (location -> call_action .)
    COMMA           reduce using rule 60 (location -> call_action .)
    COLON           reduce using rule 60 (location -> call_action .)
    ELSE            reduce using rule 60 (location -> call_action .)
    ELSIF           reduce using rule 60 (location -> call_action .)
    FI              reduce using rule 60 (location -> call_action .)
    WHILE           reduce using rule 60 (location -> call_action .)


state 94

    (121) operand3 -> monadic_operator . operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 93
    boolean_literal                shift and go to state 62
    dereferenced_reference         shift and go to state 27
    array_location                 shift and go to state 33
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    literal                        shift and go to state 77
    operand4                       shift and go to state 184
    referenced_location            shift and go to state 66
    builtin_name                   shift and go to state 28
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    array_element                  shift and go to state 34
    location                       shift and go to state 92
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95

state 95

    (68) primitive_value -> value_array_element .

    TIMES           reduce using rule 68 (primitive_value -> value_array_element .)
    DIVIDE          reduce using rule 68 (primitive_value -> value_array_element .)
    MOD             reduce using rule 68 (primitive_value -> value_array_element .)
    PLUS            reduce using rule 68 (primitive_value -> value_array_element .)
    MINUS           reduce using rule 68 (primitive_value -> value_array_element .)
    STRCAT          reduce using rule 68 (primitive_value -> value_array_element .)
    AND             reduce using rule 68 (primitive_value -> value_array_element .)
    OR              reduce using rule 68 (primitive_value -> value_array_element .)
    EQUAL           reduce using rule 68 (primitive_value -> value_array_element .)
    DIFF            reduce using rule 68 (primitive_value -> value_array_element .)
    GREATER         reduce using rule 68 (primitive_value -> value_array_element .)
    GREATEREQ       reduce using rule 68 (primitive_value -> value_array_element .)
    LESS            reduce using rule 68 (primitive_value -> value_array_element .)
    LESSEQ          reduce using rule 68 (primitive_value -> value_array_element .)
    IN              reduce using rule 68 (primitive_value -> value_array_element .)
    RPAREN          reduce using rule 68 (primitive_value -> value_array_element .)
    COMMA           reduce using rule 68 (primitive_value -> value_array_element .)
    LBRACKET        reduce using rule 68 (primitive_value -> value_array_element .)
    RBRACKET        reduce using rule 68 (primitive_value -> value_array_element .)
    SEMI            reduce using rule 68 (primitive_value -> value_array_element .)
    ID              reduce using rule 68 (primitive_value -> value_array_element .)
    COLON           reduce using rule 68 (primitive_value -> value_array_element .)
    TO              reduce using rule 68 (primitive_value -> value_array_element .)
    DOWN            reduce using rule 68 (primitive_value -> value_array_element .)
    THEN            reduce using rule 68 (primitive_value -> value_array_element .)
    FI              reduce using rule 68 (primitive_value -> value_array_element .)
    BY              reduce using rule 68 (primitive_value -> value_array_element .)
    ELSE            reduce using rule 68 (primitive_value -> value_array_element .)
    ELSIF           reduce using rule 68 (primitive_value -> value_array_element .)
    WHILE           reduce using rule 68 (primitive_value -> value_array_element .)


state 96

    (87) expression -> conditional_expression .

    THEN            reduce using rule 87 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 87 (expression -> conditional_expression .)
    COMMA           reduce using rule 87 (expression -> conditional_expression .)
    COLON           reduce using rule 87 (expression -> conditional_expression .)
    RPAREN          reduce using rule 87 (expression -> conditional_expression .)
    FI              reduce using rule 87 (expression -> conditional_expression .)
    WHILE           reduce using rule 87 (expression -> conditional_expression .)
    SEMI            reduce using rule 87 (expression -> conditional_expression .)
    TO              reduce using rule 87 (expression -> conditional_expression .)
    DOWN            reduce using rule 87 (expression -> conditional_expression .)
    ELSE            reduce using rule 87 (expression -> conditional_expression .)
    ELSIF           reduce using rule 87 (expression -> conditional_expression .)
    BY              reduce using rule 87 (expression -> conditional_expression .)
    ID              reduce using rule 87 (expression -> conditional_expression .)


state 97

    (90) boolean_expression -> expression .

    THEN            reduce using rule 90 (boolean_expression -> expression .)
    SEMI            reduce using rule 90 (boolean_expression -> expression .)


state 98

    (147) if_action -> IF boolean_expression . then_clause FI
    (148) if_action -> IF boolean_expression . then_clause else_clause FI
    (149) then_clause -> . THEN
    (150) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 185

    then_clause                    shift and go to state 186

state 99

    (191) builtin_call -> builtin_name LPAREN . RPAREN
    (192) builtin_call -> builtin_name LPAREN . parameter_list RPAREN
    (182) parameter_list -> . parameter
    (183) parameter_list -> . parameter_list COMMA parameter
    (184) parameter -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    RPAREN          shift and go to state 188
    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    parameter_list                 shift and go to state 187
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    parameter                      shift and go to state 130
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 129
    conditional_expression         shift and go to state 96

state 100

    (128) action_statement -> action SEMI .

    EXIT            reduce using rule 128 (action_statement -> action SEMI .)
    RETURN          reduce using rule 128 (action_statement -> action SEMI .)
    RESULT          reduce using rule 128 (action_statement -> action SEMI .)
    ID              reduce using rule 128 (action_statement -> action SEMI .)
    IF              reduce using rule 128 (action_statement -> action SEMI .)
    DO              reduce using rule 128 (action_statement -> action SEMI .)
    ABS             reduce using rule 128 (action_statement -> action SEMI .)
    ASC             reduce using rule 128 (action_statement -> action SEMI .)
    NUM             reduce using rule 128 (action_statement -> action SEMI .)
    UPPER           reduce using rule 128 (action_statement -> action SEMI .)
    LOWER           reduce using rule 128 (action_statement -> action SEMI .)
    LENGTH          reduce using rule 128 (action_statement -> action SEMI .)
    READ            reduce using rule 128 (action_statement -> action SEMI .)
    PRINT           reduce using rule 128 (action_statement -> action SEMI .)
    FI              reduce using rule 128 (action_statement -> action SEMI .)
    ELSE            reduce using rule 128 (action_statement -> action SEMI .)
    ELSIF           reduce using rule 128 (action_statement -> action SEMI .)
    END             reduce using rule 128 (action_statement -> action SEMI .)
    DCL             reduce using rule 128 (action_statement -> action SEMI .)
    SYN             reduce using rule 128 (action_statement -> action SEMI .)
    TYPE            reduce using rule 128 (action_statement -> action SEMI .)
    OD              reduce using rule 128 (action_statement -> action SEMI .)
    $end            reduce using rule 128 (action_statement -> action SEMI .)


state 101

    (188) return_action -> RETURN result .

    SEMI            reduce using rule 188 (return_action -> RETURN result .)


state 102

    (62) array_element -> array_location LBRACKET . expression_list RBRACKET
    (65) array_slice -> array_location LBRACKET . lower_bound COLON upper_bound RBRACKET
    (63) expression_list -> . expression
    (64) expression_list -> . expression_list COMMA expression
    (43) lower_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_location                 shift and go to state 33
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    lower_bound                    shift and go to state 190
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    expression_list                shift and go to state 191
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 189
    conditional_expression         shift and go to state 96

state 103

    (146) closed_dyadic_operator -> MODCREASE .

    IF              reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    MINUS           reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    NOT             reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    ARROW           reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    ID              reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    LPAREN          reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    ICONST          reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    FALSE           reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    TRUE            reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    CCONST          reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    NULL            reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    SCONST          reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    ABS             reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    ASC             reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    NUM             reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    UPPER           reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    LOWER           reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    LENGTH          reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    READ            reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)
    PRINT           reduce using rule 146 (closed_dyadic_operator -> MODCREASE .)


state 104

    (139) assignment_action -> location assigning_operator . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    builtin_name                   shift and go to state 28
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 192
    conditional_expression         shift and go to state 96

state 105

    (145) closed_dyadic_operator -> DIVCREASE .

    IF              reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    MINUS           reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    NOT             reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    ARROW           reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    ID              reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    LPAREN          reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    ICONST          reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    FALSE           reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    TRUE            reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    CCONST          reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    NULL            reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    SCONST          reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    ABS             reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    ASC             reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    NUM             reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    UPPER           reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    LOWER           reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    LENGTH          reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    READ            reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)
    PRINT           reduce using rule 145 (closed_dyadic_operator -> DIVCREASE .)


state 106

    (143) closed_dyadic_operator -> DECREASE .

    IF              reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    MINUS           reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    NOT             reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    ARROW           reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    ID              reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    LPAREN          reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    ICONST          reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    FALSE           reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    TRUE            reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    CCONST          reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    NULL            reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    SCONST          reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    ABS             reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    ASC             reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    NUM             reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    UPPER           reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    LOWER           reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    LENGTH          reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    READ            reduce using rule 143 (closed_dyadic_operator -> DECREASE .)
    PRINT           reduce using rule 143 (closed_dyadic_operator -> DECREASE .)


state 107

    (141) assigning_operator -> closed_dyadic_operator .

    IF              reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    MINUS           reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    NOT             reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    ARROW           reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    ID              reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    LPAREN          reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    ICONST          reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    FALSE           reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    TRUE            reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    CCONST          reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    NULL            reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    SCONST          reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    ABS             reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    ASC             reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    NUM             reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    UPPER           reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    LOWER           reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    LENGTH          reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    READ            reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)
    PRINT           reduce using rule 141 (assigning_operator -> closed_dyadic_operator .)


state 108

    (144) closed_dyadic_operator -> MULCREASE .

    IF              reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    MINUS           reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    NOT             reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    ARROW           reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    ID              reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    LPAREN          reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    ICONST          reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    FALSE           reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    TRUE            reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    CCONST          reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    NULL            reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    SCONST          reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    ABS             reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    ASC             reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    NUM             reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    UPPER           reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    LOWER           reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    LENGTH          reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    READ            reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)
    PRINT           reduce using rule 144 (closed_dyadic_operator -> MULCREASE .)


state 109

    (61) dereferenced_reference -> location ARROW .

    ARROW           reduce using rule 61 (dereferenced_reference -> location ARROW .)
    ASSIGN          reduce using rule 61 (dereferenced_reference -> location ARROW .)
    INCREASE        reduce using rule 61 (dereferenced_reference -> location ARROW .)
    DECREASE        reduce using rule 61 (dereferenced_reference -> location ARROW .)
    MULCREASE       reduce using rule 61 (dereferenced_reference -> location ARROW .)
    DIVCREASE       reduce using rule 61 (dereferenced_reference -> location ARROW .)
    MODCREASE       reduce using rule 61 (dereferenced_reference -> location ARROW .)
    LBRACKET        reduce using rule 61 (dereferenced_reference -> location ARROW .)
    TIMES           reduce using rule 61 (dereferenced_reference -> location ARROW .)
    DIVIDE          reduce using rule 61 (dereferenced_reference -> location ARROW .)
    MOD             reduce using rule 61 (dereferenced_reference -> location ARROW .)
    PLUS            reduce using rule 61 (dereferenced_reference -> location ARROW .)
    MINUS           reduce using rule 61 (dereferenced_reference -> location ARROW .)
    STRCAT          reduce using rule 61 (dereferenced_reference -> location ARROW .)
    AND             reduce using rule 61 (dereferenced_reference -> location ARROW .)
    OR              reduce using rule 61 (dereferenced_reference -> location ARROW .)
    EQUAL           reduce using rule 61 (dereferenced_reference -> location ARROW .)
    DIFF            reduce using rule 61 (dereferenced_reference -> location ARROW .)
    GREATER         reduce using rule 61 (dereferenced_reference -> location ARROW .)
    GREATEREQ       reduce using rule 61 (dereferenced_reference -> location ARROW .)
    LESS            reduce using rule 61 (dereferenced_reference -> location ARROW .)
    LESSEQ          reduce using rule 61 (dereferenced_reference -> location ARROW .)
    IN              reduce using rule 61 (dereferenced_reference -> location ARROW .)
    THEN            reduce using rule 61 (dereferenced_reference -> location ARROW .)
    FI              reduce using rule 61 (dereferenced_reference -> location ARROW .)
    RPAREN          reduce using rule 61 (dereferenced_reference -> location ARROW .)
    COMMA           reduce using rule 61 (dereferenced_reference -> location ARROW .)
    COLON           reduce using rule 61 (dereferenced_reference -> location ARROW .)
    RBRACKET        reduce using rule 61 (dereferenced_reference -> location ARROW .)
    ELSE            reduce using rule 61 (dereferenced_reference -> location ARROW .)
    ELSIF           reduce using rule 61 (dereferenced_reference -> location ARROW .)
    WHILE           reduce using rule 61 (dereferenced_reference -> location ARROW .)
    SEMI            reduce using rule 61 (dereferenced_reference -> location ARROW .)
    TO              reduce using rule 61 (dereferenced_reference -> location ARROW .)
    DOWN            reduce using rule 61 (dereferenced_reference -> location ARROW .)
    BY              reduce using rule 61 (dereferenced_reference -> location ARROW .)
    ID              reduce using rule 61 (dereferenced_reference -> location ARROW .)


state 110

    (142) closed_dyadic_operator -> INCREASE .

    IF              reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    MINUS           reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    NOT             reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    ARROW           reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    ID              reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    LPAREN          reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    ICONST          reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    FALSE           reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    TRUE            reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    CCONST          reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    NULL            reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    SCONST          reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    ABS             reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    ASC             reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    NUM             reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    UPPER           reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    LOWER           reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    LENGTH          reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    READ            reduce using rule 142 (closed_dyadic_operator -> INCREASE .)
    PRINT           reduce using rule 142 (closed_dyadic_operator -> INCREASE .)


state 111

    (140) assigning_operator -> ASSIGN .

    IF              reduce using rule 140 (assigning_operator -> ASSIGN .)
    MINUS           reduce using rule 140 (assigning_operator -> ASSIGN .)
    NOT             reduce using rule 140 (assigning_operator -> ASSIGN .)
    ARROW           reduce using rule 140 (assigning_operator -> ASSIGN .)
    ID              reduce using rule 140 (assigning_operator -> ASSIGN .)
    LPAREN          reduce using rule 140 (assigning_operator -> ASSIGN .)
    ICONST          reduce using rule 140 (assigning_operator -> ASSIGN .)
    FALSE           reduce using rule 140 (assigning_operator -> ASSIGN .)
    TRUE            reduce using rule 140 (assigning_operator -> ASSIGN .)
    CCONST          reduce using rule 140 (assigning_operator -> ASSIGN .)
    NULL            reduce using rule 140 (assigning_operator -> ASSIGN .)
    SCONST          reduce using rule 140 (assigning_operator -> ASSIGN .)
    ABS             reduce using rule 140 (assigning_operator -> ASSIGN .)
    ASC             reduce using rule 140 (assigning_operator -> ASSIGN .)
    NUM             reduce using rule 140 (assigning_operator -> ASSIGN .)
    UPPER           reduce using rule 140 (assigning_operator -> ASSIGN .)
    LOWER           reduce using rule 140 (assigning_operator -> ASSIGN .)
    LENGTH          reduce using rule 140 (assigning_operator -> ASSIGN .)
    READ            reduce using rule 140 (assigning_operator -> ASSIGN .)
    PRINT           reduce using rule 140 (assigning_operator -> ASSIGN .)


state 112

    (10) declaration_list -> declaration .

    SEMI            reduce using rule 10 (declaration_list -> declaration .)
    COMMA           reduce using rule 10 (declaration_list -> declaration .)


state 113

    (9) declaration_statement -> DCL declaration_list . SEMI
    (11) declaration_list -> declaration_list . COMMA declaration

    SEMI            shift and go to state 193
    COMMA           shift and go to state 194


state 114

    (12) declaration -> identifier_list . mode
    (13) declaration -> identifier_list . mode initialization
    (16) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (45) reference_mode -> . REF mode
    (46) composite_mode -> . string_mode
    (47) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (48) string_mode -> . CHARS LBRACKET ICONST RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    COMMA           shift and go to state 135
    REF             shift and go to state 153
    ID              shift and go to state 32
    INT             shift and go to state 142
    BOOL            shift and go to state 155
    CHAR            shift and go to state 149
    CHARS           shift and go to state 156
    ARRAY           shift and go to state 157

    character_mode                 shift and go to state 147
    integer_mode                   shift and go to state 139
    reference_mode                 shift and go to state 140
    identifier                     shift and go to state 141
    mode_name                      shift and go to state 154
    string_mode                    shift and go to state 148
    composite_mode                 shift and go to state 150
    array_mode                     shift and go to state 151
    discrete_mode                  shift and go to state 143
    mode                           shift and go to state 195
    discrete_range_mode            shift and go to state 145
    boolean_mode                   shift and go to state 146

state 115

    (186) exit_label_id -> identifier .

    SEMI            reduce using rule 186 (exit_label_id -> identifier .)


state 116

    (185) exit_action -> EXIT exit_label_id .

    SEMI            reduce using rule 185 (exit_action -> EXIT exit_label_id .)


state 117

    (201) procedure_statement -> label_id COLON . procedure_definition SEMI
    (129) action_statement -> label_id COLON . action SEMI
    (202) procedure_definition -> . formal_procedure_head END
    (203) procedure_definition -> . formal_procedure_head statement_list END
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (204) formal_procedure_head -> . PROC parenthesis_gambiarra SEMI
    (205) formal_procedure_head -> . PROC parenthesis_gambiarra result_spec SEMI
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    PROC            shift and go to state 196
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    IF              shift and go to state 16
    DO              shift and go to state 1
    ID              shift and go to state 32
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 21
    bracketed_action               shift and go to state 23
    identifier                     shift and go to state 65
    dereferenced_reference         shift and go to state 27
    builtin_name                   shift and go to state 28
    return_action                  shift and go to state 6
    procedure_call                 shift and go to state 8
    action                         shift and go to state 198
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    builtin_call                   shift and go to state 29
    location                       shift and go to state 35
    exit_action                    shift and go to state 13
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    array_slice                    shift and go to state 18
    formal_procedure_head          shift and go to state 199
    result_action                  shift and go to state 19
    procedure_definition           shift and go to state 197
    do_action                      shift and go to state 41

state 118

    (177) while_control -> WHILE boolean_expression .

    SEMI            reduce using rule 177 (while_control -> WHILE boolean_expression .)


state 119

    (158) do_action -> DO control_part SEMI . OD
    (160) do_action -> DO control_part SEMI . action_statement_list OD
    (151) action_statement_list -> . action_statement
    (152) action_statement_list -> . action_statement_list action_statement
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (130) label_id -> . identifier
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (17) identifier -> . ID
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    OD              shift and go to state 200
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    ID              shift and go to state 32
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 21
    action_statement_list          shift and go to state 201
    bracketed_action               shift and go to state 23
    identifier                     shift and go to state 2
    action_statement               shift and go to state 49
    dereferenced_reference         shift and go to state 27
    return_action                  shift and go to state 6
    builtin_name                   shift and go to state 28
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    action                         shift and go to state 30
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    exit_action                    shift and go to state 13
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    do_action                      shift and go to state 41
    label_id                       shift and go to state 52

state 120

    (165) iteration -> step_enumeration .

    WHILE           reduce using rule 165 (iteration -> step_enumeration .)
    SEMI            reduce using rule 165 (iteration -> step_enumeration .)


state 121

    (169) loop_counter -> identifier .

    ASSIGN          reduce using rule 169 (loop_counter -> identifier .)
    IN              reduce using rule 169 (loop_counter -> identifier .)
    DOWN            reduce using rule 169 (loop_counter -> identifier .)


state 122

    (166) iteration -> range_enumeration .

    WHILE           reduce using rule 166 (iteration -> range_enumeration .)
    SEMI            reduce using rule 166 (iteration -> range_enumeration .)


state 123

    (162) control_part -> FOR for_control .
    (163) control_part -> FOR for_control . while_control
    (177) while_control -> . WHILE boolean_expression

    SEMI            reduce using rule 162 (control_part -> FOR for_control .)
    WHILE           shift and go to state 45

    while_control                  shift and go to state 202

state 124

    (164) for_control -> iteration .

    WHILE           reduce using rule 164 (for_control -> iteration .)
    SEMI            reduce using rule 164 (for_control -> iteration .)


state 125

    (167) step_enumeration -> loop_counter . ASSIGN start_value end_value
    (168) step_enumeration -> loop_counter . ASSIGN start_value step_value end_value
    (175) range_enumeration -> loop_counter . IN discrete_mode
    (176) range_enumeration -> loop_counter . DOWN IN discrete_mode

    ASSIGN          shift and go to state 204
    IN              shift and go to state 205
    DOWN            shift and go to state 203


state 126

    (159) do_action -> DO action_statement_list OD .

    SEMI            reduce using rule 159 (do_action -> DO action_statement_list OD .)


state 127

    (152) action_statement_list -> action_statement_list action_statement .

    EXIT            reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    RETURN          reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    RESULT          reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    ID              reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    IF              reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    DO              reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    ABS             reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    ASC             reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    NUM             reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    UPPER           reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    LOWER           reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    LENGTH          reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    READ            reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    PRINT           reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    FI              reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    ELSE            reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    ELSIF           reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)
    OD              reduce using rule 152 (action_statement_list -> action_statement_list action_statement .)


state 128

    (129) action_statement -> label_id COLON . action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    IF              shift and go to state 16
    DO              shift and go to state 1
    ID              shift and go to state 32
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 21
    bracketed_action               shift and go to state 23
    identifier                     shift and go to state 65
    dereferenced_reference         shift and go to state 27
    builtin_name                   shift and go to state 28
    return_action                  shift and go to state 6
    procedure_call                 shift and go to state 8
    action                         shift and go to state 198
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    builtin_call                   shift and go to state 29
    location                       shift and go to state 35
    exit_action                    shift and go to state 13
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    do_action                      shift and go to state 41

state 129

    (184) parameter -> expression .

    RPAREN          reduce using rule 184 (parameter -> expression .)
    COMMA           reduce using rule 184 (parameter -> expression .)


state 130

    (182) parameter_list -> parameter .

    RPAREN          reduce using rule 182 (parameter_list -> parameter .)
    COMMA           reduce using rule 182 (parameter_list -> parameter .)


state 131

    (181) procedure_call -> identifier LPAREN parameter_list . RPAREN
    (183) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 206
    COMMA           shift and go to state 207


state 132

    (180) procedure_call -> identifier LPAREN RPAREN .

    ARROW           reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    TIMES           reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    DIVIDE          reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    MOD             reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    PLUS            reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    MINUS           reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    STRCAT          reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    AND             reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    OR              reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    EQUAL           reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    DIFF            reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    GREATER         reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    GREATEREQ       reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    LESS            reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    LESSEQ          reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    IN              reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    SEMI            reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    THEN            reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    RPAREN          reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    COMMA           reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    RBRACKET        reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    COLON           reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    ID              reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    TO              reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    DOWN            reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    BY              reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    ELSE            reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    ELSIF           reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    FI              reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    WHILE           reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    LBRACKET        reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    ASSIGN          reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    INCREASE        reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    DECREASE        reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    MULCREASE       reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    DIVCREASE       reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)
    MODCREASE       reduce using rule 180 (procedure_call -> identifier LPAREN RPAREN .)


state 133

    (24) newmode_statement -> TYPE newmode_list SEMI .

    END             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DCL             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ID              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    EXIT            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RETURN          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RESULT          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    IF              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DO              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ABS             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ASC             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    NUM             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    UPPER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LOWER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LENGTH          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    READ            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    PRINT           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)


state 134

    (26) newmode_list -> newmode_list COMMA . mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 32

    identifier                     shift and go to state 56
    mode_definition                shift and go to state 208
    identifier_list                shift and go to state 57

state 135

    (16) identifier_list -> identifier_list COMMA . identifier
    (17) identifier -> . ID

    ID              shift and go to state 32

    identifier                     shift and go to state 209

state 136

    (27) mode_definition -> identifier_list ASSIGN . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (45) reference_mode -> . REF mode
    (46) composite_mode -> . string_mode
    (47) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (48) string_mode -> . CHARS LBRACKET ICONST RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    REF             shift and go to state 153
    ID              shift and go to state 32
    INT             shift and go to state 142
    BOOL            shift and go to state 155
    CHAR            shift and go to state 149
    CHARS           shift and go to state 156
    ARRAY           shift and go to state 157

    character_mode                 shift and go to state 147
    discrete_range_mode            shift and go to state 145
    reference_mode                 shift and go to state 140
    identifier                     shift and go to state 141
    mode_name                      shift and go to state 154
    string_mode                    shift and go to state 148
    composite_mode                 shift and go to state 150
    array_mode                     shift and go to state 151
    discrete_mode                  shift and go to state 143
    mode                           shift and go to state 210
    integer_mode                   shift and go to state 139
    boolean_mode                   shift and go to state 146

state 137

    (20) synonym_list -> synonym_list synonym_definition .

    SEMI            reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    ID              reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)


state 138

    (18) synonym_statement -> SYN synonym_list SEMI .

    DCL             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ID              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    EXIT            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RETURN          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RESULT          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    IF              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    DO              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ABS             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ASC             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    NUM             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    UPPER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LOWER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LENGTH          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    READ            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    PRINT           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    END             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)


state 139

    (32) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 32 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 32 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 32 (discrete_mode -> integer_mode .)
    WHILE           reduce using rule 32 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 32 (discrete_mode -> integer_mode .)


state 140

    (30) mode -> reference_mode .

    ASSIGN          reduce using rule 30 (mode -> reference_mode .)
    SEMI            reduce using rule 30 (mode -> reference_mode .)
    COMMA           reduce using rule 30 (mode -> reference_mode .)
    LOC             reduce using rule 30 (mode -> reference_mode .)
    RPAREN          reduce using rule 30 (mode -> reference_mode .)


state 141

    (41) mode_name -> identifier .
    (39) discrete_range_mode -> identifier . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 41 (mode_name -> identifier .)
    SEMI            reduce using rule 41 (mode_name -> identifier .)
    COMMA           reduce using rule 41 (mode_name -> identifier .)
    LOC             reduce using rule 41 (mode_name -> identifier .)
    RPAREN          reduce using rule 41 (mode_name -> identifier .)
    LPAREN          shift and go to state 211


state 142

    (36) integer_mode -> INT .

    LPAREN          reduce using rule 36 (integer_mode -> INT .)
    WHILE           reduce using rule 36 (integer_mode -> INT .)
    SEMI            reduce using rule 36 (integer_mode -> INT .)
    LOC             reduce using rule 36 (integer_mode -> INT .)
    RPAREN          reduce using rule 36 (integer_mode -> INT .)
    COMMA           reduce using rule 36 (integer_mode -> INT .)
    ASSIGN          reduce using rule 36 (integer_mode -> INT .)
    RBRACKET        reduce using rule 36 (integer_mode -> INT .)


state 143

    (29) mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 29 (mode -> discrete_mode .)
    SEMI            reduce using rule 29 (mode -> discrete_mode .)
    COMMA           reduce using rule 29 (mode -> discrete_mode .)
    LOC             reduce using rule 29 (mode -> discrete_mode .)
    RPAREN          reduce using rule 29 (mode -> discrete_mode .)
    LPAREN          shift and go to state 212


state 144

    (22) synonym_definition -> identifier_list mode . ASSIGN constant_expression

    ASSIGN          shift and go to state 213


state 145

    (35) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    WHILE           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 35 (discrete_mode -> discrete_range_mode .)


state 146

    (33) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 33 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 33 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    WHILE           reduce using rule 33 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 33 (discrete_mode -> boolean_mode .)


state 147

    (34) discrete_mode -> character_mode .

    LPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    LOC             reduce using rule 34 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 34 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 34 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 34 (discrete_mode -> character_mode .)
    WHILE           reduce using rule 34 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 34 (discrete_mode -> character_mode .)


state 148

    (46) composite_mode -> string_mode .

    ASSIGN          reduce using rule 46 (composite_mode -> string_mode .)
    SEMI            reduce using rule 46 (composite_mode -> string_mode .)
    COMMA           reduce using rule 46 (composite_mode -> string_mode .)
    LOC             reduce using rule 46 (composite_mode -> string_mode .)
    RPAREN          reduce using rule 46 (composite_mode -> string_mode .)


state 149

    (38) character_mode -> CHAR .

    LPAREN          reduce using rule 38 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 38 (character_mode -> CHAR .)
    SEMI            reduce using rule 38 (character_mode -> CHAR .)
    COMMA           reduce using rule 38 (character_mode -> CHAR .)
    LOC             reduce using rule 38 (character_mode -> CHAR .)
    RPAREN          reduce using rule 38 (character_mode -> CHAR .)
    WHILE           reduce using rule 38 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 38 (character_mode -> CHAR .)


state 150

    (31) mode -> composite_mode .

    ASSIGN          reduce using rule 31 (mode -> composite_mode .)
    SEMI            reduce using rule 31 (mode -> composite_mode .)
    COMMA           reduce using rule 31 (mode -> composite_mode .)
    LOC             reduce using rule 31 (mode -> composite_mode .)
    RPAREN          reduce using rule 31 (mode -> composite_mode .)


state 151

    (47) composite_mode -> array_mode .

    ASSIGN          reduce using rule 47 (composite_mode -> array_mode .)
    SEMI            reduce using rule 47 (composite_mode -> array_mode .)
    COMMA           reduce using rule 47 (composite_mode -> array_mode .)
    LOC             reduce using rule 47 (composite_mode -> array_mode .)
    RPAREN          reduce using rule 47 (composite_mode -> array_mode .)


state 152

    (21) synonym_definition -> identifier_list ASSIGN . constant_expression
    (23) constant_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    boolean_literal                shift and go to state 62
    array_location                 shift and go to state 33
    identifier                     shift and go to state 65
    referenced_location            shift and go to state 66
    primitive_value                shift and go to state 87
    value_array_slice              shift and go to state 68
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    character_string_literal       shift and go to state 73
    operand2                       shift and go to state 74
    empty_literal                  shift and go to state 75
    array_slice                    shift and go to state 18
    literal                        shift and go to state 77
    operand0                       shift and go to state 79
    character_literal              shift and go to state 80
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    builtin_name                   shift and go to state 28
    constant_expression            shift and go to state 215
    builtin_call                   shift and go to state 29
    operand3                       shift and go to state 90
    parenthesized_expression       shift and go to state 91
    array_element                  shift and go to state 34
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    value_array_element            shift and go to state 95
    expression                     shift and go to state 214
    conditional_expression         shift and go to state 96

state 153

    (45) reference_mode -> REF . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (45) reference_mode -> . REF mode
    (46) composite_mode -> . string_mode
    (47) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (48) string_mode -> . CHARS LBRACKET ICONST RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    REF             shift and go to state 153
    ID              shift and go to state 32
    INT             shift and go to state 142
    BOOL            shift and go to state 155
    CHAR            shift and go to state 149
    CHARS           shift and go to state 156
    ARRAY           shift and go to state 157

    character_mode                 shift and go to state 147
    discrete_range_mode            shift and go to state 145
    reference_mode                 shift and go to state 140
    identifier                     shift and go to state 141
    mode_name                      shift and go to state 154
    string_mode                    shift and go to state 148
    composite_mode                 shift and go to state 150
    array_mode                     shift and go to state 151
    discrete_mode                  shift and go to state 143
    mode                           shift and go to state 216
    integer_mode                   shift and go to state 139
    boolean_mode                   shift and go to state 146

state 154

    (28) mode -> mode_name .

    ASSIGN          reduce using rule 28 (mode -> mode_name .)
    SEMI            reduce using rule 28 (mode -> mode_name .)
    COMMA           reduce using rule 28 (mode -> mode_name .)
    LOC             reduce using rule 28 (mode -> mode_name .)
    RPAREN          reduce using rule 28 (mode -> mode_name .)


state 155

    (37) boolean_mode -> BOOL .

    LPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    WHILE           reduce using rule 37 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 37 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 37 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 37 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    LOC             reduce using rule 37 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 37 (boolean_mode -> BOOL .)


state 156

    (48) string_mode -> CHARS . LBRACKET ICONST RBRACKET

    LBRACKET        shift and go to state 217


state 157

    (49) array_mode -> ARRAY . LBRACKET index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 218


state 158

    (127) referenced_location -> ARROW location .
    (61) dereferenced_reference -> location . ARROW
    (66) array_location -> location .

    TIMES           reduce using rule 127 (referenced_location -> ARROW location .)
    DIVIDE          reduce using rule 127 (referenced_location -> ARROW location .)
    MOD             reduce using rule 127 (referenced_location -> ARROW location .)
    PLUS            reduce using rule 127 (referenced_location -> ARROW location .)
    MINUS           reduce using rule 127 (referenced_location -> ARROW location .)
    STRCAT          reduce using rule 127 (referenced_location -> ARROW location .)
    AND             reduce using rule 127 (referenced_location -> ARROW location .)
    OR              reduce using rule 127 (referenced_location -> ARROW location .)
    EQUAL           reduce using rule 127 (referenced_location -> ARROW location .)
    DIFF            reduce using rule 127 (referenced_location -> ARROW location .)
    GREATER         reduce using rule 127 (referenced_location -> ARROW location .)
    GREATEREQ       reduce using rule 127 (referenced_location -> ARROW location .)
    LESS            reduce using rule 127 (referenced_location -> ARROW location .)
    LESSEQ          reduce using rule 127 (referenced_location -> ARROW location .)
    IN              reduce using rule 127 (referenced_location -> ARROW location .)
    WHILE           reduce using rule 127 (referenced_location -> ARROW location .)
    SEMI            reduce using rule 127 (referenced_location -> ARROW location .)
    TO              reduce using rule 127 (referenced_location -> ARROW location .)
    DOWN            reduce using rule 127 (referenced_location -> ARROW location .)
    BY              reduce using rule 127 (referenced_location -> ARROW location .)
    COLON           reduce using rule 127 (referenced_location -> ARROW location .)
    RPAREN          reduce using rule 127 (referenced_location -> ARROW location .)
    ID              reduce using rule 127 (referenced_location -> ARROW location .)
    RBRACKET        reduce using rule 127 (referenced_location -> ARROW location .)
    THEN            reduce using rule 127 (referenced_location -> ARROW location .)
    COMMA           reduce using rule 127 (referenced_location -> ARROW location .)
    ELSE            reduce using rule 127 (referenced_location -> ARROW location .)
    ELSIF           reduce using rule 127 (referenced_location -> ARROW location .)
    FI              reduce using rule 127 (referenced_location -> ARROW location .)
    ARROW           shift and go to state 109
    LBRACKET        reduce using rule 66 (array_location -> location .)


state 159

    (88) conditional_expression -> IF boolean_expression . then_expression else_expression FI
    (89) conditional_expression -> IF boolean_expression . then_expression elsif_expression else_expression FI
    (91) then_expression -> . THEN expression

    THEN            shift and go to state 220

    then_expression                shift and go to state 219

state 160

    (119) arithmetic_multiplicative_operator -> MOD .

    MINUS           reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    NOT             reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    ARROW           reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    ID              reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    LPAREN          reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    ICONST          reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    FALSE           reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    TRUE            reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    CCONST          reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    NULL            reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    SCONST          reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    ABS             reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    ASC             reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    NUM             reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    UPPER           reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    LOWER           reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    LENGTH          reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    READ            reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)
    PRINT           reduce using rule 119 (arithmetic_multiplicative_operator -> MOD .)


state 161

    (117) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    ARROW           reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    LPAREN          reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    ABS             reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    ASC             reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    NUM             reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    UPPER           reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    LOWER           reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    LENGTH          reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    READ            reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)
    PRINT           reduce using rule 117 (arithmetic_multiplicative_operator -> TIMES .)


state 162

    (116) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 93
    boolean_literal                shift and go to state 62
    dereferenced_reference         shift and go to state 27
    array_location                 shift and go to state 33
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    literal                        shift and go to state 77
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    builtin_name                   shift and go to state 28
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    array_element                  shift and go to state 34
    location                       shift and go to state 92
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    operand3                       shift and go to state 221

state 163

    (118) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    ARROW           reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    LPAREN          reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    ABS             reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    ASC             reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    NUM             reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    UPPER           reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    LOWER           reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    LENGTH          reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    READ            reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)
    PRINT           reduce using rule 118 (arithmetic_multiplicative_operator -> DIVIDE .)


state 164

    (100) relational_operator -> OR .

    MINUS           reduce using rule 100 (relational_operator -> OR .)
    NOT             reduce using rule 100 (relational_operator -> OR .)
    ARROW           reduce using rule 100 (relational_operator -> OR .)
    ID              reduce using rule 100 (relational_operator -> OR .)
    LPAREN          reduce using rule 100 (relational_operator -> OR .)
    ICONST          reduce using rule 100 (relational_operator -> OR .)
    FALSE           reduce using rule 100 (relational_operator -> OR .)
    TRUE            reduce using rule 100 (relational_operator -> OR .)
    CCONST          reduce using rule 100 (relational_operator -> OR .)
    NULL            reduce using rule 100 (relational_operator -> OR .)
    SCONST          reduce using rule 100 (relational_operator -> OR .)
    ABS             reduce using rule 100 (relational_operator -> OR .)
    ASC             reduce using rule 100 (relational_operator -> OR .)
    NUM             reduce using rule 100 (relational_operator -> OR .)
    UPPER           reduce using rule 100 (relational_operator -> OR .)
    LOWER           reduce using rule 100 (relational_operator -> OR .)
    LENGTH          reduce using rule 100 (relational_operator -> OR .)
    READ            reduce using rule 100 (relational_operator -> OR .)
    PRINT           reduce using rule 100 (relational_operator -> OR .)


state 165

    (97) operator1 -> relational_operator .

    MINUS           reduce using rule 97 (operator1 -> relational_operator .)
    NOT             reduce using rule 97 (operator1 -> relational_operator .)
    ARROW           reduce using rule 97 (operator1 -> relational_operator .)
    ID              reduce using rule 97 (operator1 -> relational_operator .)
    LPAREN          reduce using rule 97 (operator1 -> relational_operator .)
    ICONST          reduce using rule 97 (operator1 -> relational_operator .)
    FALSE           reduce using rule 97 (operator1 -> relational_operator .)
    TRUE            reduce using rule 97 (operator1 -> relational_operator .)
    CCONST          reduce using rule 97 (operator1 -> relational_operator .)
    NULL            reduce using rule 97 (operator1 -> relational_operator .)
    SCONST          reduce using rule 97 (operator1 -> relational_operator .)
    ABS             reduce using rule 97 (operator1 -> relational_operator .)
    ASC             reduce using rule 97 (operator1 -> relational_operator .)
    NUM             reduce using rule 97 (operator1 -> relational_operator .)
    UPPER           reduce using rule 97 (operator1 -> relational_operator .)
    LOWER           reduce using rule 97 (operator1 -> relational_operator .)
    LENGTH          reduce using rule 97 (operator1 -> relational_operator .)
    READ            reduce using rule 97 (operator1 -> relational_operator .)
    PRINT           reduce using rule 97 (operator1 -> relational_operator .)


state 166

    (99) relational_operator -> AND .

    MINUS           reduce using rule 99 (relational_operator -> AND .)
    NOT             reduce using rule 99 (relational_operator -> AND .)
    ARROW           reduce using rule 99 (relational_operator -> AND .)
    ID              reduce using rule 99 (relational_operator -> AND .)
    LPAREN          reduce using rule 99 (relational_operator -> AND .)
    ICONST          reduce using rule 99 (relational_operator -> AND .)
    FALSE           reduce using rule 99 (relational_operator -> AND .)
    TRUE            reduce using rule 99 (relational_operator -> AND .)
    CCONST          reduce using rule 99 (relational_operator -> AND .)
    NULL            reduce using rule 99 (relational_operator -> AND .)
    SCONST          reduce using rule 99 (relational_operator -> AND .)
    ABS             reduce using rule 99 (relational_operator -> AND .)
    ASC             reduce using rule 99 (relational_operator -> AND .)
    NUM             reduce using rule 99 (relational_operator -> AND .)
    UPPER           reduce using rule 99 (relational_operator -> AND .)
    LOWER           reduce using rule 99 (relational_operator -> AND .)
    LENGTH          reduce using rule 99 (relational_operator -> AND .)
    READ            reduce using rule 99 (relational_operator -> AND .)
    PRINT           reduce using rule 99 (relational_operator -> AND .)


state 167

    (101) relational_operator -> EQUAL .

    MINUS           reduce using rule 101 (relational_operator -> EQUAL .)
    NOT             reduce using rule 101 (relational_operator -> EQUAL .)
    ARROW           reduce using rule 101 (relational_operator -> EQUAL .)
    ID              reduce using rule 101 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 101 (relational_operator -> EQUAL .)
    ICONST          reduce using rule 101 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 101 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 101 (relational_operator -> EQUAL .)
    CCONST          reduce using rule 101 (relational_operator -> EQUAL .)
    NULL            reduce using rule 101 (relational_operator -> EQUAL .)
    SCONST          reduce using rule 101 (relational_operator -> EQUAL .)
    ABS             reduce using rule 101 (relational_operator -> EQUAL .)
    ASC             reduce using rule 101 (relational_operator -> EQUAL .)
    NUM             reduce using rule 101 (relational_operator -> EQUAL .)
    UPPER           reduce using rule 101 (relational_operator -> EQUAL .)
    LOWER           reduce using rule 101 (relational_operator -> EQUAL .)
    LENGTH          reduce using rule 101 (relational_operator -> EQUAL .)
    READ            reduce using rule 101 (relational_operator -> EQUAL .)
    PRINT           reduce using rule 101 (relational_operator -> EQUAL .)


state 168

    (107) membership_operator -> IN .

    MINUS           reduce using rule 107 (membership_operator -> IN .)
    NOT             reduce using rule 107 (membership_operator -> IN .)
    ARROW           reduce using rule 107 (membership_operator -> IN .)
    ID              reduce using rule 107 (membership_operator -> IN .)
    LPAREN          reduce using rule 107 (membership_operator -> IN .)
    ICONST          reduce using rule 107 (membership_operator -> IN .)
    FALSE           reduce using rule 107 (membership_operator -> IN .)
    TRUE            reduce using rule 107 (membership_operator -> IN .)
    CCONST          reduce using rule 107 (membership_operator -> IN .)
    NULL            reduce using rule 107 (membership_operator -> IN .)
    SCONST          reduce using rule 107 (membership_operator -> IN .)
    ABS             reduce using rule 107 (membership_operator -> IN .)
    ASC             reduce using rule 107 (membership_operator -> IN .)
    NUM             reduce using rule 107 (membership_operator -> IN .)
    UPPER           reduce using rule 107 (membership_operator -> IN .)
    LOWER           reduce using rule 107 (membership_operator -> IN .)
    LENGTH          reduce using rule 107 (membership_operator -> IN .)
    READ            reduce using rule 107 (membership_operator -> IN .)
    PRINT           reduce using rule 107 (membership_operator -> IN .)


state 169

    (96) operand0 -> operand0 operator1 . operand1
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 93
    dereferenced_reference         shift and go to state 27
    array_location                 shift and go to state 33
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 222
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    builtin_name                   shift and go to state 28
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77

state 170

    (102) relational_operator -> DIFF .

    MINUS           reduce using rule 102 (relational_operator -> DIFF .)
    NOT             reduce using rule 102 (relational_operator -> DIFF .)
    ARROW           reduce using rule 102 (relational_operator -> DIFF .)
    ID              reduce using rule 102 (relational_operator -> DIFF .)
    LPAREN          reduce using rule 102 (relational_operator -> DIFF .)
    ICONST          reduce using rule 102 (relational_operator -> DIFF .)
    FALSE           reduce using rule 102 (relational_operator -> DIFF .)
    TRUE            reduce using rule 102 (relational_operator -> DIFF .)
    CCONST          reduce using rule 102 (relational_operator -> DIFF .)
    NULL            reduce using rule 102 (relational_operator -> DIFF .)
    SCONST          reduce using rule 102 (relational_operator -> DIFF .)
    ABS             reduce using rule 102 (relational_operator -> DIFF .)
    ASC             reduce using rule 102 (relational_operator -> DIFF .)
    NUM             reduce using rule 102 (relational_operator -> DIFF .)
    UPPER           reduce using rule 102 (relational_operator -> DIFF .)
    LOWER           reduce using rule 102 (relational_operator -> DIFF .)
    LENGTH          reduce using rule 102 (relational_operator -> DIFF .)
    READ            reduce using rule 102 (relational_operator -> DIFF .)
    PRINT           reduce using rule 102 (relational_operator -> DIFF .)


state 171

    (106) relational_operator -> LESSEQ .

    MINUS           reduce using rule 106 (relational_operator -> LESSEQ .)
    NOT             reduce using rule 106 (relational_operator -> LESSEQ .)
    ARROW           reduce using rule 106 (relational_operator -> LESSEQ .)
    ID              reduce using rule 106 (relational_operator -> LESSEQ .)
    LPAREN          reduce using rule 106 (relational_operator -> LESSEQ .)
    ICONST          reduce using rule 106 (relational_operator -> LESSEQ .)
    FALSE           reduce using rule 106 (relational_operator -> LESSEQ .)
    TRUE            reduce using rule 106 (relational_operator -> LESSEQ .)
    CCONST          reduce using rule 106 (relational_operator -> LESSEQ .)
    NULL            reduce using rule 106 (relational_operator -> LESSEQ .)
    SCONST          reduce using rule 106 (relational_operator -> LESSEQ .)
    ABS             reduce using rule 106 (relational_operator -> LESSEQ .)
    ASC             reduce using rule 106 (relational_operator -> LESSEQ .)
    NUM             reduce using rule 106 (relational_operator -> LESSEQ .)
    UPPER           reduce using rule 106 (relational_operator -> LESSEQ .)
    LOWER           reduce using rule 106 (relational_operator -> LESSEQ .)
    LENGTH          reduce using rule 106 (relational_operator -> LESSEQ .)
    READ            reduce using rule 106 (relational_operator -> LESSEQ .)
    PRINT           reduce using rule 106 (relational_operator -> LESSEQ .)


state 172

    (104) relational_operator -> GREATEREQ .

    MINUS           reduce using rule 104 (relational_operator -> GREATEREQ .)
    NOT             reduce using rule 104 (relational_operator -> GREATEREQ .)
    ARROW           reduce using rule 104 (relational_operator -> GREATEREQ .)
    ID              reduce using rule 104 (relational_operator -> GREATEREQ .)
    LPAREN          reduce using rule 104 (relational_operator -> GREATEREQ .)
    ICONST          reduce using rule 104 (relational_operator -> GREATEREQ .)
    FALSE           reduce using rule 104 (relational_operator -> GREATEREQ .)
    TRUE            reduce using rule 104 (relational_operator -> GREATEREQ .)
    CCONST          reduce using rule 104 (relational_operator -> GREATEREQ .)
    NULL            reduce using rule 104 (relational_operator -> GREATEREQ .)
    SCONST          reduce using rule 104 (relational_operator -> GREATEREQ .)
    ABS             reduce using rule 104 (relational_operator -> GREATEREQ .)
    ASC             reduce using rule 104 (relational_operator -> GREATEREQ .)
    NUM             reduce using rule 104 (relational_operator -> GREATEREQ .)
    UPPER           reduce using rule 104 (relational_operator -> GREATEREQ .)
    LOWER           reduce using rule 104 (relational_operator -> GREATEREQ .)
    LENGTH          reduce using rule 104 (relational_operator -> GREATEREQ .)
    READ            reduce using rule 104 (relational_operator -> GREATEREQ .)
    PRINT           reduce using rule 104 (relational_operator -> GREATEREQ .)


state 173

    (98) operator1 -> membership_operator .

    MINUS           reduce using rule 98 (operator1 -> membership_operator .)
    NOT             reduce using rule 98 (operator1 -> membership_operator .)
    ARROW           reduce using rule 98 (operator1 -> membership_operator .)
    ID              reduce using rule 98 (operator1 -> membership_operator .)
    LPAREN          reduce using rule 98 (operator1 -> membership_operator .)
    ICONST          reduce using rule 98 (operator1 -> membership_operator .)
    FALSE           reduce using rule 98 (operator1 -> membership_operator .)
    TRUE            reduce using rule 98 (operator1 -> membership_operator .)
    CCONST          reduce using rule 98 (operator1 -> membership_operator .)
    NULL            reduce using rule 98 (operator1 -> membership_operator .)
    SCONST          reduce using rule 98 (operator1 -> membership_operator .)
    ABS             reduce using rule 98 (operator1 -> membership_operator .)
    ASC             reduce using rule 98 (operator1 -> membership_operator .)
    NUM             reduce using rule 98 (operator1 -> membership_operator .)
    UPPER           reduce using rule 98 (operator1 -> membership_operator .)
    LOWER           reduce using rule 98 (operator1 -> membership_operator .)
    LENGTH          reduce using rule 98 (operator1 -> membership_operator .)
    READ            reduce using rule 98 (operator1 -> membership_operator .)
    PRINT           reduce using rule 98 (operator1 -> membership_operator .)


state 174

    (103) relational_operator -> GREATER .

    MINUS           reduce using rule 103 (relational_operator -> GREATER .)
    NOT             reduce using rule 103 (relational_operator -> GREATER .)
    ARROW           reduce using rule 103 (relational_operator -> GREATER .)
    ID              reduce using rule 103 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 103 (relational_operator -> GREATER .)
    ICONST          reduce using rule 103 (relational_operator -> GREATER .)
    FALSE           reduce using rule 103 (relational_operator -> GREATER .)
    TRUE            reduce using rule 103 (relational_operator -> GREATER .)
    CCONST          reduce using rule 103 (relational_operator -> GREATER .)
    NULL            reduce using rule 103 (relational_operator -> GREATER .)
    SCONST          reduce using rule 103 (relational_operator -> GREATER .)
    ABS             reduce using rule 103 (relational_operator -> GREATER .)
    ASC             reduce using rule 103 (relational_operator -> GREATER .)
    NUM             reduce using rule 103 (relational_operator -> GREATER .)
    UPPER           reduce using rule 103 (relational_operator -> GREATER .)
    LOWER           reduce using rule 103 (relational_operator -> GREATER .)
    LENGTH          reduce using rule 103 (relational_operator -> GREATER .)
    READ            reduce using rule 103 (relational_operator -> GREATER .)
    PRINT           reduce using rule 103 (relational_operator -> GREATER .)


state 175

    (105) relational_operator -> LESS .

    MINUS           reduce using rule 105 (relational_operator -> LESS .)
    NOT             reduce using rule 105 (relational_operator -> LESS .)
    ARROW           reduce using rule 105 (relational_operator -> LESS .)
    ID              reduce using rule 105 (relational_operator -> LESS .)
    LPAREN          reduce using rule 105 (relational_operator -> LESS .)
    ICONST          reduce using rule 105 (relational_operator -> LESS .)
    FALSE           reduce using rule 105 (relational_operator -> LESS .)
    TRUE            reduce using rule 105 (relational_operator -> LESS .)
    CCONST          reduce using rule 105 (relational_operator -> LESS .)
    NULL            reduce using rule 105 (relational_operator -> LESS .)
    SCONST          reduce using rule 105 (relational_operator -> LESS .)
    ABS             reduce using rule 105 (relational_operator -> LESS .)
    ASC             reduce using rule 105 (relational_operator -> LESS .)
    NUM             reduce using rule 105 (relational_operator -> LESS .)
    UPPER           reduce using rule 105 (relational_operator -> LESS .)
    LOWER           reduce using rule 105 (relational_operator -> LESS .)
    LENGTH          reduce using rule 105 (relational_operator -> LESS .)
    READ            reduce using rule 105 (relational_operator -> LESS .)
    PRINT           reduce using rule 105 (relational_operator -> LESS .)


state 176

    (82) value_array_element -> array_primitive_value LBRACKET . integer_expression RBRACKET
    (83) value_array_slice -> array_primitive_value LBRACKET . lower_bound COLON upper_bound RBRACKET
    (55) integer_expression -> . expression
    (43) lower_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    lower_bound                    shift and go to state 225
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    integer_expression             shift and go to state 224
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    character_literal              shift and go to state 80
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 223
    conditional_expression         shift and go to state 96

state 177

    (114) string_concatenation_operator -> STRCAT .

    MINUS           reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    NOT             reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    ARROW           reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    ID              reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    LPAREN          reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    ICONST          reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    FALSE           reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    TRUE            reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    CCONST          reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    NULL            reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    SCONST          reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    ABS             reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    ASC             reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    NUM             reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    UPPER           reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    LOWER           reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    LENGTH          reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    READ            reduce using rule 114 (string_concatenation_operator -> STRCAT .)
    PRINT           reduce using rule 114 (string_concatenation_operator -> STRCAT .)


state 178

    (112) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    ARROW           reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    LPAREN          reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    ABS             reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    ASC             reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    NUM             reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    UPPER           reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    LOWER           reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    LENGTH          reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    READ            reduce using rule 112 (arithmetic_additive_operator -> PLUS .)
    PRINT           reduce using rule 112 (arithmetic_additive_operator -> PLUS .)


state 179

    (109) operand1 -> operand1 operator2 . operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 93
    boolean_literal                shift and go to state 62
    dereferenced_reference         shift and go to state 27
    array_location                 shift and go to state 33
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    builtin_name                   shift and go to state 28
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    array_element                  shift and go to state 34
    operand2                       shift and go to state 226
    location                       shift and go to state 92
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77

state 180

    (110) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    ARROW           reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    ID              reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    LPAREN          reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    FALSE           reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    TRUE            reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    CCONST          reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    NULL            reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    SCONST          reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    ABS             reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    ASC             reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    NUM             reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    UPPER           reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    LOWER           reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    LENGTH          reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    READ            reduce using rule 110 (operator2 -> arithmetic_additive_operator .)
    PRINT           reduce using rule 110 (operator2 -> arithmetic_additive_operator .)


state 181

    (111) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 111 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 111 (operator2 -> string_concatenation_operator .)
    ARROW           reduce using rule 111 (operator2 -> string_concatenation_operator .)
    ID              reduce using rule 111 (operator2 -> string_concatenation_operator .)
    LPAREN          reduce using rule 111 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 111 (operator2 -> string_concatenation_operator .)
    FALSE           reduce using rule 111 (operator2 -> string_concatenation_operator .)
    TRUE            reduce using rule 111 (operator2 -> string_concatenation_operator .)
    CCONST          reduce using rule 111 (operator2 -> string_concatenation_operator .)
    NULL            reduce using rule 111 (operator2 -> string_concatenation_operator .)
    SCONST          reduce using rule 111 (operator2 -> string_concatenation_operator .)
    ABS             reduce using rule 111 (operator2 -> string_concatenation_operator .)
    ASC             reduce using rule 111 (operator2 -> string_concatenation_operator .)
    NUM             reduce using rule 111 (operator2 -> string_concatenation_operator .)
    UPPER           reduce using rule 111 (operator2 -> string_concatenation_operator .)
    LOWER           reduce using rule 111 (operator2 -> string_concatenation_operator .)
    LENGTH          reduce using rule 111 (operator2 -> string_concatenation_operator .)
    READ            reduce using rule 111 (operator2 -> string_concatenation_operator .)
    PRINT           reduce using rule 111 (operator2 -> string_concatenation_operator .)


state 182

    (113) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    ARROW           reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    LPAREN          reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    ABS             reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    ASC             reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    NUM             reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    UPPER           reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    LOWER           reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    LENGTH          reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    READ            reduce using rule 113 (arithmetic_additive_operator -> MINUS .)
    PRINT           reduce using rule 113 (arithmetic_additive_operator -> MINUS .)


state 183

    (85) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 227


state 184

    (121) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    MOD             reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    STRCAT          reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    EQUAL           reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    DIFF            reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    GREATER         reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    GREATEREQ       reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    LESS            reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    LESSEQ          reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    TO              reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    DOWN            reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    BY              reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    ID              reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 121 (operand3 -> monadic_operator operand4 .)
    WHILE           reduce using rule 121 (operand3 -> monadic_operator operand4 .)


state 185

    (149) then_clause -> THEN .
    (150) then_clause -> THEN . action_statement_list
    (151) action_statement_list -> . action_statement
    (152) action_statement_list -> . action_statement_list action_statement
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (130) label_id -> . identifier
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (17) identifier -> . ID
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    ELSE            reduce using rule 149 (then_clause -> THEN .)
    ELSIF           reduce using rule 149 (then_clause -> THEN .)
    FI              reduce using rule 149 (then_clause -> THEN .)
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    ID              shift and go to state 32
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 21
    action_statement_list          shift and go to state 228
    bracketed_action               shift and go to state 23
    identifier                     shift and go to state 2
    action_statement               shift and go to state 49
    dereferenced_reference         shift and go to state 27
    return_action                  shift and go to state 6
    builtin_name                   shift and go to state 28
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    action                         shift and go to state 30
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    exit_action                    shift and go to state 13
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    do_action                      shift and go to state 41
    label_id                       shift and go to state 52

state 186

    (147) if_action -> IF boolean_expression then_clause . FI
    (148) if_action -> IF boolean_expression then_clause . else_clause FI
    (153) else_clause -> . ELSE
    (154) else_clause -> . ELSE action_statement_list
    (155) else_clause -> . ELSIF boolean_expression then_clause
    (156) else_clause -> . ELSIF boolean_expression then_clause else_clause

    FI              shift and go to state 231
    ELSE            shift and go to state 230
    ELSIF           shift and go to state 232

    else_clause                    shift and go to state 229

state 187

    (192) builtin_call -> builtin_name LPAREN parameter_list . RPAREN
    (183) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 233
    COMMA           shift and go to state 207


state 188

    (191) builtin_call -> builtin_name LPAREN RPAREN .

    ARROW           reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    TIMES           reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    MOD             reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    PLUS            reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    MINUS           reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    STRCAT          reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    AND             reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    OR              reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQUAL           reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIFF            reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    GREATER         reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    GREATEREQ       reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    LESS            reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    LESSEQ          reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    IN              reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    SEMI            reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    THEN            reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    RPAREN          reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    COMMA           reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    COLON           reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    ID              reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    TO              reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    DOWN            reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    BY              reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSE            reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSIF           reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    FI              reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    WHILE           reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    LBRACKET        reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    ASSIGN          reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    INCREASE        reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    DECREASE        reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    MULCREASE       reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVCREASE       reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)
    MODCREASE       reduce using rule 191 (builtin_call -> builtin_name LPAREN RPAREN .)


state 189

    (63) expression_list -> expression .
    (43) lower_bound -> expression .

    RBRACKET        reduce using rule 63 (expression_list -> expression .)
    COMMA           reduce using rule 63 (expression_list -> expression .)
    COLON           reduce using rule 43 (lower_bound -> expression .)


state 190

    (65) array_slice -> array_location LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 234


state 191

    (62) array_element -> array_location LBRACKET expression_list . RBRACKET
    (64) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 235
    COMMA           shift and go to state 236


state 192

    (139) assignment_action -> location assigning_operator expression .

    SEMI            reduce using rule 139 (assignment_action -> location assigning_operator expression .)


state 193

    (9) declaration_statement -> DCL declaration_list SEMI .

    END             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    DCL             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    EXIT            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RETURN          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RESULT          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    IF              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    DO              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ABS             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ASC             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    NUM             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    UPPER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LOWER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LENGTH          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    READ            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    PRINT           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)


state 194

    (11) declaration_list -> declaration_list COMMA . declaration
    (12) declaration -> . identifier_list mode
    (13) declaration -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 32

    declaration                    shift and go to state 237
    identifier                     shift and go to state 56
    identifier_list                shift and go to state 114

state 195

    (12) declaration -> identifier_list mode .
    (13) declaration -> identifier_list mode . initialization
    (14) initialization -> . ASSIGN expression

    SEMI            reduce using rule 12 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 12 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 239

    initialization                 shift and go to state 238

state 196

    (204) formal_procedure_head -> PROC . parenthesis_gambiarra SEMI
    (205) formal_procedure_head -> PROC . parenthesis_gambiarra result_spec SEMI
    (206) parenthesis_gambiarra -> . LPAREN RPAREN
    (207) parenthesis_gambiarra -> . LPAREN formal_parameter_list RPAREN

    LPAREN          shift and go to state 241

    parenthesis_gambiarra          shift and go to state 240

state 197

    (201) procedure_statement -> label_id COLON procedure_definition . SEMI

    SEMI            shift and go to state 242


state 198

    (129) action_statement -> label_id COLON action . SEMI

    SEMI            shift and go to state 243


state 199

    (202) procedure_definition -> formal_procedure_head . END
    (203) procedure_definition -> formal_procedure_head . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (201) procedure_statement -> . label_id COLON procedure_definition SEMI
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (130) label_id -> . identifier
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    END             shift and go to state 244
    DCL             shift and go to state 39
    SYN             shift and go to state 7
    TYPE            shift and go to state 3
    ID              shift and go to state 32
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    identifier                     shift and go to state 2
    return_action                  shift and go to state 6
    procedure_statement            shift and go to state 5
    dereferenced_reference         shift and go to state 27
    procedure_call                 shift and go to state 8
    array_location                 shift and go to state 33
    statement_list                 shift and go to state 245
    exit_action                    shift and go to state 13
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    action_statement               shift and go to state 9
    call_action                    shift and go to state 21
    synonym_statement              shift and go to state 22
    bracketed_action               shift and go to state 23
    statement                      shift and go to state 24
    newmode_statement              shift and go to state 25
    declaration_statement          shift and go to state 26
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    action                         shift and go to state 30
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    do_action                      shift and go to state 41
    label_id                       shift and go to state 43

state 200

    (158) do_action -> DO control_part SEMI OD .

    SEMI            reduce using rule 158 (do_action -> DO control_part SEMI OD .)


state 201

    (160) do_action -> DO control_part SEMI action_statement_list . OD
    (152) action_statement_list -> action_statement_list . action_statement
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (130) label_id -> . identifier
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (17) identifier -> . ID
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    OD              shift and go to state 246
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    ID              shift and go to state 32
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 21
    bracketed_action               shift and go to state 23
    identifier                     shift and go to state 2
    action_statement               shift and go to state 127
    dereferenced_reference         shift and go to state 27
    return_action                  shift and go to state 6
    builtin_name                   shift and go to state 28
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    action                         shift and go to state 30
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    exit_action                    shift and go to state 13
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    do_action                      shift and go to state 41
    label_id                       shift and go to state 52

state 202

    (163) control_part -> FOR for_control while_control .

    SEMI            reduce using rule 163 (control_part -> FOR for_control while_control .)


state 203

    (176) range_enumeration -> loop_counter DOWN . IN discrete_mode

    IN              shift and go to state 247


state 204

    (167) step_enumeration -> loop_counter ASSIGN . start_value end_value
    (168) step_enumeration -> loop_counter ASSIGN . start_value step_value end_value
    (170) start_value -> . discrete_expression
    (174) discrete_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    boolean_literal                shift and go to state 62
    array_location                 shift and go to state 33
    identifier                     shift and go to state 65
    discrete_expression            shift and go to state 249
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    empty_literal                  shift and go to state 75
    character_string_literal       shift and go to state 73
    start_value                    shift and go to state 250
    operand2                       shift and go to state 74
    array_slice                    shift and go to state 18
    literal                        shift and go to state 77
    operand0                       shift and go to state 79
    character_literal              shift and go to state 80
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    builtin_name                   shift and go to state 28
    primitive_value                shift and go to state 87
    builtin_call                   shift and go to state 29
    operand3                       shift and go to state 90
    parenthesized_expression       shift and go to state 91
    array_element                  shift and go to state 34
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    value_array_element            shift and go to state 95
    expression                     shift and go to state 248
    conditional_expression         shift and go to state 96

state 205

    (175) range_enumeration -> loop_counter IN . discrete_mode
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (17) identifier -> . ID

    INT             shift and go to state 142
    BOOL            shift and go to state 155
    CHAR            shift and go to state 149
    ID              shift and go to state 32

    character_mode                 shift and go to state 147
    discrete_mode                  shift and go to state 252
    integer_mode                   shift and go to state 139
    identifier                     shift and go to state 251
    discrete_range_mode            shift and go to state 145
    boolean_mode                   shift and go to state 146

state 206

    (181) procedure_call -> identifier LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    STRCAT          reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    AND             reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    OR              reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DIFF            reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    GREATEREQ       reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LESSEQ          reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    IN              reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ID              reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    TO              reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    BY              reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    FI              reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    INCREASE        reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DECREASE        reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MULCREASE       reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DIVCREASE       reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MODCREASE       reduce using rule 181 (procedure_call -> identifier LPAREN parameter_list RPAREN .)


state 207

    (183) parameter_list -> parameter_list COMMA . parameter
    (184) parameter -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    parameter                      shift and go to state 253
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 129
    conditional_expression         shift and go to state 96

state 208

    (26) newmode_list -> newmode_list COMMA mode_definition .

    SEMI            reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    COMMA           reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)


state 209

    (16) identifier_list -> identifier_list COMMA identifier .

    ASSIGN          reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    COMMA           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    REF             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHARS           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ARRAY           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)


state 210

    (27) mode_definition -> identifier_list ASSIGN mode .

    SEMI            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    COMMA           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)


state 211

    (39) discrete_range_mode -> identifier LPAREN . literal_range RPAREN
    (42) literal_range -> . lower_bound COLON upper_bound
    (43) lower_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    lower_bound                    shift and go to state 255
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    literal_range                  shift and go to state 256
    literal                        shift and go to state 77
    value_array_element            shift and go to state 95
    expression                     shift and go to state 254
    conditional_expression         shift and go to state 96

state 212

    (40) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (42) literal_range -> . lower_bound COLON upper_bound
    (43) lower_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    boolean_literal                shift and go to state 62
    array_location                 shift and go to state 33
    identifier                     shift and go to state 65
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    empty_literal                  shift and go to state 75
    character_string_literal       shift and go to state 73
    operand2                       shift and go to state 74
    array_slice                    shift and go to state 18
    literal                        shift and go to state 77
    value_array_element            shift and go to state 95
    operand0                       shift and go to state 79
    character_literal              shift and go to state 80
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    lower_bound                    shift and go to state 255
    builtin_name                   shift and go to state 28
    primitive_value                shift and go to state 87
    builtin_call                   shift and go to state 29
    operand3                       shift and go to state 90
    parenthesized_expression       shift and go to state 91
    array_element                  shift and go to state 34
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    literal_range                  shift and go to state 257
    expression                     shift and go to state 254
    conditional_expression         shift and go to state 96

state 213

    (22) synonym_definition -> identifier_list mode ASSIGN . constant_expression
    (23) constant_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    boolean_literal                shift and go to state 62
    array_location                 shift and go to state 33
    identifier                     shift and go to state 65
    referenced_location            shift and go to state 66
    primitive_value                shift and go to state 87
    value_array_slice              shift and go to state 68
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    character_string_literal       shift and go to state 73
    operand2                       shift and go to state 74
    empty_literal                  shift and go to state 75
    array_slice                    shift and go to state 18
    literal                        shift and go to state 77
    operand0                       shift and go to state 79
    character_literal              shift and go to state 80
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    builtin_name                   shift and go to state 28
    constant_expression            shift and go to state 258
    builtin_call                   shift and go to state 29
    operand3                       shift and go to state 90
    parenthesized_expression       shift and go to state 91
    array_element                  shift and go to state 34
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    value_array_element            shift and go to state 95
    expression                     shift and go to state 214
    conditional_expression         shift and go to state 96

state 214

    (23) constant_expression -> expression .

    SEMI            reduce using rule 23 (constant_expression -> expression .)
    ID              reduce using rule 23 (constant_expression -> expression .)


state 215

    (21) synonym_definition -> identifier_list ASSIGN constant_expression .

    SEMI            reduce using rule 21 (synonym_definition -> identifier_list ASSIGN constant_expression .)
    ID              reduce using rule 21 (synonym_definition -> identifier_list ASSIGN constant_expression .)


state 216

    (45) reference_mode -> REF mode .

    ASSIGN          reduce using rule 45 (reference_mode -> REF mode .)
    SEMI            reduce using rule 45 (reference_mode -> REF mode .)
    COMMA           reduce using rule 45 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 45 (reference_mode -> REF mode .)
    LOC             reduce using rule 45 (reference_mode -> REF mode .)


state 217

    (48) string_mode -> CHARS LBRACKET . ICONST RBRACKET

    ICONST          shift and go to state 259


state 218

    (49) array_mode -> ARRAY LBRACKET . index_mode_list RBRACKET element_mode
    (50) index_mode_list -> . index_mode
    (51) index_mode_list -> . index_mode_list COMMA index_mode
    (52) index_mode -> . discrete_mode
    (53) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (43) lower_bound -> . expression
    (17) identifier -> . ID
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    INT             shift and go to state 142
    BOOL            shift and go to state 155
    CHAR            shift and go to state 149
    ID              shift and go to state 32
    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    boolean_literal                shift and go to state 62
    discrete_range_mode            shift and go to state 145
    array_location                 shift and go to state 33
    identifier                     shift and go to state 260
    index_mode_list                shift and go to state 261
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    dereferenced_reference         shift and go to state 27
    empty_literal                  shift and go to state 75
    boolean_mode                   shift and go to state 146
    character_mode                 shift and go to state 147
    character_string_literal       shift and go to state 73
    operand2                       shift and go to state 74
    array_slice                    shift and go to state 18
    literal                        shift and go to state 77
    value_array_element            shift and go to state 95
    operand0                       shift and go to state 79
    character_literal              shift and go to state 80
    integer_mode                   shift and go to state 139
    array_primitive_value          shift and go to state 81
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    lower_bound                    shift and go to state 255
    builtin_name                   shift and go to state 28
    discrete_mode                  shift and go to state 263
    primitive_value                shift and go to state 87
    builtin_call                   shift and go to state 29
    operand3                       shift and go to state 90
    index_mode                     shift and go to state 262
    parenthesized_expression       shift and go to state 91
    array_element                  shift and go to state 34
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    literal_range                  shift and go to state 264
    expression                     shift and go to state 254
    conditional_expression         shift and go to state 96

state 219

    (88) conditional_expression -> IF boolean_expression then_expression . else_expression FI
    (89) conditional_expression -> IF boolean_expression then_expression . elsif_expression else_expression FI
    (92) else_expression -> . ELSE expression
    (93) elsif_expression -> . ELSIF boolean_expression then_expression
    (94) elsif_expression -> . elsif_expression ELSIF boolean_expression then_expression

    ELSE            shift and go to state 266
    ELSIF           shift and go to state 268

    elsif_expression               shift and go to state 265
    else_expression                shift and go to state 267

state 220

    (91) then_expression -> THEN . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 269
    conditional_expression         shift and go to state 96

state 221

    (116) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MOD             reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    STRCAT          reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUAL           reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIFF            reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATER         reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATEREQ       reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESS            reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESSEQ          reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ID              reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    TO              reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DOWN            reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    BY              reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    WHILE           reduce using rule 116 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 222

    (96) operand0 -> operand0 operator1 operand1 .
    (109) operand1 -> operand1 . operator2 operand2
    (110) operator2 -> . arithmetic_additive_operator
    (111) operator2 -> . string_concatenation_operator
    (112) arithmetic_additive_operator -> . PLUS
    (113) arithmetic_additive_operator -> . MINUS
    (114) string_concatenation_operator -> . STRCAT

    AND             reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    EQUAL           reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    DIFF            reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    GREATER         reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    GREATEREQ       reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    LESS            reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    LESSEQ          reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    ID              reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    WHILE           reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    TO              reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    DOWN            reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    BY              reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 96 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 178
    MINUS           shift and go to state 182
    STRCAT          shift and go to state 177

    operator2                      shift and go to state 179
    arithmetic_additive_operator   shift and go to state 180
    string_concatenation_operator  shift and go to state 181

state 223

    (55) integer_expression -> expression .
    (43) lower_bound -> expression .

    RBRACKET        reduce using rule 55 (integer_expression -> expression .)
    COLON           reduce using rule 43 (lower_bound -> expression .)


state 224

    (82) value_array_element -> array_primitive_value LBRACKET integer_expression . RBRACKET

    RBRACKET        shift and go to state 270


state 225

    (83) value_array_slice -> array_primitive_value LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 271


state 226

    (109) operand1 -> operand1 operator2 operand2 .
    (116) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (117) arithmetic_multiplicative_operator -> . TIMES
    (118) arithmetic_multiplicative_operator -> . DIVIDE
    (119) arithmetic_multiplicative_operator -> . MOD

    PLUS            reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    STRCAT          reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    EQUAL           reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    DIFF            reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    GREATER         reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    GREATEREQ       reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    LESS            reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    LESSEQ          reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    WHILE           reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    ID              reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    ELSE            reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    ELSIF           reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    TO              reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    DOWN            reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    BY              reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    FI              reduce using rule 109 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 161
    DIVIDE          shift and go to state 163
    MOD             shift and go to state 160

    arithmetic_multiplicative_operator shift and go to state 162

state 227

    (85) parenthesized_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    STRCAT          reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIFF            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    GREATEREQ       reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    LESSEQ          reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    DOWN            reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 85 (parenthesized_expression -> LPAREN expression RPAREN .)


state 228

    (150) then_clause -> THEN action_statement_list .
    (152) action_statement_list -> action_statement_list . action_statement
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (130) label_id -> . identifier
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (17) identifier -> . ID
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    ELSE            reduce using rule 150 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 150 (then_clause -> THEN action_statement_list .)
    FI              reduce using rule 150 (then_clause -> THEN action_statement_list .)
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    ID              shift and go to state 32
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 21
    bracketed_action               shift and go to state 23
    identifier                     shift and go to state 2
    action_statement               shift and go to state 127
    dereferenced_reference         shift and go to state 27
    return_action                  shift and go to state 6
    builtin_name                   shift and go to state 28
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    action                         shift and go to state 30
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    exit_action                    shift and go to state 13
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    do_action                      shift and go to state 41
    label_id                       shift and go to state 52

state 229

    (148) if_action -> IF boolean_expression then_clause else_clause . FI

    FI              shift and go to state 272


state 230

    (153) else_clause -> ELSE .
    (154) else_clause -> ELSE . action_statement_list
    (151) action_statement_list -> . action_statement
    (152) action_statement_list -> . action_statement_list action_statement
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (130) label_id -> . identifier
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (17) identifier -> . ID
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    FI              reduce using rule 153 (else_clause -> ELSE .)
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    ID              shift and go to state 32
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 21
    action_statement_list          shift and go to state 273
    bracketed_action               shift and go to state 23
    identifier                     shift and go to state 2
    action_statement               shift and go to state 49
    dereferenced_reference         shift and go to state 27
    return_action                  shift and go to state 6
    builtin_name                   shift and go to state 28
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    action                         shift and go to state 30
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    exit_action                    shift and go to state 13
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    do_action                      shift and go to state 41
    label_id                       shift and go to state 52

state 231

    (147) if_action -> IF boolean_expression then_clause FI .

    SEMI            reduce using rule 147 (if_action -> IF boolean_expression then_clause FI .)


state 232

    (155) else_clause -> ELSIF . boolean_expression then_clause
    (156) else_clause -> ELSIF . boolean_expression then_clause else_clause
    (90) boolean_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    boolean_literal                shift and go to state 62
    identifier                     shift and go to state 65
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 274
    value_array_slice              shift and go to state 68
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    empty_literal                  shift and go to state 75
    array_location                 shift and go to state 33
    character_string_literal       shift and go to state 73
    operand2                       shift and go to state 74
    array_slice                    shift and go to state 18
    literal                        shift and go to state 77
    operand0                       shift and go to state 79
    character_literal              shift and go to state 80
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    builtin_name                   shift and go to state 28
    primitive_value                shift and go to state 87
    builtin_call                   shift and go to state 29
    operand3                       shift and go to state 90
    parenthesized_expression       shift and go to state 91
    array_element                  shift and go to state 34
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    value_array_element            shift and go to state 95
    expression                     shift and go to state 97
    conditional_expression         shift and go to state 96

state 233

    (192) builtin_call -> builtin_name LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    STRCAT          reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIFF            reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GREATEREQ       reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LESSEQ          reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ID              reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    INCREASE        reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DECREASE        reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MULCREASE       reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVCREASE       reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MODCREASE       reduce using rule 192 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)


state 234

    (65) array_slice -> array_location LBRACKET lower_bound COLON . upper_bound RBRACKET
    (44) upper_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_location                 shift and go to state 33
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    upper_bound                    shift and go to state 276
    literal                        shift and go to state 77
    expression                     shift and go to state 275
    conditional_expression         shift and go to state 96

state 235

    (62) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    STRCAT          reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIFF            reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATEREQ       reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESSEQ          reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ID              reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ASSIGN          reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    INCREASE        reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DECREASE        reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MULCREASE       reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVCREASE       reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODCREASE       reduce using rule 62 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 236

    (64) expression_list -> expression_list COMMA . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 277
    conditional_expression         shift and go to state 96

state 237

    (11) declaration_list -> declaration_list COMMA declaration .

    SEMI            reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)


state 238

    (13) declaration -> identifier_list mode initialization .

    SEMI            reduce using rule 13 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 13 (declaration -> identifier_list mode initialization .)


state 239

    (14) initialization -> ASSIGN . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 278
    conditional_expression         shift and go to state 96

state 240

    (204) formal_procedure_head -> PROC parenthesis_gambiarra . SEMI
    (205) formal_procedure_head -> PROC parenthesis_gambiarra . result_spec SEMI
    (213) result_spec -> . RETURNS LPAREN mode RPAREN
    (214) result_spec -> . RETURNS LPAREN mode LOC RPAREN

    SEMI            shift and go to state 279
    RETURNS         shift and go to state 281

    result_spec                    shift and go to state 280

state 241

    (206) parenthesis_gambiarra -> LPAREN . RPAREN
    (207) parenthesis_gambiarra -> LPAREN . formal_parameter_list RPAREN
    (208) formal_parameter_list -> . formal_parameter
    (209) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (210) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    RPAREN          shift and go to state 282
    ID              shift and go to state 32

    identifier                     shift and go to state 56
    formal_parameter               shift and go to state 283
    identifier_list                shift and go to state 284
    formal_parameter_list          shift and go to state 285

state 242

    (201) procedure_statement -> label_id COLON procedure_definition SEMI .

    DCL             reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    SYN             reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    TYPE            reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    ID              reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    EXIT            reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    RETURN          reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    RESULT          reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    IF              reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    DO              reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    ABS             reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    ASC             reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    NUM             reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    UPPER           reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    LOWER           reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    LENGTH          reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    READ            reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    PRINT           reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    $end            reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    END             reduce using rule 201 (procedure_statement -> label_id COLON procedure_definition SEMI .)


state 243

    (129) action_statement -> label_id COLON action SEMI .

    EXIT            reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    RETURN          reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    RESULT          reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    ID              reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    IF              reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    DO              reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    ABS             reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    ASC             reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    NUM             reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    UPPER           reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    LOWER           reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    LENGTH          reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    READ            reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    PRINT           reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    FI              reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    ELSE            reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    ELSIF           reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    END             reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    DCL             reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    SYN             reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    TYPE            reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    OD              reduce using rule 129 (action_statement -> label_id COLON action SEMI .)
    $end            reduce using rule 129 (action_statement -> label_id COLON action SEMI .)


state 244

    (202) procedure_definition -> formal_procedure_head END .

    SEMI            reduce using rule 202 (procedure_definition -> formal_procedure_head END .)


state 245

    (203) procedure_definition -> formal_procedure_head statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (201) procedure_statement -> . label_id COLON procedure_definition SEMI
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (130) label_id -> . identifier
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (17) identifier -> . ID
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    END             shift and go to state 286
    DCL             shift and go to state 39
    SYN             shift and go to state 7
    TYPE            shift and go to state 3
    ID              shift and go to state 32
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    identifier                     shift and go to state 2
    return_action                  shift and go to state 6
    procedure_statement            shift and go to state 5
    dereferenced_reference         shift and go to state 27
    procedure_call                 shift and go to state 8
    array_location                 shift and go to state 33
    exit_action                    shift and go to state 13
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    action_statement               shift and go to state 9
    call_action                    shift and go to state 21
    synonym_statement              shift and go to state 22
    bracketed_action               shift and go to state 23
    statement                      shift and go to state 61
    newmode_statement              shift and go to state 25
    declaration_statement          shift and go to state 26
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    action                         shift and go to state 30
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    do_action                      shift and go to state 41
    label_id                       shift and go to state 43

state 246

    (160) do_action -> DO control_part SEMI action_statement_list OD .

    SEMI            reduce using rule 160 (do_action -> DO control_part SEMI action_statement_list OD .)


state 247

    (176) range_enumeration -> loop_counter DOWN IN . discrete_mode
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (17) identifier -> . ID

    INT             shift and go to state 142
    BOOL            shift and go to state 155
    CHAR            shift and go to state 149
    ID              shift and go to state 32

    character_mode                 shift and go to state 147
    discrete_mode                  shift and go to state 287
    integer_mode                   shift and go to state 139
    identifier                     shift and go to state 251
    discrete_range_mode            shift and go to state 145
    boolean_mode                   shift and go to state 146

state 248

    (174) discrete_expression -> expression .

    WHILE           reduce using rule 174 (discrete_expression -> expression .)
    SEMI            reduce using rule 174 (discrete_expression -> expression .)
    TO              reduce using rule 174 (discrete_expression -> expression .)
    DOWN            reduce using rule 174 (discrete_expression -> expression .)
    BY              reduce using rule 174 (discrete_expression -> expression .)


state 249

    (170) start_value -> discrete_expression .

    TO              reduce using rule 170 (start_value -> discrete_expression .)
    DOWN            reduce using rule 170 (start_value -> discrete_expression .)
    BY              reduce using rule 170 (start_value -> discrete_expression .)


state 250

    (167) step_enumeration -> loop_counter ASSIGN start_value . end_value
    (168) step_enumeration -> loop_counter ASSIGN start_value . step_value end_value
    (172) end_value -> . TO discrete_expression
    (173) end_value -> . DOWN TO discrete_expression
    (171) step_value -> . BY integer_expression

    TO              shift and go to state 291
    DOWN            shift and go to state 289
    BY              shift and go to state 290

    step_value                     shift and go to state 288
    end_value                      shift and go to state 292

state 251

    (39) discrete_range_mode -> identifier . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 211


state 252

    (175) range_enumeration -> loop_counter IN discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 175 (range_enumeration -> loop_counter IN discrete_mode .)
    SEMI            reduce using rule 175 (range_enumeration -> loop_counter IN discrete_mode .)
    LPAREN          shift and go to state 212


state 253

    (183) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 183 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 183 (parameter_list -> parameter_list COMMA parameter .)


state 254

    (43) lower_bound -> expression .

    COLON           reduce using rule 43 (lower_bound -> expression .)


state 255

    (42) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 293


state 256

    (39) discrete_range_mode -> identifier LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 294


state 257

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 295


state 258

    (22) synonym_definition -> identifier_list mode ASSIGN constant_expression .

    SEMI            reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)
    ID              reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)


state 259

    (48) string_mode -> CHARS LBRACKET ICONST . RBRACKET

    RBRACKET        shift and go to state 296


state 260

    (39) discrete_range_mode -> identifier . LPAREN literal_range RPAREN
    (56) location -> identifier .
    (180) procedure_call -> identifier . LPAREN RPAREN
    (181) procedure_call -> identifier . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 297
    ARROW           reduce using rule 56 (location -> identifier .)
    TIMES           reduce using rule 56 (location -> identifier .)
    DIVIDE          reduce using rule 56 (location -> identifier .)
    MOD             reduce using rule 56 (location -> identifier .)
    PLUS            reduce using rule 56 (location -> identifier .)
    MINUS           reduce using rule 56 (location -> identifier .)
    STRCAT          reduce using rule 56 (location -> identifier .)
    AND             reduce using rule 56 (location -> identifier .)
    OR              reduce using rule 56 (location -> identifier .)
    EQUAL           reduce using rule 56 (location -> identifier .)
    DIFF            reduce using rule 56 (location -> identifier .)
    GREATER         reduce using rule 56 (location -> identifier .)
    GREATEREQ       reduce using rule 56 (location -> identifier .)
    LESS            reduce using rule 56 (location -> identifier .)
    LESSEQ          reduce using rule 56 (location -> identifier .)
    IN              reduce using rule 56 (location -> identifier .)
    COLON           reduce using rule 56 (location -> identifier .)
    LBRACKET        reduce using rule 56 (location -> identifier .)


state 261

    (49) array_mode -> ARRAY LBRACKET index_mode_list . RBRACKET element_mode
    (51) index_mode_list -> index_mode_list . COMMA index_mode

    RBRACKET        shift and go to state 298
    COMMA           shift and go to state 299


state 262

    (50) index_mode_list -> index_mode .

    RBRACKET        reduce using rule 50 (index_mode_list -> index_mode .)
    COMMA           reduce using rule 50 (index_mode_list -> index_mode .)


state 263

    (52) index_mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    RBRACKET        reduce using rule 52 (index_mode -> discrete_mode .)
    COMMA           reduce using rule 52 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 212


state 264

    (53) index_mode -> literal_range .

    RBRACKET        reduce using rule 53 (index_mode -> literal_range .)
    COMMA           reduce using rule 53 (index_mode -> literal_range .)


state 265

    (89) conditional_expression -> IF boolean_expression then_expression elsif_expression . else_expression FI
    (94) elsif_expression -> elsif_expression . ELSIF boolean_expression then_expression
    (92) else_expression -> . ELSE expression

    ELSIF           shift and go to state 301
    ELSE            shift and go to state 266

    else_expression                shift and go to state 300

state 266

    (92) else_expression -> ELSE . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 302
    conditional_expression         shift and go to state 96

state 267

    (88) conditional_expression -> IF boolean_expression then_expression else_expression . FI

    FI              shift and go to state 303


state 268

    (93) elsif_expression -> ELSIF . boolean_expression then_expression
    (90) boolean_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 304
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 97
    conditional_expression         shift and go to state 96

state 269

    (91) then_expression -> THEN expression .

    ELSIF           reduce using rule 91 (then_expression -> THEN expression .)
    ELSE            reduce using rule 91 (then_expression -> THEN expression .)


state 270

    (82) value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .

    TIMES           reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    DIVIDE          reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    MOD             reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    PLUS            reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    MINUS           reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    STRCAT          reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    AND             reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    OR              reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    EQUAL           reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    DIFF            reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    GREATER         reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    GREATEREQ       reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    LESS            reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    LESSEQ          reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    IN              reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    RPAREN          reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    COMMA           reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    LBRACKET        reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    COLON           reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    SEMI            reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    THEN            reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    RBRACKET        reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    ID              reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    TO              reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    DOWN            reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    BY              reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    ELSE            reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    ELSIF           reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    FI              reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    WHILE           reduce using rule 82 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)


state 271

    (83) value_array_slice -> array_primitive_value LBRACKET lower_bound COLON . upper_bound RBRACKET
    (44) upper_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    upper_bound                    shift and go to state 305
    literal                        shift and go to state 77
    expression                     shift and go to state 275
    conditional_expression         shift and go to state 96

state 272

    (148) if_action -> IF boolean_expression then_clause else_clause FI .

    SEMI            reduce using rule 148 (if_action -> IF boolean_expression then_clause else_clause FI .)


state 273

    (154) else_clause -> ELSE action_statement_list .
    (152) action_statement_list -> action_statement_list . action_statement
    (128) action_statement -> . action SEMI
    (129) action_statement -> . label_id COLON action SEMI
    (131) action -> . bracketed_action
    (132) action -> . assignment_action
    (133) action -> . call_action
    (134) action -> . exit_action
    (135) action -> . return_action
    (136) action -> . result_action
    (130) label_id -> . identifier
    (137) bracketed_action -> . if_action
    (138) bracketed_action -> . do_action
    (139) assignment_action -> . location assigning_operator expression
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (185) exit_action -> . EXIT exit_label_id
    (187) return_action -> . RETURN
    (188) return_action -> . RETURN result
    (189) result_action -> . RESULT result
    (17) identifier -> . ID
    (147) if_action -> . IF boolean_expression then_clause FI
    (148) if_action -> . IF boolean_expression then_clause else_clause FI
    (157) do_action -> . DO OD
    (158) do_action -> . DO control_part SEMI OD
    (159) do_action -> . DO action_statement_list OD
    (160) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT
    (66) array_location -> . location

    FI              reduce using rule 154 (else_clause -> ELSE action_statement_list .)
    EXIT            shift and go to state 42
    RETURN          shift and go to state 31
    RESULT          shift and go to state 12
    ID              shift and go to state 32
    IF              shift and go to state 16
    DO              shift and go to state 1
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    call_action                    shift and go to state 21
    bracketed_action               shift and go to state 23
    identifier                     shift and go to state 2
    action_statement               shift and go to state 127
    dereferenced_reference         shift and go to state 27
    return_action                  shift and go to state 6
    builtin_name                   shift and go to state 28
    procedure_call                 shift and go to state 8
    builtin_call                   shift and go to state 29
    action                         shift and go to state 30
    array_location                 shift and go to state 33
    array_element                  shift and go to state 34
    location                       shift and go to state 35
    exit_action                    shift and go to state 13
    assignment_action              shift and go to state 36
    if_action                      shift and go to state 37
    array_slice                    shift and go to state 18
    result_action                  shift and go to state 19
    do_action                      shift and go to state 41
    label_id                       shift and go to state 52

state 274

    (155) else_clause -> ELSIF boolean_expression . then_clause
    (156) else_clause -> ELSIF boolean_expression . then_clause else_clause
    (149) then_clause -> . THEN
    (150) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 185

    then_clause                    shift and go to state 306

state 275

    (44) upper_bound -> expression .

    RBRACKET        reduce using rule 44 (upper_bound -> expression .)
    RPAREN          reduce using rule 44 (upper_bound -> expression .)
    COMMA           reduce using rule 44 (upper_bound -> expression .)


state 276

    (65) array_slice -> array_location LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 307


state 277

    (64) expression_list -> expression_list COMMA expression .

    RBRACKET        reduce using rule 64 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 64 (expression_list -> expression_list COMMA expression .)


state 278

    (14) initialization -> ASSIGN expression .

    SEMI            reduce using rule 14 (initialization -> ASSIGN expression .)
    COMMA           reduce using rule 14 (initialization -> ASSIGN expression .)


state 279

    (204) formal_procedure_head -> PROC parenthesis_gambiarra SEMI .

    END             reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    DCL             reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    SYN             reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    TYPE            reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    ID              reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    EXIT            reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    RETURN          reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    RESULT          reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    IF              reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    DO              reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    ABS             reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    ASC             reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    NUM             reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    UPPER           reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    LOWER           reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    LENGTH          reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    READ            reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    PRINT           reduce using rule 204 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)


state 280

    (205) formal_procedure_head -> PROC parenthesis_gambiarra result_spec . SEMI

    SEMI            shift and go to state 308


state 281

    (213) result_spec -> RETURNS . LPAREN mode RPAREN
    (214) result_spec -> RETURNS . LPAREN mode LOC RPAREN

    LPAREN          shift and go to state 309


state 282

    (206) parenthesis_gambiarra -> LPAREN RPAREN .

    SEMI            reduce using rule 206 (parenthesis_gambiarra -> LPAREN RPAREN .)
    RETURNS         reduce using rule 206 (parenthesis_gambiarra -> LPAREN RPAREN .)


state 283

    (208) formal_parameter_list -> formal_parameter .

    RPAREN          reduce using rule 208 (formal_parameter_list -> formal_parameter .)
    COMMA           reduce using rule 208 (formal_parameter_list -> formal_parameter .)


state 284

    (210) formal_parameter -> identifier_list . parameter_spec
    (16) identifier_list -> identifier_list . COMMA identifier
    (211) parameter_spec -> . mode
    (212) parameter_spec -> . mode LOC
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (45) reference_mode -> . REF mode
    (46) composite_mode -> . string_mode
    (47) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (48) string_mode -> . CHARS LBRACKET ICONST RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    COMMA           shift and go to state 135
    REF             shift and go to state 153
    ID              shift and go to state 32
    INT             shift and go to state 142
    BOOL            shift and go to state 155
    CHAR            shift and go to state 149
    CHARS           shift and go to state 156
    ARRAY           shift and go to state 157

    character_mode                 shift and go to state 147
    integer_mode                   shift and go to state 139
    reference_mode                 shift and go to state 140
    identifier                     shift and go to state 141
    mode_name                      shift and go to state 154
    string_mode                    shift and go to state 148
    composite_mode                 shift and go to state 150
    parameter_spec                 shift and go to state 311
    discrete_mode                  shift and go to state 143
    mode                           shift and go to state 310
    array_mode                     shift and go to state 151
    discrete_range_mode            shift and go to state 145
    boolean_mode                   shift and go to state 146

state 285

    (207) parenthesis_gambiarra -> LPAREN formal_parameter_list . RPAREN
    (209) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          shift and go to state 312
    COMMA           shift and go to state 313


state 286

    (203) procedure_definition -> formal_procedure_head statement_list END .

    SEMI            reduce using rule 203 (procedure_definition -> formal_procedure_head statement_list END .)


state 287

    (176) range_enumeration -> loop_counter DOWN IN discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 176 (range_enumeration -> loop_counter DOWN IN discrete_mode .)
    SEMI            reduce using rule 176 (range_enumeration -> loop_counter DOWN IN discrete_mode .)
    LPAREN          shift and go to state 212


state 288

    (168) step_enumeration -> loop_counter ASSIGN start_value step_value . end_value
    (172) end_value -> . TO discrete_expression
    (173) end_value -> . DOWN TO discrete_expression

    TO              shift and go to state 291
    DOWN            shift and go to state 289

    end_value                      shift and go to state 314

state 289

    (173) end_value -> DOWN . TO discrete_expression

    TO              shift and go to state 315


state 290

    (171) step_value -> BY . integer_expression
    (55) integer_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    integer_expression             shift and go to state 317
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    array_primitive_value          shift and go to state 81
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 316
    conditional_expression         shift and go to state 96

state 291

    (172) end_value -> TO . discrete_expression
    (174) discrete_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    literal                        shift and go to state 77
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    discrete_expression            shift and go to state 318
    expression                     shift and go to state 248
    conditional_expression         shift and go to state 96

state 292

    (167) step_enumeration -> loop_counter ASSIGN start_value end_value .

    WHILE           reduce using rule 167 (step_enumeration -> loop_counter ASSIGN start_value end_value .)
    SEMI            reduce using rule 167 (step_enumeration -> loop_counter ASSIGN start_value end_value .)


state 293

    (42) literal_range -> lower_bound COLON . upper_bound
    (44) upper_bound -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    upper_bound                    shift and go to state 319
    literal                        shift and go to state 77
    expression                     shift and go to state 275
    conditional_expression         shift and go to state 96

state 294

    (39) discrete_range_mode -> identifier LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    LOC             reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 39 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)


state 295

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 296

    (48) string_mode -> CHARS LBRACKET ICONST RBRACKET .

    ASSIGN          reduce using rule 48 (string_mode -> CHARS LBRACKET ICONST RBRACKET .)
    SEMI            reduce using rule 48 (string_mode -> CHARS LBRACKET ICONST RBRACKET .)
    COMMA           reduce using rule 48 (string_mode -> CHARS LBRACKET ICONST RBRACKET .)
    LOC             reduce using rule 48 (string_mode -> CHARS LBRACKET ICONST RBRACKET .)
    RPAREN          reduce using rule 48 (string_mode -> CHARS LBRACKET ICONST RBRACKET .)


state 297

    (39) discrete_range_mode -> identifier LPAREN . literal_range RPAREN
    (180) procedure_call -> identifier LPAREN . RPAREN
    (181) procedure_call -> identifier LPAREN . parameter_list RPAREN
    (42) literal_range -> . lower_bound COLON upper_bound
    (182) parameter_list -> . parameter
    (183) parameter_list -> . parameter_list COMMA parameter
    (43) lower_bound -> . expression
    (184) parameter -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    RPAREN          shift and go to state 132
    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    boolean_literal                shift and go to state 62
    array_location                 shift and go to state 33
    identifier                     shift and go to state 65
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    empty_literal                  shift and go to state 75
    character_string_literal       shift and go to state 73
    operand2                       shift and go to state 74
    array_slice                    shift and go to state 18
    literal                        shift and go to state 77
    value_array_element            shift and go to state 95
    operand0                       shift and go to state 79
    character_literal              shift and go to state 80
    parameter_list                 shift and go to state 131
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    operand1                       shift and go to state 82
    parameter                      shift and go to state 130
    operand4                       shift and go to state 83
    lower_bound                    shift and go to state 255
    builtin_name                   shift and go to state 28
    primitive_value                shift and go to state 87
    builtin_call                   shift and go to state 29
    operand3                       shift and go to state 90
    parenthesized_expression       shift and go to state 91
    array_element                  shift and go to state 34
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    literal_range                  shift and go to state 256
    expression                     shift and go to state 320
    conditional_expression         shift and go to state 96

state 298

    (49) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET . element_mode
    (54) element_mode -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (45) reference_mode -> . REF mode
    (46) composite_mode -> . string_mode
    (47) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (48) string_mode -> . CHARS LBRACKET ICONST RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    REF             shift and go to state 153
    ID              shift and go to state 32
    INT             shift and go to state 142
    BOOL            shift and go to state 155
    CHAR            shift and go to state 149
    CHARS           shift and go to state 156
    ARRAY           shift and go to state 157

    character_mode                 shift and go to state 147
    integer_mode                   shift and go to state 139
    reference_mode                 shift and go to state 140
    identifier                     shift and go to state 141
    mode_name                      shift and go to state 154
    string_mode                    shift and go to state 148
    composite_mode                 shift and go to state 150
    array_mode                     shift and go to state 151
    discrete_mode                  shift and go to state 143
    mode                           shift and go to state 321
    element_mode                   shift and go to state 322
    discrete_range_mode            shift and go to state 145
    boolean_mode                   shift and go to state 146

state 299

    (51) index_mode_list -> index_mode_list COMMA . index_mode
    (52) index_mode -> . discrete_mode
    (53) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (42) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (43) lower_bound -> . expression
    (17) identifier -> . ID
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    INT             shift and go to state 142
    BOOL            shift and go to state 155
    CHAR            shift and go to state 149
    ID              shift and go to state 32
    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    boolean_literal                shift and go to state 62
    discrete_range_mode            shift and go to state 145
    array_location                 shift and go to state 33
    identifier                     shift and go to state 260
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    dereferenced_reference         shift and go to state 27
    empty_literal                  shift and go to state 75
    boolean_mode                   shift and go to state 146
    character_mode                 shift and go to state 147
    character_string_literal       shift and go to state 73
    operand2                       shift and go to state 74
    array_slice                    shift and go to state 18
    literal                        shift and go to state 77
    value_array_element            shift and go to state 95
    operand0                       shift and go to state 79
    character_literal              shift and go to state 80
    integer_mode                   shift and go to state 139
    array_primitive_value          shift and go to state 81
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    lower_bound                    shift and go to state 255
    builtin_name                   shift and go to state 28
    discrete_mode                  shift and go to state 263
    primitive_value                shift and go to state 87
    builtin_call                   shift and go to state 29
    operand3                       shift and go to state 90
    index_mode                     shift and go to state 323
    parenthesized_expression       shift and go to state 91
    array_element                  shift and go to state 34
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    literal_range                  shift and go to state 264
    expression                     shift and go to state 254
    conditional_expression         shift and go to state 96

state 300

    (89) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 324


state 301

    (94) elsif_expression -> elsif_expression ELSIF . boolean_expression then_expression
    (90) boolean_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    boolean_expression             shift and go to state 325
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    literal                        shift and go to state 77
    expression                     shift and go to state 97
    conditional_expression         shift and go to state 96

state 302

    (92) else_expression -> ELSE expression .

    FI              reduce using rule 92 (else_expression -> ELSE expression .)


state 303

    (88) conditional_expression -> IF boolean_expression then_expression else_expression FI .

    ELSE            reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSIF           reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    WHILE           reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    SEMI            reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RPAREN          reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COMMA           reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COLON           reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    TO              reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    DOWN            reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    BY              reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    THEN            reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ID              reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    FI              reduce using rule 88 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)


state 304

    (93) elsif_expression -> ELSIF boolean_expression . then_expression
    (91) then_expression -> . THEN expression

    THEN            shift and go to state 220

    then_expression                shift and go to state 326

state 305

    (83) value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 327


state 306

    (155) else_clause -> ELSIF boolean_expression then_clause .
    (156) else_clause -> ELSIF boolean_expression then_clause . else_clause
    (153) else_clause -> . ELSE
    (154) else_clause -> . ELSE action_statement_list
    (155) else_clause -> . ELSIF boolean_expression then_clause
    (156) else_clause -> . ELSIF boolean_expression then_clause else_clause

    FI              reduce using rule 155 (else_clause -> ELSIF boolean_expression then_clause .)
    ELSE            shift and go to state 230
    ELSIF           shift and go to state 232

    else_clause                    shift and go to state 328

state 307

    (65) array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .

    ARROW           reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TIMES           reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MOD             reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    STRCAT          reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIFF            reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATEREQ       reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESSEQ          reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TO              reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DOWN            reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    BY              reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ASSIGN          reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    INCREASE        reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DECREASE        reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MULCREASE       reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVCREASE       reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MODCREASE       reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    WHILE           reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ID              reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 65 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 308

    (205) formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .

    END             reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    DCL             reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    SYN             reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    TYPE            reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    ID              reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    EXIT            reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    RETURN          reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    RESULT          reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    IF              reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    DO              reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    ABS             reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    ASC             reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    NUM             reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    UPPER           reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    LOWER           reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    LENGTH          reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    READ            reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    PRINT           reduce using rule 205 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)


state 309

    (213) result_spec -> RETURNS LPAREN . mode RPAREN
    (214) result_spec -> RETURNS LPAREN . mode LOC RPAREN
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (45) reference_mode -> . REF mode
    (46) composite_mode -> . string_mode
    (47) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (48) string_mode -> . CHARS LBRACKET ICONST RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    REF             shift and go to state 153
    ID              shift and go to state 32
    INT             shift and go to state 142
    BOOL            shift and go to state 155
    CHAR            shift and go to state 149
    CHARS           shift and go to state 156
    ARRAY           shift and go to state 157

    character_mode                 shift and go to state 147
    discrete_range_mode            shift and go to state 145
    reference_mode                 shift and go to state 140
    identifier                     shift and go to state 141
    mode_name                      shift and go to state 154
    string_mode                    shift and go to state 148
    composite_mode                 shift and go to state 150
    array_mode                     shift and go to state 151
    discrete_mode                  shift and go to state 143
    mode                           shift and go to state 329
    integer_mode                   shift and go to state 139
    boolean_mode                   shift and go to state 146

state 310

    (211) parameter_spec -> mode .
    (212) parameter_spec -> mode . LOC

    RPAREN          reduce using rule 211 (parameter_spec -> mode .)
    COMMA           reduce using rule 211 (parameter_spec -> mode .)
    LOC             shift and go to state 330


state 311

    (210) formal_parameter -> identifier_list parameter_spec .

    RPAREN          reduce using rule 210 (formal_parameter -> identifier_list parameter_spec .)
    COMMA           reduce using rule 210 (formal_parameter -> identifier_list parameter_spec .)


state 312

    (207) parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN .

    SEMI            reduce using rule 207 (parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN .)
    RETURNS         reduce using rule 207 (parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN .)


state 313

    (209) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (210) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 32

    identifier                     shift and go to state 56
    formal_parameter               shift and go to state 331
    identifier_list                shift and go to state 284

state 314

    (168) step_enumeration -> loop_counter ASSIGN start_value step_value end_value .

    WHILE           reduce using rule 168 (step_enumeration -> loop_counter ASSIGN start_value step_value end_value .)
    SEMI            reduce using rule 168 (step_enumeration -> loop_counter ASSIGN start_value step_value end_value .)


state 315

    (173) end_value -> DOWN TO . discrete_expression
    (174) discrete_expression -> . expression
    (86) expression -> . operand0
    (87) expression -> . conditional_expression
    (95) operand0 -> . operand1
    (96) operand0 -> . operand0 operator1 operand1
    (88) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (89) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (108) operand1 -> . operand2
    (109) operand1 -> . operand1 operator2 operand2
    (115) operand2 -> . operand3
    (116) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (120) operand3 -> . operand4
    (121) operand3 -> . monadic_operator operand4
    (124) operand4 -> . location
    (125) operand4 -> . referenced_location
    (126) operand4 -> . primitive_value
    (122) monadic_operator -> . MINUS
    (123) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . array_element
    (59) location -> . array_slice
    (60) location -> . call_action
    (127) referenced_location -> . ARROW location
    (67) primitive_value -> . literal
    (68) primitive_value -> . value_array_element
    (69) primitive_value -> . value_array_slice
    (70) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (61) dereferenced_reference -> . location ARROW
    (62) array_element -> . array_location LBRACKET expression_list RBRACKET
    (65) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (178) call_action -> . procedure_call
    (179) call_action -> . builtin_call
    (71) literal -> . integer_literal
    (72) literal -> . boolean_literal
    (73) literal -> . character_literal
    (74) literal -> . empty_literal
    (75) literal -> . character_string_literal
    (82) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (83) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (85) parenthesized_expression -> . LPAREN expression RPAREN
    (66) array_location -> . location
    (180) procedure_call -> . identifier LPAREN RPAREN
    (181) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (191) builtin_call -> . builtin_name LPAREN RPAREN
    (192) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (76) integer_literal -> . ICONST
    (77) boolean_literal -> . FALSE
    (78) boolean_literal -> . TRUE
    (79) character_literal -> . CCONST
    (80) empty_literal -> . NULL
    (81) character_string_literal -> . SCONST
    (84) array_primitive_value -> . primitive_value
    (193) builtin_name -> . ABS
    (194) builtin_name -> . ASC
    (195) builtin_name -> . NUM
    (196) builtin_name -> . UPPER
    (197) builtin_name -> . LOWER
    (198) builtin_name -> . LENGTH
    (199) builtin_name -> . READ
    (200) builtin_name -> . PRINT

    IF              shift and go to state 71
    MINUS           shift and go to state 72
    NOT             shift and go to state 89
    ARROW           shift and go to state 63
    ID              shift and go to state 32
    LPAREN          shift and go to state 86
    ICONST          shift and go to state 84
    FALSE           shift and go to state 70
    TRUE            shift and go to state 78
    CCONST          shift and go to state 88
    NULL            shift and go to state 76
    SCONST          shift and go to state 67
    ABS             shift and go to state 15
    ASC             shift and go to state 38
    NUM             shift and go to state 44
    UPPER           shift and go to state 4
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 11
    READ            shift and go to state 20
    PRINT           shift and go to state 14

    operand0                       shift and go to state 79
    dereferenced_reference         shift and go to state 27
    array_primitive_value          shift and go to state 81
    character_literal              shift and go to state 80
    identifier                     shift and go to state 65
    operand1                       shift and go to state 82
    operand4                       shift and go to state 83
    referenced_location            shift and go to state 66
    value_array_slice              shift and go to state 68
    primitive_value                shift and go to state 87
    integer_literal                shift and go to state 85
    procedure_call                 shift and go to state 8
    builtin_name                   shift and go to state 28
    builtin_call                   shift and go to state 29
    empty_literal                  shift and go to state 75
    operand3                       shift and go to state 90
    array_location                 shift and go to state 33
    literal                        shift and go to state 77
    parenthesized_expression       shift and go to state 91
    character_string_literal       shift and go to state 73
    boolean_literal                shift and go to state 62
    array_element                  shift and go to state 34
    operand2                       shift and go to state 74
    location                       shift and go to state 92
    call_action                    shift and go to state 93
    monadic_operator               shift and go to state 94
    array_slice                    shift and go to state 18
    value_array_element            shift and go to state 95
    discrete_expression            shift and go to state 332
    expression                     shift and go to state 248
    conditional_expression         shift and go to state 96

state 316

    (55) integer_expression -> expression .

    TO              reduce using rule 55 (integer_expression -> expression .)
    DOWN            reduce using rule 55 (integer_expression -> expression .)


state 317

    (171) step_value -> BY integer_expression .

    TO              reduce using rule 171 (step_value -> BY integer_expression .)
    DOWN            reduce using rule 171 (step_value -> BY integer_expression .)


state 318

    (172) end_value -> TO discrete_expression .

    WHILE           reduce using rule 172 (end_value -> TO discrete_expression .)
    SEMI            reduce using rule 172 (end_value -> TO discrete_expression .)


state 319

    (42) literal_range -> lower_bound COLON upper_bound .

    RPAREN          reduce using rule 42 (literal_range -> lower_bound COLON upper_bound .)
    RBRACKET        reduce using rule 42 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 42 (literal_range -> lower_bound COLON upper_bound .)


state 320

    (43) lower_bound -> expression .
    (184) parameter -> expression .

    COLON           reduce using rule 43 (lower_bound -> expression .)
    RPAREN          reduce using rule 184 (parameter -> expression .)
    COMMA           reduce using rule 184 (parameter -> expression .)


state 321

    (54) element_mode -> mode .

    ASSIGN          reduce using rule 54 (element_mode -> mode .)
    SEMI            reduce using rule 54 (element_mode -> mode .)
    COMMA           reduce using rule 54 (element_mode -> mode .)
    LOC             reduce using rule 54 (element_mode -> mode .)
    RPAREN          reduce using rule 54 (element_mode -> mode .)


state 322

    (49) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .

    RPAREN          reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    LOC             reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    COMMA           reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    ASSIGN          reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)


state 323

    (51) index_mode_list -> index_mode_list COMMA index_mode .

    RBRACKET        reduce using rule 51 (index_mode_list -> index_mode_list COMMA index_mode .)
    COMMA           reduce using rule 51 (index_mode_list -> index_mode_list COMMA index_mode .)


state 324

    (89) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .

    ELSE            reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    WHILE           reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    SEMI            reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    TO              reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    DOWN            reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    BY              reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    THEN            reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ID              reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 89 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)


state 325

    (94) elsif_expression -> elsif_expression ELSIF boolean_expression . then_expression
    (91) then_expression -> . THEN expression

    THEN            shift and go to state 220

    then_expression                shift and go to state 333

state 326

    (93) elsif_expression -> ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 93 (elsif_expression -> ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 93 (elsif_expression -> ELSIF boolean_expression then_expression .)


state 327

    (83) value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .

    TIMES           reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MOD             reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    STRCAT          reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIFF            reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATEREQ       reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESSEQ          reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ID              reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TO              reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DOWN            reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    BY              reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    WHILE           reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 83 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 328

    (156) else_clause -> ELSIF boolean_expression then_clause else_clause .

    FI              reduce using rule 156 (else_clause -> ELSIF boolean_expression then_clause else_clause .)


state 329

    (213) result_spec -> RETURNS LPAREN mode . RPAREN
    (214) result_spec -> RETURNS LPAREN mode . LOC RPAREN

    RPAREN          shift and go to state 334
    LOC             shift and go to state 335


state 330

    (212) parameter_spec -> mode LOC .

    RPAREN          reduce using rule 212 (parameter_spec -> mode LOC .)
    COMMA           reduce using rule 212 (parameter_spec -> mode LOC .)


state 331

    (209) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    RPAREN          reduce using rule 209 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    COMMA           reduce using rule 209 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 332

    (173) end_value -> DOWN TO discrete_expression .

    WHILE           reduce using rule 173 (end_value -> DOWN TO discrete_expression .)
    SEMI            reduce using rule 173 (end_value -> DOWN TO discrete_expression .)


state 333

    (94) elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 94 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 94 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)


state 334

    (213) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMI            reduce using rule 213 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 335

    (214) result_spec -> RETURNS LPAREN mode LOC . RPAREN

    RPAREN          shift and go to state 336


state 336

    (214) result_spec -> RETURNS LPAREN mode LOC RPAREN .

    SEMI            reduce using rule 214 (result_spec -> RETURNS LPAREN mode LOC RPAREN .)

