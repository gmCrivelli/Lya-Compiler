Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     statement -> newmode_statement
Rule 7     statement -> procedure_statement
Rule 8     statement -> action_statement
Rule 9     declaration_statement -> DCL declaration_list SEMI
Rule 10    declaration_list -> declaration
Rule 11    declaration_list -> declaration_list COMMA declaration
Rule 12    declaration -> identifier_list mode
Rule 13    declaration -> identifier_list mode initialization
Rule 14    initialization -> ASSIGN expression
Rule 15    identifier_list -> identifier
Rule 16    identifier_list -> identifier_list COMMA identifier
Rule 17    identifier -> ID
Rule 18    synonym_statement -> SYN synonym_list
Rule 19    synonym_list -> synonym_definition
Rule 20    synonym_list -> synonym_list synonym_definition
Rule 21    synonym_definition -> identifier_list ASSIGN expression
Rule 22    synonym_definition -> identifier_list mode ASSIGN expression
Rule 23    newmode_statement -> TYPE newmode_list SEMI
Rule 24    newmode_list -> mode_definition
Rule 25    newmode_list -> newmode_list COMMA mode_definition
Rule 26    mode_definition -> identifier_list ASSIGN mode
Rule 27    mode -> mode_name
Rule 28    mode -> discrete_mode
Rule 29    mode -> reference_mode
Rule 30    mode -> composite_mode
Rule 31    discrete_mode -> INT
Rule 32    discrete_mode -> BOOL
Rule 33    discrete_mode -> CHAR
Rule 34    discrete_mode -> discrete_range_mode
Rule 35    discrete_range_mode -> identifier LPAREN literal_range RPAREN
Rule 36    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 37    mode_name -> identifier
Rule 38    literal_range -> lower_bound COLON upper_bound
Rule 39    lower_bound -> expression
Rule 40    upper_bound -> expression
Rule 41    reference_mode -> REF mode
Rule 42    composite_mode -> string_mode
Rule 43    composite_mode -> array_mode
Rule 44    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 45    string_length -> integer_literal
Rule 46    array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode
Rule 47    index_mode_list -> index_mode
Rule 48    index_mode_list -> index_mode_list COMMA index_mode
Rule 49    index_mode -> discrete_mode
Rule 50    index_mode -> literal_range
Rule 51    element_mode -> mode
Rule 52    integer_expression -> expression
Rule 53    location -> identifier
Rule 54    location -> dereferenced_reference
Rule 55    location -> string_element
Rule 56    location -> string_slice
Rule 57    location -> array_element
Rule 58    location -> array_slice
Rule 59    location -> call_action
Rule 60    dereferenced_reference -> location ARROW
Rule 61    string_element -> identifier LBRACKET start_element RBRACKET
Rule 62    start_element -> integer_expression
Rule 63    string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET
Rule 64    left_element -> integer_expression
Rule 65    right_element -> integer_expression
Rule 66    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 67    expression_list -> expression
Rule 68    expression_list -> expression_list COMMA expression
Rule 69    array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 70    array_location -> location
Rule 71    primitive_value -> literal
Rule 72    primitive_value -> value_array_element
Rule 73    primitive_value -> value_array_slice
Rule 74    primitive_value -> parenthesized_expression
Rule 75    literal -> integer_literal
Rule 76    literal -> boolean_literal
Rule 77    literal -> character_literal
Rule 78    literal -> empty_literal
Rule 79    literal -> character_string_literal
Rule 80    integer_literal -> ICONST
Rule 81    boolean_literal -> FALSE
Rule 82    boolean_literal -> TRUE
Rule 83    character_literal -> CCONST
Rule 84    empty_literal -> NULL
Rule 85    character_string_literal -> SCONST
Rule 86    value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET
Rule 87    value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 88    array_primitive_value -> primitive_value
Rule 89    parenthesized_expression -> LPAREN expression RPAREN
Rule 90    expression -> operand0
Rule 91    expression -> conditional_expression
Rule 92    conditional_expression -> IF boolean_expression then_expression else_expression FI
Rule 93    conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI
Rule 94    boolean_expression -> expression
Rule 95    then_expression -> THEN expression
Rule 96    else_expression -> ELSE expression
Rule 97    elsif_expression -> ELSIF boolean_expression then_expression
Rule 98    elsif_expression -> elsif_expression ELSIF boolean_expression then_expression
Rule 99    operand0 -> operand1
Rule 100   operand0 -> operand0 operator1 operand1
Rule 101   operator1 -> relational_operator
Rule 102   operator1 -> membership_operator
Rule 103   relational_operator -> AND
Rule 104   relational_operator -> OR
Rule 105   relational_operator -> EQUAL
Rule 106   relational_operator -> DIFF
Rule 107   relational_operator -> GREATER
Rule 108   relational_operator -> GREATEREQ
Rule 109   relational_operator -> LESS
Rule 110   relational_operator -> LESSEQ
Rule 111   membership_operator -> IN
Rule 112   operand1 -> operand2
Rule 113   operand1 -> operand1 operator2 operand2
Rule 114   operator2 -> arithmetic_additive_operator
Rule 115   operator2 -> string_concatenation_operator
Rule 116   arithmetic_additive_operator -> PLUS
Rule 117   arithmetic_additive_operator -> MINUS
Rule 118   string_concatenation_operator -> STRCAT
Rule 119   operand2 -> operand3
Rule 120   operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 121   arithmetic_multiplicative_operator -> TIMES
Rule 122   arithmetic_multiplicative_operator -> DIVIDE
Rule 123   arithmetic_multiplicative_operator -> MOD
Rule 124   operand3 -> operand4
Rule 125   operand3 -> monadic_operator operand4
Rule 126   monadic_operator -> MINUS
Rule 127   monadic_operator -> NOT
Rule 128   operand4 -> location
Rule 129   operand4 -> referenced_location
Rule 130   operand4 -> primitive_value
Rule 131   referenced_location -> ARROW location
Rule 132   action_statement -> action SEMI
Rule 133   action_statement -> label_id COLON action SEMI
Rule 134   label_id -> identifier
Rule 135   action -> bracketed_action
Rule 136   action -> assignment_action
Rule 137   action -> call_action
Rule 138   action -> exit_action
Rule 139   action -> return_action
Rule 140   action -> result_action
Rule 141   bracketed_action -> if_action
Rule 142   bracketed_action -> do_action
Rule 143   assignment_action -> location assigning_operator expression
Rule 144   assigning_operator -> ASSIGN
Rule 145   assigning_operator -> closed_dyadic_operator
Rule 146   closed_dyadic_operator -> INCREASE
Rule 147   closed_dyadic_operator -> DECREASE
Rule 148   closed_dyadic_operator -> MULCREASE
Rule 149   closed_dyadic_operator -> DIVCREASE
Rule 150   closed_dyadic_operator -> MODCREASE
Rule 151   if_action -> IF boolean_expression then_clause FI
Rule 152   if_action -> IF boolean_expression then_clause else_clause FI
Rule 153   then_clause -> THEN
Rule 154   then_clause -> THEN action_statement_list
Rule 155   action_statement_list -> action_statement
Rule 156   action_statement_list -> action_statement_list action_statement
Rule 157   else_clause -> ELSE
Rule 158   else_clause -> ELSE action_statement_list
Rule 159   else_clause -> ELSIF boolean_expression then_clause
Rule 160   else_clause -> ELSIF boolean_expression then_clause else_clause
Rule 161   do_action -> DO OD
Rule 162   do_action -> DO control_part SEMI OD
Rule 163   do_action -> DO action_statement_list OD
Rule 164   do_action -> DO control_part SEMI action_statement_list OD
Rule 165   control_part -> while_control
Rule 166   control_part -> FOR for_control
Rule 167   control_part -> FOR for_control while_control
Rule 168   for_control -> iteration
Rule 169   iteration -> step_enumeration
Rule 170   iteration -> range_enumeration
Rule 171   step_enumeration -> loop_counter ASSIGN start_value end_value
Rule 172   step_enumeration -> loop_counter ASSIGN start_value step_value end_value
Rule 173   loop_counter -> identifier
Rule 174   start_value -> discrete_expression
Rule 175   step_value -> BY integer_expression
Rule 176   end_value -> TO discrete_expression
Rule 177   end_value -> DOWN TO discrete_expression
Rule 178   discrete_expression -> expression
Rule 179   range_enumeration -> loop_counter IN discrete_mode
Rule 180   range_enumeration -> loop_counter DOWN IN discrete_mode
Rule 181   while_control -> WHILE boolean_expression
Rule 182   call_action -> procedure_call
Rule 183   call_action -> builtin_call
Rule 184   procedure_call -> identifier LPAREN RPAREN
Rule 185   procedure_call -> identifier LPAREN parameter_list RPAREN
Rule 186   parameter_list -> parameter
Rule 187   parameter_list -> parameter_list COMMA parameter
Rule 188   parameter -> expression
Rule 189   exit_action -> EXIT label_id
Rule 190   return_action -> RETURN
Rule 191   return_action -> RETURN result
Rule 192   result_action -> RESULT result
Rule 193   result -> expression
Rule 194   builtin_call -> builtin_name LPAREN RPAREN
Rule 195   builtin_call -> builtin_name LPAREN parameter_list RPAREN
Rule 196   builtin_name -> ABS
Rule 197   builtin_name -> ASC
Rule 198   builtin_name -> NUM
Rule 199   builtin_name -> UPPER
Rule 200   builtin_name -> LOWER
Rule 201   builtin_name -> LENGTH
Rule 202   builtin_name -> READ
Rule 203   builtin_name -> PRINT
Rule 204   procedure_statement -> label_id COLON procedure_definition SEMI
Rule 205   procedure_definition -> formal_procedure_head END
Rule 206   procedure_definition -> formal_procedure_head statement_list END
Rule 207   formal_procedure_head -> PROC parenthesis_gambiarra SEMI
Rule 208   formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI
Rule 209   parenthesis_gambiarra -> LPAREN RPAREN
Rule 210   parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN
Rule 211   formal_parameter_list -> formal_parameter
Rule 212   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 213   formal_parameter -> identifier_list parameter_spec
Rule 214   parameter_spec -> mode
Rule 215   parameter_spec -> mode parameter_attribute
Rule 216   parameter_attribute -> LOC
Rule 217   result_spec -> RETURNS LPAREN mode RPAREN
Rule 218   result_spec -> RETURNS LPAREN mode result_attribute RPAREN
Rule 219   result_attribute -> LOC

Terminals, with rules where they appear

ABS                  : 196
AND                  : 103
ARRAY                : 46
ARROW                : 60 131
ASC                  : 197
ASSIGN               : 14 21 22 26 144 171 172
BOOL                 : 32
BY                   : 175
CCONST               : 83
CHAR                 : 33
CHARS                : 44
COLON                : 38 63 69 87 133 204
COMMA                : 11 16 25 48 68 187 212
DCL                  : 9
DECREASE             : 147
DIFF                 : 106
DIVCREASE            : 149
DIVIDE               : 122
DO                   : 161 162 163 164
DOWN                 : 177 180
ELSE                 : 96 157 158
ELSIF                : 97 98 159 160
END                  : 205 206
EQUAL                : 105
EXIT                 : 189
FALSE                : 81
FI                   : 92 93 151 152
FOR                  : 166 167
GREATER              : 107
GREATEREQ            : 108
ICONST               : 80
ID                   : 17
IF                   : 92 93 151 152
IN                   : 111 179 180
INCREASE             : 146
INT                  : 31
LBRACKET             : 44 46 61 63 66 69 86 87
LENGTH               : 201
LESS                 : 109
LESSEQ               : 110
LOC                  : 216 219
LOWER                : 200
LPAREN               : 35 36 89 184 185 194 195 209 210 217 218
MINUS                : 117 126
MOD                  : 123
MODCREASE            : 150
MULCREASE            : 148
NOT                  : 127
NULL                 : 84
NUM                  : 198
OD                   : 161 162 163 164
OR                   : 104
PLUS                 : 116
PRINT                : 203
PROC                 : 207 208
RBRACKET             : 44 46 61 63 66 69 86 87
READ                 : 202
REF                  : 41
RESULT               : 192
RETURN               : 190 191
RETURNS              : 217 218
RPAREN               : 35 36 89 184 185 194 195 209 210 217 218
SCONST               : 85
SEMI                 : 9 23 132 133 162 164 204 207 208
STRCAT               : 118
SYN                  : 18
THEN                 : 95 153 154
TIMES                : 121
TO                   : 176 177
TRUE                 : 82
TYPE                 : 23
UPPER                : 199
WHILE                : 181
error                : 

Nonterminals, with rules where they appear

action               : 132 133
action_statement     : 8 155 156
action_statement_list : 154 156 158 163 164
arithmetic_additive_operator : 114
arithmetic_multiplicative_operator : 120
array_element        : 57
array_location       : 66 69
array_mode           : 43
array_primitive_value : 86 87
array_slice          : 58
assigning_operator   : 143
assignment_action    : 136
boolean_expression   : 92 93 97 98 151 152 159 160 181
boolean_literal      : 76
bracketed_action     : 135
builtin_call         : 183
builtin_name         : 194 195
call_action          : 59 137
character_literal    : 77
character_string_literal : 79
closed_dyadic_operator : 145
composite_mode       : 30
conditional_expression : 91
control_part         : 162 164
declaration          : 10 11
declaration_list     : 9 11
declaration_statement : 4
dereferenced_reference : 54
discrete_expression  : 174 176 177
discrete_mode        : 28 36 49 179 180
discrete_range_mode  : 34
do_action            : 142
element_mode         : 46
else_clause          : 152 160
else_expression      : 92 93
elsif_expression     : 93 98
empty_literal        : 78
end_value            : 171 172
exit_action          : 138
expression           : 14 21 22 39 40 52 67 68 89 94 95 96 143 178 188 193
expression_list      : 66 68
for_control          : 166 167
formal_parameter     : 211 212
formal_parameter_list : 210 212
formal_procedure_head : 205 206
identifier           : 15 16 35 37 53 61 63 134 173 184 185
identifier_list      : 12 13 16 21 22 26 213
if_action            : 141
index_mode           : 47 48
index_mode_list      : 46 48
initialization       : 13
integer_expression   : 62 64 65 86 175
integer_literal      : 45 75
iteration            : 168
label_id             : 133 189 204
left_element         : 63
literal              : 71
literal_range        : 35 36 50
location             : 60 70 128 131 143
loop_counter         : 171 172 179 180
lower_bound          : 38 69 87
membership_operator  : 102
mode                 : 12 13 22 26 41 51 214 215 217 218
mode_definition      : 24 25
mode_name            : 27
monadic_operator     : 125
newmode_list         : 23 25
newmode_statement    : 6
operand0             : 90 100
operand1             : 99 100 113
operand2             : 112 113 120
operand3             : 119 120
operand4             : 124 125
operator1            : 100
operator2            : 113
parameter            : 186 187
parameter_attribute  : 215
parameter_list       : 185 187 195
parameter_spec       : 213
parenthesis_gambiarra : 207 208
parenthesized_expression : 74
primitive_value      : 88 130
procedure_call       : 182
procedure_definition : 204
procedure_statement  : 7
program              : 0
range_enumeration    : 170
reference_mode       : 29
referenced_location  : 129
relational_operator  : 101
result               : 191 192
result_action        : 140
result_attribute     : 218
result_spec          : 208
return_action        : 139
right_element        : 63
start_element        : 61
start_value          : 171 172
statement            : 2 3
statement_list       : 1 3 206
step_enumeration     : 169
step_value           : 172
string_concatenation_operator : 115
string_element       : 55
string_length        : 44
string_mode          : 42
string_slice         : 56
synonym_definition   : 19 20
synonym_list         : 18 20
synonym_statement    : 5
then_clause          : 151 152 159 160
then_expression      : 92 93 97 98
upper_bound          : 38 69 87
value_array_element  : 72
value_array_slice    : 73
while_control        : 165 167

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (204) procedure_statement -> . label_id COLON procedure_definition SEMI
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (134) label_id -> . identifier
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (17) identifier -> . ID
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    DCL             shift and go to state 9
    SYN             shift and go to state 10
    TYPE            shift and go to state 11
    ID              shift and go to state 21
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4
    synonym_statement              shift and go to state 5
    newmode_statement              shift and go to state 6
    procedure_statement            shift and go to state 7
    action_statement               shift and go to state 8
    label_id                       shift and go to state 12
    action                         shift and go to state 13
    identifier                     shift and go to state 14
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (204) procedure_statement -> . label_id COLON procedure_definition SEMI
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (134) label_id -> . identifier
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (17) identifier -> . ID
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 9
    SYN             shift and go to state 10
    TYPE            shift and go to state 11
    ID              shift and go to state 21
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    statement                      shift and go to state 47
    declaration_statement          shift and go to state 4
    synonym_statement              shift and go to state 5
    newmode_statement              shift and go to state 6
    procedure_statement            shift and go to state 7
    action_statement               shift and go to state 8
    label_id                       shift and go to state 12
    action                         shift and go to state 13
    identifier                     shift and go to state 14
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 3

    (2) statement_list -> statement .

    DCL             reduce using rule 2 (statement_list -> statement .)
    SYN             reduce using rule 2 (statement_list -> statement .)
    TYPE            reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    EXIT            reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    RESULT          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    DO              reduce using rule 2 (statement_list -> statement .)
    ABS             reduce using rule 2 (statement_list -> statement .)
    ASC             reduce using rule 2 (statement_list -> statement .)
    NUM             reduce using rule 2 (statement_list -> statement .)
    UPPER           reduce using rule 2 (statement_list -> statement .)
    LOWER           reduce using rule 2 (statement_list -> statement .)
    LENGTH          reduce using rule 2 (statement_list -> statement .)
    READ            reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    END             reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> declaration_statement .

    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    TYPE            reduce using rule 4 (statement -> declaration_statement .)
    ID              reduce using rule 4 (statement -> declaration_statement .)
    EXIT            reduce using rule 4 (statement -> declaration_statement .)
    RETURN          reduce using rule 4 (statement -> declaration_statement .)
    RESULT          reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    DO              reduce using rule 4 (statement -> declaration_statement .)
    ABS             reduce using rule 4 (statement -> declaration_statement .)
    ASC             reduce using rule 4 (statement -> declaration_statement .)
    NUM             reduce using rule 4 (statement -> declaration_statement .)
    UPPER           reduce using rule 4 (statement -> declaration_statement .)
    LOWER           reduce using rule 4 (statement -> declaration_statement .)
    LENGTH          reduce using rule 4 (statement -> declaration_statement .)
    READ            reduce using rule 4 (statement -> declaration_statement .)
    PRINT           reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)
    END             reduce using rule 4 (statement -> declaration_statement .)


state 5

    (5) statement -> synonym_statement .

    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    TYPE            reduce using rule 5 (statement -> synonym_statement .)
    ID              reduce using rule 5 (statement -> synonym_statement .)
    EXIT            reduce using rule 5 (statement -> synonym_statement .)
    RETURN          reduce using rule 5 (statement -> synonym_statement .)
    RESULT          reduce using rule 5 (statement -> synonym_statement .)
    IF              reduce using rule 5 (statement -> synonym_statement .)
    DO              reduce using rule 5 (statement -> synonym_statement .)
    ABS             reduce using rule 5 (statement -> synonym_statement .)
    ASC             reduce using rule 5 (statement -> synonym_statement .)
    NUM             reduce using rule 5 (statement -> synonym_statement .)
    UPPER           reduce using rule 5 (statement -> synonym_statement .)
    LOWER           reduce using rule 5 (statement -> synonym_statement .)
    LENGTH          reduce using rule 5 (statement -> synonym_statement .)
    READ            reduce using rule 5 (statement -> synonym_statement .)
    PRINT           reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)
    END             reduce using rule 5 (statement -> synonym_statement .)


state 6

    (6) statement -> newmode_statement .

    DCL             reduce using rule 6 (statement -> newmode_statement .)
    SYN             reduce using rule 6 (statement -> newmode_statement .)
    TYPE            reduce using rule 6 (statement -> newmode_statement .)
    ID              reduce using rule 6 (statement -> newmode_statement .)
    EXIT            reduce using rule 6 (statement -> newmode_statement .)
    RETURN          reduce using rule 6 (statement -> newmode_statement .)
    RESULT          reduce using rule 6 (statement -> newmode_statement .)
    IF              reduce using rule 6 (statement -> newmode_statement .)
    DO              reduce using rule 6 (statement -> newmode_statement .)
    ABS             reduce using rule 6 (statement -> newmode_statement .)
    ASC             reduce using rule 6 (statement -> newmode_statement .)
    NUM             reduce using rule 6 (statement -> newmode_statement .)
    UPPER           reduce using rule 6 (statement -> newmode_statement .)
    LOWER           reduce using rule 6 (statement -> newmode_statement .)
    LENGTH          reduce using rule 6 (statement -> newmode_statement .)
    READ            reduce using rule 6 (statement -> newmode_statement .)
    PRINT           reduce using rule 6 (statement -> newmode_statement .)
    $end            reduce using rule 6 (statement -> newmode_statement .)
    END             reduce using rule 6 (statement -> newmode_statement .)


state 7

    (7) statement -> procedure_statement .

    DCL             reduce using rule 7 (statement -> procedure_statement .)
    SYN             reduce using rule 7 (statement -> procedure_statement .)
    TYPE            reduce using rule 7 (statement -> procedure_statement .)
    ID              reduce using rule 7 (statement -> procedure_statement .)
    EXIT            reduce using rule 7 (statement -> procedure_statement .)
    RETURN          reduce using rule 7 (statement -> procedure_statement .)
    RESULT          reduce using rule 7 (statement -> procedure_statement .)
    IF              reduce using rule 7 (statement -> procedure_statement .)
    DO              reduce using rule 7 (statement -> procedure_statement .)
    ABS             reduce using rule 7 (statement -> procedure_statement .)
    ASC             reduce using rule 7 (statement -> procedure_statement .)
    NUM             reduce using rule 7 (statement -> procedure_statement .)
    UPPER           reduce using rule 7 (statement -> procedure_statement .)
    LOWER           reduce using rule 7 (statement -> procedure_statement .)
    LENGTH          reduce using rule 7 (statement -> procedure_statement .)
    READ            reduce using rule 7 (statement -> procedure_statement .)
    PRINT           reduce using rule 7 (statement -> procedure_statement .)
    $end            reduce using rule 7 (statement -> procedure_statement .)
    END             reduce using rule 7 (statement -> procedure_statement .)


state 8

    (8) statement -> action_statement .

    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    RETURN          reduce using rule 8 (statement -> action_statement .)
    RESULT          reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    DO              reduce using rule 8 (statement -> action_statement .)
    ABS             reduce using rule 8 (statement -> action_statement .)
    ASC             reduce using rule 8 (statement -> action_statement .)
    NUM             reduce using rule 8 (statement -> action_statement .)
    UPPER           reduce using rule 8 (statement -> action_statement .)
    LOWER           reduce using rule 8 (statement -> action_statement .)
    LENGTH          reduce using rule 8 (statement -> action_statement .)
    READ            reduce using rule 8 (statement -> action_statement .)
    PRINT           reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)
    END             reduce using rule 8 (statement -> action_statement .)


state 9

    (9) declaration_statement -> DCL . declaration_list SEMI
    (10) declaration_list -> . declaration
    (11) declaration_list -> . declaration_list COMMA declaration
    (12) declaration -> . identifier_list mode
    (13) declaration -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 21

    declaration_list               shift and go to state 48
    declaration                    shift and go to state 49
    identifier_list                shift and go to state 50
    identifier                     shift and go to state 51

state 10

    (18) synonym_statement -> SYN . synonym_list
    (19) synonym_list -> . synonym_definition
    (20) synonym_list -> . synonym_list synonym_definition
    (21) synonym_definition -> . identifier_list ASSIGN expression
    (22) synonym_definition -> . identifier_list mode ASSIGN expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 21

    synonym_list                   shift and go to state 52
    synonym_definition             shift and go to state 53
    identifier_list                shift and go to state 54
    identifier                     shift and go to state 51

state 11

    (23) newmode_statement -> TYPE . newmode_list SEMI
    (24) newmode_list -> . mode_definition
    (25) newmode_list -> . newmode_list COMMA mode_definition
    (26) mode_definition -> . identifier_list ASSIGN mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 21

    newmode_list                   shift and go to state 55
    mode_definition                shift and go to state 56
    identifier_list                shift and go to state 57
    identifier                     shift and go to state 51

state 12

    (204) procedure_statement -> label_id . COLON procedure_definition SEMI
    (133) action_statement -> label_id . COLON action SEMI

    COLON           shift and go to state 58


state 13

    (132) action_statement -> action . SEMI

    SEMI            shift and go to state 59


state 14

    (134) label_id -> identifier .
    (53) location -> identifier .
    (184) procedure_call -> identifier . LPAREN RPAREN
    (185) procedure_call -> identifier . LPAREN parameter_list RPAREN
    (61) string_element -> identifier . LBRACKET start_element RBRACKET
    (63) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON           reduce using rule 134 (label_id -> identifier .)
    ARROW           reduce using rule 53 (location -> identifier .)
    ASSIGN          reduce using rule 53 (location -> identifier .)
    INCREASE        reduce using rule 53 (location -> identifier .)
    DECREASE        reduce using rule 53 (location -> identifier .)
    MULCREASE       reduce using rule 53 (location -> identifier .)
    DIVCREASE       reduce using rule 53 (location -> identifier .)
    MODCREASE       reduce using rule 53 (location -> identifier .)
    LPAREN          shift and go to state 60
    LBRACKET        shift and go to state 61

  ! LBRACKET        [ reduce using rule 53 (location -> identifier .) ]


state 15

    (135) action -> bracketed_action .

    SEMI            reduce using rule 135 (action -> bracketed_action .)


state 16

    (136) action -> assignment_action .

    SEMI            reduce using rule 136 (action -> assignment_action .)


state 17

    (137) action -> call_action .
    (59) location -> call_action .

    SEMI            reduce using rule 137 (action -> call_action .)
    ARROW           reduce using rule 59 (location -> call_action .)
    ASSIGN          reduce using rule 59 (location -> call_action .)
    INCREASE        reduce using rule 59 (location -> call_action .)
    DECREASE        reduce using rule 59 (location -> call_action .)
    MULCREASE       reduce using rule 59 (location -> call_action .)
    DIVCREASE       reduce using rule 59 (location -> call_action .)
    MODCREASE       reduce using rule 59 (location -> call_action .)
    LBRACKET        reduce using rule 59 (location -> call_action .)


state 18

    (138) action -> exit_action .

    SEMI            reduce using rule 138 (action -> exit_action .)


state 19

    (139) action -> return_action .

    SEMI            reduce using rule 139 (action -> return_action .)


state 20

    (140) action -> result_action .

    SEMI            reduce using rule 140 (action -> result_action .)


state 21

    (17) identifier -> ID .

    LPAREN          reduce using rule 17 (identifier -> ID .)
    LBRACKET        reduce using rule 17 (identifier -> ID .)
    COLON           reduce using rule 17 (identifier -> ID .)
    ARROW           reduce using rule 17 (identifier -> ID .)
    ASSIGN          reduce using rule 17 (identifier -> ID .)
    INCREASE        reduce using rule 17 (identifier -> ID .)
    DECREASE        reduce using rule 17 (identifier -> ID .)
    MULCREASE       reduce using rule 17 (identifier -> ID .)
    DIVCREASE       reduce using rule 17 (identifier -> ID .)
    MODCREASE       reduce using rule 17 (identifier -> ID .)
    COMMA           reduce using rule 17 (identifier -> ID .)
    INT             reduce using rule 17 (identifier -> ID .)
    BOOL            reduce using rule 17 (identifier -> ID .)
    CHAR            reduce using rule 17 (identifier -> ID .)
    REF             reduce using rule 17 (identifier -> ID .)
    ID              reduce using rule 17 (identifier -> ID .)
    CHARS           reduce using rule 17 (identifier -> ID .)
    ARRAY           reduce using rule 17 (identifier -> ID .)
    SEMI            reduce using rule 17 (identifier -> ID .)
    TIMES           reduce using rule 17 (identifier -> ID .)
    DIVIDE          reduce using rule 17 (identifier -> ID .)
    MOD             reduce using rule 17 (identifier -> ID .)
    PLUS            reduce using rule 17 (identifier -> ID .)
    MINUS           reduce using rule 17 (identifier -> ID .)
    STRCAT          reduce using rule 17 (identifier -> ID .)
    AND             reduce using rule 17 (identifier -> ID .)
    OR              reduce using rule 17 (identifier -> ID .)
    EQUAL           reduce using rule 17 (identifier -> ID .)
    DIFF            reduce using rule 17 (identifier -> ID .)
    GREATER         reduce using rule 17 (identifier -> ID .)
    GREATEREQ       reduce using rule 17 (identifier -> ID .)
    LESS            reduce using rule 17 (identifier -> ID .)
    LESSEQ          reduce using rule 17 (identifier -> ID .)
    IN              reduce using rule 17 (identifier -> ID .)
    THEN            reduce using rule 17 (identifier -> ID .)
    RPAREN          reduce using rule 17 (identifier -> ID .)
    RBRACKET        reduce using rule 17 (identifier -> ID .)
    DCL             reduce using rule 17 (identifier -> ID .)
    SYN             reduce using rule 17 (identifier -> ID .)
    TYPE            reduce using rule 17 (identifier -> ID .)
    EXIT            reduce using rule 17 (identifier -> ID .)
    RETURN          reduce using rule 17 (identifier -> ID .)
    RESULT          reduce using rule 17 (identifier -> ID .)
    IF              reduce using rule 17 (identifier -> ID .)
    DO              reduce using rule 17 (identifier -> ID .)
    ABS             reduce using rule 17 (identifier -> ID .)
    ASC             reduce using rule 17 (identifier -> ID .)
    NUM             reduce using rule 17 (identifier -> ID .)
    UPPER           reduce using rule 17 (identifier -> ID .)
    LOWER           reduce using rule 17 (identifier -> ID .)
    LENGTH          reduce using rule 17 (identifier -> ID .)
    READ            reduce using rule 17 (identifier -> ID .)
    PRINT           reduce using rule 17 (identifier -> ID .)
    $end            reduce using rule 17 (identifier -> ID .)
    END             reduce using rule 17 (identifier -> ID .)
    ELSE            reduce using rule 17 (identifier -> ID .)
    ELSIF           reduce using rule 17 (identifier -> ID .)
    TO              reduce using rule 17 (identifier -> ID .)
    DOWN            reduce using rule 17 (identifier -> ID .)
    BY              reduce using rule 17 (identifier -> ID .)
    FI              reduce using rule 17 (identifier -> ID .)
    WHILE           reduce using rule 17 (identifier -> ID .)
    LOC             reduce using rule 17 (identifier -> ID .)


state 22

    (141) bracketed_action -> if_action .

    SEMI            reduce using rule 141 (bracketed_action -> if_action .)


state 23

    (142) bracketed_action -> do_action .

    SEMI            reduce using rule 142 (bracketed_action -> do_action .)


state 24

    (143) assignment_action -> location . assigning_operator expression
    (60) dereferenced_reference -> location . ARROW
    (70) array_location -> location .
    (144) assigning_operator -> . ASSIGN
    (145) assigning_operator -> . closed_dyadic_operator
    (146) closed_dyadic_operator -> . INCREASE
    (147) closed_dyadic_operator -> . DECREASE
    (148) closed_dyadic_operator -> . MULCREASE
    (149) closed_dyadic_operator -> . DIVCREASE
    (150) closed_dyadic_operator -> . MODCREASE

    ARROW           shift and go to state 63
    LBRACKET        reduce using rule 70 (array_location -> location .)
    ASSIGN          shift and go to state 64
    INCREASE        shift and go to state 66
    DECREASE        shift and go to state 67
    MULCREASE       shift and go to state 68
    DIVCREASE       shift and go to state 69
    MODCREASE       shift and go to state 70

    assigning_operator             shift and go to state 62
    closed_dyadic_operator         shift and go to state 65

state 25

    (182) call_action -> procedure_call .

    SEMI            reduce using rule 182 (call_action -> procedure_call .)
    ARROW           reduce using rule 182 (call_action -> procedure_call .)
    ASSIGN          reduce using rule 182 (call_action -> procedure_call .)
    INCREASE        reduce using rule 182 (call_action -> procedure_call .)
    DECREASE        reduce using rule 182 (call_action -> procedure_call .)
    MULCREASE       reduce using rule 182 (call_action -> procedure_call .)
    DIVCREASE       reduce using rule 182 (call_action -> procedure_call .)
    MODCREASE       reduce using rule 182 (call_action -> procedure_call .)
    LBRACKET        reduce using rule 182 (call_action -> procedure_call .)
    TIMES           reduce using rule 182 (call_action -> procedure_call .)
    DIVIDE          reduce using rule 182 (call_action -> procedure_call .)
    MOD             reduce using rule 182 (call_action -> procedure_call .)
    PLUS            reduce using rule 182 (call_action -> procedure_call .)
    MINUS           reduce using rule 182 (call_action -> procedure_call .)
    STRCAT          reduce using rule 182 (call_action -> procedure_call .)
    AND             reduce using rule 182 (call_action -> procedure_call .)
    OR              reduce using rule 182 (call_action -> procedure_call .)
    EQUAL           reduce using rule 182 (call_action -> procedure_call .)
    DIFF            reduce using rule 182 (call_action -> procedure_call .)
    GREATER         reduce using rule 182 (call_action -> procedure_call .)
    GREATEREQ       reduce using rule 182 (call_action -> procedure_call .)
    LESS            reduce using rule 182 (call_action -> procedure_call .)
    LESSEQ          reduce using rule 182 (call_action -> procedure_call .)
    IN              reduce using rule 182 (call_action -> procedure_call .)
    THEN            reduce using rule 182 (call_action -> procedure_call .)
    RPAREN          reduce using rule 182 (call_action -> procedure_call .)
    COMMA           reduce using rule 182 (call_action -> procedure_call .)
    RBRACKET        reduce using rule 182 (call_action -> procedure_call .)
    COLON           reduce using rule 182 (call_action -> procedure_call .)
    ID              reduce using rule 182 (call_action -> procedure_call .)
    DCL             reduce using rule 182 (call_action -> procedure_call .)
    SYN             reduce using rule 182 (call_action -> procedure_call .)
    TYPE            reduce using rule 182 (call_action -> procedure_call .)
    EXIT            reduce using rule 182 (call_action -> procedure_call .)
    RETURN          reduce using rule 182 (call_action -> procedure_call .)
    RESULT          reduce using rule 182 (call_action -> procedure_call .)
    IF              reduce using rule 182 (call_action -> procedure_call .)
    DO              reduce using rule 182 (call_action -> procedure_call .)
    ABS             reduce using rule 182 (call_action -> procedure_call .)
    ASC             reduce using rule 182 (call_action -> procedure_call .)
    NUM             reduce using rule 182 (call_action -> procedure_call .)
    UPPER           reduce using rule 182 (call_action -> procedure_call .)
    LOWER           reduce using rule 182 (call_action -> procedure_call .)
    LENGTH          reduce using rule 182 (call_action -> procedure_call .)
    READ            reduce using rule 182 (call_action -> procedure_call .)
    PRINT           reduce using rule 182 (call_action -> procedure_call .)
    $end            reduce using rule 182 (call_action -> procedure_call .)
    END             reduce using rule 182 (call_action -> procedure_call .)
    ELSE            reduce using rule 182 (call_action -> procedure_call .)
    ELSIF           reduce using rule 182 (call_action -> procedure_call .)
    TO              reduce using rule 182 (call_action -> procedure_call .)
    DOWN            reduce using rule 182 (call_action -> procedure_call .)
    BY              reduce using rule 182 (call_action -> procedure_call .)
    FI              reduce using rule 182 (call_action -> procedure_call .)
    WHILE           reduce using rule 182 (call_action -> procedure_call .)


state 26

    (183) call_action -> builtin_call .

    SEMI            reduce using rule 183 (call_action -> builtin_call .)
    ARROW           reduce using rule 183 (call_action -> builtin_call .)
    ASSIGN          reduce using rule 183 (call_action -> builtin_call .)
    INCREASE        reduce using rule 183 (call_action -> builtin_call .)
    DECREASE        reduce using rule 183 (call_action -> builtin_call .)
    MULCREASE       reduce using rule 183 (call_action -> builtin_call .)
    DIVCREASE       reduce using rule 183 (call_action -> builtin_call .)
    MODCREASE       reduce using rule 183 (call_action -> builtin_call .)
    LBRACKET        reduce using rule 183 (call_action -> builtin_call .)
    TIMES           reduce using rule 183 (call_action -> builtin_call .)
    DIVIDE          reduce using rule 183 (call_action -> builtin_call .)
    MOD             reduce using rule 183 (call_action -> builtin_call .)
    PLUS            reduce using rule 183 (call_action -> builtin_call .)
    MINUS           reduce using rule 183 (call_action -> builtin_call .)
    STRCAT          reduce using rule 183 (call_action -> builtin_call .)
    AND             reduce using rule 183 (call_action -> builtin_call .)
    OR              reduce using rule 183 (call_action -> builtin_call .)
    EQUAL           reduce using rule 183 (call_action -> builtin_call .)
    DIFF            reduce using rule 183 (call_action -> builtin_call .)
    GREATER         reduce using rule 183 (call_action -> builtin_call .)
    GREATEREQ       reduce using rule 183 (call_action -> builtin_call .)
    LESS            reduce using rule 183 (call_action -> builtin_call .)
    LESSEQ          reduce using rule 183 (call_action -> builtin_call .)
    IN              reduce using rule 183 (call_action -> builtin_call .)
    THEN            reduce using rule 183 (call_action -> builtin_call .)
    RPAREN          reduce using rule 183 (call_action -> builtin_call .)
    COMMA           reduce using rule 183 (call_action -> builtin_call .)
    RBRACKET        reduce using rule 183 (call_action -> builtin_call .)
    COLON           reduce using rule 183 (call_action -> builtin_call .)
    ID              reduce using rule 183 (call_action -> builtin_call .)
    DCL             reduce using rule 183 (call_action -> builtin_call .)
    SYN             reduce using rule 183 (call_action -> builtin_call .)
    TYPE            reduce using rule 183 (call_action -> builtin_call .)
    EXIT            reduce using rule 183 (call_action -> builtin_call .)
    RETURN          reduce using rule 183 (call_action -> builtin_call .)
    RESULT          reduce using rule 183 (call_action -> builtin_call .)
    IF              reduce using rule 183 (call_action -> builtin_call .)
    DO              reduce using rule 183 (call_action -> builtin_call .)
    ABS             reduce using rule 183 (call_action -> builtin_call .)
    ASC             reduce using rule 183 (call_action -> builtin_call .)
    NUM             reduce using rule 183 (call_action -> builtin_call .)
    UPPER           reduce using rule 183 (call_action -> builtin_call .)
    LOWER           reduce using rule 183 (call_action -> builtin_call .)
    LENGTH          reduce using rule 183 (call_action -> builtin_call .)
    READ            reduce using rule 183 (call_action -> builtin_call .)
    PRINT           reduce using rule 183 (call_action -> builtin_call .)
    $end            reduce using rule 183 (call_action -> builtin_call .)
    END             reduce using rule 183 (call_action -> builtin_call .)
    ELSE            reduce using rule 183 (call_action -> builtin_call .)
    ELSIF           reduce using rule 183 (call_action -> builtin_call .)
    TO              reduce using rule 183 (call_action -> builtin_call .)
    DOWN            reduce using rule 183 (call_action -> builtin_call .)
    BY              reduce using rule 183 (call_action -> builtin_call .)
    FI              reduce using rule 183 (call_action -> builtin_call .)
    WHILE           reduce using rule 183 (call_action -> builtin_call .)


state 27

    (189) exit_action -> EXIT . label_id
    (134) label_id -> . identifier
    (17) identifier -> . ID

    ID              shift and go to state 21

    label_id                       shift and go to state 71
    identifier                     shift and go to state 72

state 28

    (190) return_action -> RETURN .
    (191) return_action -> RETURN . result
    (193) result -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    SEMI            reduce using rule 190 (return_action -> RETURN .)
    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    result                         shift and go to state 73
    expression                     shift and go to state 74
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 29

    (192) result_action -> RESULT . result
    (193) result -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    result                         shift and go to state 108
    expression                     shift and go to state 74
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 30

    (151) if_action -> IF . boolean_expression then_clause FI
    (152) if_action -> IF . boolean_expression then_clause else_clause FI
    (94) boolean_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    boolean_expression             shift and go to state 109
    expression                     shift and go to state 110
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 31

    (161) do_action -> DO . OD
    (162) do_action -> DO . control_part SEMI OD
    (163) do_action -> DO . action_statement_list OD
    (164) do_action -> DO . control_part SEMI action_statement_list OD
    (165) control_part -> . while_control
    (166) control_part -> . FOR for_control
    (167) control_part -> . FOR for_control while_control
    (155) action_statement_list -> . action_statement
    (156) action_statement_list -> . action_statement_list action_statement
    (181) while_control -> . WHILE boolean_expression
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (134) label_id -> . identifier
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (17) identifier -> . ID
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    OD              shift and go to state 111
    FOR             shift and go to state 115
    WHILE           shift and go to state 117
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    ID              shift and go to state 21
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    control_part                   shift and go to state 112
    action_statement_list          shift and go to state 113
    while_control                  shift and go to state 114
    action_statement               shift and go to state 116
    action                         shift and go to state 13
    label_id                       shift and go to state 118
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    identifier                     shift and go to state 14
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 32

    (54) location -> dereferenced_reference .

    ARROW           reduce using rule 54 (location -> dereferenced_reference .)
    ASSIGN          reduce using rule 54 (location -> dereferenced_reference .)
    INCREASE        reduce using rule 54 (location -> dereferenced_reference .)
    DECREASE        reduce using rule 54 (location -> dereferenced_reference .)
    MULCREASE       reduce using rule 54 (location -> dereferenced_reference .)
    DIVCREASE       reduce using rule 54 (location -> dereferenced_reference .)
    MODCREASE       reduce using rule 54 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 54 (location -> dereferenced_reference .)
    TIMES           reduce using rule 54 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 54 (location -> dereferenced_reference .)
    MOD             reduce using rule 54 (location -> dereferenced_reference .)
    PLUS            reduce using rule 54 (location -> dereferenced_reference .)
    MINUS           reduce using rule 54 (location -> dereferenced_reference .)
    STRCAT          reduce using rule 54 (location -> dereferenced_reference .)
    AND             reduce using rule 54 (location -> dereferenced_reference .)
    OR              reduce using rule 54 (location -> dereferenced_reference .)
    EQUAL           reduce using rule 54 (location -> dereferenced_reference .)
    DIFF            reduce using rule 54 (location -> dereferenced_reference .)
    GREATER         reduce using rule 54 (location -> dereferenced_reference .)
    GREATEREQ       reduce using rule 54 (location -> dereferenced_reference .)
    LESS            reduce using rule 54 (location -> dereferenced_reference .)
    LESSEQ          reduce using rule 54 (location -> dereferenced_reference .)
    IN              reduce using rule 54 (location -> dereferenced_reference .)
    SEMI            reduce using rule 54 (location -> dereferenced_reference .)
    THEN            reduce using rule 54 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 54 (location -> dereferenced_reference .)
    COMMA           reduce using rule 54 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 54 (location -> dereferenced_reference .)
    COLON           reduce using rule 54 (location -> dereferenced_reference .)
    ID              reduce using rule 54 (location -> dereferenced_reference .)
    DCL             reduce using rule 54 (location -> dereferenced_reference .)
    SYN             reduce using rule 54 (location -> dereferenced_reference .)
    TYPE            reduce using rule 54 (location -> dereferenced_reference .)
    EXIT            reduce using rule 54 (location -> dereferenced_reference .)
    RETURN          reduce using rule 54 (location -> dereferenced_reference .)
    RESULT          reduce using rule 54 (location -> dereferenced_reference .)
    IF              reduce using rule 54 (location -> dereferenced_reference .)
    DO              reduce using rule 54 (location -> dereferenced_reference .)
    ABS             reduce using rule 54 (location -> dereferenced_reference .)
    ASC             reduce using rule 54 (location -> dereferenced_reference .)
    NUM             reduce using rule 54 (location -> dereferenced_reference .)
    UPPER           reduce using rule 54 (location -> dereferenced_reference .)
    LOWER           reduce using rule 54 (location -> dereferenced_reference .)
    LENGTH          reduce using rule 54 (location -> dereferenced_reference .)
    READ            reduce using rule 54 (location -> dereferenced_reference .)
    PRINT           reduce using rule 54 (location -> dereferenced_reference .)
    $end            reduce using rule 54 (location -> dereferenced_reference .)
    END             reduce using rule 54 (location -> dereferenced_reference .)
    ELSE            reduce using rule 54 (location -> dereferenced_reference .)
    ELSIF           reduce using rule 54 (location -> dereferenced_reference .)
    TO              reduce using rule 54 (location -> dereferenced_reference .)
    DOWN            reduce using rule 54 (location -> dereferenced_reference .)
    BY              reduce using rule 54 (location -> dereferenced_reference .)
    FI              reduce using rule 54 (location -> dereferenced_reference .)
    WHILE           reduce using rule 54 (location -> dereferenced_reference .)


state 33

    (55) location -> string_element .

    ARROW           reduce using rule 55 (location -> string_element .)
    ASSIGN          reduce using rule 55 (location -> string_element .)
    INCREASE        reduce using rule 55 (location -> string_element .)
    DECREASE        reduce using rule 55 (location -> string_element .)
    MULCREASE       reduce using rule 55 (location -> string_element .)
    DIVCREASE       reduce using rule 55 (location -> string_element .)
    MODCREASE       reduce using rule 55 (location -> string_element .)
    LBRACKET        reduce using rule 55 (location -> string_element .)
    TIMES           reduce using rule 55 (location -> string_element .)
    DIVIDE          reduce using rule 55 (location -> string_element .)
    MOD             reduce using rule 55 (location -> string_element .)
    PLUS            reduce using rule 55 (location -> string_element .)
    MINUS           reduce using rule 55 (location -> string_element .)
    STRCAT          reduce using rule 55 (location -> string_element .)
    AND             reduce using rule 55 (location -> string_element .)
    OR              reduce using rule 55 (location -> string_element .)
    EQUAL           reduce using rule 55 (location -> string_element .)
    DIFF            reduce using rule 55 (location -> string_element .)
    GREATER         reduce using rule 55 (location -> string_element .)
    GREATEREQ       reduce using rule 55 (location -> string_element .)
    LESS            reduce using rule 55 (location -> string_element .)
    LESSEQ          reduce using rule 55 (location -> string_element .)
    IN              reduce using rule 55 (location -> string_element .)
    SEMI            reduce using rule 55 (location -> string_element .)
    THEN            reduce using rule 55 (location -> string_element .)
    RPAREN          reduce using rule 55 (location -> string_element .)
    COMMA           reduce using rule 55 (location -> string_element .)
    RBRACKET        reduce using rule 55 (location -> string_element .)
    COLON           reduce using rule 55 (location -> string_element .)
    ID              reduce using rule 55 (location -> string_element .)
    DCL             reduce using rule 55 (location -> string_element .)
    SYN             reduce using rule 55 (location -> string_element .)
    TYPE            reduce using rule 55 (location -> string_element .)
    EXIT            reduce using rule 55 (location -> string_element .)
    RETURN          reduce using rule 55 (location -> string_element .)
    RESULT          reduce using rule 55 (location -> string_element .)
    IF              reduce using rule 55 (location -> string_element .)
    DO              reduce using rule 55 (location -> string_element .)
    ABS             reduce using rule 55 (location -> string_element .)
    ASC             reduce using rule 55 (location -> string_element .)
    NUM             reduce using rule 55 (location -> string_element .)
    UPPER           reduce using rule 55 (location -> string_element .)
    LOWER           reduce using rule 55 (location -> string_element .)
    LENGTH          reduce using rule 55 (location -> string_element .)
    READ            reduce using rule 55 (location -> string_element .)
    PRINT           reduce using rule 55 (location -> string_element .)
    $end            reduce using rule 55 (location -> string_element .)
    END             reduce using rule 55 (location -> string_element .)
    ELSE            reduce using rule 55 (location -> string_element .)
    ELSIF           reduce using rule 55 (location -> string_element .)
    TO              reduce using rule 55 (location -> string_element .)
    DOWN            reduce using rule 55 (location -> string_element .)
    BY              reduce using rule 55 (location -> string_element .)
    FI              reduce using rule 55 (location -> string_element .)
    WHILE           reduce using rule 55 (location -> string_element .)


state 34

    (56) location -> string_slice .

    ARROW           reduce using rule 56 (location -> string_slice .)
    ASSIGN          reduce using rule 56 (location -> string_slice .)
    INCREASE        reduce using rule 56 (location -> string_slice .)
    DECREASE        reduce using rule 56 (location -> string_slice .)
    MULCREASE       reduce using rule 56 (location -> string_slice .)
    DIVCREASE       reduce using rule 56 (location -> string_slice .)
    MODCREASE       reduce using rule 56 (location -> string_slice .)
    LBRACKET        reduce using rule 56 (location -> string_slice .)
    TIMES           reduce using rule 56 (location -> string_slice .)
    DIVIDE          reduce using rule 56 (location -> string_slice .)
    MOD             reduce using rule 56 (location -> string_slice .)
    PLUS            reduce using rule 56 (location -> string_slice .)
    MINUS           reduce using rule 56 (location -> string_slice .)
    STRCAT          reduce using rule 56 (location -> string_slice .)
    AND             reduce using rule 56 (location -> string_slice .)
    OR              reduce using rule 56 (location -> string_slice .)
    EQUAL           reduce using rule 56 (location -> string_slice .)
    DIFF            reduce using rule 56 (location -> string_slice .)
    GREATER         reduce using rule 56 (location -> string_slice .)
    GREATEREQ       reduce using rule 56 (location -> string_slice .)
    LESS            reduce using rule 56 (location -> string_slice .)
    LESSEQ          reduce using rule 56 (location -> string_slice .)
    IN              reduce using rule 56 (location -> string_slice .)
    SEMI            reduce using rule 56 (location -> string_slice .)
    THEN            reduce using rule 56 (location -> string_slice .)
    RPAREN          reduce using rule 56 (location -> string_slice .)
    COMMA           reduce using rule 56 (location -> string_slice .)
    RBRACKET        reduce using rule 56 (location -> string_slice .)
    COLON           reduce using rule 56 (location -> string_slice .)
    ID              reduce using rule 56 (location -> string_slice .)
    DCL             reduce using rule 56 (location -> string_slice .)
    SYN             reduce using rule 56 (location -> string_slice .)
    TYPE            reduce using rule 56 (location -> string_slice .)
    EXIT            reduce using rule 56 (location -> string_slice .)
    RETURN          reduce using rule 56 (location -> string_slice .)
    RESULT          reduce using rule 56 (location -> string_slice .)
    IF              reduce using rule 56 (location -> string_slice .)
    DO              reduce using rule 56 (location -> string_slice .)
    ABS             reduce using rule 56 (location -> string_slice .)
    ASC             reduce using rule 56 (location -> string_slice .)
    NUM             reduce using rule 56 (location -> string_slice .)
    UPPER           reduce using rule 56 (location -> string_slice .)
    LOWER           reduce using rule 56 (location -> string_slice .)
    LENGTH          reduce using rule 56 (location -> string_slice .)
    READ            reduce using rule 56 (location -> string_slice .)
    PRINT           reduce using rule 56 (location -> string_slice .)
    $end            reduce using rule 56 (location -> string_slice .)
    END             reduce using rule 56 (location -> string_slice .)
    ELSE            reduce using rule 56 (location -> string_slice .)
    ELSIF           reduce using rule 56 (location -> string_slice .)
    TO              reduce using rule 56 (location -> string_slice .)
    DOWN            reduce using rule 56 (location -> string_slice .)
    BY              reduce using rule 56 (location -> string_slice .)
    FI              reduce using rule 56 (location -> string_slice .)
    WHILE           reduce using rule 56 (location -> string_slice .)


state 35

    (57) location -> array_element .

    ARROW           reduce using rule 57 (location -> array_element .)
    ASSIGN          reduce using rule 57 (location -> array_element .)
    INCREASE        reduce using rule 57 (location -> array_element .)
    DECREASE        reduce using rule 57 (location -> array_element .)
    MULCREASE       reduce using rule 57 (location -> array_element .)
    DIVCREASE       reduce using rule 57 (location -> array_element .)
    MODCREASE       reduce using rule 57 (location -> array_element .)
    LBRACKET        reduce using rule 57 (location -> array_element .)
    TIMES           reduce using rule 57 (location -> array_element .)
    DIVIDE          reduce using rule 57 (location -> array_element .)
    MOD             reduce using rule 57 (location -> array_element .)
    PLUS            reduce using rule 57 (location -> array_element .)
    MINUS           reduce using rule 57 (location -> array_element .)
    STRCAT          reduce using rule 57 (location -> array_element .)
    AND             reduce using rule 57 (location -> array_element .)
    OR              reduce using rule 57 (location -> array_element .)
    EQUAL           reduce using rule 57 (location -> array_element .)
    DIFF            reduce using rule 57 (location -> array_element .)
    GREATER         reduce using rule 57 (location -> array_element .)
    GREATEREQ       reduce using rule 57 (location -> array_element .)
    LESS            reduce using rule 57 (location -> array_element .)
    LESSEQ          reduce using rule 57 (location -> array_element .)
    IN              reduce using rule 57 (location -> array_element .)
    SEMI            reduce using rule 57 (location -> array_element .)
    THEN            reduce using rule 57 (location -> array_element .)
    RPAREN          reduce using rule 57 (location -> array_element .)
    COMMA           reduce using rule 57 (location -> array_element .)
    RBRACKET        reduce using rule 57 (location -> array_element .)
    COLON           reduce using rule 57 (location -> array_element .)
    ID              reduce using rule 57 (location -> array_element .)
    DCL             reduce using rule 57 (location -> array_element .)
    SYN             reduce using rule 57 (location -> array_element .)
    TYPE            reduce using rule 57 (location -> array_element .)
    EXIT            reduce using rule 57 (location -> array_element .)
    RETURN          reduce using rule 57 (location -> array_element .)
    RESULT          reduce using rule 57 (location -> array_element .)
    IF              reduce using rule 57 (location -> array_element .)
    DO              reduce using rule 57 (location -> array_element .)
    ABS             reduce using rule 57 (location -> array_element .)
    ASC             reduce using rule 57 (location -> array_element .)
    NUM             reduce using rule 57 (location -> array_element .)
    UPPER           reduce using rule 57 (location -> array_element .)
    LOWER           reduce using rule 57 (location -> array_element .)
    LENGTH          reduce using rule 57 (location -> array_element .)
    READ            reduce using rule 57 (location -> array_element .)
    PRINT           reduce using rule 57 (location -> array_element .)
    $end            reduce using rule 57 (location -> array_element .)
    END             reduce using rule 57 (location -> array_element .)
    ELSE            reduce using rule 57 (location -> array_element .)
    ELSIF           reduce using rule 57 (location -> array_element .)
    TO              reduce using rule 57 (location -> array_element .)
    DOWN            reduce using rule 57 (location -> array_element .)
    BY              reduce using rule 57 (location -> array_element .)
    FI              reduce using rule 57 (location -> array_element .)
    WHILE           reduce using rule 57 (location -> array_element .)


state 36

    (58) location -> array_slice .

    ARROW           reduce using rule 58 (location -> array_slice .)
    ASSIGN          reduce using rule 58 (location -> array_slice .)
    INCREASE        reduce using rule 58 (location -> array_slice .)
    DECREASE        reduce using rule 58 (location -> array_slice .)
    MULCREASE       reduce using rule 58 (location -> array_slice .)
    DIVCREASE       reduce using rule 58 (location -> array_slice .)
    MODCREASE       reduce using rule 58 (location -> array_slice .)
    LBRACKET        reduce using rule 58 (location -> array_slice .)
    TIMES           reduce using rule 58 (location -> array_slice .)
    DIVIDE          reduce using rule 58 (location -> array_slice .)
    MOD             reduce using rule 58 (location -> array_slice .)
    PLUS            reduce using rule 58 (location -> array_slice .)
    MINUS           reduce using rule 58 (location -> array_slice .)
    STRCAT          reduce using rule 58 (location -> array_slice .)
    AND             reduce using rule 58 (location -> array_slice .)
    OR              reduce using rule 58 (location -> array_slice .)
    EQUAL           reduce using rule 58 (location -> array_slice .)
    DIFF            reduce using rule 58 (location -> array_slice .)
    GREATER         reduce using rule 58 (location -> array_slice .)
    GREATEREQ       reduce using rule 58 (location -> array_slice .)
    LESS            reduce using rule 58 (location -> array_slice .)
    LESSEQ          reduce using rule 58 (location -> array_slice .)
    IN              reduce using rule 58 (location -> array_slice .)
    SEMI            reduce using rule 58 (location -> array_slice .)
    THEN            reduce using rule 58 (location -> array_slice .)
    RPAREN          reduce using rule 58 (location -> array_slice .)
    COMMA           reduce using rule 58 (location -> array_slice .)
    RBRACKET        reduce using rule 58 (location -> array_slice .)
    COLON           reduce using rule 58 (location -> array_slice .)
    ID              reduce using rule 58 (location -> array_slice .)
    DCL             reduce using rule 58 (location -> array_slice .)
    SYN             reduce using rule 58 (location -> array_slice .)
    TYPE            reduce using rule 58 (location -> array_slice .)
    EXIT            reduce using rule 58 (location -> array_slice .)
    RETURN          reduce using rule 58 (location -> array_slice .)
    RESULT          reduce using rule 58 (location -> array_slice .)
    IF              reduce using rule 58 (location -> array_slice .)
    DO              reduce using rule 58 (location -> array_slice .)
    ABS             reduce using rule 58 (location -> array_slice .)
    ASC             reduce using rule 58 (location -> array_slice .)
    NUM             reduce using rule 58 (location -> array_slice .)
    UPPER           reduce using rule 58 (location -> array_slice .)
    LOWER           reduce using rule 58 (location -> array_slice .)
    LENGTH          reduce using rule 58 (location -> array_slice .)
    READ            reduce using rule 58 (location -> array_slice .)
    PRINT           reduce using rule 58 (location -> array_slice .)
    $end            reduce using rule 58 (location -> array_slice .)
    END             reduce using rule 58 (location -> array_slice .)
    ELSE            reduce using rule 58 (location -> array_slice .)
    ELSIF           reduce using rule 58 (location -> array_slice .)
    TO              reduce using rule 58 (location -> array_slice .)
    DOWN            reduce using rule 58 (location -> array_slice .)
    BY              reduce using rule 58 (location -> array_slice .)
    FI              reduce using rule 58 (location -> array_slice .)
    WHILE           reduce using rule 58 (location -> array_slice .)


state 37

    (194) builtin_call -> builtin_name . LPAREN RPAREN
    (195) builtin_call -> builtin_name . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 119


state 38

    (66) array_element -> array_location . LBRACKET expression_list RBRACKET
    (69) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

    LBRACKET        shift and go to state 120


state 39

    (196) builtin_name -> ABS .

    LPAREN          reduce using rule 196 (builtin_name -> ABS .)


state 40

    (197) builtin_name -> ASC .

    LPAREN          reduce using rule 197 (builtin_name -> ASC .)


state 41

    (198) builtin_name -> NUM .

    LPAREN          reduce using rule 198 (builtin_name -> NUM .)


state 42

    (199) builtin_name -> UPPER .

    LPAREN          reduce using rule 199 (builtin_name -> UPPER .)


state 43

    (200) builtin_name -> LOWER .

    LPAREN          reduce using rule 200 (builtin_name -> LOWER .)


state 44

    (201) builtin_name -> LENGTH .

    LPAREN          reduce using rule 201 (builtin_name -> LENGTH .)


state 45

    (202) builtin_name -> READ .

    LPAREN          reduce using rule 202 (builtin_name -> READ .)


state 46

    (203) builtin_name -> PRINT .

    LPAREN          reduce using rule 203 (builtin_name -> PRINT .)


state 47

    (3) statement_list -> statement_list statement .

    DCL             reduce using rule 3 (statement_list -> statement_list statement .)
    SYN             reduce using rule 3 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    EXIT            reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    RESULT          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    DO              reduce using rule 3 (statement_list -> statement_list statement .)
    ABS             reduce using rule 3 (statement_list -> statement_list statement .)
    ASC             reduce using rule 3 (statement_list -> statement_list statement .)
    NUM             reduce using rule 3 (statement_list -> statement_list statement .)
    UPPER           reduce using rule 3 (statement_list -> statement_list statement .)
    LOWER           reduce using rule 3 (statement_list -> statement_list statement .)
    LENGTH          reduce using rule 3 (statement_list -> statement_list statement .)
    READ            reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    END             reduce using rule 3 (statement_list -> statement_list statement .)


state 48

    (9) declaration_statement -> DCL declaration_list . SEMI
    (11) declaration_list -> declaration_list . COMMA declaration

    SEMI            shift and go to state 121
    COMMA           shift and go to state 122


state 49

    (10) declaration_list -> declaration .

    SEMI            reduce using rule 10 (declaration_list -> declaration .)
    COMMA           reduce using rule 10 (declaration_list -> declaration .)


state 50

    (12) declaration -> identifier_list . mode
    (13) declaration -> identifier_list . mode initialization
    (16) identifier_list -> identifier_list . COMMA identifier
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (37) mode_name -> . identifier
    (31) discrete_mode -> . INT
    (32) discrete_mode -> . BOOL
    (33) discrete_mode -> . CHAR
    (34) discrete_mode -> . discrete_range_mode
    (41) reference_mode -> . REF mode
    (42) composite_mode -> . string_mode
    (43) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (36) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (46) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    COMMA           shift and go to state 124
    INT             shift and go to state 130
    BOOL            shift and go to state 131
    CHAR            shift and go to state 132
    REF             shift and go to state 134
    ID              shift and go to state 21
    CHARS           shift and go to state 137
    ARRAY           shift and go to state 138

    mode                           shift and go to state 123
    identifier                     shift and go to state 125
    mode_name                      shift and go to state 126
    discrete_mode                  shift and go to state 127
    reference_mode                 shift and go to state 128
    composite_mode                 shift and go to state 129
    discrete_range_mode            shift and go to state 133
    string_mode                    shift and go to state 135
    array_mode                     shift and go to state 136

state 51

    (15) identifier_list -> identifier .

    COMMA           reduce using rule 15 (identifier_list -> identifier .)
    INT             reduce using rule 15 (identifier_list -> identifier .)
    BOOL            reduce using rule 15 (identifier_list -> identifier .)
    CHAR            reduce using rule 15 (identifier_list -> identifier .)
    REF             reduce using rule 15 (identifier_list -> identifier .)
    ID              reduce using rule 15 (identifier_list -> identifier .)
    CHARS           reduce using rule 15 (identifier_list -> identifier .)
    ARRAY           reduce using rule 15 (identifier_list -> identifier .)
    ASSIGN          reduce using rule 15 (identifier_list -> identifier .)


state 52

    (18) synonym_statement -> SYN synonym_list .
    (20) synonym_list -> synonym_list . synonym_definition
    (21) synonym_definition -> . identifier_list ASSIGN expression
    (22) synonym_definition -> . identifier_list mode ASSIGN expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

  ! shift/reduce conflict for ID resolved as shift
    DCL             reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    SYN             reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    TYPE            reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    EXIT            reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    RETURN          reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    RESULT          reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    IF              reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    DO              reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    ABS             reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    ASC             reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    NUM             reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    UPPER           reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    LOWER           reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    LENGTH          reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    READ            reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    PRINT           reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    $end            reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    END             reduce using rule 18 (synonym_statement -> SYN synonym_list .)
    ID              shift and go to state 21

  ! ID              [ reduce using rule 18 (synonym_statement -> SYN synonym_list .) ]

    synonym_definition             shift and go to state 139
    identifier_list                shift and go to state 54
    identifier                     shift and go to state 51

state 53

    (19) synonym_list -> synonym_definition .

    ID              reduce using rule 19 (synonym_list -> synonym_definition .)
    DCL             reduce using rule 19 (synonym_list -> synonym_definition .)
    SYN             reduce using rule 19 (synonym_list -> synonym_definition .)
    TYPE            reduce using rule 19 (synonym_list -> synonym_definition .)
    EXIT            reduce using rule 19 (synonym_list -> synonym_definition .)
    RETURN          reduce using rule 19 (synonym_list -> synonym_definition .)
    RESULT          reduce using rule 19 (synonym_list -> synonym_definition .)
    IF              reduce using rule 19 (synonym_list -> synonym_definition .)
    DO              reduce using rule 19 (synonym_list -> synonym_definition .)
    ABS             reduce using rule 19 (synonym_list -> synonym_definition .)
    ASC             reduce using rule 19 (synonym_list -> synonym_definition .)
    NUM             reduce using rule 19 (synonym_list -> synonym_definition .)
    UPPER           reduce using rule 19 (synonym_list -> synonym_definition .)
    LOWER           reduce using rule 19 (synonym_list -> synonym_definition .)
    LENGTH          reduce using rule 19 (synonym_list -> synonym_definition .)
    READ            reduce using rule 19 (synonym_list -> synonym_definition .)
    PRINT           reduce using rule 19 (synonym_list -> synonym_definition .)
    $end            reduce using rule 19 (synonym_list -> synonym_definition .)
    END             reduce using rule 19 (synonym_list -> synonym_definition .)


state 54

    (21) synonym_definition -> identifier_list . ASSIGN expression
    (22) synonym_definition -> identifier_list . mode ASSIGN expression
    (16) identifier_list -> identifier_list . COMMA identifier
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (37) mode_name -> . identifier
    (31) discrete_mode -> . INT
    (32) discrete_mode -> . BOOL
    (33) discrete_mode -> . CHAR
    (34) discrete_mode -> . discrete_range_mode
    (41) reference_mode -> . REF mode
    (42) composite_mode -> . string_mode
    (43) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (36) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (46) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    ASSIGN          shift and go to state 140
    COMMA           shift and go to state 124
    INT             shift and go to state 130
    BOOL            shift and go to state 131
    CHAR            shift and go to state 132
    REF             shift and go to state 134
    ID              shift and go to state 21
    CHARS           shift and go to state 137
    ARRAY           shift and go to state 138

    mode                           shift and go to state 141
    identifier                     shift and go to state 125
    mode_name                      shift and go to state 126
    discrete_mode                  shift and go to state 127
    reference_mode                 shift and go to state 128
    composite_mode                 shift and go to state 129
    discrete_range_mode            shift and go to state 133
    string_mode                    shift and go to state 135
    array_mode                     shift and go to state 136

state 55

    (23) newmode_statement -> TYPE newmode_list . SEMI
    (25) newmode_list -> newmode_list . COMMA mode_definition

    SEMI            shift and go to state 142
    COMMA           shift and go to state 143


state 56

    (24) newmode_list -> mode_definition .

    SEMI            reduce using rule 24 (newmode_list -> mode_definition .)
    COMMA           reduce using rule 24 (newmode_list -> mode_definition .)


state 57

    (26) mode_definition -> identifier_list . ASSIGN mode
    (16) identifier_list -> identifier_list . COMMA identifier

    ASSIGN          shift and go to state 144
    COMMA           shift and go to state 124


state 58

    (204) procedure_statement -> label_id COLON . procedure_definition SEMI
    (133) action_statement -> label_id COLON . action SEMI
    (205) procedure_definition -> . formal_procedure_head END
    (206) procedure_definition -> . formal_procedure_head statement_list END
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (207) formal_procedure_head -> . PROC parenthesis_gambiarra SEMI
    (208) formal_procedure_head -> . PROC parenthesis_gambiarra result_spec SEMI
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    PROC            shift and go to state 148
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    IF              shift and go to state 30
    DO              shift and go to state 31
    ID              shift and go to state 21
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    procedure_definition           shift and go to state 145
    action                         shift and go to state 146
    formal_procedure_head          shift and go to state 147
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    identifier                     shift and go to state 149
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 59

    (132) action_statement -> action SEMI .

    DCL             reduce using rule 132 (action_statement -> action SEMI .)
    SYN             reduce using rule 132 (action_statement -> action SEMI .)
    TYPE            reduce using rule 132 (action_statement -> action SEMI .)
    ID              reduce using rule 132 (action_statement -> action SEMI .)
    EXIT            reduce using rule 132 (action_statement -> action SEMI .)
    RETURN          reduce using rule 132 (action_statement -> action SEMI .)
    RESULT          reduce using rule 132 (action_statement -> action SEMI .)
    IF              reduce using rule 132 (action_statement -> action SEMI .)
    DO              reduce using rule 132 (action_statement -> action SEMI .)
    ABS             reduce using rule 132 (action_statement -> action SEMI .)
    ASC             reduce using rule 132 (action_statement -> action SEMI .)
    NUM             reduce using rule 132 (action_statement -> action SEMI .)
    UPPER           reduce using rule 132 (action_statement -> action SEMI .)
    LOWER           reduce using rule 132 (action_statement -> action SEMI .)
    LENGTH          reduce using rule 132 (action_statement -> action SEMI .)
    READ            reduce using rule 132 (action_statement -> action SEMI .)
    PRINT           reduce using rule 132 (action_statement -> action SEMI .)
    $end            reduce using rule 132 (action_statement -> action SEMI .)
    OD              reduce using rule 132 (action_statement -> action SEMI .)
    END             reduce using rule 132 (action_statement -> action SEMI .)
    FI              reduce using rule 132 (action_statement -> action SEMI .)
    ELSE            reduce using rule 132 (action_statement -> action SEMI .)
    ELSIF           reduce using rule 132 (action_statement -> action SEMI .)


state 60

    (184) procedure_call -> identifier LPAREN . RPAREN
    (185) procedure_call -> identifier LPAREN . parameter_list RPAREN
    (186) parameter_list -> . parameter
    (187) parameter_list -> . parameter_list COMMA parameter
    (188) parameter -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    RPAREN          shift and go to state 150
    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    identifier                     shift and go to state 88
    parameter_list                 shift and go to state 151
    parameter                      shift and go to state 152
    expression                     shift and go to state 153
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 61

    (61) string_element -> identifier LBRACKET . start_element RBRACKET
    (63) string_slice -> identifier LBRACKET . left_element COLON right_element RBRACKET
    (62) start_element -> . integer_expression
    (64) left_element -> . integer_expression
    (52) integer_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    identifier                     shift and go to state 88
    start_element                  shift and go to state 154
    left_element                   shift and go to state 155
    integer_expression             shift and go to state 156
    expression                     shift and go to state 157
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 62

    (143) assignment_action -> location assigning_operator . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    location                       shift and go to state 83
    expression                     shift and go to state 158
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 63

    (60) dereferenced_reference -> location ARROW .

    ARROW           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    ASSIGN          reduce using rule 60 (dereferenced_reference -> location ARROW .)
    INCREASE        reduce using rule 60 (dereferenced_reference -> location ARROW .)
    DECREASE        reduce using rule 60 (dereferenced_reference -> location ARROW .)
    MULCREASE       reduce using rule 60 (dereferenced_reference -> location ARROW .)
    DIVCREASE       reduce using rule 60 (dereferenced_reference -> location ARROW .)
    MODCREASE       reduce using rule 60 (dereferenced_reference -> location ARROW .)
    LBRACKET        reduce using rule 60 (dereferenced_reference -> location ARROW .)
    TIMES           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    DIVIDE          reduce using rule 60 (dereferenced_reference -> location ARROW .)
    MOD             reduce using rule 60 (dereferenced_reference -> location ARROW .)
    PLUS            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    MINUS           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    STRCAT          reduce using rule 60 (dereferenced_reference -> location ARROW .)
    AND             reduce using rule 60 (dereferenced_reference -> location ARROW .)
    OR              reduce using rule 60 (dereferenced_reference -> location ARROW .)
    EQUAL           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    DIFF            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    GREATER         reduce using rule 60 (dereferenced_reference -> location ARROW .)
    GREATEREQ       reduce using rule 60 (dereferenced_reference -> location ARROW .)
    LESS            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    LESSEQ          reduce using rule 60 (dereferenced_reference -> location ARROW .)
    IN              reduce using rule 60 (dereferenced_reference -> location ARROW .)
    SEMI            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    THEN            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    RPAREN          reduce using rule 60 (dereferenced_reference -> location ARROW .)
    COMMA           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    RBRACKET        reduce using rule 60 (dereferenced_reference -> location ARROW .)
    COLON           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    ID              reduce using rule 60 (dereferenced_reference -> location ARROW .)
    DCL             reduce using rule 60 (dereferenced_reference -> location ARROW .)
    SYN             reduce using rule 60 (dereferenced_reference -> location ARROW .)
    TYPE            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    EXIT            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    RETURN          reduce using rule 60 (dereferenced_reference -> location ARROW .)
    RESULT          reduce using rule 60 (dereferenced_reference -> location ARROW .)
    IF              reduce using rule 60 (dereferenced_reference -> location ARROW .)
    DO              reduce using rule 60 (dereferenced_reference -> location ARROW .)
    ABS             reduce using rule 60 (dereferenced_reference -> location ARROW .)
    ASC             reduce using rule 60 (dereferenced_reference -> location ARROW .)
    NUM             reduce using rule 60 (dereferenced_reference -> location ARROW .)
    UPPER           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    LOWER           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    LENGTH          reduce using rule 60 (dereferenced_reference -> location ARROW .)
    READ            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    PRINT           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    $end            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    END             reduce using rule 60 (dereferenced_reference -> location ARROW .)
    ELSE            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    ELSIF           reduce using rule 60 (dereferenced_reference -> location ARROW .)
    TO              reduce using rule 60 (dereferenced_reference -> location ARROW .)
    DOWN            reduce using rule 60 (dereferenced_reference -> location ARROW .)
    BY              reduce using rule 60 (dereferenced_reference -> location ARROW .)
    FI              reduce using rule 60 (dereferenced_reference -> location ARROW .)
    WHILE           reduce using rule 60 (dereferenced_reference -> location ARROW .)


state 64

    (144) assigning_operator -> ASSIGN .

    IF              reduce using rule 144 (assigning_operator -> ASSIGN .)
    MINUS           reduce using rule 144 (assigning_operator -> ASSIGN .)
    NOT             reduce using rule 144 (assigning_operator -> ASSIGN .)
    ARROW           reduce using rule 144 (assigning_operator -> ASSIGN .)
    ID              reduce using rule 144 (assigning_operator -> ASSIGN .)
    LPAREN          reduce using rule 144 (assigning_operator -> ASSIGN .)
    ICONST          reduce using rule 144 (assigning_operator -> ASSIGN .)
    FALSE           reduce using rule 144 (assigning_operator -> ASSIGN .)
    TRUE            reduce using rule 144 (assigning_operator -> ASSIGN .)
    CCONST          reduce using rule 144 (assigning_operator -> ASSIGN .)
    NULL            reduce using rule 144 (assigning_operator -> ASSIGN .)
    SCONST          reduce using rule 144 (assigning_operator -> ASSIGN .)
    ABS             reduce using rule 144 (assigning_operator -> ASSIGN .)
    ASC             reduce using rule 144 (assigning_operator -> ASSIGN .)
    NUM             reduce using rule 144 (assigning_operator -> ASSIGN .)
    UPPER           reduce using rule 144 (assigning_operator -> ASSIGN .)
    LOWER           reduce using rule 144 (assigning_operator -> ASSIGN .)
    LENGTH          reduce using rule 144 (assigning_operator -> ASSIGN .)
    READ            reduce using rule 144 (assigning_operator -> ASSIGN .)
    PRINT           reduce using rule 144 (assigning_operator -> ASSIGN .)


state 65

    (145) assigning_operator -> closed_dyadic_operator .

    IF              reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    MINUS           reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    NOT             reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    ARROW           reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    ID              reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    LPAREN          reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    ICONST          reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    FALSE           reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    TRUE            reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    CCONST          reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    NULL            reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    SCONST          reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    ABS             reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    ASC             reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    NUM             reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    UPPER           reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    LOWER           reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    LENGTH          reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    READ            reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)
    PRINT           reduce using rule 145 (assigning_operator -> closed_dyadic_operator .)


state 66

    (146) closed_dyadic_operator -> INCREASE .

    IF              reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    MINUS           reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    NOT             reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    ARROW           reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    ID              reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    LPAREN          reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    ICONST          reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    FALSE           reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    TRUE            reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    CCONST          reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    NULL            reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    SCONST          reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    ABS             reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    ASC             reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    NUM             reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    UPPER           reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    LOWER           reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    LENGTH          reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    READ            reduce using rule 146 (closed_dyadic_operator -> INCREASE .)
    PRINT           reduce using rule 146 (closed_dyadic_operator -> INCREASE .)


state 67

    (147) closed_dyadic_operator -> DECREASE .

    IF              reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    MINUS           reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    NOT             reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    ARROW           reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    ID              reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    LPAREN          reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    ICONST          reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    FALSE           reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    TRUE            reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    CCONST          reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    NULL            reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    SCONST          reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    ABS             reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    ASC             reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    NUM             reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    UPPER           reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    LOWER           reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    LENGTH          reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    READ            reduce using rule 147 (closed_dyadic_operator -> DECREASE .)
    PRINT           reduce using rule 147 (closed_dyadic_operator -> DECREASE .)


state 68

    (148) closed_dyadic_operator -> MULCREASE .

    IF              reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    MINUS           reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    NOT             reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    ARROW           reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    ID              reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    LPAREN          reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    ICONST          reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    FALSE           reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    TRUE            reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    CCONST          reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    NULL            reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    SCONST          reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    ABS             reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    ASC             reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    NUM             reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    UPPER           reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    LOWER           reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    LENGTH          reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    READ            reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)
    PRINT           reduce using rule 148 (closed_dyadic_operator -> MULCREASE .)


state 69

    (149) closed_dyadic_operator -> DIVCREASE .

    IF              reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    MINUS           reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    NOT             reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    ARROW           reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    ID              reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    LPAREN          reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    ICONST          reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    FALSE           reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    TRUE            reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    CCONST          reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    NULL            reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    SCONST          reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    ABS             reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    ASC             reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    NUM             reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    UPPER           reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    LOWER           reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    LENGTH          reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    READ            reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)
    PRINT           reduce using rule 149 (closed_dyadic_operator -> DIVCREASE .)


state 70

    (150) closed_dyadic_operator -> MODCREASE .

    IF              reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    MINUS           reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    NOT             reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    ARROW           reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    ID              reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    LPAREN          reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    ICONST          reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    FALSE           reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    TRUE            reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    CCONST          reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    NULL            reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    SCONST          reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    ABS             reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    ASC             reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    NUM             reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    UPPER           reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    LOWER           reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    LENGTH          reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    READ            reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)
    PRINT           reduce using rule 150 (closed_dyadic_operator -> MODCREASE .)


state 71

    (189) exit_action -> EXIT label_id .

    SEMI            reduce using rule 189 (exit_action -> EXIT label_id .)


state 72

    (134) label_id -> identifier .

    SEMI            reduce using rule 134 (label_id -> identifier .)


state 73

    (191) return_action -> RETURN result .

    SEMI            reduce using rule 191 (return_action -> RETURN result .)


state 74

    (193) result -> expression .

    SEMI            reduce using rule 193 (result -> expression .)


state 75

    (90) expression -> operand0 .
    (100) operand0 -> operand0 . operator1 operand1
    (101) operator1 -> . relational_operator
    (102) operator1 -> . membership_operator
    (103) relational_operator -> . AND
    (104) relational_operator -> . OR
    (105) relational_operator -> . EQUAL
    (106) relational_operator -> . DIFF
    (107) relational_operator -> . GREATER
    (108) relational_operator -> . GREATEREQ
    (109) relational_operator -> . LESS
    (110) relational_operator -> . LESSEQ
    (111) membership_operator -> . IN

    SEMI            reduce using rule 90 (expression -> operand0 .)
    THEN            reduce using rule 90 (expression -> operand0 .)
    RPAREN          reduce using rule 90 (expression -> operand0 .)
    COMMA           reduce using rule 90 (expression -> operand0 .)
    RBRACKET        reduce using rule 90 (expression -> operand0 .)
    COLON           reduce using rule 90 (expression -> operand0 .)
    ID              reduce using rule 90 (expression -> operand0 .)
    DCL             reduce using rule 90 (expression -> operand0 .)
    SYN             reduce using rule 90 (expression -> operand0 .)
    TYPE            reduce using rule 90 (expression -> operand0 .)
    EXIT            reduce using rule 90 (expression -> operand0 .)
    RETURN          reduce using rule 90 (expression -> operand0 .)
    RESULT          reduce using rule 90 (expression -> operand0 .)
    IF              reduce using rule 90 (expression -> operand0 .)
    DO              reduce using rule 90 (expression -> operand0 .)
    ABS             reduce using rule 90 (expression -> operand0 .)
    ASC             reduce using rule 90 (expression -> operand0 .)
    NUM             reduce using rule 90 (expression -> operand0 .)
    UPPER           reduce using rule 90 (expression -> operand0 .)
    LOWER           reduce using rule 90 (expression -> operand0 .)
    LENGTH          reduce using rule 90 (expression -> operand0 .)
    READ            reduce using rule 90 (expression -> operand0 .)
    PRINT           reduce using rule 90 (expression -> operand0 .)
    $end            reduce using rule 90 (expression -> operand0 .)
    END             reduce using rule 90 (expression -> operand0 .)
    ELSE            reduce using rule 90 (expression -> operand0 .)
    ELSIF           reduce using rule 90 (expression -> operand0 .)
    TO              reduce using rule 90 (expression -> operand0 .)
    DOWN            reduce using rule 90 (expression -> operand0 .)
    BY              reduce using rule 90 (expression -> operand0 .)
    FI              reduce using rule 90 (expression -> operand0 .)
    WHILE           reduce using rule 90 (expression -> operand0 .)
    AND             shift and go to state 162
    OR              shift and go to state 163
    EQUAL           shift and go to state 164
    DIFF            shift and go to state 165
    GREATER         shift and go to state 166
    GREATEREQ       shift and go to state 167
    LESS            shift and go to state 168
    LESSEQ          shift and go to state 169
    IN              shift and go to state 170

    operator1                      shift and go to state 159
    relational_operator            shift and go to state 160
    membership_operator            shift and go to state 161

state 76

    (91) expression -> conditional_expression .

    SEMI            reduce using rule 91 (expression -> conditional_expression .)
    THEN            reduce using rule 91 (expression -> conditional_expression .)
    RPAREN          reduce using rule 91 (expression -> conditional_expression .)
    COMMA           reduce using rule 91 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 91 (expression -> conditional_expression .)
    COLON           reduce using rule 91 (expression -> conditional_expression .)
    ID              reduce using rule 91 (expression -> conditional_expression .)
    DCL             reduce using rule 91 (expression -> conditional_expression .)
    SYN             reduce using rule 91 (expression -> conditional_expression .)
    TYPE            reduce using rule 91 (expression -> conditional_expression .)
    EXIT            reduce using rule 91 (expression -> conditional_expression .)
    RETURN          reduce using rule 91 (expression -> conditional_expression .)
    RESULT          reduce using rule 91 (expression -> conditional_expression .)
    IF              reduce using rule 91 (expression -> conditional_expression .)
    DO              reduce using rule 91 (expression -> conditional_expression .)
    ABS             reduce using rule 91 (expression -> conditional_expression .)
    ASC             reduce using rule 91 (expression -> conditional_expression .)
    NUM             reduce using rule 91 (expression -> conditional_expression .)
    UPPER           reduce using rule 91 (expression -> conditional_expression .)
    LOWER           reduce using rule 91 (expression -> conditional_expression .)
    LENGTH          reduce using rule 91 (expression -> conditional_expression .)
    READ            reduce using rule 91 (expression -> conditional_expression .)
    PRINT           reduce using rule 91 (expression -> conditional_expression .)
    $end            reduce using rule 91 (expression -> conditional_expression .)
    END             reduce using rule 91 (expression -> conditional_expression .)
    ELSE            reduce using rule 91 (expression -> conditional_expression .)
    ELSIF           reduce using rule 91 (expression -> conditional_expression .)
    TO              reduce using rule 91 (expression -> conditional_expression .)
    DOWN            reduce using rule 91 (expression -> conditional_expression .)
    BY              reduce using rule 91 (expression -> conditional_expression .)
    FI              reduce using rule 91 (expression -> conditional_expression .)
    WHILE           reduce using rule 91 (expression -> conditional_expression .)


state 77

    (99) operand0 -> operand1 .
    (113) operand1 -> operand1 . operator2 operand2
    (114) operator2 -> . arithmetic_additive_operator
    (115) operator2 -> . string_concatenation_operator
    (116) arithmetic_additive_operator -> . PLUS
    (117) arithmetic_additive_operator -> . MINUS
    (118) string_concatenation_operator -> . STRCAT

    AND             reduce using rule 99 (operand0 -> operand1 .)
    OR              reduce using rule 99 (operand0 -> operand1 .)
    EQUAL           reduce using rule 99 (operand0 -> operand1 .)
    DIFF            reduce using rule 99 (operand0 -> operand1 .)
    GREATER         reduce using rule 99 (operand0 -> operand1 .)
    GREATEREQ       reduce using rule 99 (operand0 -> operand1 .)
    LESS            reduce using rule 99 (operand0 -> operand1 .)
    LESSEQ          reduce using rule 99 (operand0 -> operand1 .)
    IN              reduce using rule 99 (operand0 -> operand1 .)
    SEMI            reduce using rule 99 (operand0 -> operand1 .)
    THEN            reduce using rule 99 (operand0 -> operand1 .)
    RPAREN          reduce using rule 99 (operand0 -> operand1 .)
    COMMA           reduce using rule 99 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 99 (operand0 -> operand1 .)
    COLON           reduce using rule 99 (operand0 -> operand1 .)
    ID              reduce using rule 99 (operand0 -> operand1 .)
    DCL             reduce using rule 99 (operand0 -> operand1 .)
    SYN             reduce using rule 99 (operand0 -> operand1 .)
    TYPE            reduce using rule 99 (operand0 -> operand1 .)
    EXIT            reduce using rule 99 (operand0 -> operand1 .)
    RETURN          reduce using rule 99 (operand0 -> operand1 .)
    RESULT          reduce using rule 99 (operand0 -> operand1 .)
    IF              reduce using rule 99 (operand0 -> operand1 .)
    DO              reduce using rule 99 (operand0 -> operand1 .)
    ABS             reduce using rule 99 (operand0 -> operand1 .)
    ASC             reduce using rule 99 (operand0 -> operand1 .)
    NUM             reduce using rule 99 (operand0 -> operand1 .)
    UPPER           reduce using rule 99 (operand0 -> operand1 .)
    LOWER           reduce using rule 99 (operand0 -> operand1 .)
    LENGTH          reduce using rule 99 (operand0 -> operand1 .)
    READ            reduce using rule 99 (operand0 -> operand1 .)
    PRINT           reduce using rule 99 (operand0 -> operand1 .)
    $end            reduce using rule 99 (operand0 -> operand1 .)
    END             reduce using rule 99 (operand0 -> operand1 .)
    ELSE            reduce using rule 99 (operand0 -> operand1 .)
    ELSIF           reduce using rule 99 (operand0 -> operand1 .)
    TO              reduce using rule 99 (operand0 -> operand1 .)
    DOWN            reduce using rule 99 (operand0 -> operand1 .)
    BY              reduce using rule 99 (operand0 -> operand1 .)
    FI              reduce using rule 99 (operand0 -> operand1 .)
    WHILE           reduce using rule 99 (operand0 -> operand1 .)
    PLUS            shift and go to state 174
    MINUS           shift and go to state 175
    STRCAT          shift and go to state 176

    operator2                      shift and go to state 171
    arithmetic_additive_operator   shift and go to state 172
    string_concatenation_operator  shift and go to state 173

state 78

    (92) conditional_expression -> IF . boolean_expression then_expression else_expression FI
    (93) conditional_expression -> IF . boolean_expression then_expression elsif_expression else_expression FI
    (94) boolean_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    boolean_expression             shift and go to state 177
    expression                     shift and go to state 110
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 79

    (112) operand1 -> operand2 .
    (120) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (121) arithmetic_multiplicative_operator -> . TIMES
    (122) arithmetic_multiplicative_operator -> . DIVIDE
    (123) arithmetic_multiplicative_operator -> . MOD

    PLUS            reduce using rule 112 (operand1 -> operand2 .)
    MINUS           reduce using rule 112 (operand1 -> operand2 .)
    STRCAT          reduce using rule 112 (operand1 -> operand2 .)
    AND             reduce using rule 112 (operand1 -> operand2 .)
    OR              reduce using rule 112 (operand1 -> operand2 .)
    EQUAL           reduce using rule 112 (operand1 -> operand2 .)
    DIFF            reduce using rule 112 (operand1 -> operand2 .)
    GREATER         reduce using rule 112 (operand1 -> operand2 .)
    GREATEREQ       reduce using rule 112 (operand1 -> operand2 .)
    LESS            reduce using rule 112 (operand1 -> operand2 .)
    LESSEQ          reduce using rule 112 (operand1 -> operand2 .)
    IN              reduce using rule 112 (operand1 -> operand2 .)
    SEMI            reduce using rule 112 (operand1 -> operand2 .)
    THEN            reduce using rule 112 (operand1 -> operand2 .)
    RPAREN          reduce using rule 112 (operand1 -> operand2 .)
    COMMA           reduce using rule 112 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 112 (operand1 -> operand2 .)
    COLON           reduce using rule 112 (operand1 -> operand2 .)
    ID              reduce using rule 112 (operand1 -> operand2 .)
    DCL             reduce using rule 112 (operand1 -> operand2 .)
    SYN             reduce using rule 112 (operand1 -> operand2 .)
    TYPE            reduce using rule 112 (operand1 -> operand2 .)
    EXIT            reduce using rule 112 (operand1 -> operand2 .)
    RETURN          reduce using rule 112 (operand1 -> operand2 .)
    RESULT          reduce using rule 112 (operand1 -> operand2 .)
    IF              reduce using rule 112 (operand1 -> operand2 .)
    DO              reduce using rule 112 (operand1 -> operand2 .)
    ABS             reduce using rule 112 (operand1 -> operand2 .)
    ASC             reduce using rule 112 (operand1 -> operand2 .)
    NUM             reduce using rule 112 (operand1 -> operand2 .)
    UPPER           reduce using rule 112 (operand1 -> operand2 .)
    LOWER           reduce using rule 112 (operand1 -> operand2 .)
    LENGTH          reduce using rule 112 (operand1 -> operand2 .)
    READ            reduce using rule 112 (operand1 -> operand2 .)
    PRINT           reduce using rule 112 (operand1 -> operand2 .)
    $end            reduce using rule 112 (operand1 -> operand2 .)
    END             reduce using rule 112 (operand1 -> operand2 .)
    ELSE            reduce using rule 112 (operand1 -> operand2 .)
    ELSIF           reduce using rule 112 (operand1 -> operand2 .)
    TO              reduce using rule 112 (operand1 -> operand2 .)
    DOWN            reduce using rule 112 (operand1 -> operand2 .)
    BY              reduce using rule 112 (operand1 -> operand2 .)
    FI              reduce using rule 112 (operand1 -> operand2 .)
    WHILE           reduce using rule 112 (operand1 -> operand2 .)
    TIMES           shift and go to state 179
    DIVIDE          shift and go to state 180
    MOD             shift and go to state 181

    arithmetic_multiplicative_operator shift and go to state 178

state 80

    (119) operand2 -> operand3 .

    TIMES           reduce using rule 119 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 119 (operand2 -> operand3 .)
    MOD             reduce using rule 119 (operand2 -> operand3 .)
    PLUS            reduce using rule 119 (operand2 -> operand3 .)
    MINUS           reduce using rule 119 (operand2 -> operand3 .)
    STRCAT          reduce using rule 119 (operand2 -> operand3 .)
    AND             reduce using rule 119 (operand2 -> operand3 .)
    OR              reduce using rule 119 (operand2 -> operand3 .)
    EQUAL           reduce using rule 119 (operand2 -> operand3 .)
    DIFF            reduce using rule 119 (operand2 -> operand3 .)
    GREATER         reduce using rule 119 (operand2 -> operand3 .)
    GREATEREQ       reduce using rule 119 (operand2 -> operand3 .)
    LESS            reduce using rule 119 (operand2 -> operand3 .)
    LESSEQ          reduce using rule 119 (operand2 -> operand3 .)
    IN              reduce using rule 119 (operand2 -> operand3 .)
    SEMI            reduce using rule 119 (operand2 -> operand3 .)
    THEN            reduce using rule 119 (operand2 -> operand3 .)
    RPAREN          reduce using rule 119 (operand2 -> operand3 .)
    COMMA           reduce using rule 119 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 119 (operand2 -> operand3 .)
    COLON           reduce using rule 119 (operand2 -> operand3 .)
    ID              reduce using rule 119 (operand2 -> operand3 .)
    DCL             reduce using rule 119 (operand2 -> operand3 .)
    SYN             reduce using rule 119 (operand2 -> operand3 .)
    TYPE            reduce using rule 119 (operand2 -> operand3 .)
    EXIT            reduce using rule 119 (operand2 -> operand3 .)
    RETURN          reduce using rule 119 (operand2 -> operand3 .)
    RESULT          reduce using rule 119 (operand2 -> operand3 .)
    IF              reduce using rule 119 (operand2 -> operand3 .)
    DO              reduce using rule 119 (operand2 -> operand3 .)
    ABS             reduce using rule 119 (operand2 -> operand3 .)
    ASC             reduce using rule 119 (operand2 -> operand3 .)
    NUM             reduce using rule 119 (operand2 -> operand3 .)
    UPPER           reduce using rule 119 (operand2 -> operand3 .)
    LOWER           reduce using rule 119 (operand2 -> operand3 .)
    LENGTH          reduce using rule 119 (operand2 -> operand3 .)
    READ            reduce using rule 119 (operand2 -> operand3 .)
    PRINT           reduce using rule 119 (operand2 -> operand3 .)
    $end            reduce using rule 119 (operand2 -> operand3 .)
    END             reduce using rule 119 (operand2 -> operand3 .)
    ELSE            reduce using rule 119 (operand2 -> operand3 .)
    ELSIF           reduce using rule 119 (operand2 -> operand3 .)
    TO              reduce using rule 119 (operand2 -> operand3 .)
    DOWN            reduce using rule 119 (operand2 -> operand3 .)
    BY              reduce using rule 119 (operand2 -> operand3 .)
    FI              reduce using rule 119 (operand2 -> operand3 .)
    WHILE           reduce using rule 119 (operand2 -> operand3 .)


state 81

    (124) operand3 -> operand4 .

    TIMES           reduce using rule 124 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 124 (operand3 -> operand4 .)
    MOD             reduce using rule 124 (operand3 -> operand4 .)
    PLUS            reduce using rule 124 (operand3 -> operand4 .)
    MINUS           reduce using rule 124 (operand3 -> operand4 .)
    STRCAT          reduce using rule 124 (operand3 -> operand4 .)
    AND             reduce using rule 124 (operand3 -> operand4 .)
    OR              reduce using rule 124 (operand3 -> operand4 .)
    EQUAL           reduce using rule 124 (operand3 -> operand4 .)
    DIFF            reduce using rule 124 (operand3 -> operand4 .)
    GREATER         reduce using rule 124 (operand3 -> operand4 .)
    GREATEREQ       reduce using rule 124 (operand3 -> operand4 .)
    LESS            reduce using rule 124 (operand3 -> operand4 .)
    LESSEQ          reduce using rule 124 (operand3 -> operand4 .)
    IN              reduce using rule 124 (operand3 -> operand4 .)
    SEMI            reduce using rule 124 (operand3 -> operand4 .)
    THEN            reduce using rule 124 (operand3 -> operand4 .)
    RPAREN          reduce using rule 124 (operand3 -> operand4 .)
    COMMA           reduce using rule 124 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 124 (operand3 -> operand4 .)
    COLON           reduce using rule 124 (operand3 -> operand4 .)
    ID              reduce using rule 124 (operand3 -> operand4 .)
    DCL             reduce using rule 124 (operand3 -> operand4 .)
    SYN             reduce using rule 124 (operand3 -> operand4 .)
    TYPE            reduce using rule 124 (operand3 -> operand4 .)
    EXIT            reduce using rule 124 (operand3 -> operand4 .)
    RETURN          reduce using rule 124 (operand3 -> operand4 .)
    RESULT          reduce using rule 124 (operand3 -> operand4 .)
    IF              reduce using rule 124 (operand3 -> operand4 .)
    DO              reduce using rule 124 (operand3 -> operand4 .)
    ABS             reduce using rule 124 (operand3 -> operand4 .)
    ASC             reduce using rule 124 (operand3 -> operand4 .)
    NUM             reduce using rule 124 (operand3 -> operand4 .)
    UPPER           reduce using rule 124 (operand3 -> operand4 .)
    LOWER           reduce using rule 124 (operand3 -> operand4 .)
    LENGTH          reduce using rule 124 (operand3 -> operand4 .)
    READ            reduce using rule 124 (operand3 -> operand4 .)
    PRINT           reduce using rule 124 (operand3 -> operand4 .)
    $end            reduce using rule 124 (operand3 -> operand4 .)
    END             reduce using rule 124 (operand3 -> operand4 .)
    ELSE            reduce using rule 124 (operand3 -> operand4 .)
    ELSIF           reduce using rule 124 (operand3 -> operand4 .)
    TO              reduce using rule 124 (operand3 -> operand4 .)
    DOWN            reduce using rule 124 (operand3 -> operand4 .)
    BY              reduce using rule 124 (operand3 -> operand4 .)
    FI              reduce using rule 124 (operand3 -> operand4 .)
    WHILE           reduce using rule 124 (operand3 -> operand4 .)


state 82

    (125) operand3 -> monadic_operator . operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    operand4                       shift and go to state 182
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 83

    (128) operand4 -> location .
    (60) dereferenced_reference -> location . ARROW
    (70) array_location -> location .

    TIMES           reduce using rule 128 (operand4 -> location .)
    DIVIDE          reduce using rule 128 (operand4 -> location .)
    MOD             reduce using rule 128 (operand4 -> location .)
    PLUS            reduce using rule 128 (operand4 -> location .)
    MINUS           reduce using rule 128 (operand4 -> location .)
    STRCAT          reduce using rule 128 (operand4 -> location .)
    AND             reduce using rule 128 (operand4 -> location .)
    OR              reduce using rule 128 (operand4 -> location .)
    EQUAL           reduce using rule 128 (operand4 -> location .)
    DIFF            reduce using rule 128 (operand4 -> location .)
    GREATER         reduce using rule 128 (operand4 -> location .)
    GREATEREQ       reduce using rule 128 (operand4 -> location .)
    LESS            reduce using rule 128 (operand4 -> location .)
    LESSEQ          reduce using rule 128 (operand4 -> location .)
    IN              reduce using rule 128 (operand4 -> location .)
    SEMI            reduce using rule 128 (operand4 -> location .)
    THEN            reduce using rule 128 (operand4 -> location .)
    RPAREN          reduce using rule 128 (operand4 -> location .)
    COMMA           reduce using rule 128 (operand4 -> location .)
    RBRACKET        reduce using rule 128 (operand4 -> location .)
    COLON           reduce using rule 128 (operand4 -> location .)
    ID              reduce using rule 128 (operand4 -> location .)
    DCL             reduce using rule 128 (operand4 -> location .)
    SYN             reduce using rule 128 (operand4 -> location .)
    TYPE            reduce using rule 128 (operand4 -> location .)
    EXIT            reduce using rule 128 (operand4 -> location .)
    RETURN          reduce using rule 128 (operand4 -> location .)
    RESULT          reduce using rule 128 (operand4 -> location .)
    IF              reduce using rule 128 (operand4 -> location .)
    DO              reduce using rule 128 (operand4 -> location .)
    ABS             reduce using rule 128 (operand4 -> location .)
    ASC             reduce using rule 128 (operand4 -> location .)
    NUM             reduce using rule 128 (operand4 -> location .)
    UPPER           reduce using rule 128 (operand4 -> location .)
    LOWER           reduce using rule 128 (operand4 -> location .)
    LENGTH          reduce using rule 128 (operand4 -> location .)
    READ            reduce using rule 128 (operand4 -> location .)
    PRINT           reduce using rule 128 (operand4 -> location .)
    $end            reduce using rule 128 (operand4 -> location .)
    END             reduce using rule 128 (operand4 -> location .)
    ELSE            reduce using rule 128 (operand4 -> location .)
    ELSIF           reduce using rule 128 (operand4 -> location .)
    TO              reduce using rule 128 (operand4 -> location .)
    DOWN            reduce using rule 128 (operand4 -> location .)
    BY              reduce using rule 128 (operand4 -> location .)
    FI              reduce using rule 128 (operand4 -> location .)
    WHILE           reduce using rule 128 (operand4 -> location .)
    ARROW           shift and go to state 63
    LBRACKET        reduce using rule 70 (array_location -> location .)


state 84

    (129) operand4 -> referenced_location .

    TIMES           reduce using rule 129 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 129 (operand4 -> referenced_location .)
    MOD             reduce using rule 129 (operand4 -> referenced_location .)
    PLUS            reduce using rule 129 (operand4 -> referenced_location .)
    MINUS           reduce using rule 129 (operand4 -> referenced_location .)
    STRCAT          reduce using rule 129 (operand4 -> referenced_location .)
    AND             reduce using rule 129 (operand4 -> referenced_location .)
    OR              reduce using rule 129 (operand4 -> referenced_location .)
    EQUAL           reduce using rule 129 (operand4 -> referenced_location .)
    DIFF            reduce using rule 129 (operand4 -> referenced_location .)
    GREATER         reduce using rule 129 (operand4 -> referenced_location .)
    GREATEREQ       reduce using rule 129 (operand4 -> referenced_location .)
    LESS            reduce using rule 129 (operand4 -> referenced_location .)
    LESSEQ          reduce using rule 129 (operand4 -> referenced_location .)
    IN              reduce using rule 129 (operand4 -> referenced_location .)
    SEMI            reduce using rule 129 (operand4 -> referenced_location .)
    THEN            reduce using rule 129 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 129 (operand4 -> referenced_location .)
    COMMA           reduce using rule 129 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 129 (operand4 -> referenced_location .)
    COLON           reduce using rule 129 (operand4 -> referenced_location .)
    ID              reduce using rule 129 (operand4 -> referenced_location .)
    DCL             reduce using rule 129 (operand4 -> referenced_location .)
    SYN             reduce using rule 129 (operand4 -> referenced_location .)
    TYPE            reduce using rule 129 (operand4 -> referenced_location .)
    EXIT            reduce using rule 129 (operand4 -> referenced_location .)
    RETURN          reduce using rule 129 (operand4 -> referenced_location .)
    RESULT          reduce using rule 129 (operand4 -> referenced_location .)
    IF              reduce using rule 129 (operand4 -> referenced_location .)
    DO              reduce using rule 129 (operand4 -> referenced_location .)
    ABS             reduce using rule 129 (operand4 -> referenced_location .)
    ASC             reduce using rule 129 (operand4 -> referenced_location .)
    NUM             reduce using rule 129 (operand4 -> referenced_location .)
    UPPER           reduce using rule 129 (operand4 -> referenced_location .)
    LOWER           reduce using rule 129 (operand4 -> referenced_location .)
    LENGTH          reduce using rule 129 (operand4 -> referenced_location .)
    READ            reduce using rule 129 (operand4 -> referenced_location .)
    PRINT           reduce using rule 129 (operand4 -> referenced_location .)
    $end            reduce using rule 129 (operand4 -> referenced_location .)
    END             reduce using rule 129 (operand4 -> referenced_location .)
    ELSE            reduce using rule 129 (operand4 -> referenced_location .)
    ELSIF           reduce using rule 129 (operand4 -> referenced_location .)
    TO              reduce using rule 129 (operand4 -> referenced_location .)
    DOWN            reduce using rule 129 (operand4 -> referenced_location .)
    BY              reduce using rule 129 (operand4 -> referenced_location .)
    FI              reduce using rule 129 (operand4 -> referenced_location .)
    WHILE           reduce using rule 129 (operand4 -> referenced_location .)


state 85

    (130) operand4 -> primitive_value .
    (88) array_primitive_value -> primitive_value .

    TIMES           reduce using rule 130 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 130 (operand4 -> primitive_value .)
    MOD             reduce using rule 130 (operand4 -> primitive_value .)
    PLUS            reduce using rule 130 (operand4 -> primitive_value .)
    MINUS           reduce using rule 130 (operand4 -> primitive_value .)
    STRCAT          reduce using rule 130 (operand4 -> primitive_value .)
    AND             reduce using rule 130 (operand4 -> primitive_value .)
    OR              reduce using rule 130 (operand4 -> primitive_value .)
    EQUAL           reduce using rule 130 (operand4 -> primitive_value .)
    DIFF            reduce using rule 130 (operand4 -> primitive_value .)
    GREATER         reduce using rule 130 (operand4 -> primitive_value .)
    GREATEREQ       reduce using rule 130 (operand4 -> primitive_value .)
    LESS            reduce using rule 130 (operand4 -> primitive_value .)
    LESSEQ          reduce using rule 130 (operand4 -> primitive_value .)
    IN              reduce using rule 130 (operand4 -> primitive_value .)
    SEMI            reduce using rule 130 (operand4 -> primitive_value .)
    THEN            reduce using rule 130 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 130 (operand4 -> primitive_value .)
    COMMA           reduce using rule 130 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 130 (operand4 -> primitive_value .)
    COLON           reduce using rule 130 (operand4 -> primitive_value .)
    ID              reduce using rule 130 (operand4 -> primitive_value .)
    DCL             reduce using rule 130 (operand4 -> primitive_value .)
    SYN             reduce using rule 130 (operand4 -> primitive_value .)
    TYPE            reduce using rule 130 (operand4 -> primitive_value .)
    EXIT            reduce using rule 130 (operand4 -> primitive_value .)
    RETURN          reduce using rule 130 (operand4 -> primitive_value .)
    RESULT          reduce using rule 130 (operand4 -> primitive_value .)
    IF              reduce using rule 130 (operand4 -> primitive_value .)
    DO              reduce using rule 130 (operand4 -> primitive_value .)
    ABS             reduce using rule 130 (operand4 -> primitive_value .)
    ASC             reduce using rule 130 (operand4 -> primitive_value .)
    NUM             reduce using rule 130 (operand4 -> primitive_value .)
    UPPER           reduce using rule 130 (operand4 -> primitive_value .)
    LOWER           reduce using rule 130 (operand4 -> primitive_value .)
    LENGTH          reduce using rule 130 (operand4 -> primitive_value .)
    READ            reduce using rule 130 (operand4 -> primitive_value .)
    PRINT           reduce using rule 130 (operand4 -> primitive_value .)
    $end            reduce using rule 130 (operand4 -> primitive_value .)
    END             reduce using rule 130 (operand4 -> primitive_value .)
    ELSE            reduce using rule 130 (operand4 -> primitive_value .)
    ELSIF           reduce using rule 130 (operand4 -> primitive_value .)
    TO              reduce using rule 130 (operand4 -> primitive_value .)
    DOWN            reduce using rule 130 (operand4 -> primitive_value .)
    BY              reduce using rule 130 (operand4 -> primitive_value .)
    FI              reduce using rule 130 (operand4 -> primitive_value .)
    WHILE           reduce using rule 130 (operand4 -> primitive_value .)
    LBRACKET        reduce using rule 88 (array_primitive_value -> primitive_value .)


state 86

    (126) monadic_operator -> MINUS .

    ARROW           reduce using rule 126 (monadic_operator -> MINUS .)
    ID              reduce using rule 126 (monadic_operator -> MINUS .)
    LPAREN          reduce using rule 126 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 126 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 126 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 126 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 126 (monadic_operator -> MINUS .)
    NULL            reduce using rule 126 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 126 (monadic_operator -> MINUS .)
    ABS             reduce using rule 126 (monadic_operator -> MINUS .)
    ASC             reduce using rule 126 (monadic_operator -> MINUS .)
    NUM             reduce using rule 126 (monadic_operator -> MINUS .)
    UPPER           reduce using rule 126 (monadic_operator -> MINUS .)
    LOWER           reduce using rule 126 (monadic_operator -> MINUS .)
    LENGTH          reduce using rule 126 (monadic_operator -> MINUS .)
    READ            reduce using rule 126 (monadic_operator -> MINUS .)
    PRINT           reduce using rule 126 (monadic_operator -> MINUS .)


state 87

    (127) monadic_operator -> NOT .

    ARROW           reduce using rule 127 (monadic_operator -> NOT .)
    ID              reduce using rule 127 (monadic_operator -> NOT .)
    LPAREN          reduce using rule 127 (monadic_operator -> NOT .)
    ICONST          reduce using rule 127 (monadic_operator -> NOT .)
    FALSE           reduce using rule 127 (monadic_operator -> NOT .)
    TRUE            reduce using rule 127 (monadic_operator -> NOT .)
    CCONST          reduce using rule 127 (monadic_operator -> NOT .)
    NULL            reduce using rule 127 (monadic_operator -> NOT .)
    SCONST          reduce using rule 127 (monadic_operator -> NOT .)
    ABS             reduce using rule 127 (monadic_operator -> NOT .)
    ASC             reduce using rule 127 (monadic_operator -> NOT .)
    NUM             reduce using rule 127 (monadic_operator -> NOT .)
    UPPER           reduce using rule 127 (monadic_operator -> NOT .)
    LOWER           reduce using rule 127 (monadic_operator -> NOT .)
    LENGTH          reduce using rule 127 (monadic_operator -> NOT .)
    READ            reduce using rule 127 (monadic_operator -> NOT .)
    PRINT           reduce using rule 127 (monadic_operator -> NOT .)


state 88

    (53) location -> identifier .
    (61) string_element -> identifier . LBRACKET start_element RBRACKET
    (63) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET
    (184) procedure_call -> identifier . LPAREN RPAREN
    (185) procedure_call -> identifier . LPAREN parameter_list RPAREN

  ! shift/reduce conflict for LBRACKET resolved as shift
    ARROW           reduce using rule 53 (location -> identifier .)
    TIMES           reduce using rule 53 (location -> identifier .)
    DIVIDE          reduce using rule 53 (location -> identifier .)
    MOD             reduce using rule 53 (location -> identifier .)
    PLUS            reduce using rule 53 (location -> identifier .)
    MINUS           reduce using rule 53 (location -> identifier .)
    STRCAT          reduce using rule 53 (location -> identifier .)
    AND             reduce using rule 53 (location -> identifier .)
    OR              reduce using rule 53 (location -> identifier .)
    EQUAL           reduce using rule 53 (location -> identifier .)
    DIFF            reduce using rule 53 (location -> identifier .)
    GREATER         reduce using rule 53 (location -> identifier .)
    GREATEREQ       reduce using rule 53 (location -> identifier .)
    LESS            reduce using rule 53 (location -> identifier .)
    LESSEQ          reduce using rule 53 (location -> identifier .)
    IN              reduce using rule 53 (location -> identifier .)
    SEMI            reduce using rule 53 (location -> identifier .)
    THEN            reduce using rule 53 (location -> identifier .)
    RPAREN          reduce using rule 53 (location -> identifier .)
    COMMA           reduce using rule 53 (location -> identifier .)
    RBRACKET        reduce using rule 53 (location -> identifier .)
    COLON           reduce using rule 53 (location -> identifier .)
    ID              reduce using rule 53 (location -> identifier .)
    DCL             reduce using rule 53 (location -> identifier .)
    SYN             reduce using rule 53 (location -> identifier .)
    TYPE            reduce using rule 53 (location -> identifier .)
    EXIT            reduce using rule 53 (location -> identifier .)
    RETURN          reduce using rule 53 (location -> identifier .)
    RESULT          reduce using rule 53 (location -> identifier .)
    IF              reduce using rule 53 (location -> identifier .)
    DO              reduce using rule 53 (location -> identifier .)
    ABS             reduce using rule 53 (location -> identifier .)
    ASC             reduce using rule 53 (location -> identifier .)
    NUM             reduce using rule 53 (location -> identifier .)
    UPPER           reduce using rule 53 (location -> identifier .)
    LOWER           reduce using rule 53 (location -> identifier .)
    LENGTH          reduce using rule 53 (location -> identifier .)
    READ            reduce using rule 53 (location -> identifier .)
    PRINT           reduce using rule 53 (location -> identifier .)
    $end            reduce using rule 53 (location -> identifier .)
    END             reduce using rule 53 (location -> identifier .)
    ELSE            reduce using rule 53 (location -> identifier .)
    ELSIF           reduce using rule 53 (location -> identifier .)
    TO              reduce using rule 53 (location -> identifier .)
    DOWN            reduce using rule 53 (location -> identifier .)
    BY              reduce using rule 53 (location -> identifier .)
    FI              reduce using rule 53 (location -> identifier .)
    WHILE           reduce using rule 53 (location -> identifier .)
    LBRACKET        shift and go to state 61
    LPAREN          shift and go to state 60

  ! LBRACKET        [ reduce using rule 53 (location -> identifier .) ]


state 89

    (59) location -> call_action .

    ARROW           reduce using rule 59 (location -> call_action .)
    TIMES           reduce using rule 59 (location -> call_action .)
    DIVIDE          reduce using rule 59 (location -> call_action .)
    MOD             reduce using rule 59 (location -> call_action .)
    PLUS            reduce using rule 59 (location -> call_action .)
    MINUS           reduce using rule 59 (location -> call_action .)
    STRCAT          reduce using rule 59 (location -> call_action .)
    AND             reduce using rule 59 (location -> call_action .)
    OR              reduce using rule 59 (location -> call_action .)
    EQUAL           reduce using rule 59 (location -> call_action .)
    DIFF            reduce using rule 59 (location -> call_action .)
    GREATER         reduce using rule 59 (location -> call_action .)
    GREATEREQ       reduce using rule 59 (location -> call_action .)
    LESS            reduce using rule 59 (location -> call_action .)
    LESSEQ          reduce using rule 59 (location -> call_action .)
    IN              reduce using rule 59 (location -> call_action .)
    SEMI            reduce using rule 59 (location -> call_action .)
    LBRACKET        reduce using rule 59 (location -> call_action .)
    THEN            reduce using rule 59 (location -> call_action .)
    RPAREN          reduce using rule 59 (location -> call_action .)
    COMMA           reduce using rule 59 (location -> call_action .)
    RBRACKET        reduce using rule 59 (location -> call_action .)
    COLON           reduce using rule 59 (location -> call_action .)
    ID              reduce using rule 59 (location -> call_action .)
    DCL             reduce using rule 59 (location -> call_action .)
    SYN             reduce using rule 59 (location -> call_action .)
    TYPE            reduce using rule 59 (location -> call_action .)
    EXIT            reduce using rule 59 (location -> call_action .)
    RETURN          reduce using rule 59 (location -> call_action .)
    RESULT          reduce using rule 59 (location -> call_action .)
    IF              reduce using rule 59 (location -> call_action .)
    DO              reduce using rule 59 (location -> call_action .)
    ABS             reduce using rule 59 (location -> call_action .)
    ASC             reduce using rule 59 (location -> call_action .)
    NUM             reduce using rule 59 (location -> call_action .)
    UPPER           reduce using rule 59 (location -> call_action .)
    LOWER           reduce using rule 59 (location -> call_action .)
    LENGTH          reduce using rule 59 (location -> call_action .)
    READ            reduce using rule 59 (location -> call_action .)
    PRINT           reduce using rule 59 (location -> call_action .)
    $end            reduce using rule 59 (location -> call_action .)
    END             reduce using rule 59 (location -> call_action .)
    ELSE            reduce using rule 59 (location -> call_action .)
    ELSIF           reduce using rule 59 (location -> call_action .)
    TO              reduce using rule 59 (location -> call_action .)
    DOWN            reduce using rule 59 (location -> call_action .)
    BY              reduce using rule 59 (location -> call_action .)
    FI              reduce using rule 59 (location -> call_action .)
    WHILE           reduce using rule 59 (location -> call_action .)


state 90

    (131) referenced_location -> ARROW . location
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    ID              shift and go to state 21
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    location                       shift and go to state 183
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    builtin_name                   shift and go to state 37

state 91

    (71) primitive_value -> literal .

    TIMES           reduce using rule 71 (primitive_value -> literal .)
    DIVIDE          reduce using rule 71 (primitive_value -> literal .)
    MOD             reduce using rule 71 (primitive_value -> literal .)
    PLUS            reduce using rule 71 (primitive_value -> literal .)
    MINUS           reduce using rule 71 (primitive_value -> literal .)
    STRCAT          reduce using rule 71 (primitive_value -> literal .)
    AND             reduce using rule 71 (primitive_value -> literal .)
    OR              reduce using rule 71 (primitive_value -> literal .)
    EQUAL           reduce using rule 71 (primitive_value -> literal .)
    DIFF            reduce using rule 71 (primitive_value -> literal .)
    GREATER         reduce using rule 71 (primitive_value -> literal .)
    GREATEREQ       reduce using rule 71 (primitive_value -> literal .)
    LESS            reduce using rule 71 (primitive_value -> literal .)
    LESSEQ          reduce using rule 71 (primitive_value -> literal .)
    IN              reduce using rule 71 (primitive_value -> literal .)
    SEMI            reduce using rule 71 (primitive_value -> literal .)
    LBRACKET        reduce using rule 71 (primitive_value -> literal .)
    THEN            reduce using rule 71 (primitive_value -> literal .)
    RPAREN          reduce using rule 71 (primitive_value -> literal .)
    COMMA           reduce using rule 71 (primitive_value -> literal .)
    RBRACKET        reduce using rule 71 (primitive_value -> literal .)
    COLON           reduce using rule 71 (primitive_value -> literal .)
    ID              reduce using rule 71 (primitive_value -> literal .)
    DCL             reduce using rule 71 (primitive_value -> literal .)
    SYN             reduce using rule 71 (primitive_value -> literal .)
    TYPE            reduce using rule 71 (primitive_value -> literal .)
    EXIT            reduce using rule 71 (primitive_value -> literal .)
    RETURN          reduce using rule 71 (primitive_value -> literal .)
    RESULT          reduce using rule 71 (primitive_value -> literal .)
    IF              reduce using rule 71 (primitive_value -> literal .)
    DO              reduce using rule 71 (primitive_value -> literal .)
    ABS             reduce using rule 71 (primitive_value -> literal .)
    ASC             reduce using rule 71 (primitive_value -> literal .)
    NUM             reduce using rule 71 (primitive_value -> literal .)
    UPPER           reduce using rule 71 (primitive_value -> literal .)
    LOWER           reduce using rule 71 (primitive_value -> literal .)
    LENGTH          reduce using rule 71 (primitive_value -> literal .)
    READ            reduce using rule 71 (primitive_value -> literal .)
    PRINT           reduce using rule 71 (primitive_value -> literal .)
    $end            reduce using rule 71 (primitive_value -> literal .)
    END             reduce using rule 71 (primitive_value -> literal .)
    ELSE            reduce using rule 71 (primitive_value -> literal .)
    ELSIF           reduce using rule 71 (primitive_value -> literal .)
    TO              reduce using rule 71 (primitive_value -> literal .)
    DOWN            reduce using rule 71 (primitive_value -> literal .)
    BY              reduce using rule 71 (primitive_value -> literal .)
    FI              reduce using rule 71 (primitive_value -> literal .)
    WHILE           reduce using rule 71 (primitive_value -> literal .)


state 92

    (72) primitive_value -> value_array_element .

    TIMES           reduce using rule 72 (primitive_value -> value_array_element .)
    DIVIDE          reduce using rule 72 (primitive_value -> value_array_element .)
    MOD             reduce using rule 72 (primitive_value -> value_array_element .)
    PLUS            reduce using rule 72 (primitive_value -> value_array_element .)
    MINUS           reduce using rule 72 (primitive_value -> value_array_element .)
    STRCAT          reduce using rule 72 (primitive_value -> value_array_element .)
    AND             reduce using rule 72 (primitive_value -> value_array_element .)
    OR              reduce using rule 72 (primitive_value -> value_array_element .)
    EQUAL           reduce using rule 72 (primitive_value -> value_array_element .)
    DIFF            reduce using rule 72 (primitive_value -> value_array_element .)
    GREATER         reduce using rule 72 (primitive_value -> value_array_element .)
    GREATEREQ       reduce using rule 72 (primitive_value -> value_array_element .)
    LESS            reduce using rule 72 (primitive_value -> value_array_element .)
    LESSEQ          reduce using rule 72 (primitive_value -> value_array_element .)
    IN              reduce using rule 72 (primitive_value -> value_array_element .)
    SEMI            reduce using rule 72 (primitive_value -> value_array_element .)
    LBRACKET        reduce using rule 72 (primitive_value -> value_array_element .)
    THEN            reduce using rule 72 (primitive_value -> value_array_element .)
    RPAREN          reduce using rule 72 (primitive_value -> value_array_element .)
    COMMA           reduce using rule 72 (primitive_value -> value_array_element .)
    RBRACKET        reduce using rule 72 (primitive_value -> value_array_element .)
    COLON           reduce using rule 72 (primitive_value -> value_array_element .)
    ID              reduce using rule 72 (primitive_value -> value_array_element .)
    DCL             reduce using rule 72 (primitive_value -> value_array_element .)
    SYN             reduce using rule 72 (primitive_value -> value_array_element .)
    TYPE            reduce using rule 72 (primitive_value -> value_array_element .)
    EXIT            reduce using rule 72 (primitive_value -> value_array_element .)
    RETURN          reduce using rule 72 (primitive_value -> value_array_element .)
    RESULT          reduce using rule 72 (primitive_value -> value_array_element .)
    IF              reduce using rule 72 (primitive_value -> value_array_element .)
    DO              reduce using rule 72 (primitive_value -> value_array_element .)
    ABS             reduce using rule 72 (primitive_value -> value_array_element .)
    ASC             reduce using rule 72 (primitive_value -> value_array_element .)
    NUM             reduce using rule 72 (primitive_value -> value_array_element .)
    UPPER           reduce using rule 72 (primitive_value -> value_array_element .)
    LOWER           reduce using rule 72 (primitive_value -> value_array_element .)
    LENGTH          reduce using rule 72 (primitive_value -> value_array_element .)
    READ            reduce using rule 72 (primitive_value -> value_array_element .)
    PRINT           reduce using rule 72 (primitive_value -> value_array_element .)
    $end            reduce using rule 72 (primitive_value -> value_array_element .)
    END             reduce using rule 72 (primitive_value -> value_array_element .)
    ELSE            reduce using rule 72 (primitive_value -> value_array_element .)
    ELSIF           reduce using rule 72 (primitive_value -> value_array_element .)
    TO              reduce using rule 72 (primitive_value -> value_array_element .)
    DOWN            reduce using rule 72 (primitive_value -> value_array_element .)
    BY              reduce using rule 72 (primitive_value -> value_array_element .)
    FI              reduce using rule 72 (primitive_value -> value_array_element .)
    WHILE           reduce using rule 72 (primitive_value -> value_array_element .)


state 93

    (73) primitive_value -> value_array_slice .

    TIMES           reduce using rule 73 (primitive_value -> value_array_slice .)
    DIVIDE          reduce using rule 73 (primitive_value -> value_array_slice .)
    MOD             reduce using rule 73 (primitive_value -> value_array_slice .)
    PLUS            reduce using rule 73 (primitive_value -> value_array_slice .)
    MINUS           reduce using rule 73 (primitive_value -> value_array_slice .)
    STRCAT          reduce using rule 73 (primitive_value -> value_array_slice .)
    AND             reduce using rule 73 (primitive_value -> value_array_slice .)
    OR              reduce using rule 73 (primitive_value -> value_array_slice .)
    EQUAL           reduce using rule 73 (primitive_value -> value_array_slice .)
    DIFF            reduce using rule 73 (primitive_value -> value_array_slice .)
    GREATER         reduce using rule 73 (primitive_value -> value_array_slice .)
    GREATEREQ       reduce using rule 73 (primitive_value -> value_array_slice .)
    LESS            reduce using rule 73 (primitive_value -> value_array_slice .)
    LESSEQ          reduce using rule 73 (primitive_value -> value_array_slice .)
    IN              reduce using rule 73 (primitive_value -> value_array_slice .)
    SEMI            reduce using rule 73 (primitive_value -> value_array_slice .)
    LBRACKET        reduce using rule 73 (primitive_value -> value_array_slice .)
    THEN            reduce using rule 73 (primitive_value -> value_array_slice .)
    RPAREN          reduce using rule 73 (primitive_value -> value_array_slice .)
    COMMA           reduce using rule 73 (primitive_value -> value_array_slice .)
    RBRACKET        reduce using rule 73 (primitive_value -> value_array_slice .)
    COLON           reduce using rule 73 (primitive_value -> value_array_slice .)
    ID              reduce using rule 73 (primitive_value -> value_array_slice .)
    DCL             reduce using rule 73 (primitive_value -> value_array_slice .)
    SYN             reduce using rule 73 (primitive_value -> value_array_slice .)
    TYPE            reduce using rule 73 (primitive_value -> value_array_slice .)
    EXIT            reduce using rule 73 (primitive_value -> value_array_slice .)
    RETURN          reduce using rule 73 (primitive_value -> value_array_slice .)
    RESULT          reduce using rule 73 (primitive_value -> value_array_slice .)
    IF              reduce using rule 73 (primitive_value -> value_array_slice .)
    DO              reduce using rule 73 (primitive_value -> value_array_slice .)
    ABS             reduce using rule 73 (primitive_value -> value_array_slice .)
    ASC             reduce using rule 73 (primitive_value -> value_array_slice .)
    NUM             reduce using rule 73 (primitive_value -> value_array_slice .)
    UPPER           reduce using rule 73 (primitive_value -> value_array_slice .)
    LOWER           reduce using rule 73 (primitive_value -> value_array_slice .)
    LENGTH          reduce using rule 73 (primitive_value -> value_array_slice .)
    READ            reduce using rule 73 (primitive_value -> value_array_slice .)
    PRINT           reduce using rule 73 (primitive_value -> value_array_slice .)
    $end            reduce using rule 73 (primitive_value -> value_array_slice .)
    END             reduce using rule 73 (primitive_value -> value_array_slice .)
    ELSE            reduce using rule 73 (primitive_value -> value_array_slice .)
    ELSIF           reduce using rule 73 (primitive_value -> value_array_slice .)
    TO              reduce using rule 73 (primitive_value -> value_array_slice .)
    DOWN            reduce using rule 73 (primitive_value -> value_array_slice .)
    BY              reduce using rule 73 (primitive_value -> value_array_slice .)
    FI              reduce using rule 73 (primitive_value -> value_array_slice .)
    WHILE           reduce using rule 73 (primitive_value -> value_array_slice .)


state 94

    (74) primitive_value -> parenthesized_expression .

    TIMES           reduce using rule 74 (primitive_value -> parenthesized_expression .)
    DIVIDE          reduce using rule 74 (primitive_value -> parenthesized_expression .)
    MOD             reduce using rule 74 (primitive_value -> parenthesized_expression .)
    PLUS            reduce using rule 74 (primitive_value -> parenthesized_expression .)
    MINUS           reduce using rule 74 (primitive_value -> parenthesized_expression .)
    STRCAT          reduce using rule 74 (primitive_value -> parenthesized_expression .)
    AND             reduce using rule 74 (primitive_value -> parenthesized_expression .)
    OR              reduce using rule 74 (primitive_value -> parenthesized_expression .)
    EQUAL           reduce using rule 74 (primitive_value -> parenthesized_expression .)
    DIFF            reduce using rule 74 (primitive_value -> parenthesized_expression .)
    GREATER         reduce using rule 74 (primitive_value -> parenthesized_expression .)
    GREATEREQ       reduce using rule 74 (primitive_value -> parenthesized_expression .)
    LESS            reduce using rule 74 (primitive_value -> parenthesized_expression .)
    LESSEQ          reduce using rule 74 (primitive_value -> parenthesized_expression .)
    IN              reduce using rule 74 (primitive_value -> parenthesized_expression .)
    SEMI            reduce using rule 74 (primitive_value -> parenthesized_expression .)
    LBRACKET        reduce using rule 74 (primitive_value -> parenthesized_expression .)
    THEN            reduce using rule 74 (primitive_value -> parenthesized_expression .)
    RPAREN          reduce using rule 74 (primitive_value -> parenthesized_expression .)
    COMMA           reduce using rule 74 (primitive_value -> parenthesized_expression .)
    RBRACKET        reduce using rule 74 (primitive_value -> parenthesized_expression .)
    COLON           reduce using rule 74 (primitive_value -> parenthesized_expression .)
    ID              reduce using rule 74 (primitive_value -> parenthesized_expression .)
    DCL             reduce using rule 74 (primitive_value -> parenthesized_expression .)
    SYN             reduce using rule 74 (primitive_value -> parenthesized_expression .)
    TYPE            reduce using rule 74 (primitive_value -> parenthesized_expression .)
    EXIT            reduce using rule 74 (primitive_value -> parenthesized_expression .)
    RETURN          reduce using rule 74 (primitive_value -> parenthesized_expression .)
    RESULT          reduce using rule 74 (primitive_value -> parenthesized_expression .)
    IF              reduce using rule 74 (primitive_value -> parenthesized_expression .)
    DO              reduce using rule 74 (primitive_value -> parenthesized_expression .)
    ABS             reduce using rule 74 (primitive_value -> parenthesized_expression .)
    ASC             reduce using rule 74 (primitive_value -> parenthesized_expression .)
    NUM             reduce using rule 74 (primitive_value -> parenthesized_expression .)
    UPPER           reduce using rule 74 (primitive_value -> parenthesized_expression .)
    LOWER           reduce using rule 74 (primitive_value -> parenthesized_expression .)
    LENGTH          reduce using rule 74 (primitive_value -> parenthesized_expression .)
    READ            reduce using rule 74 (primitive_value -> parenthesized_expression .)
    PRINT           reduce using rule 74 (primitive_value -> parenthesized_expression .)
    $end            reduce using rule 74 (primitive_value -> parenthesized_expression .)
    END             reduce using rule 74 (primitive_value -> parenthesized_expression .)
    ELSE            reduce using rule 74 (primitive_value -> parenthesized_expression .)
    ELSIF           reduce using rule 74 (primitive_value -> parenthesized_expression .)
    TO              reduce using rule 74 (primitive_value -> parenthesized_expression .)
    DOWN            reduce using rule 74 (primitive_value -> parenthesized_expression .)
    BY              reduce using rule 74 (primitive_value -> parenthesized_expression .)
    FI              reduce using rule 74 (primitive_value -> parenthesized_expression .)
    WHILE           reduce using rule 74 (primitive_value -> parenthesized_expression .)


state 95

    (75) literal -> integer_literal .

    TIMES           reduce using rule 75 (literal -> integer_literal .)
    DIVIDE          reduce using rule 75 (literal -> integer_literal .)
    MOD             reduce using rule 75 (literal -> integer_literal .)
    PLUS            reduce using rule 75 (literal -> integer_literal .)
    MINUS           reduce using rule 75 (literal -> integer_literal .)
    STRCAT          reduce using rule 75 (literal -> integer_literal .)
    AND             reduce using rule 75 (literal -> integer_literal .)
    OR              reduce using rule 75 (literal -> integer_literal .)
    EQUAL           reduce using rule 75 (literal -> integer_literal .)
    DIFF            reduce using rule 75 (literal -> integer_literal .)
    GREATER         reduce using rule 75 (literal -> integer_literal .)
    GREATEREQ       reduce using rule 75 (literal -> integer_literal .)
    LESS            reduce using rule 75 (literal -> integer_literal .)
    LESSEQ          reduce using rule 75 (literal -> integer_literal .)
    IN              reduce using rule 75 (literal -> integer_literal .)
    SEMI            reduce using rule 75 (literal -> integer_literal .)
    LBRACKET        reduce using rule 75 (literal -> integer_literal .)
    THEN            reduce using rule 75 (literal -> integer_literal .)
    RPAREN          reduce using rule 75 (literal -> integer_literal .)
    COMMA           reduce using rule 75 (literal -> integer_literal .)
    RBRACKET        reduce using rule 75 (literal -> integer_literal .)
    COLON           reduce using rule 75 (literal -> integer_literal .)
    ID              reduce using rule 75 (literal -> integer_literal .)
    DCL             reduce using rule 75 (literal -> integer_literal .)
    SYN             reduce using rule 75 (literal -> integer_literal .)
    TYPE            reduce using rule 75 (literal -> integer_literal .)
    EXIT            reduce using rule 75 (literal -> integer_literal .)
    RETURN          reduce using rule 75 (literal -> integer_literal .)
    RESULT          reduce using rule 75 (literal -> integer_literal .)
    IF              reduce using rule 75 (literal -> integer_literal .)
    DO              reduce using rule 75 (literal -> integer_literal .)
    ABS             reduce using rule 75 (literal -> integer_literal .)
    ASC             reduce using rule 75 (literal -> integer_literal .)
    NUM             reduce using rule 75 (literal -> integer_literal .)
    UPPER           reduce using rule 75 (literal -> integer_literal .)
    LOWER           reduce using rule 75 (literal -> integer_literal .)
    LENGTH          reduce using rule 75 (literal -> integer_literal .)
    READ            reduce using rule 75 (literal -> integer_literal .)
    PRINT           reduce using rule 75 (literal -> integer_literal .)
    $end            reduce using rule 75 (literal -> integer_literal .)
    END             reduce using rule 75 (literal -> integer_literal .)
    ELSE            reduce using rule 75 (literal -> integer_literal .)
    ELSIF           reduce using rule 75 (literal -> integer_literal .)
    TO              reduce using rule 75 (literal -> integer_literal .)
    DOWN            reduce using rule 75 (literal -> integer_literal .)
    BY              reduce using rule 75 (literal -> integer_literal .)
    FI              reduce using rule 75 (literal -> integer_literal .)
    WHILE           reduce using rule 75 (literal -> integer_literal .)


state 96

    (76) literal -> boolean_literal .

    TIMES           reduce using rule 76 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 76 (literal -> boolean_literal .)
    MOD             reduce using rule 76 (literal -> boolean_literal .)
    PLUS            reduce using rule 76 (literal -> boolean_literal .)
    MINUS           reduce using rule 76 (literal -> boolean_literal .)
    STRCAT          reduce using rule 76 (literal -> boolean_literal .)
    AND             reduce using rule 76 (literal -> boolean_literal .)
    OR              reduce using rule 76 (literal -> boolean_literal .)
    EQUAL           reduce using rule 76 (literal -> boolean_literal .)
    DIFF            reduce using rule 76 (literal -> boolean_literal .)
    GREATER         reduce using rule 76 (literal -> boolean_literal .)
    GREATEREQ       reduce using rule 76 (literal -> boolean_literal .)
    LESS            reduce using rule 76 (literal -> boolean_literal .)
    LESSEQ          reduce using rule 76 (literal -> boolean_literal .)
    IN              reduce using rule 76 (literal -> boolean_literal .)
    SEMI            reduce using rule 76 (literal -> boolean_literal .)
    LBRACKET        reduce using rule 76 (literal -> boolean_literal .)
    THEN            reduce using rule 76 (literal -> boolean_literal .)
    RPAREN          reduce using rule 76 (literal -> boolean_literal .)
    COMMA           reduce using rule 76 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 76 (literal -> boolean_literal .)
    COLON           reduce using rule 76 (literal -> boolean_literal .)
    ID              reduce using rule 76 (literal -> boolean_literal .)
    DCL             reduce using rule 76 (literal -> boolean_literal .)
    SYN             reduce using rule 76 (literal -> boolean_literal .)
    TYPE            reduce using rule 76 (literal -> boolean_literal .)
    EXIT            reduce using rule 76 (literal -> boolean_literal .)
    RETURN          reduce using rule 76 (literal -> boolean_literal .)
    RESULT          reduce using rule 76 (literal -> boolean_literal .)
    IF              reduce using rule 76 (literal -> boolean_literal .)
    DO              reduce using rule 76 (literal -> boolean_literal .)
    ABS             reduce using rule 76 (literal -> boolean_literal .)
    ASC             reduce using rule 76 (literal -> boolean_literal .)
    NUM             reduce using rule 76 (literal -> boolean_literal .)
    UPPER           reduce using rule 76 (literal -> boolean_literal .)
    LOWER           reduce using rule 76 (literal -> boolean_literal .)
    LENGTH          reduce using rule 76 (literal -> boolean_literal .)
    READ            reduce using rule 76 (literal -> boolean_literal .)
    PRINT           reduce using rule 76 (literal -> boolean_literal .)
    $end            reduce using rule 76 (literal -> boolean_literal .)
    END             reduce using rule 76 (literal -> boolean_literal .)
    ELSE            reduce using rule 76 (literal -> boolean_literal .)
    ELSIF           reduce using rule 76 (literal -> boolean_literal .)
    TO              reduce using rule 76 (literal -> boolean_literal .)
    DOWN            reduce using rule 76 (literal -> boolean_literal .)
    BY              reduce using rule 76 (literal -> boolean_literal .)
    FI              reduce using rule 76 (literal -> boolean_literal .)
    WHILE           reduce using rule 76 (literal -> boolean_literal .)


state 97

    (77) literal -> character_literal .

    TIMES           reduce using rule 77 (literal -> character_literal .)
    DIVIDE          reduce using rule 77 (literal -> character_literal .)
    MOD             reduce using rule 77 (literal -> character_literal .)
    PLUS            reduce using rule 77 (literal -> character_literal .)
    MINUS           reduce using rule 77 (literal -> character_literal .)
    STRCAT          reduce using rule 77 (literal -> character_literal .)
    AND             reduce using rule 77 (literal -> character_literal .)
    OR              reduce using rule 77 (literal -> character_literal .)
    EQUAL           reduce using rule 77 (literal -> character_literal .)
    DIFF            reduce using rule 77 (literal -> character_literal .)
    GREATER         reduce using rule 77 (literal -> character_literal .)
    GREATEREQ       reduce using rule 77 (literal -> character_literal .)
    LESS            reduce using rule 77 (literal -> character_literal .)
    LESSEQ          reduce using rule 77 (literal -> character_literal .)
    IN              reduce using rule 77 (literal -> character_literal .)
    SEMI            reduce using rule 77 (literal -> character_literal .)
    LBRACKET        reduce using rule 77 (literal -> character_literal .)
    THEN            reduce using rule 77 (literal -> character_literal .)
    RPAREN          reduce using rule 77 (literal -> character_literal .)
    COMMA           reduce using rule 77 (literal -> character_literal .)
    RBRACKET        reduce using rule 77 (literal -> character_literal .)
    COLON           reduce using rule 77 (literal -> character_literal .)
    ID              reduce using rule 77 (literal -> character_literal .)
    DCL             reduce using rule 77 (literal -> character_literal .)
    SYN             reduce using rule 77 (literal -> character_literal .)
    TYPE            reduce using rule 77 (literal -> character_literal .)
    EXIT            reduce using rule 77 (literal -> character_literal .)
    RETURN          reduce using rule 77 (literal -> character_literal .)
    RESULT          reduce using rule 77 (literal -> character_literal .)
    IF              reduce using rule 77 (literal -> character_literal .)
    DO              reduce using rule 77 (literal -> character_literal .)
    ABS             reduce using rule 77 (literal -> character_literal .)
    ASC             reduce using rule 77 (literal -> character_literal .)
    NUM             reduce using rule 77 (literal -> character_literal .)
    UPPER           reduce using rule 77 (literal -> character_literal .)
    LOWER           reduce using rule 77 (literal -> character_literal .)
    LENGTH          reduce using rule 77 (literal -> character_literal .)
    READ            reduce using rule 77 (literal -> character_literal .)
    PRINT           reduce using rule 77 (literal -> character_literal .)
    $end            reduce using rule 77 (literal -> character_literal .)
    END             reduce using rule 77 (literal -> character_literal .)
    ELSE            reduce using rule 77 (literal -> character_literal .)
    ELSIF           reduce using rule 77 (literal -> character_literal .)
    TO              reduce using rule 77 (literal -> character_literal .)
    DOWN            reduce using rule 77 (literal -> character_literal .)
    BY              reduce using rule 77 (literal -> character_literal .)
    FI              reduce using rule 77 (literal -> character_literal .)
    WHILE           reduce using rule 77 (literal -> character_literal .)


state 98

    (78) literal -> empty_literal .

    TIMES           reduce using rule 78 (literal -> empty_literal .)
    DIVIDE          reduce using rule 78 (literal -> empty_literal .)
    MOD             reduce using rule 78 (literal -> empty_literal .)
    PLUS            reduce using rule 78 (literal -> empty_literal .)
    MINUS           reduce using rule 78 (literal -> empty_literal .)
    STRCAT          reduce using rule 78 (literal -> empty_literal .)
    AND             reduce using rule 78 (literal -> empty_literal .)
    OR              reduce using rule 78 (literal -> empty_literal .)
    EQUAL           reduce using rule 78 (literal -> empty_literal .)
    DIFF            reduce using rule 78 (literal -> empty_literal .)
    GREATER         reduce using rule 78 (literal -> empty_literal .)
    GREATEREQ       reduce using rule 78 (literal -> empty_literal .)
    LESS            reduce using rule 78 (literal -> empty_literal .)
    LESSEQ          reduce using rule 78 (literal -> empty_literal .)
    IN              reduce using rule 78 (literal -> empty_literal .)
    SEMI            reduce using rule 78 (literal -> empty_literal .)
    LBRACKET        reduce using rule 78 (literal -> empty_literal .)
    THEN            reduce using rule 78 (literal -> empty_literal .)
    RPAREN          reduce using rule 78 (literal -> empty_literal .)
    COMMA           reduce using rule 78 (literal -> empty_literal .)
    RBRACKET        reduce using rule 78 (literal -> empty_literal .)
    COLON           reduce using rule 78 (literal -> empty_literal .)
    ID              reduce using rule 78 (literal -> empty_literal .)
    DCL             reduce using rule 78 (literal -> empty_literal .)
    SYN             reduce using rule 78 (literal -> empty_literal .)
    TYPE            reduce using rule 78 (literal -> empty_literal .)
    EXIT            reduce using rule 78 (literal -> empty_literal .)
    RETURN          reduce using rule 78 (literal -> empty_literal .)
    RESULT          reduce using rule 78 (literal -> empty_literal .)
    IF              reduce using rule 78 (literal -> empty_literal .)
    DO              reduce using rule 78 (literal -> empty_literal .)
    ABS             reduce using rule 78 (literal -> empty_literal .)
    ASC             reduce using rule 78 (literal -> empty_literal .)
    NUM             reduce using rule 78 (literal -> empty_literal .)
    UPPER           reduce using rule 78 (literal -> empty_literal .)
    LOWER           reduce using rule 78 (literal -> empty_literal .)
    LENGTH          reduce using rule 78 (literal -> empty_literal .)
    READ            reduce using rule 78 (literal -> empty_literal .)
    PRINT           reduce using rule 78 (literal -> empty_literal .)
    $end            reduce using rule 78 (literal -> empty_literal .)
    END             reduce using rule 78 (literal -> empty_literal .)
    ELSE            reduce using rule 78 (literal -> empty_literal .)
    ELSIF           reduce using rule 78 (literal -> empty_literal .)
    TO              reduce using rule 78 (literal -> empty_literal .)
    DOWN            reduce using rule 78 (literal -> empty_literal .)
    BY              reduce using rule 78 (literal -> empty_literal .)
    FI              reduce using rule 78 (literal -> empty_literal .)
    WHILE           reduce using rule 78 (literal -> empty_literal .)


state 99

    (79) literal -> character_string_literal .

    TIMES           reduce using rule 79 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 79 (literal -> character_string_literal .)
    MOD             reduce using rule 79 (literal -> character_string_literal .)
    PLUS            reduce using rule 79 (literal -> character_string_literal .)
    MINUS           reduce using rule 79 (literal -> character_string_literal .)
    STRCAT          reduce using rule 79 (literal -> character_string_literal .)
    AND             reduce using rule 79 (literal -> character_string_literal .)
    OR              reduce using rule 79 (literal -> character_string_literal .)
    EQUAL           reduce using rule 79 (literal -> character_string_literal .)
    DIFF            reduce using rule 79 (literal -> character_string_literal .)
    GREATER         reduce using rule 79 (literal -> character_string_literal .)
    GREATEREQ       reduce using rule 79 (literal -> character_string_literal .)
    LESS            reduce using rule 79 (literal -> character_string_literal .)
    LESSEQ          reduce using rule 79 (literal -> character_string_literal .)
    IN              reduce using rule 79 (literal -> character_string_literal .)
    SEMI            reduce using rule 79 (literal -> character_string_literal .)
    LBRACKET        reduce using rule 79 (literal -> character_string_literal .)
    THEN            reduce using rule 79 (literal -> character_string_literal .)
    RPAREN          reduce using rule 79 (literal -> character_string_literal .)
    COMMA           reduce using rule 79 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 79 (literal -> character_string_literal .)
    COLON           reduce using rule 79 (literal -> character_string_literal .)
    ID              reduce using rule 79 (literal -> character_string_literal .)
    DCL             reduce using rule 79 (literal -> character_string_literal .)
    SYN             reduce using rule 79 (literal -> character_string_literal .)
    TYPE            reduce using rule 79 (literal -> character_string_literal .)
    EXIT            reduce using rule 79 (literal -> character_string_literal .)
    RETURN          reduce using rule 79 (literal -> character_string_literal .)
    RESULT          reduce using rule 79 (literal -> character_string_literal .)
    IF              reduce using rule 79 (literal -> character_string_literal .)
    DO              reduce using rule 79 (literal -> character_string_literal .)
    ABS             reduce using rule 79 (literal -> character_string_literal .)
    ASC             reduce using rule 79 (literal -> character_string_literal .)
    NUM             reduce using rule 79 (literal -> character_string_literal .)
    UPPER           reduce using rule 79 (literal -> character_string_literal .)
    LOWER           reduce using rule 79 (literal -> character_string_literal .)
    LENGTH          reduce using rule 79 (literal -> character_string_literal .)
    READ            reduce using rule 79 (literal -> character_string_literal .)
    PRINT           reduce using rule 79 (literal -> character_string_literal .)
    $end            reduce using rule 79 (literal -> character_string_literal .)
    END             reduce using rule 79 (literal -> character_string_literal .)
    ELSE            reduce using rule 79 (literal -> character_string_literal .)
    ELSIF           reduce using rule 79 (literal -> character_string_literal .)
    TO              reduce using rule 79 (literal -> character_string_literal .)
    DOWN            reduce using rule 79 (literal -> character_string_literal .)
    BY              reduce using rule 79 (literal -> character_string_literal .)
    FI              reduce using rule 79 (literal -> character_string_literal .)
    WHILE           reduce using rule 79 (literal -> character_string_literal .)


state 100

    (86) value_array_element -> array_primitive_value . LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> array_primitive_value . LBRACKET lower_bound COLON upper_bound RBRACKET

    LBRACKET        shift and go to state 184


state 101

    (89) parenthesized_expression -> LPAREN . expression RPAREN
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    expression                     shift and go to state 185
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 102

    (80) integer_literal -> ICONST .

    TIMES           reduce using rule 80 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 80 (integer_literal -> ICONST .)
    MOD             reduce using rule 80 (integer_literal -> ICONST .)
    PLUS            reduce using rule 80 (integer_literal -> ICONST .)
    MINUS           reduce using rule 80 (integer_literal -> ICONST .)
    STRCAT          reduce using rule 80 (integer_literal -> ICONST .)
    AND             reduce using rule 80 (integer_literal -> ICONST .)
    OR              reduce using rule 80 (integer_literal -> ICONST .)
    EQUAL           reduce using rule 80 (integer_literal -> ICONST .)
    DIFF            reduce using rule 80 (integer_literal -> ICONST .)
    GREATER         reduce using rule 80 (integer_literal -> ICONST .)
    GREATEREQ       reduce using rule 80 (integer_literal -> ICONST .)
    LESS            reduce using rule 80 (integer_literal -> ICONST .)
    LESSEQ          reduce using rule 80 (integer_literal -> ICONST .)
    IN              reduce using rule 80 (integer_literal -> ICONST .)
    SEMI            reduce using rule 80 (integer_literal -> ICONST .)
    LBRACKET        reduce using rule 80 (integer_literal -> ICONST .)
    THEN            reduce using rule 80 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 80 (integer_literal -> ICONST .)
    COMMA           reduce using rule 80 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 80 (integer_literal -> ICONST .)
    COLON           reduce using rule 80 (integer_literal -> ICONST .)
    ID              reduce using rule 80 (integer_literal -> ICONST .)
    DCL             reduce using rule 80 (integer_literal -> ICONST .)
    SYN             reduce using rule 80 (integer_literal -> ICONST .)
    TYPE            reduce using rule 80 (integer_literal -> ICONST .)
    EXIT            reduce using rule 80 (integer_literal -> ICONST .)
    RETURN          reduce using rule 80 (integer_literal -> ICONST .)
    RESULT          reduce using rule 80 (integer_literal -> ICONST .)
    IF              reduce using rule 80 (integer_literal -> ICONST .)
    DO              reduce using rule 80 (integer_literal -> ICONST .)
    ABS             reduce using rule 80 (integer_literal -> ICONST .)
    ASC             reduce using rule 80 (integer_literal -> ICONST .)
    NUM             reduce using rule 80 (integer_literal -> ICONST .)
    UPPER           reduce using rule 80 (integer_literal -> ICONST .)
    LOWER           reduce using rule 80 (integer_literal -> ICONST .)
    LENGTH          reduce using rule 80 (integer_literal -> ICONST .)
    READ            reduce using rule 80 (integer_literal -> ICONST .)
    PRINT           reduce using rule 80 (integer_literal -> ICONST .)
    $end            reduce using rule 80 (integer_literal -> ICONST .)
    END             reduce using rule 80 (integer_literal -> ICONST .)
    ELSE            reduce using rule 80 (integer_literal -> ICONST .)
    ELSIF           reduce using rule 80 (integer_literal -> ICONST .)
    TO              reduce using rule 80 (integer_literal -> ICONST .)
    DOWN            reduce using rule 80 (integer_literal -> ICONST .)
    BY              reduce using rule 80 (integer_literal -> ICONST .)
    FI              reduce using rule 80 (integer_literal -> ICONST .)
    WHILE           reduce using rule 80 (integer_literal -> ICONST .)


state 103

    (81) boolean_literal -> FALSE .

    TIMES           reduce using rule 81 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 81 (boolean_literal -> FALSE .)
    MOD             reduce using rule 81 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 81 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 81 (boolean_literal -> FALSE .)
    STRCAT          reduce using rule 81 (boolean_literal -> FALSE .)
    AND             reduce using rule 81 (boolean_literal -> FALSE .)
    OR              reduce using rule 81 (boolean_literal -> FALSE .)
    EQUAL           reduce using rule 81 (boolean_literal -> FALSE .)
    DIFF            reduce using rule 81 (boolean_literal -> FALSE .)
    GREATER         reduce using rule 81 (boolean_literal -> FALSE .)
    GREATEREQ       reduce using rule 81 (boolean_literal -> FALSE .)
    LESS            reduce using rule 81 (boolean_literal -> FALSE .)
    LESSEQ          reduce using rule 81 (boolean_literal -> FALSE .)
    IN              reduce using rule 81 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 81 (boolean_literal -> FALSE .)
    LBRACKET        reduce using rule 81 (boolean_literal -> FALSE .)
    THEN            reduce using rule 81 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 81 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 81 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 81 (boolean_literal -> FALSE .)
    COLON           reduce using rule 81 (boolean_literal -> FALSE .)
    ID              reduce using rule 81 (boolean_literal -> FALSE .)
    DCL             reduce using rule 81 (boolean_literal -> FALSE .)
    SYN             reduce using rule 81 (boolean_literal -> FALSE .)
    TYPE            reduce using rule 81 (boolean_literal -> FALSE .)
    EXIT            reduce using rule 81 (boolean_literal -> FALSE .)
    RETURN          reduce using rule 81 (boolean_literal -> FALSE .)
    RESULT          reduce using rule 81 (boolean_literal -> FALSE .)
    IF              reduce using rule 81 (boolean_literal -> FALSE .)
    DO              reduce using rule 81 (boolean_literal -> FALSE .)
    ABS             reduce using rule 81 (boolean_literal -> FALSE .)
    ASC             reduce using rule 81 (boolean_literal -> FALSE .)
    NUM             reduce using rule 81 (boolean_literal -> FALSE .)
    UPPER           reduce using rule 81 (boolean_literal -> FALSE .)
    LOWER           reduce using rule 81 (boolean_literal -> FALSE .)
    LENGTH          reduce using rule 81 (boolean_literal -> FALSE .)
    READ            reduce using rule 81 (boolean_literal -> FALSE .)
    PRINT           reduce using rule 81 (boolean_literal -> FALSE .)
    $end            reduce using rule 81 (boolean_literal -> FALSE .)
    END             reduce using rule 81 (boolean_literal -> FALSE .)
    ELSE            reduce using rule 81 (boolean_literal -> FALSE .)
    ELSIF           reduce using rule 81 (boolean_literal -> FALSE .)
    TO              reduce using rule 81 (boolean_literal -> FALSE .)
    DOWN            reduce using rule 81 (boolean_literal -> FALSE .)
    BY              reduce using rule 81 (boolean_literal -> FALSE .)
    FI              reduce using rule 81 (boolean_literal -> FALSE .)
    WHILE           reduce using rule 81 (boolean_literal -> FALSE .)


state 104

    (82) boolean_literal -> TRUE .

    TIMES           reduce using rule 82 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 82 (boolean_literal -> TRUE .)
    MOD             reduce using rule 82 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 82 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 82 (boolean_literal -> TRUE .)
    STRCAT          reduce using rule 82 (boolean_literal -> TRUE .)
    AND             reduce using rule 82 (boolean_literal -> TRUE .)
    OR              reduce using rule 82 (boolean_literal -> TRUE .)
    EQUAL           reduce using rule 82 (boolean_literal -> TRUE .)
    DIFF            reduce using rule 82 (boolean_literal -> TRUE .)
    GREATER         reduce using rule 82 (boolean_literal -> TRUE .)
    GREATEREQ       reduce using rule 82 (boolean_literal -> TRUE .)
    LESS            reduce using rule 82 (boolean_literal -> TRUE .)
    LESSEQ          reduce using rule 82 (boolean_literal -> TRUE .)
    IN              reduce using rule 82 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 82 (boolean_literal -> TRUE .)
    LBRACKET        reduce using rule 82 (boolean_literal -> TRUE .)
    THEN            reduce using rule 82 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 82 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 82 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 82 (boolean_literal -> TRUE .)
    COLON           reduce using rule 82 (boolean_literal -> TRUE .)
    ID              reduce using rule 82 (boolean_literal -> TRUE .)
    DCL             reduce using rule 82 (boolean_literal -> TRUE .)
    SYN             reduce using rule 82 (boolean_literal -> TRUE .)
    TYPE            reduce using rule 82 (boolean_literal -> TRUE .)
    EXIT            reduce using rule 82 (boolean_literal -> TRUE .)
    RETURN          reduce using rule 82 (boolean_literal -> TRUE .)
    RESULT          reduce using rule 82 (boolean_literal -> TRUE .)
    IF              reduce using rule 82 (boolean_literal -> TRUE .)
    DO              reduce using rule 82 (boolean_literal -> TRUE .)
    ABS             reduce using rule 82 (boolean_literal -> TRUE .)
    ASC             reduce using rule 82 (boolean_literal -> TRUE .)
    NUM             reduce using rule 82 (boolean_literal -> TRUE .)
    UPPER           reduce using rule 82 (boolean_literal -> TRUE .)
    LOWER           reduce using rule 82 (boolean_literal -> TRUE .)
    LENGTH          reduce using rule 82 (boolean_literal -> TRUE .)
    READ            reduce using rule 82 (boolean_literal -> TRUE .)
    PRINT           reduce using rule 82 (boolean_literal -> TRUE .)
    $end            reduce using rule 82 (boolean_literal -> TRUE .)
    END             reduce using rule 82 (boolean_literal -> TRUE .)
    ELSE            reduce using rule 82 (boolean_literal -> TRUE .)
    ELSIF           reduce using rule 82 (boolean_literal -> TRUE .)
    TO              reduce using rule 82 (boolean_literal -> TRUE .)
    DOWN            reduce using rule 82 (boolean_literal -> TRUE .)
    BY              reduce using rule 82 (boolean_literal -> TRUE .)
    FI              reduce using rule 82 (boolean_literal -> TRUE .)
    WHILE           reduce using rule 82 (boolean_literal -> TRUE .)


state 105

    (83) character_literal -> CCONST .

    TIMES           reduce using rule 83 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 83 (character_literal -> CCONST .)
    MOD             reduce using rule 83 (character_literal -> CCONST .)
    PLUS            reduce using rule 83 (character_literal -> CCONST .)
    MINUS           reduce using rule 83 (character_literal -> CCONST .)
    STRCAT          reduce using rule 83 (character_literal -> CCONST .)
    AND             reduce using rule 83 (character_literal -> CCONST .)
    OR              reduce using rule 83 (character_literal -> CCONST .)
    EQUAL           reduce using rule 83 (character_literal -> CCONST .)
    DIFF            reduce using rule 83 (character_literal -> CCONST .)
    GREATER         reduce using rule 83 (character_literal -> CCONST .)
    GREATEREQ       reduce using rule 83 (character_literal -> CCONST .)
    LESS            reduce using rule 83 (character_literal -> CCONST .)
    LESSEQ          reduce using rule 83 (character_literal -> CCONST .)
    IN              reduce using rule 83 (character_literal -> CCONST .)
    SEMI            reduce using rule 83 (character_literal -> CCONST .)
    LBRACKET        reduce using rule 83 (character_literal -> CCONST .)
    THEN            reduce using rule 83 (character_literal -> CCONST .)
    RPAREN          reduce using rule 83 (character_literal -> CCONST .)
    COMMA           reduce using rule 83 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 83 (character_literal -> CCONST .)
    COLON           reduce using rule 83 (character_literal -> CCONST .)
    ID              reduce using rule 83 (character_literal -> CCONST .)
    DCL             reduce using rule 83 (character_literal -> CCONST .)
    SYN             reduce using rule 83 (character_literal -> CCONST .)
    TYPE            reduce using rule 83 (character_literal -> CCONST .)
    EXIT            reduce using rule 83 (character_literal -> CCONST .)
    RETURN          reduce using rule 83 (character_literal -> CCONST .)
    RESULT          reduce using rule 83 (character_literal -> CCONST .)
    IF              reduce using rule 83 (character_literal -> CCONST .)
    DO              reduce using rule 83 (character_literal -> CCONST .)
    ABS             reduce using rule 83 (character_literal -> CCONST .)
    ASC             reduce using rule 83 (character_literal -> CCONST .)
    NUM             reduce using rule 83 (character_literal -> CCONST .)
    UPPER           reduce using rule 83 (character_literal -> CCONST .)
    LOWER           reduce using rule 83 (character_literal -> CCONST .)
    LENGTH          reduce using rule 83 (character_literal -> CCONST .)
    READ            reduce using rule 83 (character_literal -> CCONST .)
    PRINT           reduce using rule 83 (character_literal -> CCONST .)
    $end            reduce using rule 83 (character_literal -> CCONST .)
    END             reduce using rule 83 (character_literal -> CCONST .)
    ELSE            reduce using rule 83 (character_literal -> CCONST .)
    ELSIF           reduce using rule 83 (character_literal -> CCONST .)
    TO              reduce using rule 83 (character_literal -> CCONST .)
    DOWN            reduce using rule 83 (character_literal -> CCONST .)
    BY              reduce using rule 83 (character_literal -> CCONST .)
    FI              reduce using rule 83 (character_literal -> CCONST .)
    WHILE           reduce using rule 83 (character_literal -> CCONST .)


state 106

    (84) empty_literal -> NULL .

    TIMES           reduce using rule 84 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 84 (empty_literal -> NULL .)
    MOD             reduce using rule 84 (empty_literal -> NULL .)
    PLUS            reduce using rule 84 (empty_literal -> NULL .)
    MINUS           reduce using rule 84 (empty_literal -> NULL .)
    STRCAT          reduce using rule 84 (empty_literal -> NULL .)
    AND             reduce using rule 84 (empty_literal -> NULL .)
    OR              reduce using rule 84 (empty_literal -> NULL .)
    EQUAL           reduce using rule 84 (empty_literal -> NULL .)
    DIFF            reduce using rule 84 (empty_literal -> NULL .)
    GREATER         reduce using rule 84 (empty_literal -> NULL .)
    GREATEREQ       reduce using rule 84 (empty_literal -> NULL .)
    LESS            reduce using rule 84 (empty_literal -> NULL .)
    LESSEQ          reduce using rule 84 (empty_literal -> NULL .)
    IN              reduce using rule 84 (empty_literal -> NULL .)
    SEMI            reduce using rule 84 (empty_literal -> NULL .)
    LBRACKET        reduce using rule 84 (empty_literal -> NULL .)
    THEN            reduce using rule 84 (empty_literal -> NULL .)
    RPAREN          reduce using rule 84 (empty_literal -> NULL .)
    COMMA           reduce using rule 84 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 84 (empty_literal -> NULL .)
    COLON           reduce using rule 84 (empty_literal -> NULL .)
    ID              reduce using rule 84 (empty_literal -> NULL .)
    DCL             reduce using rule 84 (empty_literal -> NULL .)
    SYN             reduce using rule 84 (empty_literal -> NULL .)
    TYPE            reduce using rule 84 (empty_literal -> NULL .)
    EXIT            reduce using rule 84 (empty_literal -> NULL .)
    RETURN          reduce using rule 84 (empty_literal -> NULL .)
    RESULT          reduce using rule 84 (empty_literal -> NULL .)
    IF              reduce using rule 84 (empty_literal -> NULL .)
    DO              reduce using rule 84 (empty_literal -> NULL .)
    ABS             reduce using rule 84 (empty_literal -> NULL .)
    ASC             reduce using rule 84 (empty_literal -> NULL .)
    NUM             reduce using rule 84 (empty_literal -> NULL .)
    UPPER           reduce using rule 84 (empty_literal -> NULL .)
    LOWER           reduce using rule 84 (empty_literal -> NULL .)
    LENGTH          reduce using rule 84 (empty_literal -> NULL .)
    READ            reduce using rule 84 (empty_literal -> NULL .)
    PRINT           reduce using rule 84 (empty_literal -> NULL .)
    $end            reduce using rule 84 (empty_literal -> NULL .)
    END             reduce using rule 84 (empty_literal -> NULL .)
    ELSE            reduce using rule 84 (empty_literal -> NULL .)
    ELSIF           reduce using rule 84 (empty_literal -> NULL .)
    TO              reduce using rule 84 (empty_literal -> NULL .)
    DOWN            reduce using rule 84 (empty_literal -> NULL .)
    BY              reduce using rule 84 (empty_literal -> NULL .)
    FI              reduce using rule 84 (empty_literal -> NULL .)
    WHILE           reduce using rule 84 (empty_literal -> NULL .)


state 107

    (85) character_string_literal -> SCONST .

    TIMES           reduce using rule 85 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 85 (character_string_literal -> SCONST .)
    MOD             reduce using rule 85 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 85 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 85 (character_string_literal -> SCONST .)
    STRCAT          reduce using rule 85 (character_string_literal -> SCONST .)
    AND             reduce using rule 85 (character_string_literal -> SCONST .)
    OR              reduce using rule 85 (character_string_literal -> SCONST .)
    EQUAL           reduce using rule 85 (character_string_literal -> SCONST .)
    DIFF            reduce using rule 85 (character_string_literal -> SCONST .)
    GREATER         reduce using rule 85 (character_string_literal -> SCONST .)
    GREATEREQ       reduce using rule 85 (character_string_literal -> SCONST .)
    LESS            reduce using rule 85 (character_string_literal -> SCONST .)
    LESSEQ          reduce using rule 85 (character_string_literal -> SCONST .)
    IN              reduce using rule 85 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 85 (character_string_literal -> SCONST .)
    LBRACKET        reduce using rule 85 (character_string_literal -> SCONST .)
    THEN            reduce using rule 85 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 85 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 85 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 85 (character_string_literal -> SCONST .)
    COLON           reduce using rule 85 (character_string_literal -> SCONST .)
    ID              reduce using rule 85 (character_string_literal -> SCONST .)
    DCL             reduce using rule 85 (character_string_literal -> SCONST .)
    SYN             reduce using rule 85 (character_string_literal -> SCONST .)
    TYPE            reduce using rule 85 (character_string_literal -> SCONST .)
    EXIT            reduce using rule 85 (character_string_literal -> SCONST .)
    RETURN          reduce using rule 85 (character_string_literal -> SCONST .)
    RESULT          reduce using rule 85 (character_string_literal -> SCONST .)
    IF              reduce using rule 85 (character_string_literal -> SCONST .)
    DO              reduce using rule 85 (character_string_literal -> SCONST .)
    ABS             reduce using rule 85 (character_string_literal -> SCONST .)
    ASC             reduce using rule 85 (character_string_literal -> SCONST .)
    NUM             reduce using rule 85 (character_string_literal -> SCONST .)
    UPPER           reduce using rule 85 (character_string_literal -> SCONST .)
    LOWER           reduce using rule 85 (character_string_literal -> SCONST .)
    LENGTH          reduce using rule 85 (character_string_literal -> SCONST .)
    READ            reduce using rule 85 (character_string_literal -> SCONST .)
    PRINT           reduce using rule 85 (character_string_literal -> SCONST .)
    $end            reduce using rule 85 (character_string_literal -> SCONST .)
    END             reduce using rule 85 (character_string_literal -> SCONST .)
    ELSE            reduce using rule 85 (character_string_literal -> SCONST .)
    ELSIF           reduce using rule 85 (character_string_literal -> SCONST .)
    TO              reduce using rule 85 (character_string_literal -> SCONST .)
    DOWN            reduce using rule 85 (character_string_literal -> SCONST .)
    BY              reduce using rule 85 (character_string_literal -> SCONST .)
    FI              reduce using rule 85 (character_string_literal -> SCONST .)
    WHILE           reduce using rule 85 (character_string_literal -> SCONST .)


state 108

    (192) result_action -> RESULT result .

    SEMI            reduce using rule 192 (result_action -> RESULT result .)


state 109

    (151) if_action -> IF boolean_expression . then_clause FI
    (152) if_action -> IF boolean_expression . then_clause else_clause FI
    (153) then_clause -> . THEN
    (154) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 187

    then_clause                    shift and go to state 186

state 110

    (94) boolean_expression -> expression .

    THEN            reduce using rule 94 (boolean_expression -> expression .)
    SEMI            reduce using rule 94 (boolean_expression -> expression .)


state 111

    (161) do_action -> DO OD .

    SEMI            reduce using rule 161 (do_action -> DO OD .)


state 112

    (162) do_action -> DO control_part . SEMI OD
    (164) do_action -> DO control_part . SEMI action_statement_list OD

    SEMI            shift and go to state 188


state 113

    (163) do_action -> DO action_statement_list . OD
    (156) action_statement_list -> action_statement_list . action_statement
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (134) label_id -> . identifier
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (17) identifier -> . ID
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    OD              shift and go to state 189
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    ID              shift and go to state 21
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    action_statement               shift and go to state 190
    action                         shift and go to state 13
    label_id                       shift and go to state 118
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    identifier                     shift and go to state 14
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 114

    (165) control_part -> while_control .

    SEMI            reduce using rule 165 (control_part -> while_control .)


state 115

    (166) control_part -> FOR . for_control
    (167) control_part -> FOR . for_control while_control
    (168) for_control -> . iteration
    (169) iteration -> . step_enumeration
    (170) iteration -> . range_enumeration
    (171) step_enumeration -> . loop_counter ASSIGN start_value end_value
    (172) step_enumeration -> . loop_counter ASSIGN start_value step_value end_value
    (179) range_enumeration -> . loop_counter IN discrete_mode
    (180) range_enumeration -> . loop_counter DOWN IN discrete_mode
    (173) loop_counter -> . identifier
    (17) identifier -> . ID

    ID              shift and go to state 21

    for_control                    shift and go to state 191
    iteration                      shift and go to state 192
    step_enumeration               shift and go to state 193
    range_enumeration              shift and go to state 194
    loop_counter                   shift and go to state 195
    identifier                     shift and go to state 196

state 116

    (155) action_statement_list -> action_statement .

    OD              reduce using rule 155 (action_statement_list -> action_statement .)
    EXIT            reduce using rule 155 (action_statement_list -> action_statement .)
    RETURN          reduce using rule 155 (action_statement_list -> action_statement .)
    RESULT          reduce using rule 155 (action_statement_list -> action_statement .)
    ID              reduce using rule 155 (action_statement_list -> action_statement .)
    IF              reduce using rule 155 (action_statement_list -> action_statement .)
    DO              reduce using rule 155 (action_statement_list -> action_statement .)
    ABS             reduce using rule 155 (action_statement_list -> action_statement .)
    ASC             reduce using rule 155 (action_statement_list -> action_statement .)
    NUM             reduce using rule 155 (action_statement_list -> action_statement .)
    UPPER           reduce using rule 155 (action_statement_list -> action_statement .)
    LOWER           reduce using rule 155 (action_statement_list -> action_statement .)
    LENGTH          reduce using rule 155 (action_statement_list -> action_statement .)
    READ            reduce using rule 155 (action_statement_list -> action_statement .)
    PRINT           reduce using rule 155 (action_statement_list -> action_statement .)
    FI              reduce using rule 155 (action_statement_list -> action_statement .)
    ELSE            reduce using rule 155 (action_statement_list -> action_statement .)
    ELSIF           reduce using rule 155 (action_statement_list -> action_statement .)


state 117

    (181) while_control -> WHILE . boolean_expression
    (94) boolean_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    boolean_expression             shift and go to state 197
    expression                     shift and go to state 110
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 118

    (133) action_statement -> label_id . COLON action SEMI

    COLON           shift and go to state 198


state 119

    (194) builtin_call -> builtin_name LPAREN . RPAREN
    (195) builtin_call -> builtin_name LPAREN . parameter_list RPAREN
    (186) parameter_list -> . parameter
    (187) parameter_list -> . parameter_list COMMA parameter
    (188) parameter -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    RPAREN          shift and go to state 199
    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    builtin_name                   shift and go to state 37
    parameter_list                 shift and go to state 200
    parameter                      shift and go to state 152
    expression                     shift and go to state 153
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100

state 120

    (66) array_element -> array_location LBRACKET . expression_list RBRACKET
    (69) array_slice -> array_location LBRACKET . lower_bound COLON upper_bound RBRACKET
    (67) expression_list -> . expression
    (68) expression_list -> . expression_list COMMA expression
    (39) lower_bound -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    array_location                 shift and go to state 38
    expression_list                shift and go to state 201
    lower_bound                    shift and go to state 202
    expression                     shift and go to state 203
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 121

    (9) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    EXIT            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RETURN          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RESULT          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    IF              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    DO              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ABS             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ASC             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    NUM             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    UPPER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LOWER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LENGTH          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    READ            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    PRINT           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    END             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)


state 122

    (11) declaration_list -> declaration_list COMMA . declaration
    (12) declaration -> . identifier_list mode
    (13) declaration -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 21

    declaration                    shift and go to state 204
    identifier_list                shift and go to state 50
    identifier                     shift and go to state 51

state 123

    (12) declaration -> identifier_list mode .
    (13) declaration -> identifier_list mode . initialization
    (14) initialization -> . ASSIGN expression

    SEMI            reduce using rule 12 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 12 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 206

    initialization                 shift and go to state 205

state 124

    (16) identifier_list -> identifier_list COMMA . identifier
    (17) identifier -> . ID

    ID              shift and go to state 21

    identifier                     shift and go to state 207

state 125

    (37) mode_name -> identifier .
    (35) discrete_range_mode -> identifier . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 37 (mode_name -> identifier .)
    SEMI            reduce using rule 37 (mode_name -> identifier .)
    COMMA           reduce using rule 37 (mode_name -> identifier .)
    LOC             reduce using rule 37 (mode_name -> identifier .)
    RPAREN          reduce using rule 37 (mode_name -> identifier .)
    LPAREN          shift and go to state 208


state 126

    (27) mode -> mode_name .

    ASSIGN          reduce using rule 27 (mode -> mode_name .)
    SEMI            reduce using rule 27 (mode -> mode_name .)
    COMMA           reduce using rule 27 (mode -> mode_name .)
    LOC             reduce using rule 27 (mode -> mode_name .)
    RPAREN          reduce using rule 27 (mode -> mode_name .)


state 127

    (28) mode -> discrete_mode .
    (36) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 28 (mode -> discrete_mode .)
    SEMI            reduce using rule 28 (mode -> discrete_mode .)
    COMMA           reduce using rule 28 (mode -> discrete_mode .)
    LOC             reduce using rule 28 (mode -> discrete_mode .)
    RPAREN          reduce using rule 28 (mode -> discrete_mode .)
    LPAREN          shift and go to state 209


state 128

    (29) mode -> reference_mode .

    ASSIGN          reduce using rule 29 (mode -> reference_mode .)
    SEMI            reduce using rule 29 (mode -> reference_mode .)
    COMMA           reduce using rule 29 (mode -> reference_mode .)
    LOC             reduce using rule 29 (mode -> reference_mode .)
    RPAREN          reduce using rule 29 (mode -> reference_mode .)


state 129

    (30) mode -> composite_mode .

    ASSIGN          reduce using rule 30 (mode -> composite_mode .)
    SEMI            reduce using rule 30 (mode -> composite_mode .)
    COMMA           reduce using rule 30 (mode -> composite_mode .)
    LOC             reduce using rule 30 (mode -> composite_mode .)
    RPAREN          reduce using rule 30 (mode -> composite_mode .)


state 130

    (31) discrete_mode -> INT .

    LPAREN          reduce using rule 31 (discrete_mode -> INT .)
    ASSIGN          reduce using rule 31 (discrete_mode -> INT .)
    SEMI            reduce using rule 31 (discrete_mode -> INT .)
    COMMA           reduce using rule 31 (discrete_mode -> INT .)
    LOC             reduce using rule 31 (discrete_mode -> INT .)
    RPAREN          reduce using rule 31 (discrete_mode -> INT .)
    RBRACKET        reduce using rule 31 (discrete_mode -> INT .)
    WHILE           reduce using rule 31 (discrete_mode -> INT .)


state 131

    (32) discrete_mode -> BOOL .

    LPAREN          reduce using rule 32 (discrete_mode -> BOOL .)
    ASSIGN          reduce using rule 32 (discrete_mode -> BOOL .)
    SEMI            reduce using rule 32 (discrete_mode -> BOOL .)
    COMMA           reduce using rule 32 (discrete_mode -> BOOL .)
    LOC             reduce using rule 32 (discrete_mode -> BOOL .)
    RPAREN          reduce using rule 32 (discrete_mode -> BOOL .)
    RBRACKET        reduce using rule 32 (discrete_mode -> BOOL .)
    WHILE           reduce using rule 32 (discrete_mode -> BOOL .)


state 132

    (33) discrete_mode -> CHAR .

    LPAREN          reduce using rule 33 (discrete_mode -> CHAR .)
    ASSIGN          reduce using rule 33 (discrete_mode -> CHAR .)
    SEMI            reduce using rule 33 (discrete_mode -> CHAR .)
    COMMA           reduce using rule 33 (discrete_mode -> CHAR .)
    LOC             reduce using rule 33 (discrete_mode -> CHAR .)
    RPAREN          reduce using rule 33 (discrete_mode -> CHAR .)
    RBRACKET        reduce using rule 33 (discrete_mode -> CHAR .)
    WHILE           reduce using rule 33 (discrete_mode -> CHAR .)


state 133

    (34) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    WHILE           reduce using rule 34 (discrete_mode -> discrete_range_mode .)


state 134

    (41) reference_mode -> REF . mode
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (37) mode_name -> . identifier
    (31) discrete_mode -> . INT
    (32) discrete_mode -> . BOOL
    (33) discrete_mode -> . CHAR
    (34) discrete_mode -> . discrete_range_mode
    (41) reference_mode -> . REF mode
    (42) composite_mode -> . string_mode
    (43) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (36) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (46) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    INT             shift and go to state 130
    BOOL            shift and go to state 131
    CHAR            shift and go to state 132
    REF             shift and go to state 134
    ID              shift and go to state 21
    CHARS           shift and go to state 137
    ARRAY           shift and go to state 138

    mode                           shift and go to state 210
    mode_name                      shift and go to state 126
    discrete_mode                  shift and go to state 127
    reference_mode                 shift and go to state 128
    composite_mode                 shift and go to state 129
    identifier                     shift and go to state 125
    discrete_range_mode            shift and go to state 133
    string_mode                    shift and go to state 135
    array_mode                     shift and go to state 136

state 135

    (42) composite_mode -> string_mode .

    ASSIGN          reduce using rule 42 (composite_mode -> string_mode .)
    SEMI            reduce using rule 42 (composite_mode -> string_mode .)
    COMMA           reduce using rule 42 (composite_mode -> string_mode .)
    LOC             reduce using rule 42 (composite_mode -> string_mode .)
    RPAREN          reduce using rule 42 (composite_mode -> string_mode .)


state 136

    (43) composite_mode -> array_mode .

    ASSIGN          reduce using rule 43 (composite_mode -> array_mode .)
    SEMI            reduce using rule 43 (composite_mode -> array_mode .)
    COMMA           reduce using rule 43 (composite_mode -> array_mode .)
    LOC             reduce using rule 43 (composite_mode -> array_mode .)
    RPAREN          reduce using rule 43 (composite_mode -> array_mode .)


state 137

    (44) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 211


state 138

    (46) array_mode -> ARRAY . LBRACKET index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 212


state 139

    (20) synonym_list -> synonym_list synonym_definition .

    ID              reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    DCL             reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    SYN             reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    TYPE            reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    EXIT            reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    RETURN          reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    RESULT          reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    IF              reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    DO              reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    ABS             reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    ASC             reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    NUM             reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    UPPER           reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    LOWER           reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    LENGTH          reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    READ            reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    PRINT           reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    $end            reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    END             reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)


state 140

    (21) synonym_definition -> identifier_list ASSIGN . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    expression                     shift and go to state 213
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 141

    (22) synonym_definition -> identifier_list mode . ASSIGN expression

    ASSIGN          shift and go to state 214


state 142

    (23) newmode_statement -> TYPE newmode_list SEMI .

    DCL             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    ID              reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    EXIT            reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    RETURN          reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    RESULT          reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    IF              reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    DO              reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    ABS             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    ASC             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    NUM             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    UPPER           reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    LOWER           reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    LENGTH          reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    READ            reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    PRINT           reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    END             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)


state 143

    (25) newmode_list -> newmode_list COMMA . mode_definition
    (26) mode_definition -> . identifier_list ASSIGN mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 21

    mode_definition                shift and go to state 215
    identifier_list                shift and go to state 57
    identifier                     shift and go to state 51

state 144

    (26) mode_definition -> identifier_list ASSIGN . mode
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (37) mode_name -> . identifier
    (31) discrete_mode -> . INT
    (32) discrete_mode -> . BOOL
    (33) discrete_mode -> . CHAR
    (34) discrete_mode -> . discrete_range_mode
    (41) reference_mode -> . REF mode
    (42) composite_mode -> . string_mode
    (43) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (36) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (46) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    INT             shift and go to state 130
    BOOL            shift and go to state 131
    CHAR            shift and go to state 132
    REF             shift and go to state 134
    ID              shift and go to state 21
    CHARS           shift and go to state 137
    ARRAY           shift and go to state 138

    mode                           shift and go to state 216
    mode_name                      shift and go to state 126
    discrete_mode                  shift and go to state 127
    reference_mode                 shift and go to state 128
    composite_mode                 shift and go to state 129
    identifier                     shift and go to state 125
    discrete_range_mode            shift and go to state 133
    string_mode                    shift and go to state 135
    array_mode                     shift and go to state 136

state 145

    (204) procedure_statement -> label_id COLON procedure_definition . SEMI

    SEMI            shift and go to state 217


state 146

    (133) action_statement -> label_id COLON action . SEMI

    SEMI            shift and go to state 218


state 147

    (205) procedure_definition -> formal_procedure_head . END
    (206) procedure_definition -> formal_procedure_head . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (204) procedure_statement -> . label_id COLON procedure_definition SEMI
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (134) label_id -> . identifier
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (17) identifier -> . ID
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    END             shift and go to state 219
    DCL             shift and go to state 9
    SYN             shift and go to state 10
    TYPE            shift and go to state 11
    ID              shift and go to state 21
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    statement_list                 shift and go to state 220
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4
    synonym_statement              shift and go to state 5
    newmode_statement              shift and go to state 6
    procedure_statement            shift and go to state 7
    action_statement               shift and go to state 8
    label_id                       shift and go to state 12
    action                         shift and go to state 13
    identifier                     shift and go to state 14
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 148

    (207) formal_procedure_head -> PROC . parenthesis_gambiarra SEMI
    (208) formal_procedure_head -> PROC . parenthesis_gambiarra result_spec SEMI
    (209) parenthesis_gambiarra -> . LPAREN RPAREN
    (210) parenthesis_gambiarra -> . LPAREN formal_parameter_list RPAREN

    LPAREN          shift and go to state 222

    parenthesis_gambiarra          shift and go to state 221

state 149

    (53) location -> identifier .
    (184) procedure_call -> identifier . LPAREN RPAREN
    (185) procedure_call -> identifier . LPAREN parameter_list RPAREN
    (61) string_element -> identifier . LBRACKET start_element RBRACKET
    (63) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    ARROW           reduce using rule 53 (location -> identifier .)
    ASSIGN          reduce using rule 53 (location -> identifier .)
    INCREASE        reduce using rule 53 (location -> identifier .)
    DECREASE        reduce using rule 53 (location -> identifier .)
    MULCREASE       reduce using rule 53 (location -> identifier .)
    DIVCREASE       reduce using rule 53 (location -> identifier .)
    MODCREASE       reduce using rule 53 (location -> identifier .)
    LPAREN          shift and go to state 60
    LBRACKET        shift and go to state 61

  ! LBRACKET        [ reduce using rule 53 (location -> identifier .) ]


state 150

    (184) procedure_call -> identifier LPAREN RPAREN .

    SEMI            reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    ARROW           reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    ASSIGN          reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    INCREASE        reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    DECREASE        reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    MULCREASE       reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    DIVCREASE       reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    MODCREASE       reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    LBRACKET        reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    TIMES           reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    DIVIDE          reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    MOD             reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    PLUS            reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    MINUS           reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    STRCAT          reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    AND             reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    OR              reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    EQUAL           reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    DIFF            reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    GREATER         reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    GREATEREQ       reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    LESS            reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    LESSEQ          reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    IN              reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    THEN            reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    RPAREN          reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    COMMA           reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    RBRACKET        reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    COLON           reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    ID              reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    DCL             reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    SYN             reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    TYPE            reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    EXIT            reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    RETURN          reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    RESULT          reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    IF              reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    DO              reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    ABS             reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    ASC             reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    NUM             reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    UPPER           reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    LOWER           reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    LENGTH          reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    READ            reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    PRINT           reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    $end            reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    END             reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    ELSE            reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    ELSIF           reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    TO              reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    DOWN            reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    BY              reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    FI              reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)
    WHILE           reduce using rule 184 (procedure_call -> identifier LPAREN RPAREN .)


state 151

    (185) procedure_call -> identifier LPAREN parameter_list . RPAREN
    (187) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 223
    COMMA           shift and go to state 224


state 152

    (186) parameter_list -> parameter .

    RPAREN          reduce using rule 186 (parameter_list -> parameter .)
    COMMA           reduce using rule 186 (parameter_list -> parameter .)


state 153

    (188) parameter -> expression .

    RPAREN          reduce using rule 188 (parameter -> expression .)
    COMMA           reduce using rule 188 (parameter -> expression .)


state 154

    (61) string_element -> identifier LBRACKET start_element . RBRACKET

    RBRACKET        shift and go to state 225


state 155

    (63) string_slice -> identifier LBRACKET left_element . COLON right_element RBRACKET

    COLON           shift and go to state 226


state 156

    (62) start_element -> integer_expression .
    (64) left_element -> integer_expression .

    RBRACKET        reduce using rule 62 (start_element -> integer_expression .)
    COLON           reduce using rule 64 (left_element -> integer_expression .)


state 157

    (52) integer_expression -> expression .

    RBRACKET        reduce using rule 52 (integer_expression -> expression .)
    COLON           reduce using rule 52 (integer_expression -> expression .)
    TO              reduce using rule 52 (integer_expression -> expression .)
    DOWN            reduce using rule 52 (integer_expression -> expression .)


state 158

    (143) assignment_action -> location assigning_operator expression .

    SEMI            reduce using rule 143 (assignment_action -> location assigning_operator expression .)


state 159

    (100) operand0 -> operand0 operator1 . operand1
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    operand1                       shift and go to state 227
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 160

    (101) operator1 -> relational_operator .

    MINUS           reduce using rule 101 (operator1 -> relational_operator .)
    NOT             reduce using rule 101 (operator1 -> relational_operator .)
    ARROW           reduce using rule 101 (operator1 -> relational_operator .)
    ID              reduce using rule 101 (operator1 -> relational_operator .)
    LPAREN          reduce using rule 101 (operator1 -> relational_operator .)
    ICONST          reduce using rule 101 (operator1 -> relational_operator .)
    FALSE           reduce using rule 101 (operator1 -> relational_operator .)
    TRUE            reduce using rule 101 (operator1 -> relational_operator .)
    CCONST          reduce using rule 101 (operator1 -> relational_operator .)
    NULL            reduce using rule 101 (operator1 -> relational_operator .)
    SCONST          reduce using rule 101 (operator1 -> relational_operator .)
    ABS             reduce using rule 101 (operator1 -> relational_operator .)
    ASC             reduce using rule 101 (operator1 -> relational_operator .)
    NUM             reduce using rule 101 (operator1 -> relational_operator .)
    UPPER           reduce using rule 101 (operator1 -> relational_operator .)
    LOWER           reduce using rule 101 (operator1 -> relational_operator .)
    LENGTH          reduce using rule 101 (operator1 -> relational_operator .)
    READ            reduce using rule 101 (operator1 -> relational_operator .)
    PRINT           reduce using rule 101 (operator1 -> relational_operator .)


state 161

    (102) operator1 -> membership_operator .

    MINUS           reduce using rule 102 (operator1 -> membership_operator .)
    NOT             reduce using rule 102 (operator1 -> membership_operator .)
    ARROW           reduce using rule 102 (operator1 -> membership_operator .)
    ID              reduce using rule 102 (operator1 -> membership_operator .)
    LPAREN          reduce using rule 102 (operator1 -> membership_operator .)
    ICONST          reduce using rule 102 (operator1 -> membership_operator .)
    FALSE           reduce using rule 102 (operator1 -> membership_operator .)
    TRUE            reduce using rule 102 (operator1 -> membership_operator .)
    CCONST          reduce using rule 102 (operator1 -> membership_operator .)
    NULL            reduce using rule 102 (operator1 -> membership_operator .)
    SCONST          reduce using rule 102 (operator1 -> membership_operator .)
    ABS             reduce using rule 102 (operator1 -> membership_operator .)
    ASC             reduce using rule 102 (operator1 -> membership_operator .)
    NUM             reduce using rule 102 (operator1 -> membership_operator .)
    UPPER           reduce using rule 102 (operator1 -> membership_operator .)
    LOWER           reduce using rule 102 (operator1 -> membership_operator .)
    LENGTH          reduce using rule 102 (operator1 -> membership_operator .)
    READ            reduce using rule 102 (operator1 -> membership_operator .)
    PRINT           reduce using rule 102 (operator1 -> membership_operator .)


state 162

    (103) relational_operator -> AND .

    MINUS           reduce using rule 103 (relational_operator -> AND .)
    NOT             reduce using rule 103 (relational_operator -> AND .)
    ARROW           reduce using rule 103 (relational_operator -> AND .)
    ID              reduce using rule 103 (relational_operator -> AND .)
    LPAREN          reduce using rule 103 (relational_operator -> AND .)
    ICONST          reduce using rule 103 (relational_operator -> AND .)
    FALSE           reduce using rule 103 (relational_operator -> AND .)
    TRUE            reduce using rule 103 (relational_operator -> AND .)
    CCONST          reduce using rule 103 (relational_operator -> AND .)
    NULL            reduce using rule 103 (relational_operator -> AND .)
    SCONST          reduce using rule 103 (relational_operator -> AND .)
    ABS             reduce using rule 103 (relational_operator -> AND .)
    ASC             reduce using rule 103 (relational_operator -> AND .)
    NUM             reduce using rule 103 (relational_operator -> AND .)
    UPPER           reduce using rule 103 (relational_operator -> AND .)
    LOWER           reduce using rule 103 (relational_operator -> AND .)
    LENGTH          reduce using rule 103 (relational_operator -> AND .)
    READ            reduce using rule 103 (relational_operator -> AND .)
    PRINT           reduce using rule 103 (relational_operator -> AND .)


state 163

    (104) relational_operator -> OR .

    MINUS           reduce using rule 104 (relational_operator -> OR .)
    NOT             reduce using rule 104 (relational_operator -> OR .)
    ARROW           reduce using rule 104 (relational_operator -> OR .)
    ID              reduce using rule 104 (relational_operator -> OR .)
    LPAREN          reduce using rule 104 (relational_operator -> OR .)
    ICONST          reduce using rule 104 (relational_operator -> OR .)
    FALSE           reduce using rule 104 (relational_operator -> OR .)
    TRUE            reduce using rule 104 (relational_operator -> OR .)
    CCONST          reduce using rule 104 (relational_operator -> OR .)
    NULL            reduce using rule 104 (relational_operator -> OR .)
    SCONST          reduce using rule 104 (relational_operator -> OR .)
    ABS             reduce using rule 104 (relational_operator -> OR .)
    ASC             reduce using rule 104 (relational_operator -> OR .)
    NUM             reduce using rule 104 (relational_operator -> OR .)
    UPPER           reduce using rule 104 (relational_operator -> OR .)
    LOWER           reduce using rule 104 (relational_operator -> OR .)
    LENGTH          reduce using rule 104 (relational_operator -> OR .)
    READ            reduce using rule 104 (relational_operator -> OR .)
    PRINT           reduce using rule 104 (relational_operator -> OR .)


state 164

    (105) relational_operator -> EQUAL .

    MINUS           reduce using rule 105 (relational_operator -> EQUAL .)
    NOT             reduce using rule 105 (relational_operator -> EQUAL .)
    ARROW           reduce using rule 105 (relational_operator -> EQUAL .)
    ID              reduce using rule 105 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 105 (relational_operator -> EQUAL .)
    ICONST          reduce using rule 105 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 105 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 105 (relational_operator -> EQUAL .)
    CCONST          reduce using rule 105 (relational_operator -> EQUAL .)
    NULL            reduce using rule 105 (relational_operator -> EQUAL .)
    SCONST          reduce using rule 105 (relational_operator -> EQUAL .)
    ABS             reduce using rule 105 (relational_operator -> EQUAL .)
    ASC             reduce using rule 105 (relational_operator -> EQUAL .)
    NUM             reduce using rule 105 (relational_operator -> EQUAL .)
    UPPER           reduce using rule 105 (relational_operator -> EQUAL .)
    LOWER           reduce using rule 105 (relational_operator -> EQUAL .)
    LENGTH          reduce using rule 105 (relational_operator -> EQUAL .)
    READ            reduce using rule 105 (relational_operator -> EQUAL .)
    PRINT           reduce using rule 105 (relational_operator -> EQUAL .)


state 165

    (106) relational_operator -> DIFF .

    MINUS           reduce using rule 106 (relational_operator -> DIFF .)
    NOT             reduce using rule 106 (relational_operator -> DIFF .)
    ARROW           reduce using rule 106 (relational_operator -> DIFF .)
    ID              reduce using rule 106 (relational_operator -> DIFF .)
    LPAREN          reduce using rule 106 (relational_operator -> DIFF .)
    ICONST          reduce using rule 106 (relational_operator -> DIFF .)
    FALSE           reduce using rule 106 (relational_operator -> DIFF .)
    TRUE            reduce using rule 106 (relational_operator -> DIFF .)
    CCONST          reduce using rule 106 (relational_operator -> DIFF .)
    NULL            reduce using rule 106 (relational_operator -> DIFF .)
    SCONST          reduce using rule 106 (relational_operator -> DIFF .)
    ABS             reduce using rule 106 (relational_operator -> DIFF .)
    ASC             reduce using rule 106 (relational_operator -> DIFF .)
    NUM             reduce using rule 106 (relational_operator -> DIFF .)
    UPPER           reduce using rule 106 (relational_operator -> DIFF .)
    LOWER           reduce using rule 106 (relational_operator -> DIFF .)
    LENGTH          reduce using rule 106 (relational_operator -> DIFF .)
    READ            reduce using rule 106 (relational_operator -> DIFF .)
    PRINT           reduce using rule 106 (relational_operator -> DIFF .)


state 166

    (107) relational_operator -> GREATER .

    MINUS           reduce using rule 107 (relational_operator -> GREATER .)
    NOT             reduce using rule 107 (relational_operator -> GREATER .)
    ARROW           reduce using rule 107 (relational_operator -> GREATER .)
    ID              reduce using rule 107 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 107 (relational_operator -> GREATER .)
    ICONST          reduce using rule 107 (relational_operator -> GREATER .)
    FALSE           reduce using rule 107 (relational_operator -> GREATER .)
    TRUE            reduce using rule 107 (relational_operator -> GREATER .)
    CCONST          reduce using rule 107 (relational_operator -> GREATER .)
    NULL            reduce using rule 107 (relational_operator -> GREATER .)
    SCONST          reduce using rule 107 (relational_operator -> GREATER .)
    ABS             reduce using rule 107 (relational_operator -> GREATER .)
    ASC             reduce using rule 107 (relational_operator -> GREATER .)
    NUM             reduce using rule 107 (relational_operator -> GREATER .)
    UPPER           reduce using rule 107 (relational_operator -> GREATER .)
    LOWER           reduce using rule 107 (relational_operator -> GREATER .)
    LENGTH          reduce using rule 107 (relational_operator -> GREATER .)
    READ            reduce using rule 107 (relational_operator -> GREATER .)
    PRINT           reduce using rule 107 (relational_operator -> GREATER .)


state 167

    (108) relational_operator -> GREATEREQ .

    MINUS           reduce using rule 108 (relational_operator -> GREATEREQ .)
    NOT             reduce using rule 108 (relational_operator -> GREATEREQ .)
    ARROW           reduce using rule 108 (relational_operator -> GREATEREQ .)
    ID              reduce using rule 108 (relational_operator -> GREATEREQ .)
    LPAREN          reduce using rule 108 (relational_operator -> GREATEREQ .)
    ICONST          reduce using rule 108 (relational_operator -> GREATEREQ .)
    FALSE           reduce using rule 108 (relational_operator -> GREATEREQ .)
    TRUE            reduce using rule 108 (relational_operator -> GREATEREQ .)
    CCONST          reduce using rule 108 (relational_operator -> GREATEREQ .)
    NULL            reduce using rule 108 (relational_operator -> GREATEREQ .)
    SCONST          reduce using rule 108 (relational_operator -> GREATEREQ .)
    ABS             reduce using rule 108 (relational_operator -> GREATEREQ .)
    ASC             reduce using rule 108 (relational_operator -> GREATEREQ .)
    NUM             reduce using rule 108 (relational_operator -> GREATEREQ .)
    UPPER           reduce using rule 108 (relational_operator -> GREATEREQ .)
    LOWER           reduce using rule 108 (relational_operator -> GREATEREQ .)
    LENGTH          reduce using rule 108 (relational_operator -> GREATEREQ .)
    READ            reduce using rule 108 (relational_operator -> GREATEREQ .)
    PRINT           reduce using rule 108 (relational_operator -> GREATEREQ .)


state 168

    (109) relational_operator -> LESS .

    MINUS           reduce using rule 109 (relational_operator -> LESS .)
    NOT             reduce using rule 109 (relational_operator -> LESS .)
    ARROW           reduce using rule 109 (relational_operator -> LESS .)
    ID              reduce using rule 109 (relational_operator -> LESS .)
    LPAREN          reduce using rule 109 (relational_operator -> LESS .)
    ICONST          reduce using rule 109 (relational_operator -> LESS .)
    FALSE           reduce using rule 109 (relational_operator -> LESS .)
    TRUE            reduce using rule 109 (relational_operator -> LESS .)
    CCONST          reduce using rule 109 (relational_operator -> LESS .)
    NULL            reduce using rule 109 (relational_operator -> LESS .)
    SCONST          reduce using rule 109 (relational_operator -> LESS .)
    ABS             reduce using rule 109 (relational_operator -> LESS .)
    ASC             reduce using rule 109 (relational_operator -> LESS .)
    NUM             reduce using rule 109 (relational_operator -> LESS .)
    UPPER           reduce using rule 109 (relational_operator -> LESS .)
    LOWER           reduce using rule 109 (relational_operator -> LESS .)
    LENGTH          reduce using rule 109 (relational_operator -> LESS .)
    READ            reduce using rule 109 (relational_operator -> LESS .)
    PRINT           reduce using rule 109 (relational_operator -> LESS .)


state 169

    (110) relational_operator -> LESSEQ .

    MINUS           reduce using rule 110 (relational_operator -> LESSEQ .)
    NOT             reduce using rule 110 (relational_operator -> LESSEQ .)
    ARROW           reduce using rule 110 (relational_operator -> LESSEQ .)
    ID              reduce using rule 110 (relational_operator -> LESSEQ .)
    LPAREN          reduce using rule 110 (relational_operator -> LESSEQ .)
    ICONST          reduce using rule 110 (relational_operator -> LESSEQ .)
    FALSE           reduce using rule 110 (relational_operator -> LESSEQ .)
    TRUE            reduce using rule 110 (relational_operator -> LESSEQ .)
    CCONST          reduce using rule 110 (relational_operator -> LESSEQ .)
    NULL            reduce using rule 110 (relational_operator -> LESSEQ .)
    SCONST          reduce using rule 110 (relational_operator -> LESSEQ .)
    ABS             reduce using rule 110 (relational_operator -> LESSEQ .)
    ASC             reduce using rule 110 (relational_operator -> LESSEQ .)
    NUM             reduce using rule 110 (relational_operator -> LESSEQ .)
    UPPER           reduce using rule 110 (relational_operator -> LESSEQ .)
    LOWER           reduce using rule 110 (relational_operator -> LESSEQ .)
    LENGTH          reduce using rule 110 (relational_operator -> LESSEQ .)
    READ            reduce using rule 110 (relational_operator -> LESSEQ .)
    PRINT           reduce using rule 110 (relational_operator -> LESSEQ .)


state 170

    (111) membership_operator -> IN .

    MINUS           reduce using rule 111 (membership_operator -> IN .)
    NOT             reduce using rule 111 (membership_operator -> IN .)
    ARROW           reduce using rule 111 (membership_operator -> IN .)
    ID              reduce using rule 111 (membership_operator -> IN .)
    LPAREN          reduce using rule 111 (membership_operator -> IN .)
    ICONST          reduce using rule 111 (membership_operator -> IN .)
    FALSE           reduce using rule 111 (membership_operator -> IN .)
    TRUE            reduce using rule 111 (membership_operator -> IN .)
    CCONST          reduce using rule 111 (membership_operator -> IN .)
    NULL            reduce using rule 111 (membership_operator -> IN .)
    SCONST          reduce using rule 111 (membership_operator -> IN .)
    ABS             reduce using rule 111 (membership_operator -> IN .)
    ASC             reduce using rule 111 (membership_operator -> IN .)
    NUM             reduce using rule 111 (membership_operator -> IN .)
    UPPER           reduce using rule 111 (membership_operator -> IN .)
    LOWER           reduce using rule 111 (membership_operator -> IN .)
    LENGTH          reduce using rule 111 (membership_operator -> IN .)
    READ            reduce using rule 111 (membership_operator -> IN .)
    PRINT           reduce using rule 111 (membership_operator -> IN .)


state 171

    (113) operand1 -> operand1 operator2 . operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    operand2                       shift and go to state 228
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 172

    (114) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    ARROW           reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    ID              reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    LPAREN          reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    FALSE           reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    TRUE            reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    CCONST          reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    NULL            reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    SCONST          reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    ABS             reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    ASC             reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    NUM             reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    UPPER           reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    LOWER           reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    LENGTH          reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    READ            reduce using rule 114 (operator2 -> arithmetic_additive_operator .)
    PRINT           reduce using rule 114 (operator2 -> arithmetic_additive_operator .)


state 173

    (115) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 115 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 115 (operator2 -> string_concatenation_operator .)
    ARROW           reduce using rule 115 (operator2 -> string_concatenation_operator .)
    ID              reduce using rule 115 (operator2 -> string_concatenation_operator .)
    LPAREN          reduce using rule 115 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 115 (operator2 -> string_concatenation_operator .)
    FALSE           reduce using rule 115 (operator2 -> string_concatenation_operator .)
    TRUE            reduce using rule 115 (operator2 -> string_concatenation_operator .)
    CCONST          reduce using rule 115 (operator2 -> string_concatenation_operator .)
    NULL            reduce using rule 115 (operator2 -> string_concatenation_operator .)
    SCONST          reduce using rule 115 (operator2 -> string_concatenation_operator .)
    ABS             reduce using rule 115 (operator2 -> string_concatenation_operator .)
    ASC             reduce using rule 115 (operator2 -> string_concatenation_operator .)
    NUM             reduce using rule 115 (operator2 -> string_concatenation_operator .)
    UPPER           reduce using rule 115 (operator2 -> string_concatenation_operator .)
    LOWER           reduce using rule 115 (operator2 -> string_concatenation_operator .)
    LENGTH          reduce using rule 115 (operator2 -> string_concatenation_operator .)
    READ            reduce using rule 115 (operator2 -> string_concatenation_operator .)
    PRINT           reduce using rule 115 (operator2 -> string_concatenation_operator .)


state 174

    (116) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    ARROW           reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    LPAREN          reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    ABS             reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    ASC             reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    NUM             reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    UPPER           reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    LOWER           reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    LENGTH          reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    READ            reduce using rule 116 (arithmetic_additive_operator -> PLUS .)
    PRINT           reduce using rule 116 (arithmetic_additive_operator -> PLUS .)


state 175

    (117) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    ARROW           reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    LPAREN          reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    ABS             reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    ASC             reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    NUM             reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    UPPER           reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    LOWER           reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    LENGTH          reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    READ            reduce using rule 117 (arithmetic_additive_operator -> MINUS .)
    PRINT           reduce using rule 117 (arithmetic_additive_operator -> MINUS .)


state 176

    (118) string_concatenation_operator -> STRCAT .

    MINUS           reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    NOT             reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    ARROW           reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    ID              reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    LPAREN          reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    ICONST          reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    FALSE           reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    TRUE            reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    CCONST          reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    NULL            reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    SCONST          reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    ABS             reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    ASC             reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    NUM             reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    UPPER           reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    LOWER           reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    LENGTH          reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    READ            reduce using rule 118 (string_concatenation_operator -> STRCAT .)
    PRINT           reduce using rule 118 (string_concatenation_operator -> STRCAT .)


state 177

    (92) conditional_expression -> IF boolean_expression . then_expression else_expression FI
    (93) conditional_expression -> IF boolean_expression . then_expression elsif_expression else_expression FI
    (95) then_expression -> . THEN expression

    THEN            shift and go to state 230

    then_expression                shift and go to state 229

state 178

    (120) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    operand3                       shift and go to state 231
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 179

    (121) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    ARROW           reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    LPAREN          reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    ABS             reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    ASC             reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    NUM             reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    UPPER           reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    LOWER           reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    LENGTH          reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    READ            reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)
    PRINT           reduce using rule 121 (arithmetic_multiplicative_operator -> TIMES .)


state 180

    (122) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    ARROW           reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    LPAREN          reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    ABS             reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    ASC             reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    NUM             reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    UPPER           reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    LOWER           reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    LENGTH          reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    READ            reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)
    PRINT           reduce using rule 122 (arithmetic_multiplicative_operator -> DIVIDE .)


state 181

    (123) arithmetic_multiplicative_operator -> MOD .

    MINUS           reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    NOT             reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    ARROW           reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    ID              reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    LPAREN          reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    ICONST          reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    FALSE           reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    TRUE            reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    CCONST          reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    NULL            reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    SCONST          reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    ABS             reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    ASC             reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    NUM             reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    UPPER           reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    LOWER           reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    LENGTH          reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    READ            reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)
    PRINT           reduce using rule 123 (arithmetic_multiplicative_operator -> MOD .)


state 182

    (125) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    MOD             reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    STRCAT          reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    EQUAL           reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    DIFF            reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    GREATER         reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    GREATEREQ       reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    LESS            reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    LESSEQ          reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    ID              reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    DCL             reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    SYN             reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    TYPE            reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    EXIT            reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    RETURN          reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    RESULT          reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    IF              reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    DO              reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    ABS             reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    ASC             reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    NUM             reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    UPPER           reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    LOWER           reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    LENGTH          reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    READ            reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    PRINT           reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    $end            reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    END             reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    TO              reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    DOWN            reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    BY              reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 125 (operand3 -> monadic_operator operand4 .)
    WHILE           reduce using rule 125 (operand3 -> monadic_operator operand4 .)


state 183

    (131) referenced_location -> ARROW location .
    (60) dereferenced_reference -> location . ARROW
    (70) array_location -> location .

    TIMES           reduce using rule 131 (referenced_location -> ARROW location .)
    DIVIDE          reduce using rule 131 (referenced_location -> ARROW location .)
    MOD             reduce using rule 131 (referenced_location -> ARROW location .)
    PLUS            reduce using rule 131 (referenced_location -> ARROW location .)
    MINUS           reduce using rule 131 (referenced_location -> ARROW location .)
    STRCAT          reduce using rule 131 (referenced_location -> ARROW location .)
    AND             reduce using rule 131 (referenced_location -> ARROW location .)
    OR              reduce using rule 131 (referenced_location -> ARROW location .)
    EQUAL           reduce using rule 131 (referenced_location -> ARROW location .)
    DIFF            reduce using rule 131 (referenced_location -> ARROW location .)
    GREATER         reduce using rule 131 (referenced_location -> ARROW location .)
    GREATEREQ       reduce using rule 131 (referenced_location -> ARROW location .)
    LESS            reduce using rule 131 (referenced_location -> ARROW location .)
    LESSEQ          reduce using rule 131 (referenced_location -> ARROW location .)
    IN              reduce using rule 131 (referenced_location -> ARROW location .)
    SEMI            reduce using rule 131 (referenced_location -> ARROW location .)
    THEN            reduce using rule 131 (referenced_location -> ARROW location .)
    RPAREN          reduce using rule 131 (referenced_location -> ARROW location .)
    COMMA           reduce using rule 131 (referenced_location -> ARROW location .)
    RBRACKET        reduce using rule 131 (referenced_location -> ARROW location .)
    COLON           reduce using rule 131 (referenced_location -> ARROW location .)
    ID              reduce using rule 131 (referenced_location -> ARROW location .)
    DCL             reduce using rule 131 (referenced_location -> ARROW location .)
    SYN             reduce using rule 131 (referenced_location -> ARROW location .)
    TYPE            reduce using rule 131 (referenced_location -> ARROW location .)
    EXIT            reduce using rule 131 (referenced_location -> ARROW location .)
    RETURN          reduce using rule 131 (referenced_location -> ARROW location .)
    RESULT          reduce using rule 131 (referenced_location -> ARROW location .)
    IF              reduce using rule 131 (referenced_location -> ARROW location .)
    DO              reduce using rule 131 (referenced_location -> ARROW location .)
    ABS             reduce using rule 131 (referenced_location -> ARROW location .)
    ASC             reduce using rule 131 (referenced_location -> ARROW location .)
    NUM             reduce using rule 131 (referenced_location -> ARROW location .)
    UPPER           reduce using rule 131 (referenced_location -> ARROW location .)
    LOWER           reduce using rule 131 (referenced_location -> ARROW location .)
    LENGTH          reduce using rule 131 (referenced_location -> ARROW location .)
    READ            reduce using rule 131 (referenced_location -> ARROW location .)
    PRINT           reduce using rule 131 (referenced_location -> ARROW location .)
    $end            reduce using rule 131 (referenced_location -> ARROW location .)
    END             reduce using rule 131 (referenced_location -> ARROW location .)
    ELSE            reduce using rule 131 (referenced_location -> ARROW location .)
    ELSIF           reduce using rule 131 (referenced_location -> ARROW location .)
    TO              reduce using rule 131 (referenced_location -> ARROW location .)
    DOWN            reduce using rule 131 (referenced_location -> ARROW location .)
    BY              reduce using rule 131 (referenced_location -> ARROW location .)
    FI              reduce using rule 131 (referenced_location -> ARROW location .)
    WHILE           reduce using rule 131 (referenced_location -> ARROW location .)
    ARROW           shift and go to state 63
    LBRACKET        reduce using rule 70 (array_location -> location .)


state 184

    (86) value_array_element -> array_primitive_value LBRACKET . integer_expression RBRACKET
    (87) value_array_slice -> array_primitive_value LBRACKET . lower_bound COLON upper_bound RBRACKET
    (52) integer_expression -> . expression
    (39) lower_bound -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    array_primitive_value          shift and go to state 100
    integer_expression             shift and go to state 232
    lower_bound                    shift and go to state 233
    expression                     shift and go to state 234
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    builtin_name                   shift and go to state 37

state 185

    (89) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 235


state 186

    (151) if_action -> IF boolean_expression then_clause . FI
    (152) if_action -> IF boolean_expression then_clause . else_clause FI
    (157) else_clause -> . ELSE
    (158) else_clause -> . ELSE action_statement_list
    (159) else_clause -> . ELSIF boolean_expression then_clause
    (160) else_clause -> . ELSIF boolean_expression then_clause else_clause

    FI              shift and go to state 236
    ELSE            shift and go to state 238
    ELSIF           shift and go to state 239

    else_clause                    shift and go to state 237

state 187

    (153) then_clause -> THEN .
    (154) then_clause -> THEN . action_statement_list
    (155) action_statement_list -> . action_statement
    (156) action_statement_list -> . action_statement_list action_statement
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (134) label_id -> . identifier
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (17) identifier -> . ID
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    FI              reduce using rule 153 (then_clause -> THEN .)
    ELSE            reduce using rule 153 (then_clause -> THEN .)
    ELSIF           reduce using rule 153 (then_clause -> THEN .)
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    ID              shift and go to state 21
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    action_statement_list          shift and go to state 240
    action_statement               shift and go to state 116
    action                         shift and go to state 13
    label_id                       shift and go to state 118
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    identifier                     shift and go to state 14
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 188

    (162) do_action -> DO control_part SEMI . OD
    (164) do_action -> DO control_part SEMI . action_statement_list OD
    (155) action_statement_list -> . action_statement
    (156) action_statement_list -> . action_statement_list action_statement
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (134) label_id -> . identifier
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (17) identifier -> . ID
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    OD              shift and go to state 241
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    ID              shift and go to state 21
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    action_statement_list          shift and go to state 242
    action_statement               shift and go to state 116
    action                         shift and go to state 13
    label_id                       shift and go to state 118
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    identifier                     shift and go to state 14
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 189

    (163) do_action -> DO action_statement_list OD .

    SEMI            reduce using rule 163 (do_action -> DO action_statement_list OD .)


state 190

    (156) action_statement_list -> action_statement_list action_statement .

    OD              reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    EXIT            reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    RETURN          reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    RESULT          reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    ID              reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    IF              reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    DO              reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    ABS             reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    ASC             reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    NUM             reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    UPPER           reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    LOWER           reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    LENGTH          reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    READ            reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    PRINT           reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    FI              reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    ELSE            reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)
    ELSIF           reduce using rule 156 (action_statement_list -> action_statement_list action_statement .)


state 191

    (166) control_part -> FOR for_control .
    (167) control_part -> FOR for_control . while_control
    (181) while_control -> . WHILE boolean_expression

    SEMI            reduce using rule 166 (control_part -> FOR for_control .)
    WHILE           shift and go to state 117

    while_control                  shift and go to state 243

state 192

    (168) for_control -> iteration .

    WHILE           reduce using rule 168 (for_control -> iteration .)
    SEMI            reduce using rule 168 (for_control -> iteration .)


state 193

    (169) iteration -> step_enumeration .

    WHILE           reduce using rule 169 (iteration -> step_enumeration .)
    SEMI            reduce using rule 169 (iteration -> step_enumeration .)


state 194

    (170) iteration -> range_enumeration .

    WHILE           reduce using rule 170 (iteration -> range_enumeration .)
    SEMI            reduce using rule 170 (iteration -> range_enumeration .)


state 195

    (171) step_enumeration -> loop_counter . ASSIGN start_value end_value
    (172) step_enumeration -> loop_counter . ASSIGN start_value step_value end_value
    (179) range_enumeration -> loop_counter . IN discrete_mode
    (180) range_enumeration -> loop_counter . DOWN IN discrete_mode

    ASSIGN          shift and go to state 244
    IN              shift and go to state 245
    DOWN            shift and go to state 246


state 196

    (173) loop_counter -> identifier .

    ASSIGN          reduce using rule 173 (loop_counter -> identifier .)
    IN              reduce using rule 173 (loop_counter -> identifier .)
    DOWN            reduce using rule 173 (loop_counter -> identifier .)


state 197

    (181) while_control -> WHILE boolean_expression .

    SEMI            reduce using rule 181 (while_control -> WHILE boolean_expression .)


state 198

    (133) action_statement -> label_id COLON . action SEMI
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    IF              shift and go to state 30
    DO              shift and go to state 31
    ID              shift and go to state 21
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    action                         shift and go to state 146
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    identifier                     shift and go to state 149
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 199

    (194) builtin_call -> builtin_name LPAREN RPAREN .

    SEMI            reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    ARROW           reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    ASSIGN          reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    INCREASE        reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    DECREASE        reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    MULCREASE       reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVCREASE       reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    MODCREASE       reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    LBRACKET        reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    TIMES           reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    MOD             reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    PLUS            reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    MINUS           reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    STRCAT          reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    AND             reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    OR              reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQUAL           reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIFF            reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    GREATER         reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    GREATEREQ       reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    LESS            reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    LESSEQ          reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    IN              reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    THEN            reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    RPAREN          reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    COMMA           reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    COLON           reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    ID              reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    DCL             reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    SYN             reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    TYPE            reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    EXIT            reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    RETURN          reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    RESULT          reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    IF              reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    DO              reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    ABS             reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    ASC             reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    NUM             reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    UPPER           reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    LOWER           reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    LENGTH          reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    READ            reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    PRINT           reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    $end            reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    END             reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSE            reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSIF           reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    TO              reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    DOWN            reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    BY              reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    FI              reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)
    WHILE           reduce using rule 194 (builtin_call -> builtin_name LPAREN RPAREN .)


state 200

    (195) builtin_call -> builtin_name LPAREN parameter_list . RPAREN
    (187) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 247
    COMMA           shift and go to state 224


state 201

    (66) array_element -> array_location LBRACKET expression_list . RBRACKET
    (68) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 248
    COMMA           shift and go to state 249


state 202

    (69) array_slice -> array_location LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 250


state 203

    (67) expression_list -> expression .
    (39) lower_bound -> expression .

    RBRACKET        reduce using rule 67 (expression_list -> expression .)
    COMMA           reduce using rule 67 (expression_list -> expression .)
    COLON           reduce using rule 39 (lower_bound -> expression .)


state 204

    (11) declaration_list -> declaration_list COMMA declaration .

    SEMI            reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)


state 205

    (13) declaration -> identifier_list mode initialization .

    SEMI            reduce using rule 13 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 13 (declaration -> identifier_list mode initialization .)


state 206

    (14) initialization -> ASSIGN . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    expression                     shift and go to state 251
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 207

    (16) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    REF             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHARS           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ARRAY           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ASSIGN          reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)


state 208

    (35) discrete_range_mode -> identifier LPAREN . literal_range RPAREN
    (38) literal_range -> . lower_bound COLON upper_bound
    (39) lower_bound -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    identifier                     shift and go to state 88
    literal_range                  shift and go to state 252
    lower_bound                    shift and go to state 253
    expression                     shift and go to state 254
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 209

    (36) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (38) literal_range -> . lower_bound COLON upper_bound
    (39) lower_bound -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    literal_range                  shift and go to state 255
    lower_bound                    shift and go to state 253
    expression                     shift and go to state 254
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 210

    (41) reference_mode -> REF mode .

    ASSIGN          reduce using rule 41 (reference_mode -> REF mode .)
    SEMI            reduce using rule 41 (reference_mode -> REF mode .)
    COMMA           reduce using rule 41 (reference_mode -> REF mode .)
    LOC             reduce using rule 41 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 41 (reference_mode -> REF mode .)


state 211

    (44) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (45) string_length -> . integer_literal
    (80) integer_literal -> . ICONST

    ICONST          shift and go to state 102

    string_length                  shift and go to state 256
    integer_literal                shift and go to state 257

state 212

    (46) array_mode -> ARRAY LBRACKET . index_mode_list RBRACKET element_mode
    (47) index_mode_list -> . index_mode
    (48) index_mode_list -> . index_mode_list COMMA index_mode
    (49) index_mode -> . discrete_mode
    (50) index_mode -> . literal_range
    (31) discrete_mode -> . INT
    (32) discrete_mode -> . BOOL
    (33) discrete_mode -> . CHAR
    (34) discrete_mode -> . discrete_range_mode
    (38) literal_range -> . lower_bound COLON upper_bound
    (35) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (36) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (39) lower_bound -> . expression
    (17) identifier -> . ID
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    INT             shift and go to state 130
    BOOL            shift and go to state 131
    CHAR            shift and go to state 132
    ID              shift and go to state 21
    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    index_mode_list                shift and go to state 258
    index_mode                     shift and go to state 259
    discrete_mode                  shift and go to state 260
    literal_range                  shift and go to state 261
    discrete_range_mode            shift and go to state 133
    lower_bound                    shift and go to state 253
    identifier                     shift and go to state 262
    expression                     shift and go to state 254
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 213

    (21) synonym_definition -> identifier_list ASSIGN expression .

    ID              reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    DCL             reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    SYN             reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    TYPE            reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    EXIT            reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    RETURN          reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    RESULT          reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    IF              reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    DO              reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    ABS             reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    ASC             reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    NUM             reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    UPPER           reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    LOWER           reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    LENGTH          reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    READ            reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    PRINT           reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    $end            reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)
    END             reduce using rule 21 (synonym_definition -> identifier_list ASSIGN expression .)


state 214

    (22) synonym_definition -> identifier_list mode ASSIGN . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    expression                     shift and go to state 263
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 215

    (25) newmode_list -> newmode_list COMMA mode_definition .

    SEMI            reduce using rule 25 (newmode_list -> newmode_list COMMA mode_definition .)
    COMMA           reduce using rule 25 (newmode_list -> newmode_list COMMA mode_definition .)


state 216

    (26) mode_definition -> identifier_list ASSIGN mode .

    SEMI            reduce using rule 26 (mode_definition -> identifier_list ASSIGN mode .)
    COMMA           reduce using rule 26 (mode_definition -> identifier_list ASSIGN mode .)


state 217

    (204) procedure_statement -> label_id COLON procedure_definition SEMI .

    DCL             reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    SYN             reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    TYPE            reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    ID              reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    EXIT            reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    RETURN          reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    RESULT          reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    IF              reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    DO              reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    ABS             reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    ASC             reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    NUM             reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    UPPER           reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    LOWER           reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    LENGTH          reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    READ            reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    PRINT           reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    $end            reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    END             reduce using rule 204 (procedure_statement -> label_id COLON procedure_definition SEMI .)


state 218

    (133) action_statement -> label_id COLON action SEMI .

    DCL             reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    SYN             reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    TYPE            reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    ID              reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    EXIT            reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    RETURN          reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    RESULT          reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    IF              reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    DO              reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    ABS             reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    ASC             reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    NUM             reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    UPPER           reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    LOWER           reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    LENGTH          reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    READ            reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    PRINT           reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    $end            reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    OD              reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    END             reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    FI              reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    ELSE            reduce using rule 133 (action_statement -> label_id COLON action SEMI .)
    ELSIF           reduce using rule 133 (action_statement -> label_id COLON action SEMI .)


state 219

    (205) procedure_definition -> formal_procedure_head END .

    SEMI            reduce using rule 205 (procedure_definition -> formal_procedure_head END .)


state 220

    (206) procedure_definition -> formal_procedure_head statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (204) procedure_statement -> . label_id COLON procedure_definition SEMI
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (134) label_id -> . identifier
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (17) identifier -> . ID
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    END             shift and go to state 264
    DCL             shift and go to state 9
    SYN             shift and go to state 10
    TYPE            shift and go to state 11
    ID              shift and go to state 21
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    statement                      shift and go to state 47
    declaration_statement          shift and go to state 4
    synonym_statement              shift and go to state 5
    newmode_statement              shift and go to state 6
    procedure_statement            shift and go to state 7
    action_statement               shift and go to state 8
    label_id                       shift and go to state 12
    action                         shift and go to state 13
    identifier                     shift and go to state 14
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 221

    (207) formal_procedure_head -> PROC parenthesis_gambiarra . SEMI
    (208) formal_procedure_head -> PROC parenthesis_gambiarra . result_spec SEMI
    (217) result_spec -> . RETURNS LPAREN mode RPAREN
    (218) result_spec -> . RETURNS LPAREN mode result_attribute RPAREN

    SEMI            shift and go to state 265
    RETURNS         shift and go to state 267

    result_spec                    shift and go to state 266

state 222

    (209) parenthesis_gambiarra -> LPAREN . RPAREN
    (210) parenthesis_gambiarra -> LPAREN . formal_parameter_list RPAREN
    (211) formal_parameter_list -> . formal_parameter
    (212) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (213) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    RPAREN          shift and go to state 268
    ID              shift and go to state 21

    formal_parameter_list          shift and go to state 269
    formal_parameter               shift and go to state 270
    identifier_list                shift and go to state 271
    identifier                     shift and go to state 51

state 223

    (185) procedure_call -> identifier LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ARROW           reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    INCREASE        reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DECREASE        reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MULCREASE       reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DIVCREASE       reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MODCREASE       reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    STRCAT          reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    AND             reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    OR              reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DIFF            reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    GREATEREQ       reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LESSEQ          reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    IN              reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ID              reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DCL             reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    SYN             reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    TYPE            reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    EXIT            reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RETURN          reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RESULT          reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    IF              reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DO              reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ABS             reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ASC             reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    NUM             reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    UPPER           reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LOWER           reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LENGTH          reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    READ            reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    PRINT           reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    $end            reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    END             reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    TO              reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    BY              reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    FI              reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 185 (procedure_call -> identifier LPAREN parameter_list RPAREN .)


state 224

    (187) parameter_list -> parameter_list COMMA . parameter
    (188) parameter -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    parameter                      shift and go to state 272
    expression                     shift and go to state 153
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 225

    (61) string_element -> identifier LBRACKET start_element RBRACKET .

    ARROW           reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ASSIGN          reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    INCREASE        reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DECREASE        reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MULCREASE       reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DIVCREASE       reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MODCREASE       reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LBRACKET        reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    TIMES           reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DIVIDE          reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MOD             reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    PLUS            reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MINUS           reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    STRCAT          reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    AND             reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    OR              reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    EQUAL           reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DIFF            reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    GREATER         reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    GREATEREQ       reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LESS            reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LESSEQ          reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    IN              reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    SEMI            reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    THEN            reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RPAREN          reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    COMMA           reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RBRACKET        reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    COLON           reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ID              reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DCL             reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    SYN             reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    TYPE            reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    EXIT            reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RETURN          reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RESULT          reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    IF              reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DO              reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ABS             reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ASC             reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    NUM             reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    UPPER           reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LOWER           reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LENGTH          reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    READ            reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    PRINT           reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    $end            reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    END             reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ELSE            reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ELSIF           reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    TO              reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DOWN            reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    BY              reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    FI              reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)
    WHILE           reduce using rule 61 (string_element -> identifier LBRACKET start_element RBRACKET .)


state 226

    (63) string_slice -> identifier LBRACKET left_element COLON . right_element RBRACKET
    (65) right_element -> . integer_expression
    (52) integer_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    identifier                     shift and go to state 88
    right_element                  shift and go to state 273
    integer_expression             shift and go to state 274
    expression                     shift and go to state 157
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 227

    (100) operand0 -> operand0 operator1 operand1 .
    (113) operand1 -> operand1 . operator2 operand2
    (114) operator2 -> . arithmetic_additive_operator
    (115) operator2 -> . string_concatenation_operator
    (116) arithmetic_additive_operator -> . PLUS
    (117) arithmetic_additive_operator -> . MINUS
    (118) string_concatenation_operator -> . STRCAT

    AND             reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    EQUAL           reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    DIFF            reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    GREATER         reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    GREATEREQ       reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    LESS            reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    LESSEQ          reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    ID              reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    DCL             reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    SYN             reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    TYPE            reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    EXIT            reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    RETURN          reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    RESULT          reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    IF              reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    DO              reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    ABS             reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    ASC             reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    NUM             reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    UPPER           reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    LOWER           reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    LENGTH          reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    READ            reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    PRINT           reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    $end            reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    END             reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    TO              reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    DOWN            reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    BY              reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    WHILE           reduce using rule 100 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 174
    MINUS           shift and go to state 175
    STRCAT          shift and go to state 176

    operator2                      shift and go to state 171
    arithmetic_additive_operator   shift and go to state 172
    string_concatenation_operator  shift and go to state 173

state 228

    (113) operand1 -> operand1 operator2 operand2 .
    (120) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (121) arithmetic_multiplicative_operator -> . TIMES
    (122) arithmetic_multiplicative_operator -> . DIVIDE
    (123) arithmetic_multiplicative_operator -> . MOD

    PLUS            reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    STRCAT          reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    EQUAL           reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    DIFF            reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    GREATER         reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    GREATEREQ       reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    LESS            reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    LESSEQ          reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    ID              reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    DCL             reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    SYN             reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    TYPE            reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    EXIT            reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    RETURN          reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    RESULT          reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    IF              reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    DO              reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    ABS             reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    ASC             reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    NUM             reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    UPPER           reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    LOWER           reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    LENGTH          reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    READ            reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    PRINT           reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    $end            reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    END             reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    ELSE            reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    ELSIF           reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    TO              reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    DOWN            reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    BY              reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    FI              reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    WHILE           reduce using rule 113 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 179
    DIVIDE          shift and go to state 180
    MOD             shift and go to state 181

    arithmetic_multiplicative_operator shift and go to state 178

state 229

    (92) conditional_expression -> IF boolean_expression then_expression . else_expression FI
    (93) conditional_expression -> IF boolean_expression then_expression . elsif_expression else_expression FI
    (96) else_expression -> . ELSE expression
    (97) elsif_expression -> . ELSIF boolean_expression then_expression
    (98) elsif_expression -> . elsif_expression ELSIF boolean_expression then_expression

    ELSE            shift and go to state 277
    ELSIF           shift and go to state 278

    else_expression                shift and go to state 275
    elsif_expression               shift and go to state 276

state 230

    (95) then_expression -> THEN . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    expression                     shift and go to state 279
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 231

    (120) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MOD             reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    STRCAT          reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUAL           reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIFF            reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATER         reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATEREQ       reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESS            reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESSEQ          reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ID              reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DCL             reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SYN             reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    TYPE            reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EXIT            reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RETURN          reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RESULT          reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IF              reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DO              reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ABS             reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ASC             reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NUM             reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    UPPER           reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LOWER           reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LENGTH          reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    READ            reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PRINT           reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    $end            reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    END             reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    TO              reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DOWN            reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    BY              reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    WHILE           reduce using rule 120 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 232

    (86) value_array_element -> array_primitive_value LBRACKET integer_expression . RBRACKET

    RBRACKET        shift and go to state 280


state 233

    (87) value_array_slice -> array_primitive_value LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 281


state 234

    (52) integer_expression -> expression .
    (39) lower_bound -> expression .

    RBRACKET        reduce using rule 52 (integer_expression -> expression .)
    COLON           reduce using rule 39 (lower_bound -> expression .)


state 235

    (89) parenthesized_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    STRCAT          reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIFF            reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    GREATEREQ       reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    LESSEQ          reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    DCL             reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    SYN             reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    EXIT            reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    RESULT          reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    ABS             reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    ASC             reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    NUM             reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    UPPER           reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    LOWER           reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    LENGTH          reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    READ            reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    END             reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    DOWN            reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 89 (parenthesized_expression -> LPAREN expression RPAREN .)


state 236

    (151) if_action -> IF boolean_expression then_clause FI .

    SEMI            reduce using rule 151 (if_action -> IF boolean_expression then_clause FI .)


state 237

    (152) if_action -> IF boolean_expression then_clause else_clause . FI

    FI              shift and go to state 282


state 238

    (157) else_clause -> ELSE .
    (158) else_clause -> ELSE . action_statement_list
    (155) action_statement_list -> . action_statement
    (156) action_statement_list -> . action_statement_list action_statement
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (134) label_id -> . identifier
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (17) identifier -> . ID
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    FI              reduce using rule 157 (else_clause -> ELSE .)
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    ID              shift and go to state 21
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    action_statement_list          shift and go to state 283
    action_statement               shift and go to state 116
    action                         shift and go to state 13
    label_id                       shift and go to state 118
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    identifier                     shift and go to state 14
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 239

    (159) else_clause -> ELSIF . boolean_expression then_clause
    (160) else_clause -> ELSIF . boolean_expression then_clause else_clause
    (94) boolean_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    boolean_expression             shift and go to state 284
    expression                     shift and go to state 110
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 240

    (154) then_clause -> THEN action_statement_list .
    (156) action_statement_list -> action_statement_list . action_statement
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (134) label_id -> . identifier
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (17) identifier -> . ID
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    FI              reduce using rule 154 (then_clause -> THEN action_statement_list .)
    ELSE            reduce using rule 154 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 154 (then_clause -> THEN action_statement_list .)
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    ID              shift and go to state 21
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    action_statement               shift and go to state 190
    action                         shift and go to state 13
    label_id                       shift and go to state 118
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    identifier                     shift and go to state 14
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 241

    (162) do_action -> DO control_part SEMI OD .

    SEMI            reduce using rule 162 (do_action -> DO control_part SEMI OD .)


state 242

    (164) do_action -> DO control_part SEMI action_statement_list . OD
    (156) action_statement_list -> action_statement_list . action_statement
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (134) label_id -> . identifier
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (17) identifier -> . ID
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    OD              shift and go to state 285
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    ID              shift and go to state 21
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    action_statement               shift and go to state 190
    action                         shift and go to state 13
    label_id                       shift and go to state 118
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    identifier                     shift and go to state 14
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 243

    (167) control_part -> FOR for_control while_control .

    SEMI            reduce using rule 167 (control_part -> FOR for_control while_control .)


state 244

    (171) step_enumeration -> loop_counter ASSIGN . start_value end_value
    (172) step_enumeration -> loop_counter ASSIGN . start_value step_value end_value
    (174) start_value -> . discrete_expression
    (178) discrete_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    start_value                    shift and go to state 286
    discrete_expression            shift and go to state 287
    expression                     shift and go to state 288
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 245

    (179) range_enumeration -> loop_counter IN . discrete_mode
    (31) discrete_mode -> . INT
    (32) discrete_mode -> . BOOL
    (33) discrete_mode -> . CHAR
    (34) discrete_mode -> . discrete_range_mode
    (35) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (36) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (17) identifier -> . ID

    INT             shift and go to state 130
    BOOL            shift and go to state 131
    CHAR            shift and go to state 132
    ID              shift and go to state 21

    discrete_mode                  shift and go to state 289
    discrete_range_mode            shift and go to state 133
    identifier                     shift and go to state 290

state 246

    (180) range_enumeration -> loop_counter DOWN . IN discrete_mode

    IN              shift and go to state 291


state 247

    (195) builtin_call -> builtin_name LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ARROW           reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    INCREASE        reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DECREASE        reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MULCREASE       reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVCREASE       reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MODCREASE       reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    STRCAT          reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIFF            reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GREATEREQ       reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LESSEQ          reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ID              reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DCL             reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    SYN             reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TYPE            reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EXIT            reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RETURN          reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RESULT          reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    IF              reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DO              reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ABS             reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ASC             reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    NUM             reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    UPPER           reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LOWER           reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LENGTH          reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    READ            reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    PRINT           reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    $end            reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    END             reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 195 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)


state 248

    (66) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ASSIGN          reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    INCREASE        reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DECREASE        reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MULCREASE       reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVCREASE       reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODCREASE       reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    STRCAT          reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIFF            reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATEREQ       reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESSEQ          reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ID              reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DCL             reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SYN             reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TYPE            reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EXIT            reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RETURN          reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RESULT          reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IF              reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DO              reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ABS             reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ASC             reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    NUM             reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    UPPER           reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LOWER           reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LENGTH          reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    READ            reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PRINT           reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    $end            reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    END             reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 66 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 249

    (68) expression_list -> expression_list COMMA . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    expression                     shift and go to state 292
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 250

    (69) array_slice -> array_location LBRACKET lower_bound COLON . upper_bound RBRACKET
    (40) upper_bound -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    array_location                 shift and go to state 38
    upper_bound                    shift and go to state 293
    expression                     shift and go to state 294
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 251

    (14) initialization -> ASSIGN expression .

    SEMI            reduce using rule 14 (initialization -> ASSIGN expression .)
    COMMA           reduce using rule 14 (initialization -> ASSIGN expression .)


state 252

    (35) discrete_range_mode -> identifier LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 295


state 253

    (38) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 296


state 254

    (39) lower_bound -> expression .

    COLON           reduce using rule 39 (lower_bound -> expression .)


state 255

    (36) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 297


state 256

    (44) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 298


state 257

    (45) string_length -> integer_literal .

    RBRACKET        reduce using rule 45 (string_length -> integer_literal .)


state 258

    (46) array_mode -> ARRAY LBRACKET index_mode_list . RBRACKET element_mode
    (48) index_mode_list -> index_mode_list . COMMA index_mode

    RBRACKET        shift and go to state 299
    COMMA           shift and go to state 300


state 259

    (47) index_mode_list -> index_mode .

    RBRACKET        reduce using rule 47 (index_mode_list -> index_mode .)
    COMMA           reduce using rule 47 (index_mode_list -> index_mode .)


state 260

    (49) index_mode -> discrete_mode .
    (36) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    RBRACKET        reduce using rule 49 (index_mode -> discrete_mode .)
    COMMA           reduce using rule 49 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 209


state 261

    (50) index_mode -> literal_range .

    RBRACKET        reduce using rule 50 (index_mode -> literal_range .)
    COMMA           reduce using rule 50 (index_mode -> literal_range .)


state 262

    (35) discrete_range_mode -> identifier . LPAREN literal_range RPAREN
    (53) location -> identifier .
    (61) string_element -> identifier . LBRACKET start_element RBRACKET
    (63) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET
    (184) procedure_call -> identifier . LPAREN RPAREN
    (185) procedure_call -> identifier . LPAREN parameter_list RPAREN

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          shift and go to state 301
    ARROW           reduce using rule 53 (location -> identifier .)
    TIMES           reduce using rule 53 (location -> identifier .)
    DIVIDE          reduce using rule 53 (location -> identifier .)
    MOD             reduce using rule 53 (location -> identifier .)
    PLUS            reduce using rule 53 (location -> identifier .)
    MINUS           reduce using rule 53 (location -> identifier .)
    STRCAT          reduce using rule 53 (location -> identifier .)
    AND             reduce using rule 53 (location -> identifier .)
    OR              reduce using rule 53 (location -> identifier .)
    EQUAL           reduce using rule 53 (location -> identifier .)
    DIFF            reduce using rule 53 (location -> identifier .)
    GREATER         reduce using rule 53 (location -> identifier .)
    GREATEREQ       reduce using rule 53 (location -> identifier .)
    LESS            reduce using rule 53 (location -> identifier .)
    LESSEQ          reduce using rule 53 (location -> identifier .)
    IN              reduce using rule 53 (location -> identifier .)
    COLON           reduce using rule 53 (location -> identifier .)
    LBRACKET        shift and go to state 61

  ! LBRACKET        [ reduce using rule 53 (location -> identifier .) ]


state 263

    (22) synonym_definition -> identifier_list mode ASSIGN expression .

    ID              reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    DCL             reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    SYN             reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    TYPE            reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    EXIT            reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    RETURN          reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    RESULT          reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    IF              reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    DO              reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    ABS             reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    ASC             reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    NUM             reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    UPPER           reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    LOWER           reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    LENGTH          reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    READ            reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    PRINT           reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    $end            reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)
    END             reduce using rule 22 (synonym_definition -> identifier_list mode ASSIGN expression .)


state 264

    (206) procedure_definition -> formal_procedure_head statement_list END .

    SEMI            reduce using rule 206 (procedure_definition -> formal_procedure_head statement_list END .)


state 265

    (207) formal_procedure_head -> PROC parenthesis_gambiarra SEMI .

    END             reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    DCL             reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    SYN             reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    TYPE            reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    ID              reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    EXIT            reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    RETURN          reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    RESULT          reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    IF              reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    DO              reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    ABS             reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    ASC             reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    NUM             reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    UPPER           reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    LOWER           reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    LENGTH          reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    READ            reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    PRINT           reduce using rule 207 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)


state 266

    (208) formal_procedure_head -> PROC parenthesis_gambiarra result_spec . SEMI

    SEMI            shift and go to state 302


state 267

    (217) result_spec -> RETURNS . LPAREN mode RPAREN
    (218) result_spec -> RETURNS . LPAREN mode result_attribute RPAREN

    LPAREN          shift and go to state 303


state 268

    (209) parenthesis_gambiarra -> LPAREN RPAREN .

    SEMI            reduce using rule 209 (parenthesis_gambiarra -> LPAREN RPAREN .)
    RETURNS         reduce using rule 209 (parenthesis_gambiarra -> LPAREN RPAREN .)


state 269

    (210) parenthesis_gambiarra -> LPAREN formal_parameter_list . RPAREN
    (212) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          shift and go to state 304
    COMMA           shift and go to state 305


state 270

    (211) formal_parameter_list -> formal_parameter .

    RPAREN          reduce using rule 211 (formal_parameter_list -> formal_parameter .)
    COMMA           reduce using rule 211 (formal_parameter_list -> formal_parameter .)


state 271

    (213) formal_parameter -> identifier_list . parameter_spec
    (16) identifier_list -> identifier_list . COMMA identifier
    (214) parameter_spec -> . mode
    (215) parameter_spec -> . mode parameter_attribute
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (37) mode_name -> . identifier
    (31) discrete_mode -> . INT
    (32) discrete_mode -> . BOOL
    (33) discrete_mode -> . CHAR
    (34) discrete_mode -> . discrete_range_mode
    (41) reference_mode -> . REF mode
    (42) composite_mode -> . string_mode
    (43) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (36) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (46) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    COMMA           shift and go to state 124
    INT             shift and go to state 130
    BOOL            shift and go to state 131
    CHAR            shift and go to state 132
    REF             shift and go to state 134
    ID              shift and go to state 21
    CHARS           shift and go to state 137
    ARRAY           shift and go to state 138

    parameter_spec                 shift and go to state 306
    identifier                     shift and go to state 125
    mode                           shift and go to state 307
    mode_name                      shift and go to state 126
    discrete_mode                  shift and go to state 127
    reference_mode                 shift and go to state 128
    composite_mode                 shift and go to state 129
    discrete_range_mode            shift and go to state 133
    string_mode                    shift and go to state 135
    array_mode                     shift and go to state 136

state 272

    (187) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 187 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 187 (parameter_list -> parameter_list COMMA parameter .)


state 273

    (63) string_slice -> identifier LBRACKET left_element COLON right_element . RBRACKET

    RBRACKET        shift and go to state 308


state 274

    (65) right_element -> integer_expression .

    RBRACKET        reduce using rule 65 (right_element -> integer_expression .)


state 275

    (92) conditional_expression -> IF boolean_expression then_expression else_expression . FI

    FI              shift and go to state 309


state 276

    (93) conditional_expression -> IF boolean_expression then_expression elsif_expression . else_expression FI
    (98) elsif_expression -> elsif_expression . ELSIF boolean_expression then_expression
    (96) else_expression -> . ELSE expression

    ELSIF           shift and go to state 311
    ELSE            shift and go to state 277

    else_expression                shift and go to state 310

state 277

    (96) else_expression -> ELSE . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    expression                     shift and go to state 312
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 278

    (97) elsif_expression -> ELSIF . boolean_expression then_expression
    (94) boolean_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    boolean_expression             shift and go to state 313
    expression                     shift and go to state 110
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 279

    (95) then_expression -> THEN expression .

    ELSE            reduce using rule 95 (then_expression -> THEN expression .)
    ELSIF           reduce using rule 95 (then_expression -> THEN expression .)


state 280

    (86) value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .

    TIMES           reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    DIVIDE          reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    MOD             reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    PLUS            reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    MINUS           reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    STRCAT          reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    AND             reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    OR              reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    EQUAL           reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    DIFF            reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    GREATER         reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    GREATEREQ       reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    LESS            reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    LESSEQ          reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    IN              reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    SEMI            reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    LBRACKET        reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    THEN            reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    RPAREN          reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    COMMA           reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    RBRACKET        reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    COLON           reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    ID              reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    DCL             reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    SYN             reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    TYPE            reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    EXIT            reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    RETURN          reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    RESULT          reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    IF              reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    DO              reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    ABS             reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    ASC             reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    NUM             reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    UPPER           reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    LOWER           reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    LENGTH          reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    READ            reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    PRINT           reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    $end            reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    END             reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    ELSE            reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    ELSIF           reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    TO              reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    DOWN            reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    BY              reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    FI              reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    WHILE           reduce using rule 86 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)


state 281

    (87) value_array_slice -> array_primitive_value LBRACKET lower_bound COLON . upper_bound RBRACKET
    (40) upper_bound -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    array_primitive_value          shift and go to state 100
    upper_bound                    shift and go to state 314
    expression                     shift and go to state 294
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    builtin_name                   shift and go to state 37

state 282

    (152) if_action -> IF boolean_expression then_clause else_clause FI .

    SEMI            reduce using rule 152 (if_action -> IF boolean_expression then_clause else_clause FI .)


state 283

    (158) else_clause -> ELSE action_statement_list .
    (156) action_statement_list -> action_statement_list . action_statement
    (132) action_statement -> . action SEMI
    (133) action_statement -> . label_id COLON action SEMI
    (135) action -> . bracketed_action
    (136) action -> . assignment_action
    (137) action -> . call_action
    (138) action -> . exit_action
    (139) action -> . return_action
    (140) action -> . result_action
    (134) label_id -> . identifier
    (141) bracketed_action -> . if_action
    (142) bracketed_action -> . do_action
    (143) assignment_action -> . location assigning_operator expression
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (189) exit_action -> . EXIT label_id
    (190) return_action -> . RETURN
    (191) return_action -> . RETURN result
    (192) result_action -> . RESULT result
    (17) identifier -> . ID
    (151) if_action -> . IF boolean_expression then_clause FI
    (152) if_action -> . IF boolean_expression then_clause else_clause FI
    (161) do_action -> . DO OD
    (162) do_action -> . DO control_part SEMI OD
    (163) do_action -> . DO action_statement_list OD
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT
    (70) array_location -> . location

    FI              reduce using rule 158 (else_clause -> ELSE action_statement_list .)
    EXIT            shift and go to state 27
    RETURN          shift and go to state 28
    RESULT          shift and go to state 29
    ID              shift and go to state 21
    IF              shift and go to state 30
    DO              shift and go to state 31
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    action_statement               shift and go to state 190
    action                         shift and go to state 13
    label_id                       shift and go to state 118
    bracketed_action               shift and go to state 15
    assignment_action              shift and go to state 16
    call_action                    shift and go to state 17
    exit_action                    shift and go to state 18
    return_action                  shift and go to state 19
    result_action                  shift and go to state 20
    identifier                     shift and go to state 14
    if_action                      shift and go to state 22
    do_action                      shift and go to state 23
    location                       shift and go to state 24
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    builtin_name                   shift and go to state 37
    array_location                 shift and go to state 38

state 284

    (159) else_clause -> ELSIF boolean_expression . then_clause
    (160) else_clause -> ELSIF boolean_expression . then_clause else_clause
    (153) then_clause -> . THEN
    (154) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 187

    then_clause                    shift and go to state 315

state 285

    (164) do_action -> DO control_part SEMI action_statement_list OD .

    SEMI            reduce using rule 164 (do_action -> DO control_part SEMI action_statement_list OD .)


state 286

    (171) step_enumeration -> loop_counter ASSIGN start_value . end_value
    (172) step_enumeration -> loop_counter ASSIGN start_value . step_value end_value
    (176) end_value -> . TO discrete_expression
    (177) end_value -> . DOWN TO discrete_expression
    (175) step_value -> . BY integer_expression

    TO              shift and go to state 318
    DOWN            shift and go to state 319
    BY              shift and go to state 320

    end_value                      shift and go to state 316
    step_value                     shift and go to state 317

state 287

    (174) start_value -> discrete_expression .

    TO              reduce using rule 174 (start_value -> discrete_expression .)
    DOWN            reduce using rule 174 (start_value -> discrete_expression .)
    BY              reduce using rule 174 (start_value -> discrete_expression .)


state 288

    (178) discrete_expression -> expression .

    TO              reduce using rule 178 (discrete_expression -> expression .)
    DOWN            reduce using rule 178 (discrete_expression -> expression .)
    BY              reduce using rule 178 (discrete_expression -> expression .)
    WHILE           reduce using rule 178 (discrete_expression -> expression .)
    SEMI            reduce using rule 178 (discrete_expression -> expression .)


state 289

    (179) range_enumeration -> loop_counter IN discrete_mode .
    (36) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 179 (range_enumeration -> loop_counter IN discrete_mode .)
    SEMI            reduce using rule 179 (range_enumeration -> loop_counter IN discrete_mode .)
    LPAREN          shift and go to state 209


state 290

    (35) discrete_range_mode -> identifier . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 208


state 291

    (180) range_enumeration -> loop_counter DOWN IN . discrete_mode
    (31) discrete_mode -> . INT
    (32) discrete_mode -> . BOOL
    (33) discrete_mode -> . CHAR
    (34) discrete_mode -> . discrete_range_mode
    (35) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (36) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (17) identifier -> . ID

    INT             shift and go to state 130
    BOOL            shift and go to state 131
    CHAR            shift and go to state 132
    ID              shift and go to state 21

    discrete_mode                  shift and go to state 321
    discrete_range_mode            shift and go to state 133
    identifier                     shift and go to state 290

state 292

    (68) expression_list -> expression_list COMMA expression .

    RBRACKET        reduce using rule 68 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 68 (expression_list -> expression_list COMMA expression .)


state 293

    (69) array_slice -> array_location LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 322


state 294

    (40) upper_bound -> expression .

    RBRACKET        reduce using rule 40 (upper_bound -> expression .)
    RPAREN          reduce using rule 40 (upper_bound -> expression .)
    COMMA           reduce using rule 40 (upper_bound -> expression .)


state 295

    (35) discrete_range_mode -> identifier LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 35 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 35 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 35 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 35 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    LOC             reduce using rule 35 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 35 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 35 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 35 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)


state 296

    (38) literal_range -> lower_bound COLON . upper_bound
    (40) upper_bound -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    upper_bound                    shift and go to state 323
    expression                     shift and go to state 294
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 297

    (36) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 36 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 36 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 36 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 36 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 36 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 36 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 36 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 36 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 298

    (44) string_mode -> CHARS LBRACKET string_length RBRACKET .

    ASSIGN          reduce using rule 44 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 44 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    COMMA           reduce using rule 44 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    LOC             reduce using rule 44 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    RPAREN          reduce using rule 44 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 299

    (46) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET . element_mode
    (51) element_mode -> . mode
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (37) mode_name -> . identifier
    (31) discrete_mode -> . INT
    (32) discrete_mode -> . BOOL
    (33) discrete_mode -> . CHAR
    (34) discrete_mode -> . discrete_range_mode
    (41) reference_mode -> . REF mode
    (42) composite_mode -> . string_mode
    (43) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (36) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (46) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    INT             shift and go to state 130
    BOOL            shift and go to state 131
    CHAR            shift and go to state 132
    REF             shift and go to state 134
    ID              shift and go to state 21
    CHARS           shift and go to state 137
    ARRAY           shift and go to state 138

    element_mode                   shift and go to state 324
    mode                           shift and go to state 325
    mode_name                      shift and go to state 126
    discrete_mode                  shift and go to state 127
    reference_mode                 shift and go to state 128
    composite_mode                 shift and go to state 129
    identifier                     shift and go to state 125
    discrete_range_mode            shift and go to state 133
    string_mode                    shift and go to state 135
    array_mode                     shift and go to state 136

state 300

    (48) index_mode_list -> index_mode_list COMMA . index_mode
    (49) index_mode -> . discrete_mode
    (50) index_mode -> . literal_range
    (31) discrete_mode -> . INT
    (32) discrete_mode -> . BOOL
    (33) discrete_mode -> . CHAR
    (34) discrete_mode -> . discrete_range_mode
    (38) literal_range -> . lower_bound COLON upper_bound
    (35) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (36) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (39) lower_bound -> . expression
    (17) identifier -> . ID
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    INT             shift and go to state 130
    BOOL            shift and go to state 131
    CHAR            shift and go to state 132
    ID              shift and go to state 21
    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    index_mode                     shift and go to state 326
    discrete_mode                  shift and go to state 260
    literal_range                  shift and go to state 261
    discrete_range_mode            shift and go to state 133
    lower_bound                    shift and go to state 253
    identifier                     shift and go to state 262
    expression                     shift and go to state 254
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 301

    (35) discrete_range_mode -> identifier LPAREN . literal_range RPAREN
    (184) procedure_call -> identifier LPAREN . RPAREN
    (185) procedure_call -> identifier LPAREN . parameter_list RPAREN
    (38) literal_range -> . lower_bound COLON upper_bound
    (186) parameter_list -> . parameter
    (187) parameter_list -> . parameter_list COMMA parameter
    (39) lower_bound -> . expression
    (188) parameter -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    RPAREN          shift and go to state 150
    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    identifier                     shift and go to state 88
    literal_range                  shift and go to state 252
    parameter_list                 shift and go to state 151
    lower_bound                    shift and go to state 253
    parameter                      shift and go to state 152
    expression                     shift and go to state 327
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 302

    (208) formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .

    END             reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    DCL             reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    SYN             reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    TYPE            reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    ID              reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    EXIT            reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    RETURN          reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    RESULT          reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    IF              reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    DO              reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    ABS             reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    ASC             reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    NUM             reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    UPPER           reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    LOWER           reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    LENGTH          reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    READ            reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    PRINT           reduce using rule 208 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)


state 303

    (217) result_spec -> RETURNS LPAREN . mode RPAREN
    (218) result_spec -> RETURNS LPAREN . mode result_attribute RPAREN
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (37) mode_name -> . identifier
    (31) discrete_mode -> . INT
    (32) discrete_mode -> . BOOL
    (33) discrete_mode -> . CHAR
    (34) discrete_mode -> . discrete_range_mode
    (41) reference_mode -> . REF mode
    (42) composite_mode -> . string_mode
    (43) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (36) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (46) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    INT             shift and go to state 130
    BOOL            shift and go to state 131
    CHAR            shift and go to state 132
    REF             shift and go to state 134
    ID              shift and go to state 21
    CHARS           shift and go to state 137
    ARRAY           shift and go to state 138

    mode                           shift and go to state 328
    mode_name                      shift and go to state 126
    discrete_mode                  shift and go to state 127
    reference_mode                 shift and go to state 128
    composite_mode                 shift and go to state 129
    identifier                     shift and go to state 125
    discrete_range_mode            shift and go to state 133
    string_mode                    shift and go to state 135
    array_mode                     shift and go to state 136

state 304

    (210) parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN .

    SEMI            reduce using rule 210 (parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN .)
    RETURNS         reduce using rule 210 (parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN .)


state 305

    (212) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (213) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 21

    formal_parameter               shift and go to state 329
    identifier_list                shift and go to state 271
    identifier                     shift and go to state 51

state 306

    (213) formal_parameter -> identifier_list parameter_spec .

    RPAREN          reduce using rule 213 (formal_parameter -> identifier_list parameter_spec .)
    COMMA           reduce using rule 213 (formal_parameter -> identifier_list parameter_spec .)


state 307

    (214) parameter_spec -> mode .
    (215) parameter_spec -> mode . parameter_attribute
    (216) parameter_attribute -> . LOC

    RPAREN          reduce using rule 214 (parameter_spec -> mode .)
    COMMA           reduce using rule 214 (parameter_spec -> mode .)
    LOC             shift and go to state 331

    parameter_attribute            shift and go to state 330

state 308

    (63) string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .

    ARROW           reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ASSIGN          reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    INCREASE        reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DECREASE        reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MULCREASE       reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIVCREASE       reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MODCREASE       reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LBRACKET        reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TIMES           reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIVIDE          reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MOD             reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    PLUS            reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MINUS           reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    STRCAT          reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    AND             reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    OR              reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    EQUAL           reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIFF            reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GREATER         reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GREATEREQ       reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LESS            reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LESSEQ          reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    IN              reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    SEMI            reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    THEN            reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RPAREN          reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COMMA           reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RBRACKET        reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COLON           reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ID              reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DCL             reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    SYN             reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TYPE            reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    EXIT            reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RETURN          reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RESULT          reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    IF              reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DO              reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ABS             reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ASC             reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    NUM             reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    UPPER           reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LOWER           reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LENGTH          reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    READ            reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    PRINT           reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    $end            reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    END             reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSE            reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSIF           reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TO              reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DOWN            reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    BY              reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    FI              reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    WHILE           reduce using rule 63 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)


state 309

    (92) conditional_expression -> IF boolean_expression then_expression else_expression FI .

    SEMI            reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    THEN            reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RPAREN          reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COMMA           reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COLON           reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ID              reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    DCL             reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    SYN             reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    TYPE            reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    EXIT            reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RETURN          reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RESULT          reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    IF              reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    DO              reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ABS             reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ASC             reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    NUM             reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    UPPER           reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    LOWER           reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    LENGTH          reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    READ            reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    PRINT           reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    $end            reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    END             reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSE            reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSIF           reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    TO              reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    DOWN            reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    BY              reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    FI              reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    WHILE           reduce using rule 92 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)


state 310

    (93) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 332


state 311

    (98) elsif_expression -> elsif_expression ELSIF . boolean_expression then_expression
    (94) boolean_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    boolean_expression             shift and go to state 333
    expression                     shift and go to state 110
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 312

    (96) else_expression -> ELSE expression .

    FI              reduce using rule 96 (else_expression -> ELSE expression .)


state 313

    (97) elsif_expression -> ELSIF boolean_expression . then_expression
    (95) then_expression -> . THEN expression

    THEN            shift and go to state 230

    then_expression                shift and go to state 334

state 314

    (87) value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 335


state 315

    (159) else_clause -> ELSIF boolean_expression then_clause .
    (160) else_clause -> ELSIF boolean_expression then_clause . else_clause
    (157) else_clause -> . ELSE
    (158) else_clause -> . ELSE action_statement_list
    (159) else_clause -> . ELSIF boolean_expression then_clause
    (160) else_clause -> . ELSIF boolean_expression then_clause else_clause

    FI              reduce using rule 159 (else_clause -> ELSIF boolean_expression then_clause .)
    ELSE            shift and go to state 238
    ELSIF           shift and go to state 239

    else_clause                    shift and go to state 336

state 316

    (171) step_enumeration -> loop_counter ASSIGN start_value end_value .

    WHILE           reduce using rule 171 (step_enumeration -> loop_counter ASSIGN start_value end_value .)
    SEMI            reduce using rule 171 (step_enumeration -> loop_counter ASSIGN start_value end_value .)


state 317

    (172) step_enumeration -> loop_counter ASSIGN start_value step_value . end_value
    (176) end_value -> . TO discrete_expression
    (177) end_value -> . DOWN TO discrete_expression

    TO              shift and go to state 318
    DOWN            shift and go to state 319

    end_value                      shift and go to state 337

state 318

    (176) end_value -> TO . discrete_expression
    (178) discrete_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    discrete_expression            shift and go to state 338
    expression                     shift and go to state 288
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 319

    (177) end_value -> DOWN . TO discrete_expression

    TO              shift and go to state 339


state 320

    (175) step_value -> BY . integer_expression
    (52) integer_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    integer_expression             shift and go to state 340
    expression                     shift and go to state 157
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 321

    (180) range_enumeration -> loop_counter DOWN IN discrete_mode .
    (36) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 180 (range_enumeration -> loop_counter DOWN IN discrete_mode .)
    SEMI            reduce using rule 180 (range_enumeration -> loop_counter DOWN IN discrete_mode .)
    LPAREN          shift and go to state 209


state 322

    (69) array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .

    ARROW           reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ASSIGN          reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    INCREASE        reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DECREASE        reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MULCREASE       reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVCREASE       reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MODCREASE       reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TIMES           reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MOD             reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    STRCAT          reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIFF            reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATEREQ       reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESSEQ          reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ID              reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DCL             reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SYN             reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TYPE            reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EXIT            reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RETURN          reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RESULT          reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IF              reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DO              reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ABS             reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ASC             reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    NUM             reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    UPPER           reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LOWER           reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LENGTH          reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    READ            reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PRINT           reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    $end            reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    END             reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TO              reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DOWN            reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    BY              reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    WHILE           reduce using rule 69 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 323

    (38) literal_range -> lower_bound COLON upper_bound .

    RPAREN          reduce using rule 38 (literal_range -> lower_bound COLON upper_bound .)
    RBRACKET        reduce using rule 38 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 38 (literal_range -> lower_bound COLON upper_bound .)


state 324

    (46) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .

    ASSIGN          reduce using rule 46 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 46 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    COMMA           reduce using rule 46 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    LOC             reduce using rule 46 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    RPAREN          reduce using rule 46 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)


state 325

    (51) element_mode -> mode .

    ASSIGN          reduce using rule 51 (element_mode -> mode .)
    SEMI            reduce using rule 51 (element_mode -> mode .)
    COMMA           reduce using rule 51 (element_mode -> mode .)
    LOC             reduce using rule 51 (element_mode -> mode .)
    RPAREN          reduce using rule 51 (element_mode -> mode .)


state 326

    (48) index_mode_list -> index_mode_list COMMA index_mode .

    RBRACKET        reduce using rule 48 (index_mode_list -> index_mode_list COMMA index_mode .)
    COMMA           reduce using rule 48 (index_mode_list -> index_mode_list COMMA index_mode .)


state 327

    (39) lower_bound -> expression .
    (188) parameter -> expression .

    COLON           reduce using rule 39 (lower_bound -> expression .)
    RPAREN          reduce using rule 188 (parameter -> expression .)
    COMMA           reduce using rule 188 (parameter -> expression .)


state 328

    (217) result_spec -> RETURNS LPAREN mode . RPAREN
    (218) result_spec -> RETURNS LPAREN mode . result_attribute RPAREN
    (219) result_attribute -> . LOC

    RPAREN          shift and go to state 341
    LOC             shift and go to state 343

    result_attribute               shift and go to state 342

state 329

    (212) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    RPAREN          reduce using rule 212 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    COMMA           reduce using rule 212 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 330

    (215) parameter_spec -> mode parameter_attribute .

    RPAREN          reduce using rule 215 (parameter_spec -> mode parameter_attribute .)
    COMMA           reduce using rule 215 (parameter_spec -> mode parameter_attribute .)


state 331

    (216) parameter_attribute -> LOC .

    RPAREN          reduce using rule 216 (parameter_attribute -> LOC .)
    COMMA           reduce using rule 216 (parameter_attribute -> LOC .)


state 332

    (93) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .

    SEMI            reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    THEN            reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ID              reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    DCL             reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    SYN             reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    TYPE            reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    EXIT            reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RETURN          reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RESULT          reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    IF              reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    DO              reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ABS             reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ASC             reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    NUM             reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    UPPER           reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    LOWER           reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    LENGTH          reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    READ            reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    PRINT           reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    $end            reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    END             reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSE            reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    TO              reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    DOWN            reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    BY              reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    WHILE           reduce using rule 93 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)


state 333

    (98) elsif_expression -> elsif_expression ELSIF boolean_expression . then_expression
    (95) then_expression -> . THEN expression

    THEN            shift and go to state 230

    then_expression                shift and go to state 344

state 334

    (97) elsif_expression -> ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 97 (elsif_expression -> ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 97 (elsif_expression -> ELSIF boolean_expression then_expression .)


state 335

    (87) value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .

    TIMES           reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MOD             reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    STRCAT          reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIFF            reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATEREQ       reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESSEQ          reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ID              reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DCL             reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SYN             reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TYPE            reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EXIT            reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RETURN          reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RESULT          reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IF              reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DO              reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ABS             reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ASC             reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    NUM             reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    UPPER           reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LOWER           reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LENGTH          reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    READ            reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PRINT           reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    $end            reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    END             reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TO              reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DOWN            reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    BY              reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    WHILE           reduce using rule 87 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 336

    (160) else_clause -> ELSIF boolean_expression then_clause else_clause .

    FI              reduce using rule 160 (else_clause -> ELSIF boolean_expression then_clause else_clause .)


state 337

    (172) step_enumeration -> loop_counter ASSIGN start_value step_value end_value .

    WHILE           reduce using rule 172 (step_enumeration -> loop_counter ASSIGN start_value step_value end_value .)
    SEMI            reduce using rule 172 (step_enumeration -> loop_counter ASSIGN start_value step_value end_value .)


state 338

    (176) end_value -> TO discrete_expression .

    WHILE           reduce using rule 176 (end_value -> TO discrete_expression .)
    SEMI            reduce using rule 176 (end_value -> TO discrete_expression .)


state 339

    (177) end_value -> DOWN TO . discrete_expression
    (178) discrete_expression -> . expression
    (90) expression -> . operand0
    (91) expression -> . conditional_expression
    (99) operand0 -> . operand1
    (100) operand0 -> . operand0 operator1 operand1
    (92) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (93) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (112) operand1 -> . operand2
    (113) operand1 -> . operand1 operator2 operand2
    (119) operand2 -> . operand3
    (120) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (124) operand3 -> . operand4
    (125) operand3 -> . monadic_operator operand4
    (128) operand4 -> . location
    (129) operand4 -> . referenced_location
    (130) operand4 -> . primitive_value
    (126) monadic_operator -> . MINUS
    (127) monadic_operator -> . NOT
    (53) location -> . identifier
    (54) location -> . dereferenced_reference
    (55) location -> . string_element
    (56) location -> . string_slice
    (57) location -> . array_element
    (58) location -> . array_slice
    (59) location -> . call_action
    (131) referenced_location -> . ARROW location
    (71) primitive_value -> . literal
    (72) primitive_value -> . value_array_element
    (73) primitive_value -> . value_array_slice
    (74) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (60) dereferenced_reference -> . location ARROW
    (61) string_element -> . identifier LBRACKET start_element RBRACKET
    (63) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (66) array_element -> . array_location LBRACKET expression_list RBRACKET
    (69) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (182) call_action -> . procedure_call
    (183) call_action -> . builtin_call
    (75) literal -> . integer_literal
    (76) literal -> . boolean_literal
    (77) literal -> . character_literal
    (78) literal -> . empty_literal
    (79) literal -> . character_string_literal
    (86) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (87) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (89) parenthesized_expression -> . LPAREN expression RPAREN
    (70) array_location -> . location
    (184) procedure_call -> . identifier LPAREN RPAREN
    (185) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (194) builtin_call -> . builtin_name LPAREN RPAREN
    (195) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (80) integer_literal -> . ICONST
    (81) boolean_literal -> . FALSE
    (82) boolean_literal -> . TRUE
    (83) character_literal -> . CCONST
    (84) empty_literal -> . NULL
    (85) character_string_literal -> . SCONST
    (88) array_primitive_value -> . primitive_value
    (196) builtin_name -> . ABS
    (197) builtin_name -> . ASC
    (198) builtin_name -> . NUM
    (199) builtin_name -> . UPPER
    (200) builtin_name -> . LOWER
    (201) builtin_name -> . LENGTH
    (202) builtin_name -> . READ
    (203) builtin_name -> . PRINT

    IF              shift and go to state 78
    MINUS           shift and go to state 86
    NOT             shift and go to state 87
    ARROW           shift and go to state 90
    ID              shift and go to state 21
    LPAREN          shift and go to state 101
    ICONST          shift and go to state 102
    FALSE           shift and go to state 103
    TRUE            shift and go to state 104
    CCONST          shift and go to state 105
    NULL            shift and go to state 106
    SCONST          shift and go to state 107
    ABS             shift and go to state 39
    ASC             shift and go to state 40
    NUM             shift and go to state 41
    UPPER           shift and go to state 42
    LOWER           shift and go to state 43
    LENGTH          shift and go to state 44
    READ            shift and go to state 45
    PRINT           shift and go to state 46

    discrete_expression            shift and go to state 345
    expression                     shift and go to state 288
    operand0                       shift and go to state 75
    conditional_expression         shift and go to state 76
    operand1                       shift and go to state 77
    operand2                       shift and go to state 79
    operand3                       shift and go to state 80
    operand4                       shift and go to state 81
    monadic_operator               shift and go to state 82
    location                       shift and go to state 83
    referenced_location            shift and go to state 84
    primitive_value                shift and go to state 85
    identifier                     shift and go to state 88
    dereferenced_reference         shift and go to state 32
    string_element                 shift and go to state 33
    string_slice                   shift and go to state 34
    array_element                  shift and go to state 35
    array_slice                    shift and go to state 36
    call_action                    shift and go to state 89
    literal                        shift and go to state 91
    value_array_element            shift and go to state 92
    value_array_slice              shift and go to state 93
    parenthesized_expression       shift and go to state 94
    array_location                 shift and go to state 38
    procedure_call                 shift and go to state 25
    builtin_call                   shift and go to state 26
    integer_literal                shift and go to state 95
    boolean_literal                shift and go to state 96
    character_literal              shift and go to state 97
    empty_literal                  shift and go to state 98
    character_string_literal       shift and go to state 99
    array_primitive_value          shift and go to state 100
    builtin_name                   shift and go to state 37

state 340

    (175) step_value -> BY integer_expression .

    TO              reduce using rule 175 (step_value -> BY integer_expression .)
    DOWN            reduce using rule 175 (step_value -> BY integer_expression .)


state 341

    (217) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMI            reduce using rule 217 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 342

    (218) result_spec -> RETURNS LPAREN mode result_attribute . RPAREN

    RPAREN          shift and go to state 346


state 343

    (219) result_attribute -> LOC .

    RPAREN          reduce using rule 219 (result_attribute -> LOC .)


state 344

    (98) elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 98 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 98 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)


state 345

    (177) end_value -> DOWN TO discrete_expression .

    WHILE           reduce using rule 177 (end_value -> DOWN TO discrete_expression .)
    SEMI            reduce using rule 177 (end_value -> DOWN TO discrete_expression .)


state 346

    (218) result_spec -> RETURNS LPAREN mode result_attribute RPAREN .

    SEMI            reduce using rule 218 (result_spec -> RETURNS LPAREN mode result_attribute RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 14 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 88 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 149 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 262 resolved as shift
