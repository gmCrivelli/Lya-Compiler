Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     statement -> newmode_statement
Rule 7     statement -> procedure_statement
Rule 8     statement -> action_statement
Rule 9     declaration_statement -> DCL declaration_list SEMI
Rule 10    declaration_list -> declaration
Rule 11    declaration_list -> declaration_list COMMA declaration
Rule 12    declaration -> identifier_list mode
Rule 13    declaration -> identifier_list mode initialization
Rule 14    initialization -> ASSIGN expression
Rule 15    identifier_list -> identifier
Rule 16    identifier_list -> identifier_list COMMA identifier
Rule 17    identifier -> ID
Rule 18    synonym_statement -> SYN synonym_list SEMI
Rule 19    synonym_list -> synonym_definition
Rule 20    synonym_list -> synonym_list synonym_definition
Rule 21    synonym_definition -> identifier_list initialization
Rule 22    synonym_definition -> identifier_list mode initialization
Rule 23    newmode_statement -> TYPE newmode_list SEMI
Rule 24    newmode_list -> mode_definition
Rule 25    newmode_list -> newmode_list COMMA mode_definition
Rule 26    mode_definition -> identifier_list ASSIGN mode
Rule 27    mode -> mode_name
Rule 28    mode -> discrete_mode
Rule 29    mode -> reference_mode
Rule 30    mode -> composite_mode
Rule 31    discrete_mode -> integer_mode
Rule 32    discrete_mode -> boolean_mode
Rule 33    discrete_mode -> character_mode
Rule 34    discrete_mode -> discrete_range_mode
Rule 35    integer_mode -> INT
Rule 36    boolean_mode -> BOOL
Rule 37    character_mode -> CHAR
Rule 38    discrete_range_mode -> identifier LPAREN literal_range RPAREN
Rule 39    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 40    mode_name -> identifier
Rule 41    literal_range -> lower_bound COLON upper_bound
Rule 42    lower_bound -> expression
Rule 43    upper_bound -> expression
Rule 44    reference_mode -> REF mode
Rule 45    composite_mode -> string_mode
Rule 46    composite_mode -> array_mode
Rule 47    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 48    string_length -> integer_literal
Rule 49    array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode
Rule 50    index_mode_list -> index_mode
Rule 51    index_mode_list -> index_mode_list COMMA index_mode
Rule 52    index_mode -> discrete_mode
Rule 53    index_mode -> literal_range
Rule 54    element_mode -> mode
Rule 55    integer_expression -> expression
Rule 56    location -> identifier
Rule 57    location -> dereferenced_reference
Rule 58    location -> string_element
Rule 59    location -> string_slice
Rule 60    location -> array_element
Rule 61    location -> array_slice
Rule 62    location -> call_action
Rule 63    dereferenced_reference -> location ARROW
Rule 64    string_element -> identifier LBRACKET start_element RBRACKET
Rule 65    start_element -> integer_expression
Rule 66    string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET
Rule 67    left_element -> integer_expression
Rule 68    right_element -> integer_expression
Rule 69    array_element -> array_location LBRACKET expression_list RBRACKET
Rule 70    expression_list -> expression
Rule 71    expression_list -> expression_list COMMA expression
Rule 72    array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 73    array_location -> location
Rule 74    primitive_value -> literal
Rule 75    primitive_value -> value_array_element
Rule 76    primitive_value -> value_array_slice
Rule 77    primitive_value -> parenthesized_expression
Rule 78    literal -> integer_literal
Rule 79    literal -> boolean_literal
Rule 80    literal -> character_literal
Rule 81    literal -> empty_literal
Rule 82    literal -> character_string_literal
Rule 83    integer_literal -> ICONST
Rule 84    boolean_literal -> FALSE
Rule 85    boolean_literal -> TRUE
Rule 86    character_literal -> CCONST
Rule 87    empty_literal -> NULL
Rule 88    character_string_literal -> SCONST
Rule 89    value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET
Rule 90    value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 91    array_primitive_value -> primitive_value
Rule 92    parenthesized_expression -> LPAREN expression RPAREN
Rule 93    expression -> operand0
Rule 94    expression -> conditional_expression
Rule 95    conditional_expression -> IF boolean_expression then_expression else_expression FI
Rule 96    conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI
Rule 97    boolean_expression -> expression
Rule 98    then_expression -> THEN expression
Rule 99    else_expression -> ELSE expression
Rule 100   elsif_expression -> ELSIF boolean_expression then_expression
Rule 101   elsif_expression -> elsif_expression ELSIF boolean_expression then_expression
Rule 102   operand0 -> operand1
Rule 103   operand0 -> operand0 operator1 operand1
Rule 104   operator1 -> relational_operator
Rule 105   operator1 -> membership_operator
Rule 106   relational_operator -> AND
Rule 107   relational_operator -> OR
Rule 108   relational_operator -> EQUAL
Rule 109   relational_operator -> DIFF
Rule 110   relational_operator -> GREATER
Rule 111   relational_operator -> GREATEREQ
Rule 112   relational_operator -> LESS
Rule 113   relational_operator -> LESSEQ
Rule 114   membership_operator -> IN
Rule 115   operand1 -> operand2
Rule 116   operand1 -> operand1 operator2 operand2
Rule 117   operator2 -> arithmetic_additive_operator
Rule 118   operator2 -> string_concatenation_operator
Rule 119   arithmetic_additive_operator -> PLUS
Rule 120   arithmetic_additive_operator -> MINUS
Rule 121   string_concatenation_operator -> STRCAT
Rule 122   operand2 -> operand3
Rule 123   operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 124   arithmetic_multiplicative_operator -> TIMES
Rule 125   arithmetic_multiplicative_operator -> DIVIDE
Rule 126   arithmetic_multiplicative_operator -> MOD
Rule 127   operand3 -> operand4
Rule 128   operand3 -> monadic_operator operand4
Rule 129   monadic_operator -> MINUS
Rule 130   monadic_operator -> NOT
Rule 131   operand4 -> location
Rule 132   operand4 -> referenced_location
Rule 133   operand4 -> primitive_value
Rule 134   referenced_location -> ARROW location
Rule 135   action_statement -> action SEMI
Rule 136   action_statement -> label_id COLON action SEMI
Rule 137   label_id -> identifier
Rule 138   action -> bracketed_action
Rule 139   action -> assignment_action
Rule 140   action -> call_action
Rule 141   action -> exit_action
Rule 142   action -> return_action
Rule 143   action -> result_action
Rule 144   bracketed_action -> if_action
Rule 145   bracketed_action -> do_action
Rule 146   assignment_action -> location assigning_operator expression
Rule 147   assigning_operator -> ASSIGN
Rule 148   assigning_operator -> closed_dyadic_operator
Rule 149   closed_dyadic_operator -> INCREASE
Rule 150   closed_dyadic_operator -> DECREASE
Rule 151   closed_dyadic_operator -> MULCREASE
Rule 152   closed_dyadic_operator -> DIVCREASE
Rule 153   closed_dyadic_operator -> MODCREASE
Rule 154   if_action -> IF boolean_expression then_clause FI
Rule 155   if_action -> IF boolean_expression then_clause else_clause FI
Rule 156   then_clause -> THEN
Rule 157   then_clause -> THEN action_statement_list
Rule 158   action_statement_list -> action_statement
Rule 159   action_statement_list -> action_statement_list action_statement
Rule 160   else_clause -> ELSE
Rule 161   else_clause -> ELSE action_statement_list
Rule 162   else_clause -> ELSIF boolean_expression then_clause
Rule 163   else_clause -> ELSIF boolean_expression then_clause else_clause
Rule 164   do_action -> DO OD
Rule 165   do_action -> DO control_part SEMI OD
Rule 166   do_action -> DO action_statement_list OD
Rule 167   do_action -> DO control_part SEMI action_statement_list OD
Rule 168   control_part -> while_control
Rule 169   control_part -> FOR for_control
Rule 170   control_part -> FOR for_control while_control
Rule 171   for_control -> iteration
Rule 172   iteration -> step_enumeration
Rule 173   iteration -> range_enumeration
Rule 174   step_enumeration -> loop_counter ASSIGN start_value end_value
Rule 175   step_enumeration -> loop_counter ASSIGN start_value step_value end_value
Rule 176   loop_counter -> identifier
Rule 177   start_value -> discrete_expression
Rule 178   step_value -> BY integer_expression
Rule 179   end_value -> TO discrete_expression
Rule 180   end_value -> DOWN TO discrete_expression
Rule 181   discrete_expression -> expression
Rule 182   range_enumeration -> loop_counter IN discrete_mode
Rule 183   range_enumeration -> loop_counter DOWN IN discrete_mode
Rule 184   while_control -> WHILE boolean_expression
Rule 185   call_action -> procedure_call
Rule 186   call_action -> builtin_call
Rule 187   procedure_call -> identifier LPAREN RPAREN
Rule 188   procedure_call -> identifier LPAREN parameter_list RPAREN
Rule 189   parameter_list -> parameter
Rule 190   parameter_list -> parameter_list COMMA parameter
Rule 191   parameter -> expression
Rule 192   exit_action -> EXIT label_id
Rule 193   return_action -> RETURN
Rule 194   return_action -> RETURN result
Rule 195   result_action -> RESULT result
Rule 196   result -> expression
Rule 197   builtin_call -> builtin_name LPAREN RPAREN
Rule 198   builtin_call -> builtin_name LPAREN parameter_list RPAREN
Rule 199   builtin_name -> ABS
Rule 200   builtin_name -> ASC
Rule 201   builtin_name -> NUM
Rule 202   builtin_name -> UPPER
Rule 203   builtin_name -> LOWER
Rule 204   builtin_name -> LENGTH
Rule 205   builtin_name -> READ
Rule 206   builtin_name -> PRINT
Rule 207   procedure_statement -> label_id COLON procedure_definition SEMI
Rule 208   procedure_definition -> formal_procedure_head END
Rule 209   procedure_definition -> formal_procedure_head statement_list END
Rule 210   formal_procedure_head -> PROC parenthesis_gambiarra SEMI
Rule 211   formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI
Rule 212   parenthesis_gambiarra -> LPAREN RPAREN
Rule 213   parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN
Rule 214   formal_parameter_list -> formal_parameter
Rule 215   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 216   formal_parameter -> identifier_list parameter_spec
Rule 217   parameter_spec -> mode
Rule 218   parameter_spec -> mode LOC
Rule 219   result_spec -> RETURNS LPAREN mode RPAREN
Rule 220   result_spec -> RETURNS LPAREN mode LOC RPAREN

Terminals, with rules where they appear

ABS                  : 199
AND                  : 106
ARRAY                : 49
ARROW                : 63 134
ASC                  : 200
ASSIGN               : 14 26 147 174 175
BOOL                 : 36
BY                   : 178
CCONST               : 86
CHAR                 : 37
CHARS                : 47
COLON                : 41 66 72 90 136 207
COMMA                : 11 16 25 51 71 190 215
DCL                  : 9
DECREASE             : 150
DIFF                 : 109
DIVCREASE            : 152
DIVIDE               : 125
DO                   : 164 165 166 167
DOWN                 : 180 183
ELSE                 : 99 160 161
ELSIF                : 100 101 162 163
END                  : 208 209
EQUAL                : 108
EXIT                 : 192
FALSE                : 84
FI                   : 95 96 154 155
FOR                  : 169 170
GREATER              : 110
GREATEREQ            : 111
ICONST               : 83
ID                   : 17
IF                   : 95 96 154 155
IN                   : 114 182 183
INCREASE             : 149
INT                  : 35
LBRACKET             : 47 49 64 66 69 72 89 90
LENGTH               : 204
LESS                 : 112
LESSEQ               : 113
LOC                  : 218 220
LOWER                : 203
LPAREN               : 38 39 92 187 188 197 198 212 213 219 220
MINUS                : 120 129
MOD                  : 126
MODCREASE            : 153
MULCREASE            : 151
NOT                  : 130
NULL                 : 87
NUM                  : 201
OD                   : 164 165 166 167
OR                   : 107
PLUS                 : 119
PRINT                : 206
PROC                 : 210 211
RBRACKET             : 47 49 64 66 69 72 89 90
READ                 : 205
REF                  : 44
RESULT               : 195
RETURN               : 193 194
RETURNS              : 219 220
RPAREN               : 38 39 92 187 188 197 198 212 213 219 220
SCONST               : 88
SEMI                 : 9 18 23 135 136 165 167 207 210 211
STRCAT               : 121
SYN                  : 18
THEN                 : 98 156 157
TIMES                : 124
TO                   : 179 180
TRUE                 : 85
TYPE                 : 23
UPPER                : 202
WHILE                : 184
error                : 

Nonterminals, with rules where they appear

action               : 135 136
action_statement     : 8 158 159
action_statement_list : 157 159 161 166 167
arithmetic_additive_operator : 117
arithmetic_multiplicative_operator : 123
array_element        : 60
array_location       : 69 72
array_mode           : 46
array_primitive_value : 89 90
array_slice          : 61
assigning_operator   : 146
assignment_action    : 139
boolean_expression   : 95 96 100 101 154 155 162 163 184
boolean_literal      : 79
boolean_mode         : 32
bracketed_action     : 138
builtin_call         : 186
builtin_name         : 197 198
call_action          : 62 140
character_literal    : 80
character_mode       : 33
character_string_literal : 82
closed_dyadic_operator : 148
composite_mode       : 30
conditional_expression : 94
control_part         : 165 167
declaration          : 10 11
declaration_list     : 9 11
declaration_statement : 4
dereferenced_reference : 57
discrete_expression  : 177 179 180
discrete_mode        : 28 39 52 182 183
discrete_range_mode  : 34
do_action            : 145
element_mode         : 49
else_clause          : 155 163
else_expression      : 95 96
elsif_expression     : 96 101
empty_literal        : 81
end_value            : 174 175
exit_action          : 141
expression           : 14 42 43 55 70 71 92 97 98 99 146 181 191 196
expression_list      : 69 71
for_control          : 169 170
formal_parameter     : 214 215
formal_parameter_list : 213 215
formal_procedure_head : 208 209
identifier           : 15 16 38 40 56 64 66 137 176 187 188
identifier_list      : 12 13 16 21 22 26 216
if_action            : 144
index_mode           : 50 51
index_mode_list      : 49 51
initialization       : 13 21 22
integer_expression   : 65 67 68 89 178
integer_literal      : 48 78
integer_mode         : 31
iteration            : 171
label_id             : 136 192 207
left_element         : 66
literal              : 74
literal_range        : 38 39 53
location             : 63 73 131 134 146
loop_counter         : 174 175 182 183
lower_bound          : 41 72 90
membership_operator  : 105
mode                 : 12 13 22 26 44 54 217 218 219 220
mode_definition      : 24 25
mode_name            : 27
monadic_operator     : 128
newmode_list         : 23 25
newmode_statement    : 6
operand0             : 93 103
operand1             : 102 103 116
operand2             : 115 116 123
operand3             : 122 123
operand4             : 127 128
operator1            : 103
operator2            : 116
parameter            : 189 190
parameter_list       : 188 190 198
parameter_spec       : 216
parenthesis_gambiarra : 210 211
parenthesized_expression : 77
primitive_value      : 91 133
procedure_call       : 185
procedure_definition : 207
procedure_statement  : 7
program              : 0
range_enumeration    : 173
reference_mode       : 29
referenced_location  : 132
relational_operator  : 104
result               : 194 195
result_action        : 143
result_spec          : 211
return_action        : 142
right_element        : 66
start_element        : 64
start_value          : 174 175
statement            : 2 3
statement_list       : 1 3 209
step_enumeration     : 172
step_value           : 175
string_concatenation_operator : 118
string_element       : 58
string_length        : 47
string_mode          : 45
string_slice         : 59
synonym_definition   : 19 20
synonym_list         : 18 20
synonym_statement    : 5
then_clause          : 154 155 162 163
then_expression      : 95 96 100 101
upper_bound          : 41 72 90
value_array_element  : 75
value_array_slice    : 76
while_control        : 168 170

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (207) procedure_statement -> . label_id COLON procedure_definition SEMI
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (137) label_id -> . identifier
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (17) identifier -> . ID
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    DCL             shift and go to state 39
    SYN             shift and go to state 46
    TYPE            shift and go to state 18
    ID              shift and go to state 19
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    builtin_call                   shift and go to state 38
    statement                      shift and go to state 4
    action_statement               shift and go to state 5
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    array_location                 shift and go to state 10
    call_action                    shift and go to state 41
    program                        shift and go to state 12
    action                         shift and go to state 16
    synonym_statement              shift and go to state 20
    procedure_statement            shift and go to state 34
    bracketed_action               shift and go to state 13
    statement_list                 shift and go to state 15
    identifier                     shift and go to state 23
    builtin_name                   shift and go to state 24
    dereferenced_reference         shift and go to state 29
    newmode_statement              shift and go to state 30
    assignment_action              shift and go to state 31
    return_action                  shift and go to state 21
    string_element                 shift and go to state 35
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    declaration_statement          shift and go to state 44
    label_id                       shift and go to state 45
    array_slice                    shift and go to state 42

state 1

    (141) action -> exit_action .

    SEMI            reduce using rule 141 (action -> exit_action .)


state 2

    (203) builtin_name -> LOWER .

    LPAREN          reduce using rule 203 (builtin_name -> LOWER .)


state 3

    (60) location -> array_element .

    ARROW           reduce using rule 60 (location -> array_element .)
    ASSIGN          reduce using rule 60 (location -> array_element .)
    INCREASE        reduce using rule 60 (location -> array_element .)
    DECREASE        reduce using rule 60 (location -> array_element .)
    MULCREASE       reduce using rule 60 (location -> array_element .)
    DIVCREASE       reduce using rule 60 (location -> array_element .)
    MODCREASE       reduce using rule 60 (location -> array_element .)
    LBRACKET        reduce using rule 60 (location -> array_element .)
    TIMES           reduce using rule 60 (location -> array_element .)
    DIVIDE          reduce using rule 60 (location -> array_element .)
    MOD             reduce using rule 60 (location -> array_element .)
    PLUS            reduce using rule 60 (location -> array_element .)
    MINUS           reduce using rule 60 (location -> array_element .)
    STRCAT          reduce using rule 60 (location -> array_element .)
    AND             reduce using rule 60 (location -> array_element .)
    OR              reduce using rule 60 (location -> array_element .)
    EQUAL           reduce using rule 60 (location -> array_element .)
    DIFF            reduce using rule 60 (location -> array_element .)
    GREATER         reduce using rule 60 (location -> array_element .)
    GREATEREQ       reduce using rule 60 (location -> array_element .)
    LESS            reduce using rule 60 (location -> array_element .)
    LESSEQ          reduce using rule 60 (location -> array_element .)
    IN              reduce using rule 60 (location -> array_element .)
    WHILE           reduce using rule 60 (location -> array_element .)
    SEMI            reduce using rule 60 (location -> array_element .)
    THEN            reduce using rule 60 (location -> array_element .)
    RBRACKET        reduce using rule 60 (location -> array_element .)
    COMMA           reduce using rule 60 (location -> array_element .)
    COLON           reduce using rule 60 (location -> array_element .)
    RPAREN          reduce using rule 60 (location -> array_element .)
    ID              reduce using rule 60 (location -> array_element .)
    ELSE            reduce using rule 60 (location -> array_element .)
    ELSIF           reduce using rule 60 (location -> array_element .)
    TO              reduce using rule 60 (location -> array_element .)
    DOWN            reduce using rule 60 (location -> array_element .)
    BY              reduce using rule 60 (location -> array_element .)
    FI              reduce using rule 60 (location -> array_element .)


state 4

    (2) statement_list -> statement .

    END             reduce using rule 2 (statement_list -> statement .)
    DCL             reduce using rule 2 (statement_list -> statement .)
    SYN             reduce using rule 2 (statement_list -> statement .)
    TYPE            reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    EXIT            reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    RESULT          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    DO              reduce using rule 2 (statement_list -> statement .)
    ABS             reduce using rule 2 (statement_list -> statement .)
    ASC             reduce using rule 2 (statement_list -> statement .)
    NUM             reduce using rule 2 (statement_list -> statement .)
    UPPER           reduce using rule 2 (statement_list -> statement .)
    LOWER           reduce using rule 2 (statement_list -> statement .)
    LENGTH          reduce using rule 2 (statement_list -> statement .)
    READ            reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 5

    (8) statement -> action_statement .

    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    RETURN          reduce using rule 8 (statement -> action_statement .)
    RESULT          reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    DO              reduce using rule 8 (statement -> action_statement .)
    ABS             reduce using rule 8 (statement -> action_statement .)
    ASC             reduce using rule 8 (statement -> action_statement .)
    NUM             reduce using rule 8 (statement -> action_statement .)
    UPPER           reduce using rule 8 (statement -> action_statement .)
    LOWER           reduce using rule 8 (statement -> action_statement .)
    LENGTH          reduce using rule 8 (statement -> action_statement .)
    READ            reduce using rule 8 (statement -> action_statement .)
    PRINT           reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)
    END             reduce using rule 8 (statement -> action_statement .)


state 6

    (143) action -> result_action .

    SEMI            reduce using rule 143 (action -> result_action .)


state 7

    (192) exit_action -> EXIT . label_id
    (137) label_id -> . identifier
    (17) identifier -> . ID

    ID              shift and go to state 19

    identifier                     shift and go to state 47
    label_id                       shift and go to state 48

state 8

    (146) assignment_action -> location . assigning_operator expression
    (63) dereferenced_reference -> location . ARROW
    (73) array_location -> location .
    (147) assigning_operator -> . ASSIGN
    (148) assigning_operator -> . closed_dyadic_operator
    (149) closed_dyadic_operator -> . INCREASE
    (150) closed_dyadic_operator -> . DECREASE
    (151) closed_dyadic_operator -> . MULCREASE
    (152) closed_dyadic_operator -> . DIVCREASE
    (153) closed_dyadic_operator -> . MODCREASE

    ARROW           shift and go to state 57
    LBRACKET        reduce using rule 73 (array_location -> location .)
    ASSIGN          shift and go to state 52
    INCREASE        shift and go to state 53
    DECREASE        shift and go to state 51
    MULCREASE       shift and go to state 54
    DIVCREASE       shift and go to state 50
    MODCREASE       shift and go to state 49

    closed_dyadic_operator         shift and go to state 55
    assigning_operator             shift and go to state 56

state 9

    (145) bracketed_action -> do_action .

    SEMI            reduce using rule 145 (bracketed_action -> do_action .)


state 10

    (69) array_element -> array_location . LBRACKET expression_list RBRACKET
    (72) array_slice -> array_location . LBRACKET lower_bound COLON upper_bound RBRACKET

    LBRACKET        shift and go to state 58


state 11

    (154) if_action -> IF . boolean_expression then_clause FI
    (155) if_action -> IF . boolean_expression then_clause else_clause FI
    (97) boolean_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    array_element                  shift and go to state 3
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 90
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42
    boolean_expression             shift and go to state 93

state 12

    (0) S' -> program .



state 13

    (138) action -> bracketed_action .

    SEMI            reduce using rule 138 (action -> bracketed_action .)


state 14

    (193) return_action -> RETURN .
    (194) return_action -> RETURN . result
    (196) result -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    SEMI            reduce using rule 193 (return_action -> RETURN .)
    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    array_element                  shift and go to state 3
    result                         shift and go to state 94
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 95
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 15

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (207) procedure_statement -> . label_id COLON procedure_definition SEMI
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (137) label_id -> . identifier
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (17) identifier -> . ID
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 39
    SYN             shift and go to state 46
    TYPE            shift and go to state 18
    ID              shift and go to state 19
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    statement                      shift and go to state 96
    action_statement               shift and go to state 5
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    array_location                 shift and go to state 10
    call_action                    shift and go to state 41
    action                         shift and go to state 16
    synonym_statement              shift and go to state 20
    procedure_statement            shift and go to state 34
    bracketed_action               shift and go to state 13
    identifier                     shift and go to state 23
    builtin_name                   shift and go to state 24
    dereferenced_reference         shift and go to state 29
    newmode_statement              shift and go to state 30
    assignment_action              shift and go to state 31
    return_action                  shift and go to state 21
    string_element                 shift and go to state 35
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    builtin_call                   shift and go to state 38
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    declaration_statement          shift and go to state 44
    label_id                       shift and go to state 45
    array_slice                    shift and go to state 42

state 16

    (135) action_statement -> action . SEMI

    SEMI            shift and go to state 97


state 17

    (201) builtin_name -> NUM .

    LPAREN          reduce using rule 201 (builtin_name -> NUM .)


state 18

    (23) newmode_statement -> TYPE . newmode_list SEMI
    (24) newmode_list -> . mode_definition
    (25) newmode_list -> . newmode_list COMMA mode_definition
    (26) mode_definition -> . identifier_list ASSIGN mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 19

    newmode_list                   shift and go to state 98
    identifier_list                shift and go to state 101
    mode_definition                shift and go to state 100
    identifier                     shift and go to state 99

state 19

    (17) identifier -> ID .

    LBRACKET        reduce using rule 17 (identifier -> ID .)
    LPAREN          reduce using rule 17 (identifier -> ID .)
    ARROW           reduce using rule 17 (identifier -> ID .)
    TIMES           reduce using rule 17 (identifier -> ID .)
    DIVIDE          reduce using rule 17 (identifier -> ID .)
    MOD             reduce using rule 17 (identifier -> ID .)
    PLUS            reduce using rule 17 (identifier -> ID .)
    MINUS           reduce using rule 17 (identifier -> ID .)
    STRCAT          reduce using rule 17 (identifier -> ID .)
    AND             reduce using rule 17 (identifier -> ID .)
    OR              reduce using rule 17 (identifier -> ID .)
    EQUAL           reduce using rule 17 (identifier -> ID .)
    DIFF            reduce using rule 17 (identifier -> ID .)
    GREATER         reduce using rule 17 (identifier -> ID .)
    GREATEREQ       reduce using rule 17 (identifier -> ID .)
    LESS            reduce using rule 17 (identifier -> ID .)
    LESSEQ          reduce using rule 17 (identifier -> ID .)
    IN              reduce using rule 17 (identifier -> ID .)
    THEN            reduce using rule 17 (identifier -> ID .)
    SEMI            reduce using rule 17 (identifier -> ID .)
    RBRACKET        reduce using rule 17 (identifier -> ID .)
    COMMA           reduce using rule 17 (identifier -> ID .)
    COLON           reduce using rule 17 (identifier -> ID .)
    RPAREN          reduce using rule 17 (identifier -> ID .)
    ID              reduce using rule 17 (identifier -> ID .)
    ELSE            reduce using rule 17 (identifier -> ID .)
    ELSIF           reduce using rule 17 (identifier -> ID .)
    TO              reduce using rule 17 (identifier -> ID .)
    DOWN            reduce using rule 17 (identifier -> ID .)
    BY              reduce using rule 17 (identifier -> ID .)
    FI              reduce using rule 17 (identifier -> ID .)
    WHILE           reduce using rule 17 (identifier -> ID .)
    REF             reduce using rule 17 (identifier -> ID .)
    INT             reduce using rule 17 (identifier -> ID .)
    BOOL            reduce using rule 17 (identifier -> ID .)
    CHAR            reduce using rule 17 (identifier -> ID .)
    CHARS           reduce using rule 17 (identifier -> ID .)
    ARRAY           reduce using rule 17 (identifier -> ID .)
    LOC             reduce using rule 17 (identifier -> ID .)
    ASSIGN          reduce using rule 17 (identifier -> ID .)
    INCREASE        reduce using rule 17 (identifier -> ID .)
    DECREASE        reduce using rule 17 (identifier -> ID .)
    MULCREASE       reduce using rule 17 (identifier -> ID .)
    DIVCREASE       reduce using rule 17 (identifier -> ID .)
    MODCREASE       reduce using rule 17 (identifier -> ID .)


state 20

    (5) statement -> synonym_statement .

    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    TYPE            reduce using rule 5 (statement -> synonym_statement .)
    ID              reduce using rule 5 (statement -> synonym_statement .)
    EXIT            reduce using rule 5 (statement -> synonym_statement .)
    RETURN          reduce using rule 5 (statement -> synonym_statement .)
    RESULT          reduce using rule 5 (statement -> synonym_statement .)
    IF              reduce using rule 5 (statement -> synonym_statement .)
    DO              reduce using rule 5 (statement -> synonym_statement .)
    ABS             reduce using rule 5 (statement -> synonym_statement .)
    ASC             reduce using rule 5 (statement -> synonym_statement .)
    NUM             reduce using rule 5 (statement -> synonym_statement .)
    UPPER           reduce using rule 5 (statement -> synonym_statement .)
    LOWER           reduce using rule 5 (statement -> synonym_statement .)
    LENGTH          reduce using rule 5 (statement -> synonym_statement .)
    READ            reduce using rule 5 (statement -> synonym_statement .)
    PRINT           reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)
    END             reduce using rule 5 (statement -> synonym_statement .)


state 21

    (142) action -> return_action .

    SEMI            reduce using rule 142 (action -> return_action .)


state 22

    (195) result_action -> RESULT . result
    (196) result -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    array_element                  shift and go to state 3
    result                         shift and go to state 102
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 95
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 23

    (137) label_id -> identifier .
    (56) location -> identifier .
    (187) procedure_call -> identifier . LPAREN RPAREN
    (188) procedure_call -> identifier . LPAREN parameter_list RPAREN
    (64) string_element -> identifier . LBRACKET start_element RBRACKET
    (66) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON           reduce using rule 137 (label_id -> identifier .)
    ARROW           reduce using rule 56 (location -> identifier .)
    ASSIGN          reduce using rule 56 (location -> identifier .)
    INCREASE        reduce using rule 56 (location -> identifier .)
    DECREASE        reduce using rule 56 (location -> identifier .)
    MULCREASE       reduce using rule 56 (location -> identifier .)
    DIVCREASE       reduce using rule 56 (location -> identifier .)
    MODCREASE       reduce using rule 56 (location -> identifier .)
    LPAREN          shift and go to state 104
    LBRACKET        shift and go to state 103

  ! LBRACKET        [ reduce using rule 56 (location -> identifier .) ]


state 24

    (197) builtin_call -> builtin_name . LPAREN RPAREN
    (198) builtin_call -> builtin_name . LPAREN parameter_list RPAREN

    LPAREN          shift and go to state 105


state 25

    (199) builtin_name -> ABS .

    LPAREN          reduce using rule 199 (builtin_name -> ABS .)


state 26

    (204) builtin_name -> LENGTH .

    LPAREN          reduce using rule 204 (builtin_name -> LENGTH .)


state 27

    (205) builtin_name -> READ .

    LPAREN          reduce using rule 205 (builtin_name -> READ .)


state 28

    (202) builtin_name -> UPPER .

    LPAREN          reduce using rule 202 (builtin_name -> UPPER .)


state 29

    (57) location -> dereferenced_reference .

    ARROW           reduce using rule 57 (location -> dereferenced_reference .)
    ASSIGN          reduce using rule 57 (location -> dereferenced_reference .)
    INCREASE        reduce using rule 57 (location -> dereferenced_reference .)
    DECREASE        reduce using rule 57 (location -> dereferenced_reference .)
    MULCREASE       reduce using rule 57 (location -> dereferenced_reference .)
    DIVCREASE       reduce using rule 57 (location -> dereferenced_reference .)
    MODCREASE       reduce using rule 57 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 57 (location -> dereferenced_reference .)
    TIMES           reduce using rule 57 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 57 (location -> dereferenced_reference .)
    MOD             reduce using rule 57 (location -> dereferenced_reference .)
    PLUS            reduce using rule 57 (location -> dereferenced_reference .)
    MINUS           reduce using rule 57 (location -> dereferenced_reference .)
    STRCAT          reduce using rule 57 (location -> dereferenced_reference .)
    AND             reduce using rule 57 (location -> dereferenced_reference .)
    OR              reduce using rule 57 (location -> dereferenced_reference .)
    EQUAL           reduce using rule 57 (location -> dereferenced_reference .)
    DIFF            reduce using rule 57 (location -> dereferenced_reference .)
    GREATER         reduce using rule 57 (location -> dereferenced_reference .)
    GREATEREQ       reduce using rule 57 (location -> dereferenced_reference .)
    LESS            reduce using rule 57 (location -> dereferenced_reference .)
    LESSEQ          reduce using rule 57 (location -> dereferenced_reference .)
    IN              reduce using rule 57 (location -> dereferenced_reference .)
    WHILE           reduce using rule 57 (location -> dereferenced_reference .)
    SEMI            reduce using rule 57 (location -> dereferenced_reference .)
    THEN            reduce using rule 57 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 57 (location -> dereferenced_reference .)
    COMMA           reduce using rule 57 (location -> dereferenced_reference .)
    COLON           reduce using rule 57 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 57 (location -> dereferenced_reference .)
    ID              reduce using rule 57 (location -> dereferenced_reference .)
    ELSE            reduce using rule 57 (location -> dereferenced_reference .)
    ELSIF           reduce using rule 57 (location -> dereferenced_reference .)
    TO              reduce using rule 57 (location -> dereferenced_reference .)
    DOWN            reduce using rule 57 (location -> dereferenced_reference .)
    BY              reduce using rule 57 (location -> dereferenced_reference .)
    FI              reduce using rule 57 (location -> dereferenced_reference .)


state 30

    (6) statement -> newmode_statement .

    DCL             reduce using rule 6 (statement -> newmode_statement .)
    SYN             reduce using rule 6 (statement -> newmode_statement .)
    TYPE            reduce using rule 6 (statement -> newmode_statement .)
    ID              reduce using rule 6 (statement -> newmode_statement .)
    EXIT            reduce using rule 6 (statement -> newmode_statement .)
    RETURN          reduce using rule 6 (statement -> newmode_statement .)
    RESULT          reduce using rule 6 (statement -> newmode_statement .)
    IF              reduce using rule 6 (statement -> newmode_statement .)
    DO              reduce using rule 6 (statement -> newmode_statement .)
    ABS             reduce using rule 6 (statement -> newmode_statement .)
    ASC             reduce using rule 6 (statement -> newmode_statement .)
    NUM             reduce using rule 6 (statement -> newmode_statement .)
    UPPER           reduce using rule 6 (statement -> newmode_statement .)
    LOWER           reduce using rule 6 (statement -> newmode_statement .)
    LENGTH          reduce using rule 6 (statement -> newmode_statement .)
    READ            reduce using rule 6 (statement -> newmode_statement .)
    PRINT           reduce using rule 6 (statement -> newmode_statement .)
    $end            reduce using rule 6 (statement -> newmode_statement .)
    END             reduce using rule 6 (statement -> newmode_statement .)


state 31

    (139) action -> assignment_action .

    SEMI            reduce using rule 139 (action -> assignment_action .)


state 32

    (200) builtin_name -> ASC .

    LPAREN          reduce using rule 200 (builtin_name -> ASC .)


state 33

    (206) builtin_name -> PRINT .

    LPAREN          reduce using rule 206 (builtin_name -> PRINT .)


state 34

    (7) statement -> procedure_statement .

    DCL             reduce using rule 7 (statement -> procedure_statement .)
    SYN             reduce using rule 7 (statement -> procedure_statement .)
    TYPE            reduce using rule 7 (statement -> procedure_statement .)
    ID              reduce using rule 7 (statement -> procedure_statement .)
    EXIT            reduce using rule 7 (statement -> procedure_statement .)
    RETURN          reduce using rule 7 (statement -> procedure_statement .)
    RESULT          reduce using rule 7 (statement -> procedure_statement .)
    IF              reduce using rule 7 (statement -> procedure_statement .)
    DO              reduce using rule 7 (statement -> procedure_statement .)
    ABS             reduce using rule 7 (statement -> procedure_statement .)
    ASC             reduce using rule 7 (statement -> procedure_statement .)
    NUM             reduce using rule 7 (statement -> procedure_statement .)
    UPPER           reduce using rule 7 (statement -> procedure_statement .)
    LOWER           reduce using rule 7 (statement -> procedure_statement .)
    LENGTH          reduce using rule 7 (statement -> procedure_statement .)
    READ            reduce using rule 7 (statement -> procedure_statement .)
    PRINT           reduce using rule 7 (statement -> procedure_statement .)
    $end            reduce using rule 7 (statement -> procedure_statement .)
    END             reduce using rule 7 (statement -> procedure_statement .)


state 35

    (58) location -> string_element .

    ARROW           reduce using rule 58 (location -> string_element .)
    ASSIGN          reduce using rule 58 (location -> string_element .)
    INCREASE        reduce using rule 58 (location -> string_element .)
    DECREASE        reduce using rule 58 (location -> string_element .)
    MULCREASE       reduce using rule 58 (location -> string_element .)
    DIVCREASE       reduce using rule 58 (location -> string_element .)
    MODCREASE       reduce using rule 58 (location -> string_element .)
    LBRACKET        reduce using rule 58 (location -> string_element .)
    TIMES           reduce using rule 58 (location -> string_element .)
    DIVIDE          reduce using rule 58 (location -> string_element .)
    MOD             reduce using rule 58 (location -> string_element .)
    PLUS            reduce using rule 58 (location -> string_element .)
    MINUS           reduce using rule 58 (location -> string_element .)
    STRCAT          reduce using rule 58 (location -> string_element .)
    AND             reduce using rule 58 (location -> string_element .)
    OR              reduce using rule 58 (location -> string_element .)
    EQUAL           reduce using rule 58 (location -> string_element .)
    DIFF            reduce using rule 58 (location -> string_element .)
    GREATER         reduce using rule 58 (location -> string_element .)
    GREATEREQ       reduce using rule 58 (location -> string_element .)
    LESS            reduce using rule 58 (location -> string_element .)
    LESSEQ          reduce using rule 58 (location -> string_element .)
    IN              reduce using rule 58 (location -> string_element .)
    WHILE           reduce using rule 58 (location -> string_element .)
    SEMI            reduce using rule 58 (location -> string_element .)
    THEN            reduce using rule 58 (location -> string_element .)
    RBRACKET        reduce using rule 58 (location -> string_element .)
    COMMA           reduce using rule 58 (location -> string_element .)
    COLON           reduce using rule 58 (location -> string_element .)
    RPAREN          reduce using rule 58 (location -> string_element .)
    ID              reduce using rule 58 (location -> string_element .)
    ELSE            reduce using rule 58 (location -> string_element .)
    ELSIF           reduce using rule 58 (location -> string_element .)
    TO              reduce using rule 58 (location -> string_element .)
    DOWN            reduce using rule 58 (location -> string_element .)
    BY              reduce using rule 58 (location -> string_element .)
    FI              reduce using rule 58 (location -> string_element .)


state 36

    (144) bracketed_action -> if_action .

    SEMI            reduce using rule 144 (bracketed_action -> if_action .)


state 37

    (59) location -> string_slice .

    ARROW           reduce using rule 59 (location -> string_slice .)
    ASSIGN          reduce using rule 59 (location -> string_slice .)
    INCREASE        reduce using rule 59 (location -> string_slice .)
    DECREASE        reduce using rule 59 (location -> string_slice .)
    MULCREASE       reduce using rule 59 (location -> string_slice .)
    DIVCREASE       reduce using rule 59 (location -> string_slice .)
    MODCREASE       reduce using rule 59 (location -> string_slice .)
    LBRACKET        reduce using rule 59 (location -> string_slice .)
    TIMES           reduce using rule 59 (location -> string_slice .)
    DIVIDE          reduce using rule 59 (location -> string_slice .)
    MOD             reduce using rule 59 (location -> string_slice .)
    PLUS            reduce using rule 59 (location -> string_slice .)
    MINUS           reduce using rule 59 (location -> string_slice .)
    STRCAT          reduce using rule 59 (location -> string_slice .)
    AND             reduce using rule 59 (location -> string_slice .)
    OR              reduce using rule 59 (location -> string_slice .)
    EQUAL           reduce using rule 59 (location -> string_slice .)
    DIFF            reduce using rule 59 (location -> string_slice .)
    GREATER         reduce using rule 59 (location -> string_slice .)
    GREATEREQ       reduce using rule 59 (location -> string_slice .)
    LESS            reduce using rule 59 (location -> string_slice .)
    LESSEQ          reduce using rule 59 (location -> string_slice .)
    IN              reduce using rule 59 (location -> string_slice .)
    WHILE           reduce using rule 59 (location -> string_slice .)
    SEMI            reduce using rule 59 (location -> string_slice .)
    THEN            reduce using rule 59 (location -> string_slice .)
    RBRACKET        reduce using rule 59 (location -> string_slice .)
    COMMA           reduce using rule 59 (location -> string_slice .)
    COLON           reduce using rule 59 (location -> string_slice .)
    RPAREN          reduce using rule 59 (location -> string_slice .)
    ID              reduce using rule 59 (location -> string_slice .)
    ELSE            reduce using rule 59 (location -> string_slice .)
    ELSIF           reduce using rule 59 (location -> string_slice .)
    TO              reduce using rule 59 (location -> string_slice .)
    DOWN            reduce using rule 59 (location -> string_slice .)
    BY              reduce using rule 59 (location -> string_slice .)
    FI              reduce using rule 59 (location -> string_slice .)


state 38

    (186) call_action -> builtin_call .

    ARROW           reduce using rule 186 (call_action -> builtin_call .)
    TIMES           reduce using rule 186 (call_action -> builtin_call .)
    DIVIDE          reduce using rule 186 (call_action -> builtin_call .)
    MOD             reduce using rule 186 (call_action -> builtin_call .)
    PLUS            reduce using rule 186 (call_action -> builtin_call .)
    MINUS           reduce using rule 186 (call_action -> builtin_call .)
    STRCAT          reduce using rule 186 (call_action -> builtin_call .)
    AND             reduce using rule 186 (call_action -> builtin_call .)
    OR              reduce using rule 186 (call_action -> builtin_call .)
    EQUAL           reduce using rule 186 (call_action -> builtin_call .)
    DIFF            reduce using rule 186 (call_action -> builtin_call .)
    GREATER         reduce using rule 186 (call_action -> builtin_call .)
    GREATEREQ       reduce using rule 186 (call_action -> builtin_call .)
    LESS            reduce using rule 186 (call_action -> builtin_call .)
    LESSEQ          reduce using rule 186 (call_action -> builtin_call .)
    IN              reduce using rule 186 (call_action -> builtin_call .)
    THEN            reduce using rule 186 (call_action -> builtin_call .)
    SEMI            reduce using rule 186 (call_action -> builtin_call .)
    RBRACKET        reduce using rule 186 (call_action -> builtin_call .)
    COMMA           reduce using rule 186 (call_action -> builtin_call .)
    COLON           reduce using rule 186 (call_action -> builtin_call .)
    RPAREN          reduce using rule 186 (call_action -> builtin_call .)
    ID              reduce using rule 186 (call_action -> builtin_call .)
    ELSE            reduce using rule 186 (call_action -> builtin_call .)
    ELSIF           reduce using rule 186 (call_action -> builtin_call .)
    TO              reduce using rule 186 (call_action -> builtin_call .)
    DOWN            reduce using rule 186 (call_action -> builtin_call .)
    BY              reduce using rule 186 (call_action -> builtin_call .)
    FI              reduce using rule 186 (call_action -> builtin_call .)
    WHILE           reduce using rule 186 (call_action -> builtin_call .)
    LBRACKET        reduce using rule 186 (call_action -> builtin_call .)
    ASSIGN          reduce using rule 186 (call_action -> builtin_call .)
    INCREASE        reduce using rule 186 (call_action -> builtin_call .)
    DECREASE        reduce using rule 186 (call_action -> builtin_call .)
    MULCREASE       reduce using rule 186 (call_action -> builtin_call .)
    DIVCREASE       reduce using rule 186 (call_action -> builtin_call .)
    MODCREASE       reduce using rule 186 (call_action -> builtin_call .)


state 39

    (9) declaration_statement -> DCL . declaration_list SEMI
    (10) declaration_list -> . declaration
    (11) declaration_list -> . declaration_list COMMA declaration
    (12) declaration -> . identifier_list mode
    (13) declaration -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 19

    identifier_list                shift and go to state 106
    declaration                    shift and go to state 107
    identifier                     shift and go to state 99
    declaration_list               shift and go to state 108

state 40

    (185) call_action -> procedure_call .

    ARROW           reduce using rule 185 (call_action -> procedure_call .)
    TIMES           reduce using rule 185 (call_action -> procedure_call .)
    DIVIDE          reduce using rule 185 (call_action -> procedure_call .)
    MOD             reduce using rule 185 (call_action -> procedure_call .)
    PLUS            reduce using rule 185 (call_action -> procedure_call .)
    MINUS           reduce using rule 185 (call_action -> procedure_call .)
    STRCAT          reduce using rule 185 (call_action -> procedure_call .)
    AND             reduce using rule 185 (call_action -> procedure_call .)
    OR              reduce using rule 185 (call_action -> procedure_call .)
    EQUAL           reduce using rule 185 (call_action -> procedure_call .)
    DIFF            reduce using rule 185 (call_action -> procedure_call .)
    GREATER         reduce using rule 185 (call_action -> procedure_call .)
    GREATEREQ       reduce using rule 185 (call_action -> procedure_call .)
    LESS            reduce using rule 185 (call_action -> procedure_call .)
    LESSEQ          reduce using rule 185 (call_action -> procedure_call .)
    IN              reduce using rule 185 (call_action -> procedure_call .)
    THEN            reduce using rule 185 (call_action -> procedure_call .)
    SEMI            reduce using rule 185 (call_action -> procedure_call .)
    RBRACKET        reduce using rule 185 (call_action -> procedure_call .)
    COMMA           reduce using rule 185 (call_action -> procedure_call .)
    COLON           reduce using rule 185 (call_action -> procedure_call .)
    RPAREN          reduce using rule 185 (call_action -> procedure_call .)
    ID              reduce using rule 185 (call_action -> procedure_call .)
    ELSE            reduce using rule 185 (call_action -> procedure_call .)
    ELSIF           reduce using rule 185 (call_action -> procedure_call .)
    TO              reduce using rule 185 (call_action -> procedure_call .)
    DOWN            reduce using rule 185 (call_action -> procedure_call .)
    BY              reduce using rule 185 (call_action -> procedure_call .)
    FI              reduce using rule 185 (call_action -> procedure_call .)
    WHILE           reduce using rule 185 (call_action -> procedure_call .)
    LBRACKET        reduce using rule 185 (call_action -> procedure_call .)
    ASSIGN          reduce using rule 185 (call_action -> procedure_call .)
    INCREASE        reduce using rule 185 (call_action -> procedure_call .)
    DECREASE        reduce using rule 185 (call_action -> procedure_call .)
    MULCREASE       reduce using rule 185 (call_action -> procedure_call .)
    DIVCREASE       reduce using rule 185 (call_action -> procedure_call .)
    MODCREASE       reduce using rule 185 (call_action -> procedure_call .)


state 41

    (140) action -> call_action .
    (62) location -> call_action .

    SEMI            reduce using rule 140 (action -> call_action .)
    ARROW           reduce using rule 62 (location -> call_action .)
    ASSIGN          reduce using rule 62 (location -> call_action .)
    INCREASE        reduce using rule 62 (location -> call_action .)
    DECREASE        reduce using rule 62 (location -> call_action .)
    MULCREASE       reduce using rule 62 (location -> call_action .)
    DIVCREASE       reduce using rule 62 (location -> call_action .)
    MODCREASE       reduce using rule 62 (location -> call_action .)
    LBRACKET        reduce using rule 62 (location -> call_action .)


state 42

    (61) location -> array_slice .

    ARROW           reduce using rule 61 (location -> array_slice .)
    ASSIGN          reduce using rule 61 (location -> array_slice .)
    INCREASE        reduce using rule 61 (location -> array_slice .)
    DECREASE        reduce using rule 61 (location -> array_slice .)
    MULCREASE       reduce using rule 61 (location -> array_slice .)
    DIVCREASE       reduce using rule 61 (location -> array_slice .)
    MODCREASE       reduce using rule 61 (location -> array_slice .)
    LBRACKET        reduce using rule 61 (location -> array_slice .)
    TIMES           reduce using rule 61 (location -> array_slice .)
    DIVIDE          reduce using rule 61 (location -> array_slice .)
    MOD             reduce using rule 61 (location -> array_slice .)
    PLUS            reduce using rule 61 (location -> array_slice .)
    MINUS           reduce using rule 61 (location -> array_slice .)
    STRCAT          reduce using rule 61 (location -> array_slice .)
    AND             reduce using rule 61 (location -> array_slice .)
    OR              reduce using rule 61 (location -> array_slice .)
    EQUAL           reduce using rule 61 (location -> array_slice .)
    DIFF            reduce using rule 61 (location -> array_slice .)
    GREATER         reduce using rule 61 (location -> array_slice .)
    GREATEREQ       reduce using rule 61 (location -> array_slice .)
    LESS            reduce using rule 61 (location -> array_slice .)
    LESSEQ          reduce using rule 61 (location -> array_slice .)
    IN              reduce using rule 61 (location -> array_slice .)
    WHILE           reduce using rule 61 (location -> array_slice .)
    SEMI            reduce using rule 61 (location -> array_slice .)
    THEN            reduce using rule 61 (location -> array_slice .)
    RBRACKET        reduce using rule 61 (location -> array_slice .)
    COMMA           reduce using rule 61 (location -> array_slice .)
    COLON           reduce using rule 61 (location -> array_slice .)
    RPAREN          reduce using rule 61 (location -> array_slice .)
    ID              reduce using rule 61 (location -> array_slice .)
    ELSE            reduce using rule 61 (location -> array_slice .)
    ELSIF           reduce using rule 61 (location -> array_slice .)
    TO              reduce using rule 61 (location -> array_slice .)
    DOWN            reduce using rule 61 (location -> array_slice .)
    BY              reduce using rule 61 (location -> array_slice .)
    FI              reduce using rule 61 (location -> array_slice .)


state 43

    (164) do_action -> DO . OD
    (165) do_action -> DO . control_part SEMI OD
    (166) do_action -> DO . action_statement_list OD
    (167) do_action -> DO . control_part SEMI action_statement_list OD
    (168) control_part -> . while_control
    (169) control_part -> . FOR for_control
    (170) control_part -> . FOR for_control while_control
    (158) action_statement_list -> . action_statement
    (159) action_statement_list -> . action_statement_list action_statement
    (184) while_control -> . WHILE boolean_expression
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (137) label_id -> . identifier
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (17) identifier -> . ID
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    OD              shift and go to state 111
    FOR             shift and go to state 113
    WHILE           shift and go to state 115
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    ID              shift and go to state 19
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    action_statement               shift and go to state 109
    array_location                 shift and go to state 10
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    assignment_action              shift and go to state 31
    array_slice                    shift and go to state 42
    return_action                  shift and go to state 21
    action_statement_list          shift and go to state 110
    string_element                 shift and go to state 35
    action                         shift and go to state 16
    builtin_name                   shift and go to state 24
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    while_control                  shift and go to state 114
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 41
    bracketed_action               shift and go to state 13
    control_part                   shift and go to state 112
    identifier                     shift and go to state 23
    label_id                       shift and go to state 116

state 44

    (4) statement -> declaration_statement .

    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    TYPE            reduce using rule 4 (statement -> declaration_statement .)
    ID              reduce using rule 4 (statement -> declaration_statement .)
    EXIT            reduce using rule 4 (statement -> declaration_statement .)
    RETURN          reduce using rule 4 (statement -> declaration_statement .)
    RESULT          reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    DO              reduce using rule 4 (statement -> declaration_statement .)
    ABS             reduce using rule 4 (statement -> declaration_statement .)
    ASC             reduce using rule 4 (statement -> declaration_statement .)
    NUM             reduce using rule 4 (statement -> declaration_statement .)
    UPPER           reduce using rule 4 (statement -> declaration_statement .)
    LOWER           reduce using rule 4 (statement -> declaration_statement .)
    LENGTH          reduce using rule 4 (statement -> declaration_statement .)
    READ            reduce using rule 4 (statement -> declaration_statement .)
    PRINT           reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)
    END             reduce using rule 4 (statement -> declaration_statement .)


state 45

    (207) procedure_statement -> label_id . COLON procedure_definition SEMI
    (136) action_statement -> label_id . COLON action SEMI

    COLON           shift and go to state 117


state 46

    (18) synonym_statement -> SYN . synonym_list SEMI
    (19) synonym_list -> . synonym_definition
    (20) synonym_list -> . synonym_list synonym_definition
    (21) synonym_definition -> . identifier_list initialization
    (22) synonym_definition -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 19

    synonym_list                   shift and go to state 118
    identifier_list                shift and go to state 119
    identifier                     shift and go to state 99
    synonym_definition             shift and go to state 120

state 47

    (137) label_id -> identifier .

    SEMI            reduce using rule 137 (label_id -> identifier .)


state 48

    (192) exit_action -> EXIT label_id .

    SEMI            reduce using rule 192 (exit_action -> EXIT label_id .)


state 49

    (153) closed_dyadic_operator -> MODCREASE .

    IF              reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    MINUS           reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    NOT             reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    ARROW           reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    ID              reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    LPAREN          reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    ICONST          reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    FALSE           reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    TRUE            reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    CCONST          reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    NULL            reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    SCONST          reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    ABS             reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    ASC             reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    NUM             reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    UPPER           reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    LOWER           reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    LENGTH          reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    READ            reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)
    PRINT           reduce using rule 153 (closed_dyadic_operator -> MODCREASE .)


state 50

    (152) closed_dyadic_operator -> DIVCREASE .

    IF              reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    MINUS           reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    NOT             reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    ARROW           reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    ID              reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    LPAREN          reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    ICONST          reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    FALSE           reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    TRUE            reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    CCONST          reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    NULL            reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    SCONST          reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    ABS             reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    ASC             reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    NUM             reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    UPPER           reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    LOWER           reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    LENGTH          reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    READ            reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)
    PRINT           reduce using rule 152 (closed_dyadic_operator -> DIVCREASE .)


state 51

    (150) closed_dyadic_operator -> DECREASE .

    IF              reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    MINUS           reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    NOT             reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    ARROW           reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    ID              reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    LPAREN          reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    ICONST          reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    FALSE           reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    TRUE            reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    CCONST          reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    NULL            reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    SCONST          reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    ABS             reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    ASC             reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    NUM             reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    UPPER           reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    LOWER           reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    LENGTH          reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    READ            reduce using rule 150 (closed_dyadic_operator -> DECREASE .)
    PRINT           reduce using rule 150 (closed_dyadic_operator -> DECREASE .)


state 52

    (147) assigning_operator -> ASSIGN .

    IF              reduce using rule 147 (assigning_operator -> ASSIGN .)
    MINUS           reduce using rule 147 (assigning_operator -> ASSIGN .)
    NOT             reduce using rule 147 (assigning_operator -> ASSIGN .)
    ARROW           reduce using rule 147 (assigning_operator -> ASSIGN .)
    ID              reduce using rule 147 (assigning_operator -> ASSIGN .)
    LPAREN          reduce using rule 147 (assigning_operator -> ASSIGN .)
    ICONST          reduce using rule 147 (assigning_operator -> ASSIGN .)
    FALSE           reduce using rule 147 (assigning_operator -> ASSIGN .)
    TRUE            reduce using rule 147 (assigning_operator -> ASSIGN .)
    CCONST          reduce using rule 147 (assigning_operator -> ASSIGN .)
    NULL            reduce using rule 147 (assigning_operator -> ASSIGN .)
    SCONST          reduce using rule 147 (assigning_operator -> ASSIGN .)
    ABS             reduce using rule 147 (assigning_operator -> ASSIGN .)
    ASC             reduce using rule 147 (assigning_operator -> ASSIGN .)
    NUM             reduce using rule 147 (assigning_operator -> ASSIGN .)
    UPPER           reduce using rule 147 (assigning_operator -> ASSIGN .)
    LOWER           reduce using rule 147 (assigning_operator -> ASSIGN .)
    LENGTH          reduce using rule 147 (assigning_operator -> ASSIGN .)
    READ            reduce using rule 147 (assigning_operator -> ASSIGN .)
    PRINT           reduce using rule 147 (assigning_operator -> ASSIGN .)


state 53

    (149) closed_dyadic_operator -> INCREASE .

    IF              reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    MINUS           reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    NOT             reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    ARROW           reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    ID              reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    LPAREN          reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    ICONST          reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    FALSE           reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    TRUE            reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    CCONST          reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    NULL            reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    SCONST          reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    ABS             reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    ASC             reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    NUM             reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    UPPER           reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    LOWER           reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    LENGTH          reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    READ            reduce using rule 149 (closed_dyadic_operator -> INCREASE .)
    PRINT           reduce using rule 149 (closed_dyadic_operator -> INCREASE .)


state 54

    (151) closed_dyadic_operator -> MULCREASE .

    IF              reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    MINUS           reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    NOT             reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    ARROW           reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    ID              reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    LPAREN          reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    ICONST          reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    FALSE           reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    TRUE            reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    CCONST          reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    NULL            reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    SCONST          reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    ABS             reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    ASC             reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    NUM             reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    UPPER           reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    LOWER           reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    LENGTH          reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    READ            reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)
    PRINT           reduce using rule 151 (closed_dyadic_operator -> MULCREASE .)


state 55

    (148) assigning_operator -> closed_dyadic_operator .

    IF              reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    MINUS           reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    NOT             reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    ARROW           reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    ID              reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    LPAREN          reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    ICONST          reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    FALSE           reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    TRUE            reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    CCONST          reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    NULL            reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    SCONST          reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    ABS             reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    ASC             reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    NUM             reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    UPPER           reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    LOWER           reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    LENGTH          reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    READ            reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)
    PRINT           reduce using rule 148 (assigning_operator -> closed_dyadic_operator .)


state 56

    (146) assignment_action -> location assigning_operator . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    array_element                  shift and go to state 3
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    conditional_expression         shift and go to state 88
    operand0                       shift and go to state 87
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_slice                    shift and go to state 42
    character_string_literal       shift and go to state 62
    expression                     shift and go to state 121
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92

state 57

    (63) dereferenced_reference -> location ARROW .

    ARROW           reduce using rule 63 (dereferenced_reference -> location ARROW .)
    TIMES           reduce using rule 63 (dereferenced_reference -> location ARROW .)
    DIVIDE          reduce using rule 63 (dereferenced_reference -> location ARROW .)
    MOD             reduce using rule 63 (dereferenced_reference -> location ARROW .)
    PLUS            reduce using rule 63 (dereferenced_reference -> location ARROW .)
    MINUS           reduce using rule 63 (dereferenced_reference -> location ARROW .)
    STRCAT          reduce using rule 63 (dereferenced_reference -> location ARROW .)
    AND             reduce using rule 63 (dereferenced_reference -> location ARROW .)
    OR              reduce using rule 63 (dereferenced_reference -> location ARROW .)
    EQUAL           reduce using rule 63 (dereferenced_reference -> location ARROW .)
    DIFF            reduce using rule 63 (dereferenced_reference -> location ARROW .)
    GREATER         reduce using rule 63 (dereferenced_reference -> location ARROW .)
    GREATEREQ       reduce using rule 63 (dereferenced_reference -> location ARROW .)
    LESS            reduce using rule 63 (dereferenced_reference -> location ARROW .)
    LESSEQ          reduce using rule 63 (dereferenced_reference -> location ARROW .)
    IN              reduce using rule 63 (dereferenced_reference -> location ARROW .)
    THEN            reduce using rule 63 (dereferenced_reference -> location ARROW .)
    SEMI            reduce using rule 63 (dereferenced_reference -> location ARROW .)
    RBRACKET        reduce using rule 63 (dereferenced_reference -> location ARROW .)
    COMMA           reduce using rule 63 (dereferenced_reference -> location ARROW .)
    COLON           reduce using rule 63 (dereferenced_reference -> location ARROW .)
    RPAREN          reduce using rule 63 (dereferenced_reference -> location ARROW .)
    LBRACKET        reduce using rule 63 (dereferenced_reference -> location ARROW .)
    ID              reduce using rule 63 (dereferenced_reference -> location ARROW .)
    ELSE            reduce using rule 63 (dereferenced_reference -> location ARROW .)
    ELSIF           reduce using rule 63 (dereferenced_reference -> location ARROW .)
    TO              reduce using rule 63 (dereferenced_reference -> location ARROW .)
    DOWN            reduce using rule 63 (dereferenced_reference -> location ARROW .)
    BY              reduce using rule 63 (dereferenced_reference -> location ARROW .)
    FI              reduce using rule 63 (dereferenced_reference -> location ARROW .)
    WHILE           reduce using rule 63 (dereferenced_reference -> location ARROW .)
    ASSIGN          reduce using rule 63 (dereferenced_reference -> location ARROW .)
    INCREASE        reduce using rule 63 (dereferenced_reference -> location ARROW .)
    DECREASE        reduce using rule 63 (dereferenced_reference -> location ARROW .)
    MULCREASE       reduce using rule 63 (dereferenced_reference -> location ARROW .)
    DIVCREASE       reduce using rule 63 (dereferenced_reference -> location ARROW .)
    MODCREASE       reduce using rule 63 (dereferenced_reference -> location ARROW .)


state 58

    (69) array_element -> array_location LBRACKET . expression_list RBRACKET
    (72) array_slice -> array_location LBRACKET . lower_bound COLON upper_bound RBRACKET
    (70) expression_list -> . expression
    (71) expression_list -> . expression_list COMMA expression
    (42) lower_bound -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    expression_list                shift and go to state 124
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    lower_bound                    shift and go to state 122
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 123
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 59

    (80) literal -> character_literal .

    TIMES           reduce using rule 80 (literal -> character_literal .)
    DIVIDE          reduce using rule 80 (literal -> character_literal .)
    MOD             reduce using rule 80 (literal -> character_literal .)
    PLUS            reduce using rule 80 (literal -> character_literal .)
    MINUS           reduce using rule 80 (literal -> character_literal .)
    STRCAT          reduce using rule 80 (literal -> character_literal .)
    AND             reduce using rule 80 (literal -> character_literal .)
    OR              reduce using rule 80 (literal -> character_literal .)
    EQUAL           reduce using rule 80 (literal -> character_literal .)
    DIFF            reduce using rule 80 (literal -> character_literal .)
    GREATER         reduce using rule 80 (literal -> character_literal .)
    GREATEREQ       reduce using rule 80 (literal -> character_literal .)
    LESS            reduce using rule 80 (literal -> character_literal .)
    LESSEQ          reduce using rule 80 (literal -> character_literal .)
    IN              reduce using rule 80 (literal -> character_literal .)
    COLON           reduce using rule 80 (literal -> character_literal .)
    LBRACKET        reduce using rule 80 (literal -> character_literal .)
    TO              reduce using rule 80 (literal -> character_literal .)
    DOWN            reduce using rule 80 (literal -> character_literal .)
    BY              reduce using rule 80 (literal -> character_literal .)
    RPAREN          reduce using rule 80 (literal -> character_literal .)
    COMMA           reduce using rule 80 (literal -> character_literal .)
    RBRACKET        reduce using rule 80 (literal -> character_literal .)
    THEN            reduce using rule 80 (literal -> character_literal .)
    SEMI            reduce using rule 80 (literal -> character_literal .)
    ID              reduce using rule 80 (literal -> character_literal .)
    ELSE            reduce using rule 80 (literal -> character_literal .)
    ELSIF           reduce using rule 80 (literal -> character_literal .)
    FI              reduce using rule 80 (literal -> character_literal .)
    WHILE           reduce using rule 80 (literal -> character_literal .)


state 60

    (87) empty_literal -> NULL .

    TIMES           reduce using rule 87 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 87 (empty_literal -> NULL .)
    MOD             reduce using rule 87 (empty_literal -> NULL .)
    PLUS            reduce using rule 87 (empty_literal -> NULL .)
    MINUS           reduce using rule 87 (empty_literal -> NULL .)
    STRCAT          reduce using rule 87 (empty_literal -> NULL .)
    AND             reduce using rule 87 (empty_literal -> NULL .)
    OR              reduce using rule 87 (empty_literal -> NULL .)
    EQUAL           reduce using rule 87 (empty_literal -> NULL .)
    DIFF            reduce using rule 87 (empty_literal -> NULL .)
    GREATER         reduce using rule 87 (empty_literal -> NULL .)
    GREATEREQ       reduce using rule 87 (empty_literal -> NULL .)
    LESS            reduce using rule 87 (empty_literal -> NULL .)
    LESSEQ          reduce using rule 87 (empty_literal -> NULL .)
    IN              reduce using rule 87 (empty_literal -> NULL .)
    SEMI            reduce using rule 87 (empty_literal -> NULL .)
    LBRACKET        reduce using rule 87 (empty_literal -> NULL .)
    ELSE            reduce using rule 87 (empty_literal -> NULL .)
    ELSIF           reduce using rule 87 (empty_literal -> NULL .)
    TO              reduce using rule 87 (empty_literal -> NULL .)
    DOWN            reduce using rule 87 (empty_literal -> NULL .)
    BY              reduce using rule 87 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 87 (empty_literal -> NULL .)
    THEN            reduce using rule 87 (empty_literal -> NULL .)
    COMMA           reduce using rule 87 (empty_literal -> NULL .)
    COLON           reduce using rule 87 (empty_literal -> NULL .)
    RPAREN          reduce using rule 87 (empty_literal -> NULL .)
    ID              reduce using rule 87 (empty_literal -> NULL .)
    FI              reduce using rule 87 (empty_literal -> NULL .)
    WHILE           reduce using rule 87 (empty_literal -> NULL .)


state 61

    (92) parenthesized_expression -> LPAREN . expression RPAREN
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_string_literal       shift and go to state 62
    array_element                  shift and go to state 3
    character_literal              shift and go to state 59
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 125
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 62

    (82) literal -> character_string_literal .

    TIMES           reduce using rule 82 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 82 (literal -> character_string_literal .)
    MOD             reduce using rule 82 (literal -> character_string_literal .)
    PLUS            reduce using rule 82 (literal -> character_string_literal .)
    MINUS           reduce using rule 82 (literal -> character_string_literal .)
    STRCAT          reduce using rule 82 (literal -> character_string_literal .)
    AND             reduce using rule 82 (literal -> character_string_literal .)
    OR              reduce using rule 82 (literal -> character_string_literal .)
    EQUAL           reduce using rule 82 (literal -> character_string_literal .)
    DIFF            reduce using rule 82 (literal -> character_string_literal .)
    GREATER         reduce using rule 82 (literal -> character_string_literal .)
    GREATEREQ       reduce using rule 82 (literal -> character_string_literal .)
    LESS            reduce using rule 82 (literal -> character_string_literal .)
    LESSEQ          reduce using rule 82 (literal -> character_string_literal .)
    IN              reduce using rule 82 (literal -> character_string_literal .)
    COLON           reduce using rule 82 (literal -> character_string_literal .)
    LBRACKET        reduce using rule 82 (literal -> character_string_literal .)
    TO              reduce using rule 82 (literal -> character_string_literal .)
    DOWN            reduce using rule 82 (literal -> character_string_literal .)
    BY              reduce using rule 82 (literal -> character_string_literal .)
    RPAREN          reduce using rule 82 (literal -> character_string_literal .)
    COMMA           reduce using rule 82 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 82 (literal -> character_string_literal .)
    THEN            reduce using rule 82 (literal -> character_string_literal .)
    SEMI            reduce using rule 82 (literal -> character_string_literal .)
    ID              reduce using rule 82 (literal -> character_string_literal .)
    ELSE            reduce using rule 82 (literal -> character_string_literal .)
    ELSIF           reduce using rule 82 (literal -> character_string_literal .)
    FI              reduce using rule 82 (literal -> character_string_literal .)
    WHILE           reduce using rule 82 (literal -> character_string_literal .)


state 63

    (131) operand4 -> location .
    (63) dereferenced_reference -> location . ARROW
    (73) array_location -> location .

    TIMES           reduce using rule 131 (operand4 -> location .)
    DIVIDE          reduce using rule 131 (operand4 -> location .)
    MOD             reduce using rule 131 (operand4 -> location .)
    PLUS            reduce using rule 131 (operand4 -> location .)
    MINUS           reduce using rule 131 (operand4 -> location .)
    STRCAT          reduce using rule 131 (operand4 -> location .)
    AND             reduce using rule 131 (operand4 -> location .)
    OR              reduce using rule 131 (operand4 -> location .)
    EQUAL           reduce using rule 131 (operand4 -> location .)
    DIFF            reduce using rule 131 (operand4 -> location .)
    GREATER         reduce using rule 131 (operand4 -> location .)
    GREATEREQ       reduce using rule 131 (operand4 -> location .)
    LESS            reduce using rule 131 (operand4 -> location .)
    LESSEQ          reduce using rule 131 (operand4 -> location .)
    IN              reduce using rule 131 (operand4 -> location .)
    RPAREN          reduce using rule 131 (operand4 -> location .)
    COMMA           reduce using rule 131 (operand4 -> location .)
    TO              reduce using rule 131 (operand4 -> location .)
    DOWN            reduce using rule 131 (operand4 -> location .)
    BY              reduce using rule 131 (operand4 -> location .)
    ELSE            reduce using rule 131 (operand4 -> location .)
    ELSIF           reduce using rule 131 (operand4 -> location .)
    THEN            reduce using rule 131 (operand4 -> location .)
    SEMI            reduce using rule 131 (operand4 -> location .)
    RBRACKET        reduce using rule 131 (operand4 -> location .)
    COLON           reduce using rule 131 (operand4 -> location .)
    ID              reduce using rule 131 (operand4 -> location .)
    FI              reduce using rule 131 (operand4 -> location .)
    WHILE           reduce using rule 131 (operand4 -> location .)
    ARROW           shift and go to state 57
    LBRACKET        reduce using rule 73 (array_location -> location .)


state 64

    (84) boolean_literal -> FALSE .

    TIMES           reduce using rule 84 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 84 (boolean_literal -> FALSE .)
    MOD             reduce using rule 84 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 84 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 84 (boolean_literal -> FALSE .)
    STRCAT          reduce using rule 84 (boolean_literal -> FALSE .)
    AND             reduce using rule 84 (boolean_literal -> FALSE .)
    OR              reduce using rule 84 (boolean_literal -> FALSE .)
    EQUAL           reduce using rule 84 (boolean_literal -> FALSE .)
    DIFF            reduce using rule 84 (boolean_literal -> FALSE .)
    GREATER         reduce using rule 84 (boolean_literal -> FALSE .)
    GREATEREQ       reduce using rule 84 (boolean_literal -> FALSE .)
    LESS            reduce using rule 84 (boolean_literal -> FALSE .)
    LESSEQ          reduce using rule 84 (boolean_literal -> FALSE .)
    IN              reduce using rule 84 (boolean_literal -> FALSE .)
    COLON           reduce using rule 84 (boolean_literal -> FALSE .)
    LBRACKET        reduce using rule 84 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 84 (boolean_literal -> FALSE .)
    ID              reduce using rule 84 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 84 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 84 (boolean_literal -> FALSE .)
    THEN            reduce using rule 84 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 84 (boolean_literal -> FALSE .)
    ELSE            reduce using rule 84 (boolean_literal -> FALSE .)
    ELSIF           reduce using rule 84 (boolean_literal -> FALSE .)
    TO              reduce using rule 84 (boolean_literal -> FALSE .)
    DOWN            reduce using rule 84 (boolean_literal -> FALSE .)
    BY              reduce using rule 84 (boolean_literal -> FALSE .)
    FI              reduce using rule 84 (boolean_literal -> FALSE .)
    WHILE           reduce using rule 84 (boolean_literal -> FALSE .)


state 65

    (95) conditional_expression -> IF . boolean_expression then_expression else_expression FI
    (96) conditional_expression -> IF . boolean_expression then_expression elsif_expression else_expression FI
    (97) boolean_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_string_literal       shift and go to state 62
    array_element                  shift and go to state 3
    character_literal              shift and go to state 59
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 90
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42
    boolean_expression             shift and go to state 126

state 66

    (78) literal -> integer_literal .

    TIMES           reduce using rule 78 (literal -> integer_literal .)
    DIVIDE          reduce using rule 78 (literal -> integer_literal .)
    MOD             reduce using rule 78 (literal -> integer_literal .)
    PLUS            reduce using rule 78 (literal -> integer_literal .)
    MINUS           reduce using rule 78 (literal -> integer_literal .)
    STRCAT          reduce using rule 78 (literal -> integer_literal .)
    AND             reduce using rule 78 (literal -> integer_literal .)
    OR              reduce using rule 78 (literal -> integer_literal .)
    EQUAL           reduce using rule 78 (literal -> integer_literal .)
    DIFF            reduce using rule 78 (literal -> integer_literal .)
    GREATER         reduce using rule 78 (literal -> integer_literal .)
    GREATEREQ       reduce using rule 78 (literal -> integer_literal .)
    LESS            reduce using rule 78 (literal -> integer_literal .)
    LESSEQ          reduce using rule 78 (literal -> integer_literal .)
    IN              reduce using rule 78 (literal -> integer_literal .)
    COLON           reduce using rule 78 (literal -> integer_literal .)
    LBRACKET        reduce using rule 78 (literal -> integer_literal .)
    TO              reduce using rule 78 (literal -> integer_literal .)
    DOWN            reduce using rule 78 (literal -> integer_literal .)
    BY              reduce using rule 78 (literal -> integer_literal .)
    RPAREN          reduce using rule 78 (literal -> integer_literal .)
    COMMA           reduce using rule 78 (literal -> integer_literal .)
    RBRACKET        reduce using rule 78 (literal -> integer_literal .)
    THEN            reduce using rule 78 (literal -> integer_literal .)
    SEMI            reduce using rule 78 (literal -> integer_literal .)
    ID              reduce using rule 78 (literal -> integer_literal .)
    ELSE            reduce using rule 78 (literal -> integer_literal .)
    ELSIF           reduce using rule 78 (literal -> integer_literal .)
    FI              reduce using rule 78 (literal -> integer_literal .)
    WHILE           reduce using rule 78 (literal -> integer_literal .)


state 67

    (127) operand3 -> operand4 .

    TIMES           reduce using rule 127 (operand3 -> operand4 .)
    DIVIDE          reduce using rule 127 (operand3 -> operand4 .)
    MOD             reduce using rule 127 (operand3 -> operand4 .)
    PLUS            reduce using rule 127 (operand3 -> operand4 .)
    MINUS           reduce using rule 127 (operand3 -> operand4 .)
    STRCAT          reduce using rule 127 (operand3 -> operand4 .)
    AND             reduce using rule 127 (operand3 -> operand4 .)
    OR              reduce using rule 127 (operand3 -> operand4 .)
    EQUAL           reduce using rule 127 (operand3 -> operand4 .)
    DIFF            reduce using rule 127 (operand3 -> operand4 .)
    GREATER         reduce using rule 127 (operand3 -> operand4 .)
    GREATEREQ       reduce using rule 127 (operand3 -> operand4 .)
    LESS            reduce using rule 127 (operand3 -> operand4 .)
    LESSEQ          reduce using rule 127 (operand3 -> operand4 .)
    IN              reduce using rule 127 (operand3 -> operand4 .)
    COLON           reduce using rule 127 (operand3 -> operand4 .)
    TO              reduce using rule 127 (operand3 -> operand4 .)
    DOWN            reduce using rule 127 (operand3 -> operand4 .)
    BY              reduce using rule 127 (operand3 -> operand4 .)
    WHILE           reduce using rule 127 (operand3 -> operand4 .)
    SEMI            reduce using rule 127 (operand3 -> operand4 .)
    RBRACKET        reduce using rule 127 (operand3 -> operand4 .)
    COMMA           reduce using rule 127 (operand3 -> operand4 .)
    RPAREN          reduce using rule 127 (operand3 -> operand4 .)
    THEN            reduce using rule 127 (operand3 -> operand4 .)
    FI              reduce using rule 127 (operand3 -> operand4 .)
    ID              reduce using rule 127 (operand3 -> operand4 .)
    ELSE            reduce using rule 127 (operand3 -> operand4 .)
    ELSIF           reduce using rule 127 (operand3 -> operand4 .)


state 68

    (89) value_array_element -> array_primitive_value . LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> array_primitive_value . LBRACKET lower_bound COLON upper_bound RBRACKET

    LBRACKET        shift and go to state 127


state 69

    (133) operand4 -> primitive_value .
    (91) array_primitive_value -> primitive_value .

    TIMES           reduce using rule 133 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 133 (operand4 -> primitive_value .)
    MOD             reduce using rule 133 (operand4 -> primitive_value .)
    PLUS            reduce using rule 133 (operand4 -> primitive_value .)
    MINUS           reduce using rule 133 (operand4 -> primitive_value .)
    STRCAT          reduce using rule 133 (operand4 -> primitive_value .)
    AND             reduce using rule 133 (operand4 -> primitive_value .)
    OR              reduce using rule 133 (operand4 -> primitive_value .)
    EQUAL           reduce using rule 133 (operand4 -> primitive_value .)
    DIFF            reduce using rule 133 (operand4 -> primitive_value .)
    GREATER         reduce using rule 133 (operand4 -> primitive_value .)
    GREATEREQ       reduce using rule 133 (operand4 -> primitive_value .)
    LESS            reduce using rule 133 (operand4 -> primitive_value .)
    LESSEQ          reduce using rule 133 (operand4 -> primitive_value .)
    IN              reduce using rule 133 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 133 (operand4 -> primitive_value .)
    COMMA           reduce using rule 133 (operand4 -> primitive_value .)
    TO              reduce using rule 133 (operand4 -> primitive_value .)
    DOWN            reduce using rule 133 (operand4 -> primitive_value .)
    BY              reduce using rule 133 (operand4 -> primitive_value .)
    ELSE            reduce using rule 133 (operand4 -> primitive_value .)
    ELSIF           reduce using rule 133 (operand4 -> primitive_value .)
    THEN            reduce using rule 133 (operand4 -> primitive_value .)
    SEMI            reduce using rule 133 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 133 (operand4 -> primitive_value .)
    COLON           reduce using rule 133 (operand4 -> primitive_value .)
    ID              reduce using rule 133 (operand4 -> primitive_value .)
    FI              reduce using rule 133 (operand4 -> primitive_value .)
    WHILE           reduce using rule 133 (operand4 -> primitive_value .)
    LBRACKET        reduce using rule 91 (array_primitive_value -> primitive_value .)


state 70

    (122) operand2 -> operand3 .

    TIMES           reduce using rule 122 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 122 (operand2 -> operand3 .)
    MOD             reduce using rule 122 (operand2 -> operand3 .)
    PLUS            reduce using rule 122 (operand2 -> operand3 .)
    MINUS           reduce using rule 122 (operand2 -> operand3 .)
    STRCAT          reduce using rule 122 (operand2 -> operand3 .)
    AND             reduce using rule 122 (operand2 -> operand3 .)
    OR              reduce using rule 122 (operand2 -> operand3 .)
    EQUAL           reduce using rule 122 (operand2 -> operand3 .)
    DIFF            reduce using rule 122 (operand2 -> operand3 .)
    GREATER         reduce using rule 122 (operand2 -> operand3 .)
    GREATEREQ       reduce using rule 122 (operand2 -> operand3 .)
    LESS            reduce using rule 122 (operand2 -> operand3 .)
    LESSEQ          reduce using rule 122 (operand2 -> operand3 .)
    IN              reduce using rule 122 (operand2 -> operand3 .)
    SEMI            reduce using rule 122 (operand2 -> operand3 .)
    ID              reduce using rule 122 (operand2 -> operand3 .)
    COMMA           reduce using rule 122 (operand2 -> operand3 .)
    THEN            reduce using rule 122 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 122 (operand2 -> operand3 .)
    COLON           reduce using rule 122 (operand2 -> operand3 .)
    RPAREN          reduce using rule 122 (operand2 -> operand3 .)
    ELSE            reduce using rule 122 (operand2 -> operand3 .)
    ELSIF           reduce using rule 122 (operand2 -> operand3 .)
    TO              reduce using rule 122 (operand2 -> operand3 .)
    DOWN            reduce using rule 122 (operand2 -> operand3 .)
    BY              reduce using rule 122 (operand2 -> operand3 .)
    FI              reduce using rule 122 (operand2 -> operand3 .)
    WHILE           reduce using rule 122 (operand2 -> operand3 .)


state 71

    (79) literal -> boolean_literal .

    TIMES           reduce using rule 79 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 79 (literal -> boolean_literal .)
    MOD             reduce using rule 79 (literal -> boolean_literal .)
    PLUS            reduce using rule 79 (literal -> boolean_literal .)
    MINUS           reduce using rule 79 (literal -> boolean_literal .)
    STRCAT          reduce using rule 79 (literal -> boolean_literal .)
    AND             reduce using rule 79 (literal -> boolean_literal .)
    OR              reduce using rule 79 (literal -> boolean_literal .)
    EQUAL           reduce using rule 79 (literal -> boolean_literal .)
    DIFF            reduce using rule 79 (literal -> boolean_literal .)
    GREATER         reduce using rule 79 (literal -> boolean_literal .)
    GREATEREQ       reduce using rule 79 (literal -> boolean_literal .)
    LESS            reduce using rule 79 (literal -> boolean_literal .)
    LESSEQ          reduce using rule 79 (literal -> boolean_literal .)
    IN              reduce using rule 79 (literal -> boolean_literal .)
    COLON           reduce using rule 79 (literal -> boolean_literal .)
    LBRACKET        reduce using rule 79 (literal -> boolean_literal .)
    TO              reduce using rule 79 (literal -> boolean_literal .)
    DOWN            reduce using rule 79 (literal -> boolean_literal .)
    BY              reduce using rule 79 (literal -> boolean_literal .)
    RPAREN          reduce using rule 79 (literal -> boolean_literal .)
    COMMA           reduce using rule 79 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 79 (literal -> boolean_literal .)
    THEN            reduce using rule 79 (literal -> boolean_literal .)
    SEMI            reduce using rule 79 (literal -> boolean_literal .)
    ID              reduce using rule 79 (literal -> boolean_literal .)
    ELSE            reduce using rule 79 (literal -> boolean_literal .)
    ELSIF           reduce using rule 79 (literal -> boolean_literal .)
    FI              reduce using rule 79 (literal -> boolean_literal .)
    WHILE           reduce using rule 79 (literal -> boolean_literal .)


state 72

    (132) operand4 -> referenced_location .

    TIMES           reduce using rule 132 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 132 (operand4 -> referenced_location .)
    MOD             reduce using rule 132 (operand4 -> referenced_location .)
    PLUS            reduce using rule 132 (operand4 -> referenced_location .)
    MINUS           reduce using rule 132 (operand4 -> referenced_location .)
    STRCAT          reduce using rule 132 (operand4 -> referenced_location .)
    AND             reduce using rule 132 (operand4 -> referenced_location .)
    OR              reduce using rule 132 (operand4 -> referenced_location .)
    EQUAL           reduce using rule 132 (operand4 -> referenced_location .)
    DIFF            reduce using rule 132 (operand4 -> referenced_location .)
    GREATER         reduce using rule 132 (operand4 -> referenced_location .)
    GREATEREQ       reduce using rule 132 (operand4 -> referenced_location .)
    LESS            reduce using rule 132 (operand4 -> referenced_location .)
    LESSEQ          reduce using rule 132 (operand4 -> referenced_location .)
    IN              reduce using rule 132 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 132 (operand4 -> referenced_location .)
    COMMA           reduce using rule 132 (operand4 -> referenced_location .)
    TO              reduce using rule 132 (operand4 -> referenced_location .)
    DOWN            reduce using rule 132 (operand4 -> referenced_location .)
    BY              reduce using rule 132 (operand4 -> referenced_location .)
    ELSE            reduce using rule 132 (operand4 -> referenced_location .)
    ELSIF           reduce using rule 132 (operand4 -> referenced_location .)
    THEN            reduce using rule 132 (operand4 -> referenced_location .)
    SEMI            reduce using rule 132 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 132 (operand4 -> referenced_location .)
    COLON           reduce using rule 132 (operand4 -> referenced_location .)
    ID              reduce using rule 132 (operand4 -> referenced_location .)
    FI              reduce using rule 132 (operand4 -> referenced_location .)
    WHILE           reduce using rule 132 (operand4 -> referenced_location .)


state 73

    (129) monadic_operator -> MINUS .

    ARROW           reduce using rule 129 (monadic_operator -> MINUS .)
    ID              reduce using rule 129 (monadic_operator -> MINUS .)
    LPAREN          reduce using rule 129 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 129 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 129 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 129 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 129 (monadic_operator -> MINUS .)
    NULL            reduce using rule 129 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 129 (monadic_operator -> MINUS .)
    ABS             reduce using rule 129 (monadic_operator -> MINUS .)
    ASC             reduce using rule 129 (monadic_operator -> MINUS .)
    NUM             reduce using rule 129 (monadic_operator -> MINUS .)
    UPPER           reduce using rule 129 (monadic_operator -> MINUS .)
    LOWER           reduce using rule 129 (monadic_operator -> MINUS .)
    LENGTH          reduce using rule 129 (monadic_operator -> MINUS .)
    READ            reduce using rule 129 (monadic_operator -> MINUS .)
    PRINT           reduce using rule 129 (monadic_operator -> MINUS .)


state 74

    (77) primitive_value -> parenthesized_expression .

    TIMES           reduce using rule 77 (primitive_value -> parenthesized_expression .)
    DIVIDE          reduce using rule 77 (primitive_value -> parenthesized_expression .)
    MOD             reduce using rule 77 (primitive_value -> parenthesized_expression .)
    PLUS            reduce using rule 77 (primitive_value -> parenthesized_expression .)
    MINUS           reduce using rule 77 (primitive_value -> parenthesized_expression .)
    STRCAT          reduce using rule 77 (primitive_value -> parenthesized_expression .)
    AND             reduce using rule 77 (primitive_value -> parenthesized_expression .)
    OR              reduce using rule 77 (primitive_value -> parenthesized_expression .)
    EQUAL           reduce using rule 77 (primitive_value -> parenthesized_expression .)
    DIFF            reduce using rule 77 (primitive_value -> parenthesized_expression .)
    GREATER         reduce using rule 77 (primitive_value -> parenthesized_expression .)
    GREATEREQ       reduce using rule 77 (primitive_value -> parenthesized_expression .)
    LESS            reduce using rule 77 (primitive_value -> parenthesized_expression .)
    LESSEQ          reduce using rule 77 (primitive_value -> parenthesized_expression .)
    IN              reduce using rule 77 (primitive_value -> parenthesized_expression .)
    WHILE           reduce using rule 77 (primitive_value -> parenthesized_expression .)
    SEMI            reduce using rule 77 (primitive_value -> parenthesized_expression .)
    LBRACKET        reduce using rule 77 (primitive_value -> parenthesized_expression .)
    THEN            reduce using rule 77 (primitive_value -> parenthesized_expression .)
    COLON           reduce using rule 77 (primitive_value -> parenthesized_expression .)
    RBRACKET        reduce using rule 77 (primitive_value -> parenthesized_expression .)
    ELSE            reduce using rule 77 (primitive_value -> parenthesized_expression .)
    ELSIF           reduce using rule 77 (primitive_value -> parenthesized_expression .)
    COMMA           reduce using rule 77 (primitive_value -> parenthesized_expression .)
    RPAREN          reduce using rule 77 (primitive_value -> parenthesized_expression .)
    ID              reduce using rule 77 (primitive_value -> parenthesized_expression .)
    TO              reduce using rule 77 (primitive_value -> parenthesized_expression .)
    DOWN            reduce using rule 77 (primitive_value -> parenthesized_expression .)
    BY              reduce using rule 77 (primitive_value -> parenthesized_expression .)
    FI              reduce using rule 77 (primitive_value -> parenthesized_expression .)


state 75

    (134) referenced_location -> ARROW . location
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    ID              shift and go to state 19
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    array_location                 shift and go to state 10
    builtin_name                   shift and go to state 24
    string_slice                   shift and go to state 37
    location                       shift and go to state 128
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    identifier                     shift and go to state 78
    array_slice                    shift and go to state 42
    string_element                 shift and go to state 35

state 76

    (76) primitive_value -> value_array_slice .

    TIMES           reduce using rule 76 (primitive_value -> value_array_slice .)
    DIVIDE          reduce using rule 76 (primitive_value -> value_array_slice .)
    MOD             reduce using rule 76 (primitive_value -> value_array_slice .)
    PLUS            reduce using rule 76 (primitive_value -> value_array_slice .)
    MINUS           reduce using rule 76 (primitive_value -> value_array_slice .)
    STRCAT          reduce using rule 76 (primitive_value -> value_array_slice .)
    AND             reduce using rule 76 (primitive_value -> value_array_slice .)
    OR              reduce using rule 76 (primitive_value -> value_array_slice .)
    EQUAL           reduce using rule 76 (primitive_value -> value_array_slice .)
    DIFF            reduce using rule 76 (primitive_value -> value_array_slice .)
    GREATER         reduce using rule 76 (primitive_value -> value_array_slice .)
    GREATEREQ       reduce using rule 76 (primitive_value -> value_array_slice .)
    LESS            reduce using rule 76 (primitive_value -> value_array_slice .)
    LESSEQ          reduce using rule 76 (primitive_value -> value_array_slice .)
    IN              reduce using rule 76 (primitive_value -> value_array_slice .)
    WHILE           reduce using rule 76 (primitive_value -> value_array_slice .)
    SEMI            reduce using rule 76 (primitive_value -> value_array_slice .)
    LBRACKET        reduce using rule 76 (primitive_value -> value_array_slice .)
    THEN            reduce using rule 76 (primitive_value -> value_array_slice .)
    COLON           reduce using rule 76 (primitive_value -> value_array_slice .)
    RBRACKET        reduce using rule 76 (primitive_value -> value_array_slice .)
    ELSE            reduce using rule 76 (primitive_value -> value_array_slice .)
    ELSIF           reduce using rule 76 (primitive_value -> value_array_slice .)
    COMMA           reduce using rule 76 (primitive_value -> value_array_slice .)
    RPAREN          reduce using rule 76 (primitive_value -> value_array_slice .)
    ID              reduce using rule 76 (primitive_value -> value_array_slice .)
    TO              reduce using rule 76 (primitive_value -> value_array_slice .)
    DOWN            reduce using rule 76 (primitive_value -> value_array_slice .)
    BY              reduce using rule 76 (primitive_value -> value_array_slice .)
    FI              reduce using rule 76 (primitive_value -> value_array_slice .)


state 77

    (74) primitive_value -> literal .

    TIMES           reduce using rule 74 (primitive_value -> literal .)
    DIVIDE          reduce using rule 74 (primitive_value -> literal .)
    MOD             reduce using rule 74 (primitive_value -> literal .)
    PLUS            reduce using rule 74 (primitive_value -> literal .)
    MINUS           reduce using rule 74 (primitive_value -> literal .)
    STRCAT          reduce using rule 74 (primitive_value -> literal .)
    AND             reduce using rule 74 (primitive_value -> literal .)
    OR              reduce using rule 74 (primitive_value -> literal .)
    EQUAL           reduce using rule 74 (primitive_value -> literal .)
    DIFF            reduce using rule 74 (primitive_value -> literal .)
    GREATER         reduce using rule 74 (primitive_value -> literal .)
    GREATEREQ       reduce using rule 74 (primitive_value -> literal .)
    LESS            reduce using rule 74 (primitive_value -> literal .)
    LESSEQ          reduce using rule 74 (primitive_value -> literal .)
    IN              reduce using rule 74 (primitive_value -> literal .)
    WHILE           reduce using rule 74 (primitive_value -> literal .)
    SEMI            reduce using rule 74 (primitive_value -> literal .)
    LBRACKET        reduce using rule 74 (primitive_value -> literal .)
    THEN            reduce using rule 74 (primitive_value -> literal .)
    COLON           reduce using rule 74 (primitive_value -> literal .)
    RBRACKET        reduce using rule 74 (primitive_value -> literal .)
    ELSE            reduce using rule 74 (primitive_value -> literal .)
    ELSIF           reduce using rule 74 (primitive_value -> literal .)
    COMMA           reduce using rule 74 (primitive_value -> literal .)
    RPAREN          reduce using rule 74 (primitive_value -> literal .)
    ID              reduce using rule 74 (primitive_value -> literal .)
    TO              reduce using rule 74 (primitive_value -> literal .)
    DOWN            reduce using rule 74 (primitive_value -> literal .)
    BY              reduce using rule 74 (primitive_value -> literal .)
    FI              reduce using rule 74 (primitive_value -> literal .)


state 78

    (56) location -> identifier .
    (64) string_element -> identifier . LBRACKET start_element RBRACKET
    (66) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET
    (187) procedure_call -> identifier . LPAREN RPAREN
    (188) procedure_call -> identifier . LPAREN parameter_list RPAREN

  ! shift/reduce conflict for LBRACKET resolved as shift
    ARROW           reduce using rule 56 (location -> identifier .)
    TIMES           reduce using rule 56 (location -> identifier .)
    DIVIDE          reduce using rule 56 (location -> identifier .)
    MOD             reduce using rule 56 (location -> identifier .)
    PLUS            reduce using rule 56 (location -> identifier .)
    MINUS           reduce using rule 56 (location -> identifier .)
    STRCAT          reduce using rule 56 (location -> identifier .)
    AND             reduce using rule 56 (location -> identifier .)
    OR              reduce using rule 56 (location -> identifier .)
    EQUAL           reduce using rule 56 (location -> identifier .)
    DIFF            reduce using rule 56 (location -> identifier .)
    GREATER         reduce using rule 56 (location -> identifier .)
    GREATEREQ       reduce using rule 56 (location -> identifier .)
    LESS            reduce using rule 56 (location -> identifier .)
    LESSEQ          reduce using rule 56 (location -> identifier .)
    IN              reduce using rule 56 (location -> identifier .)
    WHILE           reduce using rule 56 (location -> identifier .)
    SEMI            reduce using rule 56 (location -> identifier .)
    THEN            reduce using rule 56 (location -> identifier .)
    RBRACKET        reduce using rule 56 (location -> identifier .)
    COMMA           reduce using rule 56 (location -> identifier .)
    COLON           reduce using rule 56 (location -> identifier .)
    RPAREN          reduce using rule 56 (location -> identifier .)
    ID              reduce using rule 56 (location -> identifier .)
    ELSE            reduce using rule 56 (location -> identifier .)
    ELSIF           reduce using rule 56 (location -> identifier .)
    TO              reduce using rule 56 (location -> identifier .)
    DOWN            reduce using rule 56 (location -> identifier .)
    BY              reduce using rule 56 (location -> identifier .)
    FI              reduce using rule 56 (location -> identifier .)
    LBRACKET        shift and go to state 103
    LPAREN          shift and go to state 104

  ! LBRACKET        [ reduce using rule 56 (location -> identifier .) ]


state 79

    (102) operand0 -> operand1 .
    (116) operand1 -> operand1 . operator2 operand2
    (117) operator2 -> . arithmetic_additive_operator
    (118) operator2 -> . string_concatenation_operator
    (119) arithmetic_additive_operator -> . PLUS
    (120) arithmetic_additive_operator -> . MINUS
    (121) string_concatenation_operator -> . STRCAT

    AND             reduce using rule 102 (operand0 -> operand1 .)
    OR              reduce using rule 102 (operand0 -> operand1 .)
    EQUAL           reduce using rule 102 (operand0 -> operand1 .)
    DIFF            reduce using rule 102 (operand0 -> operand1 .)
    GREATER         reduce using rule 102 (operand0 -> operand1 .)
    GREATEREQ       reduce using rule 102 (operand0 -> operand1 .)
    LESS            reduce using rule 102 (operand0 -> operand1 .)
    LESSEQ          reduce using rule 102 (operand0 -> operand1 .)
    IN              reduce using rule 102 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 102 (operand0 -> operand1 .)
    COMMA           reduce using rule 102 (operand0 -> operand1 .)
    COLON           reduce using rule 102 (operand0 -> operand1 .)
    THEN            reduce using rule 102 (operand0 -> operand1 .)
    WHILE           reduce using rule 102 (operand0 -> operand1 .)
    SEMI            reduce using rule 102 (operand0 -> operand1 .)
    RPAREN          reduce using rule 102 (operand0 -> operand1 .)
    ELSE            reduce using rule 102 (operand0 -> operand1 .)
    ELSIF           reduce using rule 102 (operand0 -> operand1 .)
    TO              reduce using rule 102 (operand0 -> operand1 .)
    DOWN            reduce using rule 102 (operand0 -> operand1 .)
    BY              reduce using rule 102 (operand0 -> operand1 .)
    ID              reduce using rule 102 (operand0 -> operand1 .)
    FI              reduce using rule 102 (operand0 -> operand1 .)
    PLUS            shift and go to state 133
    MINUS           shift and go to state 129
    STRCAT          shift and go to state 130

    operator2                      shift and go to state 132
    arithmetic_additive_operator   shift and go to state 131
    string_concatenation_operator  shift and go to state 134

state 80

    (81) literal -> empty_literal .

    TIMES           reduce using rule 81 (literal -> empty_literal .)
    DIVIDE          reduce using rule 81 (literal -> empty_literal .)
    MOD             reduce using rule 81 (literal -> empty_literal .)
    PLUS            reduce using rule 81 (literal -> empty_literal .)
    MINUS           reduce using rule 81 (literal -> empty_literal .)
    STRCAT          reduce using rule 81 (literal -> empty_literal .)
    AND             reduce using rule 81 (literal -> empty_literal .)
    OR              reduce using rule 81 (literal -> empty_literal .)
    EQUAL           reduce using rule 81 (literal -> empty_literal .)
    DIFF            reduce using rule 81 (literal -> empty_literal .)
    GREATER         reduce using rule 81 (literal -> empty_literal .)
    GREATEREQ       reduce using rule 81 (literal -> empty_literal .)
    LESS            reduce using rule 81 (literal -> empty_literal .)
    LESSEQ          reduce using rule 81 (literal -> empty_literal .)
    IN              reduce using rule 81 (literal -> empty_literal .)
    COLON           reduce using rule 81 (literal -> empty_literal .)
    LBRACKET        reduce using rule 81 (literal -> empty_literal .)
    TO              reduce using rule 81 (literal -> empty_literal .)
    DOWN            reduce using rule 81 (literal -> empty_literal .)
    BY              reduce using rule 81 (literal -> empty_literal .)
    RPAREN          reduce using rule 81 (literal -> empty_literal .)
    COMMA           reduce using rule 81 (literal -> empty_literal .)
    RBRACKET        reduce using rule 81 (literal -> empty_literal .)
    THEN            reduce using rule 81 (literal -> empty_literal .)
    SEMI            reduce using rule 81 (literal -> empty_literal .)
    ID              reduce using rule 81 (literal -> empty_literal .)
    ELSE            reduce using rule 81 (literal -> empty_literal .)
    ELSIF           reduce using rule 81 (literal -> empty_literal .)
    FI              reduce using rule 81 (literal -> empty_literal .)
    WHILE           reduce using rule 81 (literal -> empty_literal .)


state 81

    (85) boolean_literal -> TRUE .

    TIMES           reduce using rule 85 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 85 (boolean_literal -> TRUE .)
    MOD             reduce using rule 85 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 85 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 85 (boolean_literal -> TRUE .)
    STRCAT          reduce using rule 85 (boolean_literal -> TRUE .)
    AND             reduce using rule 85 (boolean_literal -> TRUE .)
    OR              reduce using rule 85 (boolean_literal -> TRUE .)
    EQUAL           reduce using rule 85 (boolean_literal -> TRUE .)
    DIFF            reduce using rule 85 (boolean_literal -> TRUE .)
    GREATER         reduce using rule 85 (boolean_literal -> TRUE .)
    GREATEREQ       reduce using rule 85 (boolean_literal -> TRUE .)
    LESS            reduce using rule 85 (boolean_literal -> TRUE .)
    LESSEQ          reduce using rule 85 (boolean_literal -> TRUE .)
    IN              reduce using rule 85 (boolean_literal -> TRUE .)
    COLON           reduce using rule 85 (boolean_literal -> TRUE .)
    LBRACKET        reduce using rule 85 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 85 (boolean_literal -> TRUE .)
    ID              reduce using rule 85 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 85 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 85 (boolean_literal -> TRUE .)
    THEN            reduce using rule 85 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 85 (boolean_literal -> TRUE .)
    ELSE            reduce using rule 85 (boolean_literal -> TRUE .)
    ELSIF           reduce using rule 85 (boolean_literal -> TRUE .)
    TO              reduce using rule 85 (boolean_literal -> TRUE .)
    DOWN            reduce using rule 85 (boolean_literal -> TRUE .)
    BY              reduce using rule 85 (boolean_literal -> TRUE .)
    FI              reduce using rule 85 (boolean_literal -> TRUE .)
    WHILE           reduce using rule 85 (boolean_literal -> TRUE .)


state 82

    (86) character_literal -> CCONST .

    TIMES           reduce using rule 86 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 86 (character_literal -> CCONST .)
    MOD             reduce using rule 86 (character_literal -> CCONST .)
    PLUS            reduce using rule 86 (character_literal -> CCONST .)
    MINUS           reduce using rule 86 (character_literal -> CCONST .)
    STRCAT          reduce using rule 86 (character_literal -> CCONST .)
    AND             reduce using rule 86 (character_literal -> CCONST .)
    OR              reduce using rule 86 (character_literal -> CCONST .)
    EQUAL           reduce using rule 86 (character_literal -> CCONST .)
    DIFF            reduce using rule 86 (character_literal -> CCONST .)
    GREATER         reduce using rule 86 (character_literal -> CCONST .)
    GREATEREQ       reduce using rule 86 (character_literal -> CCONST .)
    LESS            reduce using rule 86 (character_literal -> CCONST .)
    LESSEQ          reduce using rule 86 (character_literal -> CCONST .)
    IN              reduce using rule 86 (character_literal -> CCONST .)
    SEMI            reduce using rule 86 (character_literal -> CCONST .)
    ID              reduce using rule 86 (character_literal -> CCONST .)
    COMMA           reduce using rule 86 (character_literal -> CCONST .)
    LBRACKET        reduce using rule 86 (character_literal -> CCONST .)
    FI              reduce using rule 86 (character_literal -> CCONST .)
    WHILE           reduce using rule 86 (character_literal -> CCONST .)
    RPAREN          reduce using rule 86 (character_literal -> CCONST .)
    THEN            reduce using rule 86 (character_literal -> CCONST .)
    COLON           reduce using rule 86 (character_literal -> CCONST .)
    TO              reduce using rule 86 (character_literal -> CCONST .)
    DOWN            reduce using rule 86 (character_literal -> CCONST .)
    BY              reduce using rule 86 (character_literal -> CCONST .)
    ELSE            reduce using rule 86 (character_literal -> CCONST .)
    ELSIF           reduce using rule 86 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 86 (character_literal -> CCONST .)


state 83

    (128) operand3 -> monadic_operator . operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    empty_literal                  shift and go to state 80
    character_literal              shift and go to state 59
    array_element                  shift and go to state 3
    integer_literal                shift and go to state 66
    character_string_literal       shift and go to state 62
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    location                       shift and go to state 63
    identifier                     shift and go to state 78
    operand4                       shift and go to state 135
    boolean_literal                shift and go to state 71
    array_primitive_value          shift and go to state 68
    string_element                 shift and go to state 35
    primitive_value                shift and go to state 69
    array_location                 shift and go to state 10
    string_slice                   shift and go to state 37
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    value_array_element            shift and go to state 92
    builtin_name                   shift and go to state 24
    array_slice                    shift and go to state 42

state 84

    (130) monadic_operator -> NOT .

    ARROW           reduce using rule 130 (monadic_operator -> NOT .)
    ID              reduce using rule 130 (monadic_operator -> NOT .)
    LPAREN          reduce using rule 130 (monadic_operator -> NOT .)
    ICONST          reduce using rule 130 (monadic_operator -> NOT .)
    FALSE           reduce using rule 130 (monadic_operator -> NOT .)
    TRUE            reduce using rule 130 (monadic_operator -> NOT .)
    CCONST          reduce using rule 130 (monadic_operator -> NOT .)
    NULL            reduce using rule 130 (monadic_operator -> NOT .)
    SCONST          reduce using rule 130 (monadic_operator -> NOT .)
    ABS             reduce using rule 130 (monadic_operator -> NOT .)
    ASC             reduce using rule 130 (monadic_operator -> NOT .)
    NUM             reduce using rule 130 (monadic_operator -> NOT .)
    UPPER           reduce using rule 130 (monadic_operator -> NOT .)
    LOWER           reduce using rule 130 (monadic_operator -> NOT .)
    LENGTH          reduce using rule 130 (monadic_operator -> NOT .)
    READ            reduce using rule 130 (monadic_operator -> NOT .)
    PRINT           reduce using rule 130 (monadic_operator -> NOT .)


state 85

    (83) integer_literal -> ICONST .

    TIMES           reduce using rule 83 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 83 (integer_literal -> ICONST .)
    MOD             reduce using rule 83 (integer_literal -> ICONST .)
    PLUS            reduce using rule 83 (integer_literal -> ICONST .)
    MINUS           reduce using rule 83 (integer_literal -> ICONST .)
    STRCAT          reduce using rule 83 (integer_literal -> ICONST .)
    AND             reduce using rule 83 (integer_literal -> ICONST .)
    OR              reduce using rule 83 (integer_literal -> ICONST .)
    EQUAL           reduce using rule 83 (integer_literal -> ICONST .)
    DIFF            reduce using rule 83 (integer_literal -> ICONST .)
    GREATER         reduce using rule 83 (integer_literal -> ICONST .)
    GREATEREQ       reduce using rule 83 (integer_literal -> ICONST .)
    LESS            reduce using rule 83 (integer_literal -> ICONST .)
    LESSEQ          reduce using rule 83 (integer_literal -> ICONST .)
    IN              reduce using rule 83 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 83 (integer_literal -> ICONST .)
    COMMA           reduce using rule 83 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 83 (integer_literal -> ICONST .)
    LBRACKET        reduce using rule 83 (integer_literal -> ICONST .)
    WHILE           reduce using rule 83 (integer_literal -> ICONST .)
    SEMI            reduce using rule 83 (integer_literal -> ICONST .)
    THEN            reduce using rule 83 (integer_literal -> ICONST .)
    COLON           reduce using rule 83 (integer_literal -> ICONST .)
    TO              reduce using rule 83 (integer_literal -> ICONST .)
    DOWN            reduce using rule 83 (integer_literal -> ICONST .)
    ID              reduce using rule 83 (integer_literal -> ICONST .)
    ELSE            reduce using rule 83 (integer_literal -> ICONST .)
    ELSIF           reduce using rule 83 (integer_literal -> ICONST .)
    BY              reduce using rule 83 (integer_literal -> ICONST .)
    FI              reduce using rule 83 (integer_literal -> ICONST .)


state 86

    (88) character_string_literal -> SCONST .

    TIMES           reduce using rule 88 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 88 (character_string_literal -> SCONST .)
    MOD             reduce using rule 88 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 88 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 88 (character_string_literal -> SCONST .)
    STRCAT          reduce using rule 88 (character_string_literal -> SCONST .)
    AND             reduce using rule 88 (character_string_literal -> SCONST .)
    OR              reduce using rule 88 (character_string_literal -> SCONST .)
    EQUAL           reduce using rule 88 (character_string_literal -> SCONST .)
    DIFF            reduce using rule 88 (character_string_literal -> SCONST .)
    GREATER         reduce using rule 88 (character_string_literal -> SCONST .)
    GREATEREQ       reduce using rule 88 (character_string_literal -> SCONST .)
    LESS            reduce using rule 88 (character_string_literal -> SCONST .)
    LESSEQ          reduce using rule 88 (character_string_literal -> SCONST .)
    IN              reduce using rule 88 (character_string_literal -> SCONST .)
    COLON           reduce using rule 88 (character_string_literal -> SCONST .)
    LBRACKET        reduce using rule 88 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 88 (character_string_literal -> SCONST .)
    THEN            reduce using rule 88 (character_string_literal -> SCONST .)
    FI              reduce using rule 88 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 88 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 88 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 88 (character_string_literal -> SCONST .)
    ID              reduce using rule 88 (character_string_literal -> SCONST .)
    ELSE            reduce using rule 88 (character_string_literal -> SCONST .)
    ELSIF           reduce using rule 88 (character_string_literal -> SCONST .)
    TO              reduce using rule 88 (character_string_literal -> SCONST .)
    DOWN            reduce using rule 88 (character_string_literal -> SCONST .)
    BY              reduce using rule 88 (character_string_literal -> SCONST .)
    WHILE           reduce using rule 88 (character_string_literal -> SCONST .)


state 87

    (93) expression -> operand0 .
    (103) operand0 -> operand0 . operator1 operand1
    (104) operator1 -> . relational_operator
    (105) operator1 -> . membership_operator
    (106) relational_operator -> . AND
    (107) relational_operator -> . OR
    (108) relational_operator -> . EQUAL
    (109) relational_operator -> . DIFF
    (110) relational_operator -> . GREATER
    (111) relational_operator -> . GREATEREQ
    (112) relational_operator -> . LESS
    (113) relational_operator -> . LESSEQ
    (114) membership_operator -> . IN

    WHILE           reduce using rule 93 (expression -> operand0 .)
    SEMI            reduce using rule 93 (expression -> operand0 .)
    RPAREN          reduce using rule 93 (expression -> operand0 .)
    COLON           reduce using rule 93 (expression -> operand0 .)
    THEN            reduce using rule 93 (expression -> operand0 .)
    RBRACKET        reduce using rule 93 (expression -> operand0 .)
    COMMA           reduce using rule 93 (expression -> operand0 .)
    FI              reduce using rule 93 (expression -> operand0 .)
    ELSE            reduce using rule 93 (expression -> operand0 .)
    ELSIF           reduce using rule 93 (expression -> operand0 .)
    TO              reduce using rule 93 (expression -> operand0 .)
    DOWN            reduce using rule 93 (expression -> operand0 .)
    BY              reduce using rule 93 (expression -> operand0 .)
    ID              reduce using rule 93 (expression -> operand0 .)
    AND             shift and go to state 147
    OR              shift and go to state 136
    EQUAL           shift and go to state 138
    DIFF            shift and go to state 146
    GREATER         shift and go to state 144
    GREATEREQ       shift and go to state 141
    LESS            shift and go to state 137
    LESSEQ          shift and go to state 140
    IN              shift and go to state 143

    relational_operator            shift and go to state 145
    operator1                      shift and go to state 139
    membership_operator            shift and go to state 142

state 88

    (94) expression -> conditional_expression .

    WHILE           reduce using rule 94 (expression -> conditional_expression .)
    SEMI            reduce using rule 94 (expression -> conditional_expression .)
    RPAREN          reduce using rule 94 (expression -> conditional_expression .)
    COLON           reduce using rule 94 (expression -> conditional_expression .)
    THEN            reduce using rule 94 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 94 (expression -> conditional_expression .)
    COMMA           reduce using rule 94 (expression -> conditional_expression .)
    FI              reduce using rule 94 (expression -> conditional_expression .)
    ELSE            reduce using rule 94 (expression -> conditional_expression .)
    ELSIF           reduce using rule 94 (expression -> conditional_expression .)
    TO              reduce using rule 94 (expression -> conditional_expression .)
    DOWN            reduce using rule 94 (expression -> conditional_expression .)
    BY              reduce using rule 94 (expression -> conditional_expression .)
    ID              reduce using rule 94 (expression -> conditional_expression .)


state 89

    (62) location -> call_action .

    ARROW           reduce using rule 62 (location -> call_action .)
    TIMES           reduce using rule 62 (location -> call_action .)
    DIVIDE          reduce using rule 62 (location -> call_action .)
    MOD             reduce using rule 62 (location -> call_action .)
    PLUS            reduce using rule 62 (location -> call_action .)
    MINUS           reduce using rule 62 (location -> call_action .)
    STRCAT          reduce using rule 62 (location -> call_action .)
    AND             reduce using rule 62 (location -> call_action .)
    OR              reduce using rule 62 (location -> call_action .)
    EQUAL           reduce using rule 62 (location -> call_action .)
    DIFF            reduce using rule 62 (location -> call_action .)
    GREATER         reduce using rule 62 (location -> call_action .)
    GREATEREQ       reduce using rule 62 (location -> call_action .)
    LESS            reduce using rule 62 (location -> call_action .)
    LESSEQ          reduce using rule 62 (location -> call_action .)
    IN              reduce using rule 62 (location -> call_action .)
    WHILE           reduce using rule 62 (location -> call_action .)
    SEMI            reduce using rule 62 (location -> call_action .)
    LBRACKET        reduce using rule 62 (location -> call_action .)
    THEN            reduce using rule 62 (location -> call_action .)
    RBRACKET        reduce using rule 62 (location -> call_action .)
    COMMA           reduce using rule 62 (location -> call_action .)
    COLON           reduce using rule 62 (location -> call_action .)
    RPAREN          reduce using rule 62 (location -> call_action .)
    ID              reduce using rule 62 (location -> call_action .)
    ELSE            reduce using rule 62 (location -> call_action .)
    ELSIF           reduce using rule 62 (location -> call_action .)
    TO              reduce using rule 62 (location -> call_action .)
    DOWN            reduce using rule 62 (location -> call_action .)
    BY              reduce using rule 62 (location -> call_action .)
    FI              reduce using rule 62 (location -> call_action .)


state 90

    (97) boolean_expression -> expression .

    THEN            reduce using rule 97 (boolean_expression -> expression .)
    SEMI            reduce using rule 97 (boolean_expression -> expression .)


state 91

    (115) operand1 -> operand2 .
    (123) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (124) arithmetic_multiplicative_operator -> . TIMES
    (125) arithmetic_multiplicative_operator -> . DIVIDE
    (126) arithmetic_multiplicative_operator -> . MOD

    PLUS            reduce using rule 115 (operand1 -> operand2 .)
    MINUS           reduce using rule 115 (operand1 -> operand2 .)
    STRCAT          reduce using rule 115 (operand1 -> operand2 .)
    AND             reduce using rule 115 (operand1 -> operand2 .)
    OR              reduce using rule 115 (operand1 -> operand2 .)
    EQUAL           reduce using rule 115 (operand1 -> operand2 .)
    DIFF            reduce using rule 115 (operand1 -> operand2 .)
    GREATER         reduce using rule 115 (operand1 -> operand2 .)
    GREATEREQ       reduce using rule 115 (operand1 -> operand2 .)
    LESS            reduce using rule 115 (operand1 -> operand2 .)
    LESSEQ          reduce using rule 115 (operand1 -> operand2 .)
    IN              reduce using rule 115 (operand1 -> operand2 .)
    RPAREN          reduce using rule 115 (operand1 -> operand2 .)
    THEN            reduce using rule 115 (operand1 -> operand2 .)
    ELSE            reduce using rule 115 (operand1 -> operand2 .)
    ELSIF           reduce using rule 115 (operand1 -> operand2 .)
    COLON           reduce using rule 115 (operand1 -> operand2 .)
    COMMA           reduce using rule 115 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 115 (operand1 -> operand2 .)
    SEMI            reduce using rule 115 (operand1 -> operand2 .)
    ID              reduce using rule 115 (operand1 -> operand2 .)
    TO              reduce using rule 115 (operand1 -> operand2 .)
    DOWN            reduce using rule 115 (operand1 -> operand2 .)
    BY              reduce using rule 115 (operand1 -> operand2 .)
    FI              reduce using rule 115 (operand1 -> operand2 .)
    WHILE           reduce using rule 115 (operand1 -> operand2 .)
    TIMES           shift and go to state 150
    DIVIDE          shift and go to state 151
    MOD             shift and go to state 149

    arithmetic_multiplicative_operator shift and go to state 148

state 92

    (75) primitive_value -> value_array_element .

    TIMES           reduce using rule 75 (primitive_value -> value_array_element .)
    DIVIDE          reduce using rule 75 (primitive_value -> value_array_element .)
    MOD             reduce using rule 75 (primitive_value -> value_array_element .)
    PLUS            reduce using rule 75 (primitive_value -> value_array_element .)
    MINUS           reduce using rule 75 (primitive_value -> value_array_element .)
    STRCAT          reduce using rule 75 (primitive_value -> value_array_element .)
    AND             reduce using rule 75 (primitive_value -> value_array_element .)
    OR              reduce using rule 75 (primitive_value -> value_array_element .)
    EQUAL           reduce using rule 75 (primitive_value -> value_array_element .)
    DIFF            reduce using rule 75 (primitive_value -> value_array_element .)
    GREATER         reduce using rule 75 (primitive_value -> value_array_element .)
    GREATEREQ       reduce using rule 75 (primitive_value -> value_array_element .)
    LESS            reduce using rule 75 (primitive_value -> value_array_element .)
    LESSEQ          reduce using rule 75 (primitive_value -> value_array_element .)
    IN              reduce using rule 75 (primitive_value -> value_array_element .)
    WHILE           reduce using rule 75 (primitive_value -> value_array_element .)
    SEMI            reduce using rule 75 (primitive_value -> value_array_element .)
    LBRACKET        reduce using rule 75 (primitive_value -> value_array_element .)
    THEN            reduce using rule 75 (primitive_value -> value_array_element .)
    COLON           reduce using rule 75 (primitive_value -> value_array_element .)
    RBRACKET        reduce using rule 75 (primitive_value -> value_array_element .)
    ELSE            reduce using rule 75 (primitive_value -> value_array_element .)
    ELSIF           reduce using rule 75 (primitive_value -> value_array_element .)
    COMMA           reduce using rule 75 (primitive_value -> value_array_element .)
    RPAREN          reduce using rule 75 (primitive_value -> value_array_element .)
    ID              reduce using rule 75 (primitive_value -> value_array_element .)
    TO              reduce using rule 75 (primitive_value -> value_array_element .)
    DOWN            reduce using rule 75 (primitive_value -> value_array_element .)
    BY              reduce using rule 75 (primitive_value -> value_array_element .)
    FI              reduce using rule 75 (primitive_value -> value_array_element .)


state 93

    (154) if_action -> IF boolean_expression . then_clause FI
    (155) if_action -> IF boolean_expression . then_clause else_clause FI
    (156) then_clause -> . THEN
    (157) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 153

    then_clause                    shift and go to state 152

state 94

    (194) return_action -> RETURN result .

    SEMI            reduce using rule 194 (return_action -> RETURN result .)


state 95

    (196) result -> expression .

    SEMI            reduce using rule 196 (result -> expression .)


state 96

    (3) statement_list -> statement_list statement .

    END             reduce using rule 3 (statement_list -> statement_list statement .)
    DCL             reduce using rule 3 (statement_list -> statement_list statement .)
    SYN             reduce using rule 3 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    EXIT            reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    RESULT          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    DO              reduce using rule 3 (statement_list -> statement_list statement .)
    ABS             reduce using rule 3 (statement_list -> statement_list statement .)
    ASC             reduce using rule 3 (statement_list -> statement_list statement .)
    NUM             reduce using rule 3 (statement_list -> statement_list statement .)
    UPPER           reduce using rule 3 (statement_list -> statement_list statement .)
    LOWER           reduce using rule 3 (statement_list -> statement_list statement .)
    LENGTH          reduce using rule 3 (statement_list -> statement_list statement .)
    READ            reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 97

    (135) action_statement -> action SEMI .

    END             reduce using rule 135 (action_statement -> action SEMI .)
    DCL             reduce using rule 135 (action_statement -> action SEMI .)
    SYN             reduce using rule 135 (action_statement -> action SEMI .)
    TYPE            reduce using rule 135 (action_statement -> action SEMI .)
    ID              reduce using rule 135 (action_statement -> action SEMI .)
    EXIT            reduce using rule 135 (action_statement -> action SEMI .)
    RETURN          reduce using rule 135 (action_statement -> action SEMI .)
    RESULT          reduce using rule 135 (action_statement -> action SEMI .)
    IF              reduce using rule 135 (action_statement -> action SEMI .)
    DO              reduce using rule 135 (action_statement -> action SEMI .)
    ABS             reduce using rule 135 (action_statement -> action SEMI .)
    ASC             reduce using rule 135 (action_statement -> action SEMI .)
    NUM             reduce using rule 135 (action_statement -> action SEMI .)
    UPPER           reduce using rule 135 (action_statement -> action SEMI .)
    LOWER           reduce using rule 135 (action_statement -> action SEMI .)
    LENGTH          reduce using rule 135 (action_statement -> action SEMI .)
    READ            reduce using rule 135 (action_statement -> action SEMI .)
    PRINT           reduce using rule 135 (action_statement -> action SEMI .)
    FI              reduce using rule 135 (action_statement -> action SEMI .)
    ELSE            reduce using rule 135 (action_statement -> action SEMI .)
    ELSIF           reduce using rule 135 (action_statement -> action SEMI .)
    OD              reduce using rule 135 (action_statement -> action SEMI .)
    $end            reduce using rule 135 (action_statement -> action SEMI .)


state 98

    (23) newmode_statement -> TYPE newmode_list . SEMI
    (25) newmode_list -> newmode_list . COMMA mode_definition

    SEMI            shift and go to state 154
    COMMA           shift and go to state 155


state 99

    (15) identifier_list -> identifier .

    COMMA           reduce using rule 15 (identifier_list -> identifier .)
    REF             reduce using rule 15 (identifier_list -> identifier .)
    ID              reduce using rule 15 (identifier_list -> identifier .)
    INT             reduce using rule 15 (identifier_list -> identifier .)
    BOOL            reduce using rule 15 (identifier_list -> identifier .)
    CHAR            reduce using rule 15 (identifier_list -> identifier .)
    CHARS           reduce using rule 15 (identifier_list -> identifier .)
    ARRAY           reduce using rule 15 (identifier_list -> identifier .)
    ASSIGN          reduce using rule 15 (identifier_list -> identifier .)


state 100

    (24) newmode_list -> mode_definition .

    SEMI            reduce using rule 24 (newmode_list -> mode_definition .)
    COMMA           reduce using rule 24 (newmode_list -> mode_definition .)


state 101

    (26) mode_definition -> identifier_list . ASSIGN mode
    (16) identifier_list -> identifier_list . COMMA identifier

    ASSIGN          shift and go to state 157
    COMMA           shift and go to state 156


state 102

    (195) result_action -> RESULT result .

    SEMI            reduce using rule 195 (result_action -> RESULT result .)


state 103

    (64) string_element -> identifier LBRACKET . start_element RBRACKET
    (66) string_slice -> identifier LBRACKET . left_element COLON right_element RBRACKET
    (65) start_element -> . integer_expression
    (67) left_element -> . integer_expression
    (55) integer_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    left_element                   shift and go to state 158
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    operand0                       shift and go to state 87
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    integer_expression             shift and go to state 159
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    start_element                  shift and go to state 160
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_slice                    shift and go to state 42
    expression                     shift and go to state 161
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92

state 104

    (187) procedure_call -> identifier LPAREN . RPAREN
    (188) procedure_call -> identifier LPAREN . parameter_list RPAREN
    (189) parameter_list -> . parameter
    (190) parameter_list -> . parameter_list COMMA parameter
    (191) parameter -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    RPAREN          shift and go to state 162
    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    array_element                  shift and go to state 3
    parameter                      shift and go to state 163
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    parameter_list                 shift and go to state 164
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 165
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 105

    (197) builtin_call -> builtin_name LPAREN . RPAREN
    (198) builtin_call -> builtin_name LPAREN . parameter_list RPAREN
    (189) parameter_list -> . parameter
    (190) parameter_list -> . parameter_list COMMA parameter
    (191) parameter -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    RPAREN          shift and go to state 166
    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    array_element                  shift and go to state 3
    parameter                      shift and go to state 163
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    parameter_list                 shift and go to state 167
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 165
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 106

    (12) declaration -> identifier_list . mode
    (13) declaration -> identifier_list . mode initialization
    (16) identifier_list -> identifier_list . COMMA identifier
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (40) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    COMMA           shift and go to state 156
    REF             shift and go to state 168
    ID              shift and go to state 19
    INT             shift and go to state 177
    BOOL            shift and go to state 176
    CHAR            shift and go to state 180
    CHARS           shift and go to state 173
    ARRAY           shift and go to state 170

    composite_mode                 shift and go to state 178
    string_mode                    shift and go to state 181
    mode_name                      shift and go to state 179
    array_mode                     shift and go to state 182
    mode                           shift and go to state 169
    discrete_mode                  shift and go to state 171
    character_mode                 shift and go to state 172
    boolean_mode                   shift and go to state 183
    integer_mode                   shift and go to state 174
    identifier                     shift and go to state 184
    discrete_range_mode            shift and go to state 175
    reference_mode                 shift and go to state 185

state 107

    (10) declaration_list -> declaration .

    SEMI            reduce using rule 10 (declaration_list -> declaration .)
    COMMA           reduce using rule 10 (declaration_list -> declaration .)


state 108

    (9) declaration_statement -> DCL declaration_list . SEMI
    (11) declaration_list -> declaration_list . COMMA declaration

    SEMI            shift and go to state 186
    COMMA           shift and go to state 187


state 109

    (158) action_statement_list -> action_statement .

    OD              reduce using rule 158 (action_statement_list -> action_statement .)
    EXIT            reduce using rule 158 (action_statement_list -> action_statement .)
    RETURN          reduce using rule 158 (action_statement_list -> action_statement .)
    RESULT          reduce using rule 158 (action_statement_list -> action_statement .)
    ID              reduce using rule 158 (action_statement_list -> action_statement .)
    IF              reduce using rule 158 (action_statement_list -> action_statement .)
    DO              reduce using rule 158 (action_statement_list -> action_statement .)
    ABS             reduce using rule 158 (action_statement_list -> action_statement .)
    ASC             reduce using rule 158 (action_statement_list -> action_statement .)
    NUM             reduce using rule 158 (action_statement_list -> action_statement .)
    UPPER           reduce using rule 158 (action_statement_list -> action_statement .)
    LOWER           reduce using rule 158 (action_statement_list -> action_statement .)
    LENGTH          reduce using rule 158 (action_statement_list -> action_statement .)
    READ            reduce using rule 158 (action_statement_list -> action_statement .)
    PRINT           reduce using rule 158 (action_statement_list -> action_statement .)
    FI              reduce using rule 158 (action_statement_list -> action_statement .)
    ELSE            reduce using rule 158 (action_statement_list -> action_statement .)
    ELSIF           reduce using rule 158 (action_statement_list -> action_statement .)


state 110

    (166) do_action -> DO action_statement_list . OD
    (159) action_statement_list -> action_statement_list . action_statement
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (137) label_id -> . identifier
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (17) identifier -> . ID
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    OD              shift and go to state 189
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    ID              shift and go to state 19
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    action_statement               shift and go to state 188
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    assignment_action              shift and go to state 31
    array_slice                    shift and go to state 42
    return_action                  shift and go to state 21
    string_element                 shift and go to state 35
    action                         shift and go to state 16
    array_location                 shift and go to state 10
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    builtin_name                   shift and go to state 24
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 41
    bracketed_action               shift and go to state 13
    identifier                     shift and go to state 23
    label_id                       shift and go to state 116

state 111

    (164) do_action -> DO OD .

    SEMI            reduce using rule 164 (do_action -> DO OD .)


state 112

    (165) do_action -> DO control_part . SEMI OD
    (167) do_action -> DO control_part . SEMI action_statement_list OD

    SEMI            shift and go to state 190


state 113

    (169) control_part -> FOR . for_control
    (170) control_part -> FOR . for_control while_control
    (171) for_control -> . iteration
    (172) iteration -> . step_enumeration
    (173) iteration -> . range_enumeration
    (174) step_enumeration -> . loop_counter ASSIGN start_value end_value
    (175) step_enumeration -> . loop_counter ASSIGN start_value step_value end_value
    (182) range_enumeration -> . loop_counter IN discrete_mode
    (183) range_enumeration -> . loop_counter DOWN IN discrete_mode
    (176) loop_counter -> . identifier
    (17) identifier -> . ID

    ID              shift and go to state 19

    for_control                    shift and go to state 193
    identifier                     shift and go to state 195
    range_enumeration              shift and go to state 194
    loop_counter                   shift and go to state 191
    step_enumeration               shift and go to state 196
    iteration                      shift and go to state 192

state 114

    (168) control_part -> while_control .

    SEMI            reduce using rule 168 (control_part -> while_control .)


state 115

    (184) while_control -> WHILE . boolean_expression
    (97) boolean_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_string_literal       shift and go to state 62
    array_element                  shift and go to state 3
    character_literal              shift and go to state 59
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 90
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42
    boolean_expression             shift and go to state 197

state 116

    (136) action_statement -> label_id . COLON action SEMI

    COLON           shift and go to state 198


state 117

    (207) procedure_statement -> label_id COLON . procedure_definition SEMI
    (136) action_statement -> label_id COLON . action SEMI
    (208) procedure_definition -> . formal_procedure_head END
    (209) procedure_definition -> . formal_procedure_head statement_list END
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (210) formal_procedure_head -> . PROC parenthesis_gambiarra SEMI
    (211) formal_procedure_head -> . PROC parenthesis_gambiarra result_spec SEMI
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    PROC            shift and go to state 199
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    IF              shift and go to state 11
    DO              shift and go to state 43
    ID              shift and go to state 19
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    assignment_action              shift and go to state 31
    array_slice                    shift and go to state 42
    formal_procedure_head          shift and go to state 200
    return_action                  shift and go to state 21
    string_element                 shift and go to state 35
    action                         shift and go to state 201
    array_location                 shift and go to state 10
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    procedure_definition           shift and go to state 203
    builtin_name                   shift and go to state 24
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 41
    bracketed_action               shift and go to state 13
    identifier                     shift and go to state 202

state 118

    (18) synonym_statement -> SYN synonym_list . SEMI
    (20) synonym_list -> synonym_list . synonym_definition
    (21) synonym_definition -> . identifier_list initialization
    (22) synonym_definition -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    SEMI            shift and go to state 205
    ID              shift and go to state 19

    identifier_list                shift and go to state 119
    identifier                     shift and go to state 99
    synonym_definition             shift and go to state 204

state 119

    (21) synonym_definition -> identifier_list . initialization
    (22) synonym_definition -> identifier_list . mode initialization
    (16) identifier_list -> identifier_list . COMMA identifier
    (14) initialization -> . ASSIGN expression
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (40) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    COMMA           shift and go to state 156
    ASSIGN          shift and go to state 207
    REF             shift and go to state 168
    ID              shift and go to state 19
    INT             shift and go to state 177
    BOOL            shift and go to state 176
    CHAR            shift and go to state 180
    CHARS           shift and go to state 173
    ARRAY           shift and go to state 170

    composite_mode                 shift and go to state 178
    string_mode                    shift and go to state 181
    mode_name                      shift and go to state 179
    array_mode                     shift and go to state 182
    mode                           shift and go to state 206
    discrete_mode                  shift and go to state 171
    character_mode                 shift and go to state 172
    boolean_mode                   shift and go to state 183
    integer_mode                   shift and go to state 174
    identifier                     shift and go to state 184
    initialization                 shift and go to state 208
    discrete_range_mode            shift and go to state 175
    reference_mode                 shift and go to state 185

state 120

    (19) synonym_list -> synonym_definition .

    SEMI            reduce using rule 19 (synonym_list -> synonym_definition .)
    ID              reduce using rule 19 (synonym_list -> synonym_definition .)


state 121

    (146) assignment_action -> location assigning_operator expression .

    SEMI            reduce using rule 146 (assignment_action -> location assigning_operator expression .)


state 122

    (72) array_slice -> array_location LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 209


state 123

    (70) expression_list -> expression .
    (42) lower_bound -> expression .

    RBRACKET        reduce using rule 70 (expression_list -> expression .)
    COMMA           reduce using rule 70 (expression_list -> expression .)
    COLON           reduce using rule 42 (lower_bound -> expression .)


state 124

    (69) array_element -> array_location LBRACKET expression_list . RBRACKET
    (71) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 211
    COMMA           shift and go to state 210


state 125

    (92) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 212


state 126

    (95) conditional_expression -> IF boolean_expression . then_expression else_expression FI
    (96) conditional_expression -> IF boolean_expression . then_expression elsif_expression else_expression FI
    (98) then_expression -> . THEN expression

    THEN            shift and go to state 214

    then_expression                shift and go to state 213

state 127

    (89) value_array_element -> array_primitive_value LBRACKET . integer_expression RBRACKET
    (90) value_array_slice -> array_primitive_value LBRACKET . lower_bound COLON upper_bound RBRACKET
    (55) integer_expression -> . expression
    (42) lower_bound -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    lower_bound                    shift and go to state 215
    referenced_location            shift and go to state 72
    operand0                       shift and go to state 87
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    integer_expression             shift and go to state 216
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_slice                    shift and go to state 42
    expression                     shift and go to state 217
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92

state 128

    (134) referenced_location -> ARROW location .
    (63) dereferenced_reference -> location . ARROW
    (73) array_location -> location .

    TIMES           reduce using rule 134 (referenced_location -> ARROW location .)
    DIVIDE          reduce using rule 134 (referenced_location -> ARROW location .)
    MOD             reduce using rule 134 (referenced_location -> ARROW location .)
    PLUS            reduce using rule 134 (referenced_location -> ARROW location .)
    MINUS           reduce using rule 134 (referenced_location -> ARROW location .)
    STRCAT          reduce using rule 134 (referenced_location -> ARROW location .)
    AND             reduce using rule 134 (referenced_location -> ARROW location .)
    OR              reduce using rule 134 (referenced_location -> ARROW location .)
    EQUAL           reduce using rule 134 (referenced_location -> ARROW location .)
    DIFF            reduce using rule 134 (referenced_location -> ARROW location .)
    GREATER         reduce using rule 134 (referenced_location -> ARROW location .)
    GREATEREQ       reduce using rule 134 (referenced_location -> ARROW location .)
    LESS            reduce using rule 134 (referenced_location -> ARROW location .)
    LESSEQ          reduce using rule 134 (referenced_location -> ARROW location .)
    IN              reduce using rule 134 (referenced_location -> ARROW location .)
    RBRACKET        reduce using rule 134 (referenced_location -> ARROW location .)
    COLON           reduce using rule 134 (referenced_location -> ARROW location .)
    THEN            reduce using rule 134 (referenced_location -> ARROW location .)
    SEMI            reduce using rule 134 (referenced_location -> ARROW location .)
    FI              reduce using rule 134 (referenced_location -> ARROW location .)
    WHILE           reduce using rule 134 (referenced_location -> ARROW location .)
    COMMA           reduce using rule 134 (referenced_location -> ARROW location .)
    RPAREN          reduce using rule 134 (referenced_location -> ARROW location .)
    ID              reduce using rule 134 (referenced_location -> ARROW location .)
    ELSE            reduce using rule 134 (referenced_location -> ARROW location .)
    ELSIF           reduce using rule 134 (referenced_location -> ARROW location .)
    TO              reduce using rule 134 (referenced_location -> ARROW location .)
    DOWN            reduce using rule 134 (referenced_location -> ARROW location .)
    BY              reduce using rule 134 (referenced_location -> ARROW location .)
    ARROW           shift and go to state 57
    LBRACKET        reduce using rule 73 (array_location -> location .)


state 129

    (120) arithmetic_additive_operator -> MINUS .

    MINUS           reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    ARROW           reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    ID              reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    LPAREN          reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    FALSE           reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    TRUE            reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    CCONST          reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    NULL            reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    SCONST          reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    ABS             reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    ASC             reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    NUM             reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    UPPER           reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    LOWER           reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    LENGTH          reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    READ            reduce using rule 120 (arithmetic_additive_operator -> MINUS .)
    PRINT           reduce using rule 120 (arithmetic_additive_operator -> MINUS .)


state 130

    (121) string_concatenation_operator -> STRCAT .

    MINUS           reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    NOT             reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    ARROW           reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    ID              reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    LPAREN          reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    ICONST          reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    FALSE           reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    TRUE            reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    CCONST          reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    NULL            reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    SCONST          reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    ABS             reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    ASC             reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    NUM             reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    UPPER           reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    LOWER           reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    LENGTH          reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    READ            reduce using rule 121 (string_concatenation_operator -> STRCAT .)
    PRINT           reduce using rule 121 (string_concatenation_operator -> STRCAT .)


state 131

    (117) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    ARROW           reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    ID              reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    LPAREN          reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    FALSE           reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    TRUE            reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    CCONST          reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    NULL            reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    SCONST          reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    ABS             reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    ASC             reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    NUM             reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    UPPER           reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    LOWER           reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    LENGTH          reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    READ            reduce using rule 117 (operator2 -> arithmetic_additive_operator .)
    PRINT           reduce using rule 117 (operator2 -> arithmetic_additive_operator .)


state 132

    (116) operand1 -> operand1 operator2 . operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    empty_literal                  shift and go to state 80
    character_literal              shift and go to state 59
    builtin_call                   shift and go to state 38
    integer_literal                shift and go to state 66
    operand2                       shift and go to state 218
    boolean_literal                shift and go to state 71
    location                       shift and go to state 63
    value_array_slice              shift and go to state 76
    dereferenced_reference         shift and go to state 29
    monadic_operator               shift and go to state 83
    identifier                     shift and go to state 78
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    string_element                 shift and go to state 35
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    string_slice                   shift and go to state 37
    referenced_location            shift and go to state 72
    array_element                  shift and go to state 3
    parenthesized_expression       shift and go to state 74
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_location                 shift and go to state 10
    character_string_literal       shift and go to state 62
    literal                        shift and go to state 77
    value_array_element            shift and go to state 92
    builtin_name                   shift and go to state 24
    array_slice                    shift and go to state 42

state 133

    (119) arithmetic_additive_operator -> PLUS .

    MINUS           reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    ARROW           reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    ID              reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    LPAREN          reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    FALSE           reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    TRUE            reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    CCONST          reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    NULL            reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    SCONST          reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    ABS             reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    ASC             reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    NUM             reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    UPPER           reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    LOWER           reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    LENGTH          reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    READ            reduce using rule 119 (arithmetic_additive_operator -> PLUS .)
    PRINT           reduce using rule 119 (arithmetic_additive_operator -> PLUS .)


state 134

    (118) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 118 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 118 (operator2 -> string_concatenation_operator .)
    ARROW           reduce using rule 118 (operator2 -> string_concatenation_operator .)
    ID              reduce using rule 118 (operator2 -> string_concatenation_operator .)
    LPAREN          reduce using rule 118 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 118 (operator2 -> string_concatenation_operator .)
    FALSE           reduce using rule 118 (operator2 -> string_concatenation_operator .)
    TRUE            reduce using rule 118 (operator2 -> string_concatenation_operator .)
    CCONST          reduce using rule 118 (operator2 -> string_concatenation_operator .)
    NULL            reduce using rule 118 (operator2 -> string_concatenation_operator .)
    SCONST          reduce using rule 118 (operator2 -> string_concatenation_operator .)
    ABS             reduce using rule 118 (operator2 -> string_concatenation_operator .)
    ASC             reduce using rule 118 (operator2 -> string_concatenation_operator .)
    NUM             reduce using rule 118 (operator2 -> string_concatenation_operator .)
    UPPER           reduce using rule 118 (operator2 -> string_concatenation_operator .)
    LOWER           reduce using rule 118 (operator2 -> string_concatenation_operator .)
    LENGTH          reduce using rule 118 (operator2 -> string_concatenation_operator .)
    READ            reduce using rule 118 (operator2 -> string_concatenation_operator .)
    PRINT           reduce using rule 118 (operator2 -> string_concatenation_operator .)


state 135

    (128) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    MOD             reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    STRCAT          reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    EQUAL           reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    DIFF            reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    GREATER         reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    GREATEREQ       reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    LESS            reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    LESSEQ          reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    TO              reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    DOWN            reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    BY              reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    WHILE           reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    ID              reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 128 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 128 (operand3 -> monadic_operator operand4 .)


state 136

    (107) relational_operator -> OR .

    MINUS           reduce using rule 107 (relational_operator -> OR .)
    NOT             reduce using rule 107 (relational_operator -> OR .)
    ARROW           reduce using rule 107 (relational_operator -> OR .)
    ID              reduce using rule 107 (relational_operator -> OR .)
    LPAREN          reduce using rule 107 (relational_operator -> OR .)
    ICONST          reduce using rule 107 (relational_operator -> OR .)
    FALSE           reduce using rule 107 (relational_operator -> OR .)
    TRUE            reduce using rule 107 (relational_operator -> OR .)
    CCONST          reduce using rule 107 (relational_operator -> OR .)
    NULL            reduce using rule 107 (relational_operator -> OR .)
    SCONST          reduce using rule 107 (relational_operator -> OR .)
    ABS             reduce using rule 107 (relational_operator -> OR .)
    ASC             reduce using rule 107 (relational_operator -> OR .)
    NUM             reduce using rule 107 (relational_operator -> OR .)
    UPPER           reduce using rule 107 (relational_operator -> OR .)
    LOWER           reduce using rule 107 (relational_operator -> OR .)
    LENGTH          reduce using rule 107 (relational_operator -> OR .)
    READ            reduce using rule 107 (relational_operator -> OR .)
    PRINT           reduce using rule 107 (relational_operator -> OR .)


state 137

    (112) relational_operator -> LESS .

    MINUS           reduce using rule 112 (relational_operator -> LESS .)
    NOT             reduce using rule 112 (relational_operator -> LESS .)
    ARROW           reduce using rule 112 (relational_operator -> LESS .)
    ID              reduce using rule 112 (relational_operator -> LESS .)
    LPAREN          reduce using rule 112 (relational_operator -> LESS .)
    ICONST          reduce using rule 112 (relational_operator -> LESS .)
    FALSE           reduce using rule 112 (relational_operator -> LESS .)
    TRUE            reduce using rule 112 (relational_operator -> LESS .)
    CCONST          reduce using rule 112 (relational_operator -> LESS .)
    NULL            reduce using rule 112 (relational_operator -> LESS .)
    SCONST          reduce using rule 112 (relational_operator -> LESS .)
    ABS             reduce using rule 112 (relational_operator -> LESS .)
    ASC             reduce using rule 112 (relational_operator -> LESS .)
    NUM             reduce using rule 112 (relational_operator -> LESS .)
    UPPER           reduce using rule 112 (relational_operator -> LESS .)
    LOWER           reduce using rule 112 (relational_operator -> LESS .)
    LENGTH          reduce using rule 112 (relational_operator -> LESS .)
    READ            reduce using rule 112 (relational_operator -> LESS .)
    PRINT           reduce using rule 112 (relational_operator -> LESS .)


state 138

    (108) relational_operator -> EQUAL .

    MINUS           reduce using rule 108 (relational_operator -> EQUAL .)
    NOT             reduce using rule 108 (relational_operator -> EQUAL .)
    ARROW           reduce using rule 108 (relational_operator -> EQUAL .)
    ID              reduce using rule 108 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 108 (relational_operator -> EQUAL .)
    ICONST          reduce using rule 108 (relational_operator -> EQUAL .)
    FALSE           reduce using rule 108 (relational_operator -> EQUAL .)
    TRUE            reduce using rule 108 (relational_operator -> EQUAL .)
    CCONST          reduce using rule 108 (relational_operator -> EQUAL .)
    NULL            reduce using rule 108 (relational_operator -> EQUAL .)
    SCONST          reduce using rule 108 (relational_operator -> EQUAL .)
    ABS             reduce using rule 108 (relational_operator -> EQUAL .)
    ASC             reduce using rule 108 (relational_operator -> EQUAL .)
    NUM             reduce using rule 108 (relational_operator -> EQUAL .)
    UPPER           reduce using rule 108 (relational_operator -> EQUAL .)
    LOWER           reduce using rule 108 (relational_operator -> EQUAL .)
    LENGTH          reduce using rule 108 (relational_operator -> EQUAL .)
    READ            reduce using rule 108 (relational_operator -> EQUAL .)
    PRINT           reduce using rule 108 (relational_operator -> EQUAL .)


state 139

    (103) operand0 -> operand0 operator1 . operand1
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    empty_literal                  shift and go to state 80
    character_literal              shift and go to state 59
    builtin_call                   shift and go to state 38
    integer_literal                shift and go to state 66
    operand2                       shift and go to state 91
    boolean_literal                shift and go to state 71
    location                       shift and go to state 63
    value_array_slice              shift and go to state 76
    dereferenced_reference         shift and go to state 29
    monadic_operator               shift and go to state 83
    identifier                     shift and go to state 78
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    string_element                 shift and go to state 35
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    string_slice                   shift and go to state 37
    referenced_location            shift and go to state 72
    array_element                  shift and go to state 3
    parenthesized_expression       shift and go to state 74
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    operand1                       shift and go to state 219
    array_location                 shift and go to state 10
    character_string_literal       shift and go to state 62
    literal                        shift and go to state 77
    value_array_element            shift and go to state 92
    builtin_name                   shift and go to state 24
    array_slice                    shift and go to state 42

state 140

    (113) relational_operator -> LESSEQ .

    MINUS           reduce using rule 113 (relational_operator -> LESSEQ .)
    NOT             reduce using rule 113 (relational_operator -> LESSEQ .)
    ARROW           reduce using rule 113 (relational_operator -> LESSEQ .)
    ID              reduce using rule 113 (relational_operator -> LESSEQ .)
    LPAREN          reduce using rule 113 (relational_operator -> LESSEQ .)
    ICONST          reduce using rule 113 (relational_operator -> LESSEQ .)
    FALSE           reduce using rule 113 (relational_operator -> LESSEQ .)
    TRUE            reduce using rule 113 (relational_operator -> LESSEQ .)
    CCONST          reduce using rule 113 (relational_operator -> LESSEQ .)
    NULL            reduce using rule 113 (relational_operator -> LESSEQ .)
    SCONST          reduce using rule 113 (relational_operator -> LESSEQ .)
    ABS             reduce using rule 113 (relational_operator -> LESSEQ .)
    ASC             reduce using rule 113 (relational_operator -> LESSEQ .)
    NUM             reduce using rule 113 (relational_operator -> LESSEQ .)
    UPPER           reduce using rule 113 (relational_operator -> LESSEQ .)
    LOWER           reduce using rule 113 (relational_operator -> LESSEQ .)
    LENGTH          reduce using rule 113 (relational_operator -> LESSEQ .)
    READ            reduce using rule 113 (relational_operator -> LESSEQ .)
    PRINT           reduce using rule 113 (relational_operator -> LESSEQ .)


state 141

    (111) relational_operator -> GREATEREQ .

    MINUS           reduce using rule 111 (relational_operator -> GREATEREQ .)
    NOT             reduce using rule 111 (relational_operator -> GREATEREQ .)
    ARROW           reduce using rule 111 (relational_operator -> GREATEREQ .)
    ID              reduce using rule 111 (relational_operator -> GREATEREQ .)
    LPAREN          reduce using rule 111 (relational_operator -> GREATEREQ .)
    ICONST          reduce using rule 111 (relational_operator -> GREATEREQ .)
    FALSE           reduce using rule 111 (relational_operator -> GREATEREQ .)
    TRUE            reduce using rule 111 (relational_operator -> GREATEREQ .)
    CCONST          reduce using rule 111 (relational_operator -> GREATEREQ .)
    NULL            reduce using rule 111 (relational_operator -> GREATEREQ .)
    SCONST          reduce using rule 111 (relational_operator -> GREATEREQ .)
    ABS             reduce using rule 111 (relational_operator -> GREATEREQ .)
    ASC             reduce using rule 111 (relational_operator -> GREATEREQ .)
    NUM             reduce using rule 111 (relational_operator -> GREATEREQ .)
    UPPER           reduce using rule 111 (relational_operator -> GREATEREQ .)
    LOWER           reduce using rule 111 (relational_operator -> GREATEREQ .)
    LENGTH          reduce using rule 111 (relational_operator -> GREATEREQ .)
    READ            reduce using rule 111 (relational_operator -> GREATEREQ .)
    PRINT           reduce using rule 111 (relational_operator -> GREATEREQ .)


state 142

    (105) operator1 -> membership_operator .

    MINUS           reduce using rule 105 (operator1 -> membership_operator .)
    NOT             reduce using rule 105 (operator1 -> membership_operator .)
    ARROW           reduce using rule 105 (operator1 -> membership_operator .)
    ID              reduce using rule 105 (operator1 -> membership_operator .)
    LPAREN          reduce using rule 105 (operator1 -> membership_operator .)
    ICONST          reduce using rule 105 (operator1 -> membership_operator .)
    FALSE           reduce using rule 105 (operator1 -> membership_operator .)
    TRUE            reduce using rule 105 (operator1 -> membership_operator .)
    CCONST          reduce using rule 105 (operator1 -> membership_operator .)
    NULL            reduce using rule 105 (operator1 -> membership_operator .)
    SCONST          reduce using rule 105 (operator1 -> membership_operator .)
    ABS             reduce using rule 105 (operator1 -> membership_operator .)
    ASC             reduce using rule 105 (operator1 -> membership_operator .)
    NUM             reduce using rule 105 (operator1 -> membership_operator .)
    UPPER           reduce using rule 105 (operator1 -> membership_operator .)
    LOWER           reduce using rule 105 (operator1 -> membership_operator .)
    LENGTH          reduce using rule 105 (operator1 -> membership_operator .)
    READ            reduce using rule 105 (operator1 -> membership_operator .)
    PRINT           reduce using rule 105 (operator1 -> membership_operator .)


state 143

    (114) membership_operator -> IN .

    MINUS           reduce using rule 114 (membership_operator -> IN .)
    NOT             reduce using rule 114 (membership_operator -> IN .)
    ARROW           reduce using rule 114 (membership_operator -> IN .)
    ID              reduce using rule 114 (membership_operator -> IN .)
    LPAREN          reduce using rule 114 (membership_operator -> IN .)
    ICONST          reduce using rule 114 (membership_operator -> IN .)
    FALSE           reduce using rule 114 (membership_operator -> IN .)
    TRUE            reduce using rule 114 (membership_operator -> IN .)
    CCONST          reduce using rule 114 (membership_operator -> IN .)
    NULL            reduce using rule 114 (membership_operator -> IN .)
    SCONST          reduce using rule 114 (membership_operator -> IN .)
    ABS             reduce using rule 114 (membership_operator -> IN .)
    ASC             reduce using rule 114 (membership_operator -> IN .)
    NUM             reduce using rule 114 (membership_operator -> IN .)
    UPPER           reduce using rule 114 (membership_operator -> IN .)
    LOWER           reduce using rule 114 (membership_operator -> IN .)
    LENGTH          reduce using rule 114 (membership_operator -> IN .)
    READ            reduce using rule 114 (membership_operator -> IN .)
    PRINT           reduce using rule 114 (membership_operator -> IN .)


state 144

    (110) relational_operator -> GREATER .

    MINUS           reduce using rule 110 (relational_operator -> GREATER .)
    NOT             reduce using rule 110 (relational_operator -> GREATER .)
    ARROW           reduce using rule 110 (relational_operator -> GREATER .)
    ID              reduce using rule 110 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 110 (relational_operator -> GREATER .)
    ICONST          reduce using rule 110 (relational_operator -> GREATER .)
    FALSE           reduce using rule 110 (relational_operator -> GREATER .)
    TRUE            reduce using rule 110 (relational_operator -> GREATER .)
    CCONST          reduce using rule 110 (relational_operator -> GREATER .)
    NULL            reduce using rule 110 (relational_operator -> GREATER .)
    SCONST          reduce using rule 110 (relational_operator -> GREATER .)
    ABS             reduce using rule 110 (relational_operator -> GREATER .)
    ASC             reduce using rule 110 (relational_operator -> GREATER .)
    NUM             reduce using rule 110 (relational_operator -> GREATER .)
    UPPER           reduce using rule 110 (relational_operator -> GREATER .)
    LOWER           reduce using rule 110 (relational_operator -> GREATER .)
    LENGTH          reduce using rule 110 (relational_operator -> GREATER .)
    READ            reduce using rule 110 (relational_operator -> GREATER .)
    PRINT           reduce using rule 110 (relational_operator -> GREATER .)


state 145

    (104) operator1 -> relational_operator .

    MINUS           reduce using rule 104 (operator1 -> relational_operator .)
    NOT             reduce using rule 104 (operator1 -> relational_operator .)
    ARROW           reduce using rule 104 (operator1 -> relational_operator .)
    ID              reduce using rule 104 (operator1 -> relational_operator .)
    LPAREN          reduce using rule 104 (operator1 -> relational_operator .)
    ICONST          reduce using rule 104 (operator1 -> relational_operator .)
    FALSE           reduce using rule 104 (operator1 -> relational_operator .)
    TRUE            reduce using rule 104 (operator1 -> relational_operator .)
    CCONST          reduce using rule 104 (operator1 -> relational_operator .)
    NULL            reduce using rule 104 (operator1 -> relational_operator .)
    SCONST          reduce using rule 104 (operator1 -> relational_operator .)
    ABS             reduce using rule 104 (operator1 -> relational_operator .)
    ASC             reduce using rule 104 (operator1 -> relational_operator .)
    NUM             reduce using rule 104 (operator1 -> relational_operator .)
    UPPER           reduce using rule 104 (operator1 -> relational_operator .)
    LOWER           reduce using rule 104 (operator1 -> relational_operator .)
    LENGTH          reduce using rule 104 (operator1 -> relational_operator .)
    READ            reduce using rule 104 (operator1 -> relational_operator .)
    PRINT           reduce using rule 104 (operator1 -> relational_operator .)


state 146

    (109) relational_operator -> DIFF .

    MINUS           reduce using rule 109 (relational_operator -> DIFF .)
    NOT             reduce using rule 109 (relational_operator -> DIFF .)
    ARROW           reduce using rule 109 (relational_operator -> DIFF .)
    ID              reduce using rule 109 (relational_operator -> DIFF .)
    LPAREN          reduce using rule 109 (relational_operator -> DIFF .)
    ICONST          reduce using rule 109 (relational_operator -> DIFF .)
    FALSE           reduce using rule 109 (relational_operator -> DIFF .)
    TRUE            reduce using rule 109 (relational_operator -> DIFF .)
    CCONST          reduce using rule 109 (relational_operator -> DIFF .)
    NULL            reduce using rule 109 (relational_operator -> DIFF .)
    SCONST          reduce using rule 109 (relational_operator -> DIFF .)
    ABS             reduce using rule 109 (relational_operator -> DIFF .)
    ASC             reduce using rule 109 (relational_operator -> DIFF .)
    NUM             reduce using rule 109 (relational_operator -> DIFF .)
    UPPER           reduce using rule 109 (relational_operator -> DIFF .)
    LOWER           reduce using rule 109 (relational_operator -> DIFF .)
    LENGTH          reduce using rule 109 (relational_operator -> DIFF .)
    READ            reduce using rule 109 (relational_operator -> DIFF .)
    PRINT           reduce using rule 109 (relational_operator -> DIFF .)


state 147

    (106) relational_operator -> AND .

    MINUS           reduce using rule 106 (relational_operator -> AND .)
    NOT             reduce using rule 106 (relational_operator -> AND .)
    ARROW           reduce using rule 106 (relational_operator -> AND .)
    ID              reduce using rule 106 (relational_operator -> AND .)
    LPAREN          reduce using rule 106 (relational_operator -> AND .)
    ICONST          reduce using rule 106 (relational_operator -> AND .)
    FALSE           reduce using rule 106 (relational_operator -> AND .)
    TRUE            reduce using rule 106 (relational_operator -> AND .)
    CCONST          reduce using rule 106 (relational_operator -> AND .)
    NULL            reduce using rule 106 (relational_operator -> AND .)
    SCONST          reduce using rule 106 (relational_operator -> AND .)
    ABS             reduce using rule 106 (relational_operator -> AND .)
    ASC             reduce using rule 106 (relational_operator -> AND .)
    NUM             reduce using rule 106 (relational_operator -> AND .)
    UPPER           reduce using rule 106 (relational_operator -> AND .)
    LOWER           reduce using rule 106 (relational_operator -> AND .)
    LENGTH          reduce using rule 106 (relational_operator -> AND .)
    READ            reduce using rule 106 (relational_operator -> AND .)
    PRINT           reduce using rule 106 (relational_operator -> AND .)


state 148

    (123) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    empty_literal                  shift and go to state 80
    character_literal              shift and go to state 59
    integer_literal                shift and go to state 66
    boolean_literal                shift and go to state 71
    location                       shift and go to state 63
    value_array_slice              shift and go to state 76
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    monadic_operator               shift and go to state 83
    identifier                     shift and go to state 78
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    string_element                 shift and go to state 35
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 220
    string_slice                   shift and go to state 37
    referenced_location            shift and go to state 72
    array_element                  shift and go to state 3
    parenthesized_expression       shift and go to state 74
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_location                 shift and go to state 10
    character_string_literal       shift and go to state 62
    literal                        shift and go to state 77
    value_array_element            shift and go to state 92
    builtin_name                   shift and go to state 24
    array_slice                    shift and go to state 42

state 149

    (126) arithmetic_multiplicative_operator -> MOD .

    MINUS           reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    NOT             reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    ARROW           reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    ID              reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    LPAREN          reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    ICONST          reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    FALSE           reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    TRUE            reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    CCONST          reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    NULL            reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    SCONST          reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    ABS             reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    ASC             reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    NUM             reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    UPPER           reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    LOWER           reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    LENGTH          reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    READ            reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)
    PRINT           reduce using rule 126 (arithmetic_multiplicative_operator -> MOD .)


state 150

    (124) arithmetic_multiplicative_operator -> TIMES .

    MINUS           reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    ARROW           reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    ID              reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    LPAREN          reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    FALSE           reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    TRUE            reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    CCONST          reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    NULL            reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    SCONST          reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    ABS             reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    ASC             reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    NUM             reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    UPPER           reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    LOWER           reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    LENGTH          reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    READ            reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)
    PRINT           reduce using rule 124 (arithmetic_multiplicative_operator -> TIMES .)


state 151

    (125) arithmetic_multiplicative_operator -> DIVIDE .

    MINUS           reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    ARROW           reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    ID              reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    LPAREN          reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    FALSE           reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    TRUE            reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    CCONST          reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    NULL            reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    SCONST          reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    ABS             reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    ASC             reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    NUM             reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    UPPER           reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    LOWER           reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    LENGTH          reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    READ            reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)
    PRINT           reduce using rule 125 (arithmetic_multiplicative_operator -> DIVIDE .)


state 152

    (154) if_action -> IF boolean_expression then_clause . FI
    (155) if_action -> IF boolean_expression then_clause . else_clause FI
    (160) else_clause -> . ELSE
    (161) else_clause -> . ELSE action_statement_list
    (162) else_clause -> . ELSIF boolean_expression then_clause
    (163) else_clause -> . ELSIF boolean_expression then_clause else_clause

    FI              shift and go to state 224
    ELSE            shift and go to state 223
    ELSIF           shift and go to state 221

    else_clause                    shift and go to state 222

state 153

    (156) then_clause -> THEN .
    (157) then_clause -> THEN . action_statement_list
    (158) action_statement_list -> . action_statement
    (159) action_statement_list -> . action_statement_list action_statement
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (137) label_id -> . identifier
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (17) identifier -> . ID
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    FI              reduce using rule 156 (then_clause -> THEN .)
    ELSE            reduce using rule 156 (then_clause -> THEN .)
    ELSIF           reduce using rule 156 (then_clause -> THEN .)
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    ID              shift and go to state 19
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    action_statement               shift and go to state 109
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    assignment_action              shift and go to state 31
    array_slice                    shift and go to state 42
    return_action                  shift and go to state 21
    action_statement_list          shift and go to state 225
    string_element                 shift and go to state 35
    action                         shift and go to state 16
    array_location                 shift and go to state 10
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    builtin_name                   shift and go to state 24
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 41
    bracketed_action               shift and go to state 13
    identifier                     shift and go to state 23
    label_id                       shift and go to state 116

state 154

    (23) newmode_statement -> TYPE newmode_list SEMI .

    DCL             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    ID              reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    EXIT            reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    RETURN          reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    RESULT          reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    IF              reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    DO              reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    ABS             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    ASC             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    NUM             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    UPPER           reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    LOWER           reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    LENGTH          reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    READ            reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    PRINT           reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)
    END             reduce using rule 23 (newmode_statement -> TYPE newmode_list SEMI .)


state 155

    (25) newmode_list -> newmode_list COMMA . mode_definition
    (26) mode_definition -> . identifier_list ASSIGN mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 19

    identifier_list                shift and go to state 101
    mode_definition                shift and go to state 226
    identifier                     shift and go to state 99

state 156

    (16) identifier_list -> identifier_list COMMA . identifier
    (17) identifier -> . ID

    ID              shift and go to state 19

    identifier                     shift and go to state 227

state 157

    (26) mode_definition -> identifier_list ASSIGN . mode
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (40) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    REF             shift and go to state 168
    ID              shift and go to state 19
    INT             shift and go to state 177
    BOOL            shift and go to state 176
    CHAR            shift and go to state 180
    CHARS           shift and go to state 173
    ARRAY           shift and go to state 170

    composite_mode                 shift and go to state 178
    string_mode                    shift and go to state 181
    mode_name                      shift and go to state 179
    array_mode                     shift and go to state 182
    mode                           shift and go to state 228
    discrete_mode                  shift and go to state 171
    character_mode                 shift and go to state 172
    boolean_mode                   shift and go to state 183
    integer_mode                   shift and go to state 174
    identifier                     shift and go to state 184
    discrete_range_mode            shift and go to state 175
    reference_mode                 shift and go to state 185

state 158

    (66) string_slice -> identifier LBRACKET left_element . COLON right_element RBRACKET

    COLON           shift and go to state 229


state 159

    (65) start_element -> integer_expression .
    (67) left_element -> integer_expression .

    RBRACKET        reduce using rule 65 (start_element -> integer_expression .)
    COLON           reduce using rule 67 (left_element -> integer_expression .)


state 160

    (64) string_element -> identifier LBRACKET start_element . RBRACKET

    RBRACKET        shift and go to state 230


state 161

    (55) integer_expression -> expression .

    RBRACKET        reduce using rule 55 (integer_expression -> expression .)
    COLON           reduce using rule 55 (integer_expression -> expression .)
    TO              reduce using rule 55 (integer_expression -> expression .)
    DOWN            reduce using rule 55 (integer_expression -> expression .)


state 162

    (187) procedure_call -> identifier LPAREN RPAREN .

    ARROW           reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    TIMES           reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    DIVIDE          reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    MOD             reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    PLUS            reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    MINUS           reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    STRCAT          reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    AND             reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    OR              reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    EQUAL           reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    DIFF            reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    GREATER         reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    GREATEREQ       reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    LESS            reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    LESSEQ          reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    IN              reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    COLON           reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    RPAREN          reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    COMMA           reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    LBRACKET        reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    THEN            reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    SEMI            reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    RBRACKET        reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    ID              reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    ELSE            reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    ELSIF           reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    TO              reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    DOWN            reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    BY              reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    FI              reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    WHILE           reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    ASSIGN          reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    INCREASE        reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    DECREASE        reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    MULCREASE       reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    DIVCREASE       reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)
    MODCREASE       reduce using rule 187 (procedure_call -> identifier LPAREN RPAREN .)


state 163

    (189) parameter_list -> parameter .

    RPAREN          reduce using rule 189 (parameter_list -> parameter .)
    COMMA           reduce using rule 189 (parameter_list -> parameter .)


state 164

    (188) procedure_call -> identifier LPAREN parameter_list . RPAREN
    (190) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 232
    COMMA           shift and go to state 231


state 165

    (191) parameter -> expression .

    RPAREN          reduce using rule 191 (parameter -> expression .)
    COMMA           reduce using rule 191 (parameter -> expression .)


state 166

    (197) builtin_call -> builtin_name LPAREN RPAREN .

    ARROW           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    TIMES           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    MOD             reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    PLUS            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    MINUS           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    STRCAT          reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    AND             reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    OR              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQUAL           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIFF            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    GREATER         reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    GREATEREQ       reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    LESS            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    LESSEQ          reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    IN              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    THEN            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    LBRACKET        reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    SEMI            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    ASSIGN          reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    INCREASE        reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    DECREASE        reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    MULCREASE       reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVCREASE       reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    MODCREASE       reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    RPAREN          reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    COMMA           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    COLON           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    ID              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSE            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSIF           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    TO              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    DOWN            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    BY              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    FI              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    WHILE           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)


state 167

    (198) builtin_call -> builtin_name LPAREN parameter_list . RPAREN
    (190) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 233
    COMMA           shift and go to state 231


state 168

    (44) reference_mode -> REF . mode
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (40) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    REF             shift and go to state 168
    ID              shift and go to state 19
    INT             shift and go to state 177
    BOOL            shift and go to state 176
    CHAR            shift and go to state 180
    CHARS           shift and go to state 173
    ARRAY           shift and go to state 170

    composite_mode                 shift and go to state 178
    mode_name                      shift and go to state 179
    array_mode                     shift and go to state 182
    string_mode                    shift and go to state 181
    integer_mode                   shift and go to state 174
    discrete_mode                  shift and go to state 171
    character_mode                 shift and go to state 172
    boolean_mode                   shift and go to state 183
    mode                           shift and go to state 234
    identifier                     shift and go to state 184
    discrete_range_mode            shift and go to state 175
    reference_mode                 shift and go to state 185

state 169

    (12) declaration -> identifier_list mode .
    (13) declaration -> identifier_list mode . initialization
    (14) initialization -> . ASSIGN expression

    SEMI            reduce using rule 12 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 12 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 207

    initialization                 shift and go to state 235

state 170

    (49) array_mode -> ARRAY . LBRACKET index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 236


state 171

    (28) mode -> discrete_mode .
    (39) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 28 (mode -> discrete_mode .)
    SEMI            reduce using rule 28 (mode -> discrete_mode .)
    COMMA           reduce using rule 28 (mode -> discrete_mode .)
    LOC             reduce using rule 28 (mode -> discrete_mode .)
    RPAREN          reduce using rule 28 (mode -> discrete_mode .)
    LPAREN          shift and go to state 237


state 172

    (33) discrete_mode -> character_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> character_mode .)
    WHILE           reduce using rule 33 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 33 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 33 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> character_mode .)
    LOC             reduce using rule 33 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 33 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 33 (discrete_mode -> character_mode .)


state 173

    (47) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 238


state 174

    (31) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 31 (discrete_mode -> integer_mode .)
    WHILE           reduce using rule 31 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 31 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 31 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 31 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 31 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 31 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 31 (discrete_mode -> integer_mode .)


state 175

    (34) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    WHILE           reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 34 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 34 (discrete_mode -> discrete_range_mode .)


state 176

    (36) boolean_mode -> BOOL .

    LPAREN          reduce using rule 36 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 36 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 36 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 36 (boolean_mode -> BOOL .)
    LOC             reduce using rule 36 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 36 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 36 (boolean_mode -> BOOL .)
    WHILE           reduce using rule 36 (boolean_mode -> BOOL .)


state 177

    (35) integer_mode -> INT .

    LPAREN          reduce using rule 35 (integer_mode -> INT .)
    RBRACKET        reduce using rule 35 (integer_mode -> INT .)
    COMMA           reduce using rule 35 (integer_mode -> INT .)
    WHILE           reduce using rule 35 (integer_mode -> INT .)
    SEMI            reduce using rule 35 (integer_mode -> INT .)
    ASSIGN          reduce using rule 35 (integer_mode -> INT .)
    LOC             reduce using rule 35 (integer_mode -> INT .)
    RPAREN          reduce using rule 35 (integer_mode -> INT .)


state 178

    (30) mode -> composite_mode .

    ASSIGN          reduce using rule 30 (mode -> composite_mode .)
    SEMI            reduce using rule 30 (mode -> composite_mode .)
    COMMA           reduce using rule 30 (mode -> composite_mode .)
    LOC             reduce using rule 30 (mode -> composite_mode .)
    RPAREN          reduce using rule 30 (mode -> composite_mode .)


state 179

    (27) mode -> mode_name .

    ASSIGN          reduce using rule 27 (mode -> mode_name .)
    SEMI            reduce using rule 27 (mode -> mode_name .)
    COMMA           reduce using rule 27 (mode -> mode_name .)
    LOC             reduce using rule 27 (mode -> mode_name .)
    RPAREN          reduce using rule 27 (mode -> mode_name .)


state 180

    (37) character_mode -> CHAR .

    LPAREN          reduce using rule 37 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 37 (character_mode -> CHAR .)
    SEMI            reduce using rule 37 (character_mode -> CHAR .)
    COMMA           reduce using rule 37 (character_mode -> CHAR .)
    LOC             reduce using rule 37 (character_mode -> CHAR .)
    RPAREN          reduce using rule 37 (character_mode -> CHAR .)
    WHILE           reduce using rule 37 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 37 (character_mode -> CHAR .)


state 181

    (45) composite_mode -> string_mode .

    RPAREN          reduce using rule 45 (composite_mode -> string_mode .)
    LOC             reduce using rule 45 (composite_mode -> string_mode .)
    ASSIGN          reduce using rule 45 (composite_mode -> string_mode .)
    SEMI            reduce using rule 45 (composite_mode -> string_mode .)
    COMMA           reduce using rule 45 (composite_mode -> string_mode .)


state 182

    (46) composite_mode -> array_mode .

    RPAREN          reduce using rule 46 (composite_mode -> array_mode .)
    LOC             reduce using rule 46 (composite_mode -> array_mode .)
    ASSIGN          reduce using rule 46 (composite_mode -> array_mode .)
    SEMI            reduce using rule 46 (composite_mode -> array_mode .)
    COMMA           reduce using rule 46 (composite_mode -> array_mode .)


state 183

    (32) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> boolean_mode .)
    WHILE           reduce using rule 32 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 32 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 32 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 32 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 32 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 32 (discrete_mode -> boolean_mode .)


state 184

    (40) mode_name -> identifier .
    (38) discrete_range_mode -> identifier . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 40 (mode_name -> identifier .)
    SEMI            reduce using rule 40 (mode_name -> identifier .)
    COMMA           reduce using rule 40 (mode_name -> identifier .)
    LOC             reduce using rule 40 (mode_name -> identifier .)
    RPAREN          reduce using rule 40 (mode_name -> identifier .)
    LPAREN          shift and go to state 239


state 185

    (29) mode -> reference_mode .

    ASSIGN          reduce using rule 29 (mode -> reference_mode .)
    SEMI            reduce using rule 29 (mode -> reference_mode .)
    COMMA           reduce using rule 29 (mode -> reference_mode .)
    LOC             reduce using rule 29 (mode -> reference_mode .)
    RPAREN          reduce using rule 29 (mode -> reference_mode .)


state 186

    (9) declaration_statement -> DCL declaration_list SEMI .

    END             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    DCL             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    EXIT            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RETURN          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RESULT          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    IF              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    DO              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ABS             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ASC             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    NUM             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    UPPER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LOWER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LENGTH          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    READ            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    PRINT           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)


state 187

    (11) declaration_list -> declaration_list COMMA . declaration
    (12) declaration -> . identifier_list mode
    (13) declaration -> . identifier_list mode initialization
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 19

    identifier_list                shift and go to state 106
    declaration                    shift and go to state 240
    identifier                     shift and go to state 99

state 188

    (159) action_statement_list -> action_statement_list action_statement .

    OD              reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    EXIT            reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    RETURN          reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    RESULT          reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    ID              reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    IF              reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    DO              reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    ABS             reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    ASC             reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    NUM             reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    UPPER           reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    LOWER           reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    LENGTH          reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    READ            reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    PRINT           reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    FI              reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    ELSE            reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)
    ELSIF           reduce using rule 159 (action_statement_list -> action_statement_list action_statement .)


state 189

    (166) do_action -> DO action_statement_list OD .

    SEMI            reduce using rule 166 (do_action -> DO action_statement_list OD .)


state 190

    (165) do_action -> DO control_part SEMI . OD
    (167) do_action -> DO control_part SEMI . action_statement_list OD
    (158) action_statement_list -> . action_statement
    (159) action_statement_list -> . action_statement_list action_statement
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (137) label_id -> . identifier
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (17) identifier -> . ID
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    OD              shift and go to state 242
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    ID              shift and go to state 19
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    action_statement               shift and go to state 109
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    assignment_action              shift and go to state 31
    array_slice                    shift and go to state 42
    return_action                  shift and go to state 21
    action_statement_list          shift and go to state 241
    string_element                 shift and go to state 35
    action                         shift and go to state 16
    array_location                 shift and go to state 10
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    builtin_name                   shift and go to state 24
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 41
    bracketed_action               shift and go to state 13
    identifier                     shift and go to state 23
    label_id                       shift and go to state 116

state 191

    (174) step_enumeration -> loop_counter . ASSIGN start_value end_value
    (175) step_enumeration -> loop_counter . ASSIGN start_value step_value end_value
    (182) range_enumeration -> loop_counter . IN discrete_mode
    (183) range_enumeration -> loop_counter . DOWN IN discrete_mode

    ASSIGN          shift and go to state 243
    IN              shift and go to state 245
    DOWN            shift and go to state 244


state 192

    (171) for_control -> iteration .

    WHILE           reduce using rule 171 (for_control -> iteration .)
    SEMI            reduce using rule 171 (for_control -> iteration .)


state 193

    (169) control_part -> FOR for_control .
    (170) control_part -> FOR for_control . while_control
    (184) while_control -> . WHILE boolean_expression

    SEMI            reduce using rule 169 (control_part -> FOR for_control .)
    WHILE           shift and go to state 115

    while_control                  shift and go to state 246

state 194

    (173) iteration -> range_enumeration .

    WHILE           reduce using rule 173 (iteration -> range_enumeration .)
    SEMI            reduce using rule 173 (iteration -> range_enumeration .)


state 195

    (176) loop_counter -> identifier .

    ASSIGN          reduce using rule 176 (loop_counter -> identifier .)
    IN              reduce using rule 176 (loop_counter -> identifier .)
    DOWN            reduce using rule 176 (loop_counter -> identifier .)


state 196

    (172) iteration -> step_enumeration .

    WHILE           reduce using rule 172 (iteration -> step_enumeration .)
    SEMI            reduce using rule 172 (iteration -> step_enumeration .)


state 197

    (184) while_control -> WHILE boolean_expression .

    SEMI            reduce using rule 184 (while_control -> WHILE boolean_expression .)


state 198

    (136) action_statement -> label_id COLON . action SEMI
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    IF              shift and go to state 11
    DO              shift and go to state 43
    ID              shift and go to state 19
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    assignment_action              shift and go to state 31
    array_slice                    shift and go to state 42
    return_action                  shift and go to state 21
    string_element                 shift and go to state 35
    action                         shift and go to state 201
    array_location                 shift and go to state 10
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    builtin_name                   shift and go to state 24
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 41
    bracketed_action               shift and go to state 13
    identifier                     shift and go to state 202

state 199

    (210) formal_procedure_head -> PROC . parenthesis_gambiarra SEMI
    (211) formal_procedure_head -> PROC . parenthesis_gambiarra result_spec SEMI
    (212) parenthesis_gambiarra -> . LPAREN RPAREN
    (213) parenthesis_gambiarra -> . LPAREN formal_parameter_list RPAREN

    LPAREN          shift and go to state 247

    parenthesis_gambiarra          shift and go to state 248

state 200

    (208) procedure_definition -> formal_procedure_head . END
    (209) procedure_definition -> formal_procedure_head . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (207) procedure_statement -> . label_id COLON procedure_definition SEMI
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (137) label_id -> . identifier
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (17) identifier -> . ID
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    END             shift and go to state 249
    DCL             shift and go to state 39
    SYN             shift and go to state 46
    TYPE            shift and go to state 18
    ID              shift and go to state 19
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    statement                      shift and go to state 4
    action_statement               shift and go to state 5
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    array_location                 shift and go to state 10
    call_action                    shift and go to state 41
    action                         shift and go to state 16
    synonym_statement              shift and go to state 20
    procedure_statement            shift and go to state 34
    bracketed_action               shift and go to state 13
    statement_list                 shift and go to state 250
    identifier                     shift and go to state 23
    builtin_name                   shift and go to state 24
    dereferenced_reference         shift and go to state 29
    newmode_statement              shift and go to state 30
    assignment_action              shift and go to state 31
    return_action                  shift and go to state 21
    string_element                 shift and go to state 35
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    builtin_call                   shift and go to state 38
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    declaration_statement          shift and go to state 44
    label_id                       shift and go to state 45
    array_slice                    shift and go to state 42

state 201

    (136) action_statement -> label_id COLON action . SEMI

    SEMI            shift and go to state 251


state 202

    (56) location -> identifier .
    (187) procedure_call -> identifier . LPAREN RPAREN
    (188) procedure_call -> identifier . LPAREN parameter_list RPAREN
    (64) string_element -> identifier . LBRACKET start_element RBRACKET
    (66) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    ARROW           reduce using rule 56 (location -> identifier .)
    ASSIGN          reduce using rule 56 (location -> identifier .)
    INCREASE        reduce using rule 56 (location -> identifier .)
    DECREASE        reduce using rule 56 (location -> identifier .)
    MULCREASE       reduce using rule 56 (location -> identifier .)
    DIVCREASE       reduce using rule 56 (location -> identifier .)
    MODCREASE       reduce using rule 56 (location -> identifier .)
    LPAREN          shift and go to state 104
    LBRACKET        shift and go to state 103

  ! LBRACKET        [ reduce using rule 56 (location -> identifier .) ]


state 203

    (207) procedure_statement -> label_id COLON procedure_definition . SEMI

    SEMI            shift and go to state 252


state 204

    (20) synonym_list -> synonym_list synonym_definition .

    SEMI            reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)
    ID              reduce using rule 20 (synonym_list -> synonym_list synonym_definition .)


state 205

    (18) synonym_statement -> SYN synonym_list SEMI .

    END             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    DCL             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ID              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    EXIT            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RETURN          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RESULT          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    IF              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    DO              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ABS             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ASC             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    NUM             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    UPPER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LOWER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LENGTH          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    READ            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    PRINT           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)


state 206

    (22) synonym_definition -> identifier_list mode . initialization
    (14) initialization -> . ASSIGN expression

    ASSIGN          shift and go to state 207

    initialization                 shift and go to state 253

state 207

    (14) initialization -> ASSIGN . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_string_literal       shift and go to state 62
    array_element                  shift and go to state 3
    character_literal              shift and go to state 59
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 254
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 208

    (21) synonym_definition -> identifier_list initialization .

    SEMI            reduce using rule 21 (synonym_definition -> identifier_list initialization .)
    ID              reduce using rule 21 (synonym_definition -> identifier_list initialization .)


state 209

    (72) array_slice -> array_location LBRACKET lower_bound COLON . upper_bound RBRACKET
    (43) upper_bound -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    operand0                       shift and go to state 87
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    conditional_expression         shift and go to state 88
    upper_bound                    shift and go to state 255
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 256
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 210

    (71) expression_list -> expression_list COMMA . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_slice                    shift and go to state 42
    expression                     shift and go to state 257
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92

state 211

    (69) array_element -> array_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    STRCAT          reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    EQUAL           reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIFF            reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATER         reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    GREATEREQ       reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESS            reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LESSEQ          reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ASSIGN          reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    INCREASE        reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DECREASE        reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MULCREASE       reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DIVCREASE       reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    MODCREASE       reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ID              reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 69 (array_element -> array_location LBRACKET expression_list RBRACKET .)


state 212

    (92) parenthesized_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    STRCAT          reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIFF            reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    GREATEREQ       reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    LESSEQ          reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    DOWN            reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 92 (parenthesized_expression -> LPAREN expression RPAREN .)


state 213

    (95) conditional_expression -> IF boolean_expression then_expression . else_expression FI
    (96) conditional_expression -> IF boolean_expression then_expression . elsif_expression else_expression FI
    (99) else_expression -> . ELSE expression
    (100) elsif_expression -> . ELSIF boolean_expression then_expression
    (101) elsif_expression -> . elsif_expression ELSIF boolean_expression then_expression

    ELSE            shift and go to state 259
    ELSIF           shift and go to state 260

    elsif_expression               shift and go to state 261
    else_expression                shift and go to state 258

state 214

    (98) then_expression -> THEN . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_string_literal       shift and go to state 62
    array_element                  shift and go to state 3
    character_literal              shift and go to state 59
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 262
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 215

    (90) value_array_slice -> array_primitive_value LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 263


state 216

    (89) value_array_element -> array_primitive_value LBRACKET integer_expression . RBRACKET

    RBRACKET        shift and go to state 264


state 217

    (55) integer_expression -> expression .
    (42) lower_bound -> expression .

    RBRACKET        reduce using rule 55 (integer_expression -> expression .)
    COLON           reduce using rule 42 (lower_bound -> expression .)


state 218

    (116) operand1 -> operand1 operator2 operand2 .
    (123) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (124) arithmetic_multiplicative_operator -> . TIMES
    (125) arithmetic_multiplicative_operator -> . DIVIDE
    (126) arithmetic_multiplicative_operator -> . MOD

    PLUS            reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    STRCAT          reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    EQUAL           reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    DIFF            reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    GREATER         reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    GREATEREQ       reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    LESS            reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    LESSEQ          reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    ELSE            reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    ELSIF           reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    ID              reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    TO              reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    DOWN            reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    BY              reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    FI              reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    WHILE           reduce using rule 116 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 150
    DIVIDE          shift and go to state 151
    MOD             shift and go to state 149

    arithmetic_multiplicative_operator shift and go to state 148

state 219

    (103) operand0 -> operand0 operator1 operand1 .
    (116) operand1 -> operand1 . operator2 operand2
    (117) operator2 -> . arithmetic_additive_operator
    (118) operator2 -> . string_concatenation_operator
    (119) arithmetic_additive_operator -> . PLUS
    (120) arithmetic_additive_operator -> . MINUS
    (121) string_concatenation_operator -> . STRCAT

    AND             reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    EQUAL           reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    DIFF            reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    GREATER         reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    GREATEREQ       reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    LESS            reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    LESSEQ          reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    WHILE           reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    TO              reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    DOWN            reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    BY              reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    ID              reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 103 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 133
    MINUS           shift and go to state 129
    STRCAT          shift and go to state 130

    operator2                      shift and go to state 132
    arithmetic_additive_operator   shift and go to state 131
    string_concatenation_operator  shift and go to state 134

state 220

    (123) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MOD             reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    STRCAT          reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQUAL           reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIFF            reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATER         reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GREATEREQ       reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESS            reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LESSEQ          reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ID              reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    TO              reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DOWN            reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    BY              reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    WHILE           reduce using rule 123 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 221

    (162) else_clause -> ELSIF . boolean_expression then_clause
    (163) else_clause -> ELSIF . boolean_expression then_clause else_clause
    (97) boolean_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    array_element                  shift and go to state 3
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 90
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42
    boolean_expression             shift and go to state 265

state 222

    (155) if_action -> IF boolean_expression then_clause else_clause . FI

    FI              shift and go to state 266


state 223

    (160) else_clause -> ELSE .
    (161) else_clause -> ELSE . action_statement_list
    (158) action_statement_list -> . action_statement
    (159) action_statement_list -> . action_statement_list action_statement
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (137) label_id -> . identifier
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (17) identifier -> . ID
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    FI              reduce using rule 160 (else_clause -> ELSE .)
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    ID              shift and go to state 19
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    action_statement               shift and go to state 109
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    assignment_action              shift and go to state 31
    array_slice                    shift and go to state 42
    return_action                  shift and go to state 21
    action_statement_list          shift and go to state 267
    string_element                 shift and go to state 35
    action                         shift and go to state 16
    array_location                 shift and go to state 10
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    builtin_name                   shift and go to state 24
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 41
    bracketed_action               shift and go to state 13
    identifier                     shift and go to state 23
    label_id                       shift and go to state 116

state 224

    (154) if_action -> IF boolean_expression then_clause FI .

    SEMI            reduce using rule 154 (if_action -> IF boolean_expression then_clause FI .)


state 225

    (157) then_clause -> THEN action_statement_list .
    (159) action_statement_list -> action_statement_list . action_statement
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (137) label_id -> . identifier
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (17) identifier -> . ID
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    FI              reduce using rule 157 (then_clause -> THEN action_statement_list .)
    ELSE            reduce using rule 157 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 157 (then_clause -> THEN action_statement_list .)
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    ID              shift and go to state 19
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    action_statement               shift and go to state 188
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    assignment_action              shift and go to state 31
    array_slice                    shift and go to state 42
    return_action                  shift and go to state 21
    string_element                 shift and go to state 35
    action                         shift and go to state 16
    array_location                 shift and go to state 10
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    builtin_name                   shift and go to state 24
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 41
    bracketed_action               shift and go to state 13
    identifier                     shift and go to state 23
    label_id                       shift and go to state 116

state 226

    (25) newmode_list -> newmode_list COMMA mode_definition .

    SEMI            reduce using rule 25 (newmode_list -> newmode_list COMMA mode_definition .)
    COMMA           reduce using rule 25 (newmode_list -> newmode_list COMMA mode_definition .)


state 227

    (16) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    REF             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHARS           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ARRAY           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ASSIGN          reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)


state 228

    (26) mode_definition -> identifier_list ASSIGN mode .

    SEMI            reduce using rule 26 (mode_definition -> identifier_list ASSIGN mode .)
    COMMA           reduce using rule 26 (mode_definition -> identifier_list ASSIGN mode .)


state 229

    (66) string_slice -> identifier LBRACKET left_element COLON . right_element RBRACKET
    (68) right_element -> . integer_expression
    (55) integer_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    array_element                  shift and go to state 3
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    integer_expression             shift and go to state 268
    right_element                  shift and go to state 269
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 161
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 230

    (64) string_element -> identifier LBRACKET start_element RBRACKET .

    ARROW           reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ASSIGN          reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    INCREASE        reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DECREASE        reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MULCREASE       reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DIVCREASE       reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MODCREASE       reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LBRACKET        reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    TIMES           reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DIVIDE          reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MOD             reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    PLUS            reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    MINUS           reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    STRCAT          reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    AND             reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    OR              reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    EQUAL           reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DIFF            reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    GREATER         reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    GREATEREQ       reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LESS            reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    LESSEQ          reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    IN              reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RBRACKET        reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    COLON           reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    RPAREN          reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    COMMA           reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    TO              reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    DOWN            reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    BY              reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    THEN            reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    SEMI            reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ID              reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ELSE            reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    ELSIF           reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    FI              reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)
    WHILE           reduce using rule 64 (string_element -> identifier LBRACKET start_element RBRACKET .)


state 231

    (190) parameter_list -> parameter_list COMMA . parameter
    (191) parameter -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    array_element                  shift and go to state 3
    parameter                      shift and go to state 270
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 165
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 232

    (188) procedure_call -> identifier LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    STRCAT          reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    AND             reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    OR              reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DIFF            reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    GREATEREQ       reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LESSEQ          reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    IN              reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ID              reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    TO              reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    BY              reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    FI              reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    INCREASE        reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DECREASE        reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MULCREASE       reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    DIVCREASE       reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)
    MODCREASE       reduce using rule 188 (procedure_call -> identifier LPAREN parameter_list RPAREN .)


state 233

    (198) builtin_call -> builtin_name LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    STRCAT          reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQUAL           reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIFF            reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GREATER         reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GREATEREQ       reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LESS            reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LESSEQ          reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    INCREASE        reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DECREASE        reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MULCREASE       reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVCREASE       reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MODCREASE       reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ID              reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 198 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)


state 234

    (44) reference_mode -> REF mode .

    ASSIGN          reduce using rule 44 (reference_mode -> REF mode .)
    SEMI            reduce using rule 44 (reference_mode -> REF mode .)
    COMMA           reduce using rule 44 (reference_mode -> REF mode .)
    LOC             reduce using rule 44 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 44 (reference_mode -> REF mode .)


state 235

    (13) declaration -> identifier_list mode initialization .

    SEMI            reduce using rule 13 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 13 (declaration -> identifier_list mode initialization .)


state 236

    (49) array_mode -> ARRAY LBRACKET . index_mode_list RBRACKET element_mode
    (50) index_mode_list -> . index_mode
    (51) index_mode_list -> . index_mode_list COMMA index_mode
    (52) index_mode -> . discrete_mode
    (53) index_mode -> . literal_range
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (41) literal_range -> . lower_bound COLON upper_bound
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (42) lower_bound -> . expression
    (17) identifier -> . ID
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    INT             shift and go to state 177
    BOOL            shift and go to state 176
    CHAR            shift and go to state 180
    ID              shift and go to state 19
    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    integer_literal                shift and go to state 66
    discrete_mode                  shift and go to state 271
    location                       shift and go to state 63
    character_mode                 shift and go to state 172
    literal_range                  shift and go to state 273
    integer_mode                   shift and go to state 174
    operand4                       shift and go to state 67
    index_mode_list                shift and go to state 272
    discrete_range_mode            shift and go to state 175
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    lower_bound                    shift and go to state 275
    referenced_location            shift and go to state 72
    operand0                       shift and go to state 87
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 276
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    boolean_mode                   shift and go to state 183
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    array_location                 shift and go to state 10
    string_slice                   shift and go to state 37
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    index_mode                     shift and go to state 277
    character_string_literal       shift and go to state 62
    expression                     shift and go to state 274
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 237

    (39) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (41) literal_range -> . lower_bound COLON upper_bound
    (42) lower_bound -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    location                       shift and go to state 63
    literal_range                  shift and go to state 278
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    lower_bound                    shift and go to state 275
    referenced_location            shift and go to state 72
    operand0                       shift and go to state 87
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    array_location                 shift and go to state 10
    string_slice                   shift and go to state 37
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_slice                    shift and go to state 42
    character_string_literal       shift and go to state 62
    expression                     shift and go to state 274
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92

state 238

    (47) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (48) string_length -> . integer_literal
    (83) integer_literal -> . ICONST

    ICONST          shift and go to state 85

    string_length                  shift and go to state 280
    integer_literal                shift and go to state 279

state 239

    (38) discrete_range_mode -> identifier LPAREN . literal_range RPAREN
    (41) literal_range -> . lower_bound COLON upper_bound
    (42) lower_bound -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    literal_range                  shift and go to state 281
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    lower_bound                    shift and go to state 275
    referenced_location            shift and go to state 72
    operand0                       shift and go to state 87
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    array_location                 shift and go to state 10
    string_slice                   shift and go to state 37
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_slice                    shift and go to state 42
    expression                     shift and go to state 274
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92

state 240

    (11) declaration_list -> declaration_list COMMA declaration .

    SEMI            reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)


state 241

    (167) do_action -> DO control_part SEMI action_statement_list . OD
    (159) action_statement_list -> action_statement_list . action_statement
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (137) label_id -> . identifier
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (17) identifier -> . ID
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    OD              shift and go to state 282
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    ID              shift and go to state 19
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    action_statement               shift and go to state 188
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    assignment_action              shift and go to state 31
    array_slice                    shift and go to state 42
    return_action                  shift and go to state 21
    string_element                 shift and go to state 35
    action                         shift and go to state 16
    array_location                 shift and go to state 10
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    builtin_name                   shift and go to state 24
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 41
    bracketed_action               shift and go to state 13
    identifier                     shift and go to state 23
    label_id                       shift and go to state 116

state 242

    (165) do_action -> DO control_part SEMI OD .

    SEMI            reduce using rule 165 (do_action -> DO control_part SEMI OD .)


state 243

    (174) step_enumeration -> loop_counter ASSIGN . start_value end_value
    (175) step_enumeration -> loop_counter ASSIGN . start_value step_value end_value
    (177) start_value -> . discrete_expression
    (181) discrete_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    start_value                    shift and go to state 283
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    discrete_expression            shift and go to state 284
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_slice                    shift and go to state 42
    expression                     shift and go to state 285
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92

state 244

    (183) range_enumeration -> loop_counter DOWN . IN discrete_mode

    IN              shift and go to state 286


state 245

    (182) range_enumeration -> loop_counter IN . discrete_mode
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (17) identifier -> . ID

    INT             shift and go to state 177
    BOOL            shift and go to state 176
    CHAR            shift and go to state 180
    ID              shift and go to state 19

    boolean_mode                   shift and go to state 183
    integer_mode                   shift and go to state 174
    discrete_range_mode            shift and go to state 175
    identifier                     shift and go to state 288
    discrete_mode                  shift and go to state 287
    character_mode                 shift and go to state 172

state 246

    (170) control_part -> FOR for_control while_control .

    SEMI            reduce using rule 170 (control_part -> FOR for_control while_control .)


state 247

    (212) parenthesis_gambiarra -> LPAREN . RPAREN
    (213) parenthesis_gambiarra -> LPAREN . formal_parameter_list RPAREN
    (214) formal_parameter_list -> . formal_parameter
    (215) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (216) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    RPAREN          shift and go to state 292
    ID              shift and go to state 19

    identifier                     shift and go to state 99
    identifier_list                shift and go to state 289
    formal_parameter               shift and go to state 291
    formal_parameter_list          shift and go to state 290

state 248

    (210) formal_procedure_head -> PROC parenthesis_gambiarra . SEMI
    (211) formal_procedure_head -> PROC parenthesis_gambiarra . result_spec SEMI
    (219) result_spec -> . RETURNS LPAREN mode RPAREN
    (220) result_spec -> . RETURNS LPAREN mode LOC RPAREN

    SEMI            shift and go to state 295
    RETURNS         shift and go to state 293

    result_spec                    shift and go to state 294

state 249

    (208) procedure_definition -> formal_procedure_head END .

    SEMI            reduce using rule 208 (procedure_definition -> formal_procedure_head END .)


state 250

    (209) procedure_definition -> formal_procedure_head statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (23) newmode_statement -> . TYPE newmode_list SEMI
    (207) procedure_statement -> . label_id COLON procedure_definition SEMI
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (137) label_id -> . identifier
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (17) identifier -> . ID
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    END             shift and go to state 296
    DCL             shift and go to state 39
    SYN             shift and go to state 46
    TYPE            shift and go to state 18
    ID              shift and go to state 19
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    statement                      shift and go to state 96
    action_statement               shift and go to state 5
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    array_location                 shift and go to state 10
    call_action                    shift and go to state 41
    action                         shift and go to state 16
    synonym_statement              shift and go to state 20
    procedure_statement            shift and go to state 34
    bracketed_action               shift and go to state 13
    identifier                     shift and go to state 23
    builtin_name                   shift and go to state 24
    dereferenced_reference         shift and go to state 29
    newmode_statement              shift and go to state 30
    assignment_action              shift and go to state 31
    return_action                  shift and go to state 21
    string_element                 shift and go to state 35
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    builtin_call                   shift and go to state 38
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    declaration_statement          shift and go to state 44
    label_id                       shift and go to state 45
    array_slice                    shift and go to state 42

state 251

    (136) action_statement -> label_id COLON action SEMI .

    END             reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    DCL             reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    SYN             reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    TYPE            reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    ID              reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    EXIT            reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    RETURN          reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    RESULT          reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    IF              reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    DO              reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    ABS             reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    ASC             reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    NUM             reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    UPPER           reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    LOWER           reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    LENGTH          reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    READ            reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    PRINT           reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    FI              reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    ELSE            reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    ELSIF           reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    OD              reduce using rule 136 (action_statement -> label_id COLON action SEMI .)
    $end            reduce using rule 136 (action_statement -> label_id COLON action SEMI .)


state 252

    (207) procedure_statement -> label_id COLON procedure_definition SEMI .

    END             reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    DCL             reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    SYN             reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    TYPE            reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    ID              reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    EXIT            reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    RETURN          reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    RESULT          reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    IF              reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    DO              reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    ABS             reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    ASC             reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    NUM             reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    UPPER           reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    LOWER           reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    LENGTH          reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    READ            reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    PRINT           reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    $end            reduce using rule 207 (procedure_statement -> label_id COLON procedure_definition SEMI .)


state 253

    (22) synonym_definition -> identifier_list mode initialization .

    SEMI            reduce using rule 22 (synonym_definition -> identifier_list mode initialization .)
    ID              reduce using rule 22 (synonym_definition -> identifier_list mode initialization .)


state 254

    (14) initialization -> ASSIGN expression .

    SEMI            reduce using rule 14 (initialization -> ASSIGN expression .)
    ID              reduce using rule 14 (initialization -> ASSIGN expression .)
    COMMA           reduce using rule 14 (initialization -> ASSIGN expression .)


state 255

    (72) array_slice -> array_location LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 297


state 256

    (43) upper_bound -> expression .

    RBRACKET        reduce using rule 43 (upper_bound -> expression .)
    COMMA           reduce using rule 43 (upper_bound -> expression .)
    RPAREN          reduce using rule 43 (upper_bound -> expression .)


state 257

    (71) expression_list -> expression_list COMMA expression .

    RBRACKET        reduce using rule 71 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 71 (expression_list -> expression_list COMMA expression .)


state 258

    (95) conditional_expression -> IF boolean_expression then_expression else_expression . FI

    FI              shift and go to state 298


state 259

    (99) else_expression -> ELSE . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_string_literal       shift and go to state 62
    array_element                  shift and go to state 3
    character_literal              shift and go to state 59
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 299
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 260

    (100) elsif_expression -> ELSIF . boolean_expression then_expression
    (97) boolean_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_string_literal       shift and go to state 62
    array_element                  shift and go to state 3
    character_literal              shift and go to state 59
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 90
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42
    boolean_expression             shift and go to state 300

state 261

    (96) conditional_expression -> IF boolean_expression then_expression elsif_expression . else_expression FI
    (101) elsif_expression -> elsif_expression . ELSIF boolean_expression then_expression
    (99) else_expression -> . ELSE expression

    ELSIF           shift and go to state 302
    ELSE            shift and go to state 259

    else_expression                shift and go to state 301

state 262

    (98) then_expression -> THEN expression .

    ELSIF           reduce using rule 98 (then_expression -> THEN expression .)
    ELSE            reduce using rule 98 (then_expression -> THEN expression .)


state 263

    (90) value_array_slice -> array_primitive_value LBRACKET lower_bound COLON . upper_bound RBRACKET
    (43) upper_bound -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    operand0                       shift and go to state 87
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    conditional_expression         shift and go to state 88
    upper_bound                    shift and go to state 303
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 256
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 264

    (89) value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .

    TIMES           reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    DIVIDE          reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    MOD             reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    PLUS            reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    MINUS           reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    STRCAT          reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    AND             reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    OR              reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    EQUAL           reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    DIFF            reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    GREATER         reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    GREATEREQ       reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    LESS            reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    LESSEQ          reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    IN              reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    THEN            reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    SEMI            reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    RBRACKET        reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    COMMA           reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    COLON           reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    RPAREN          reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    ID              reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    ELSE            reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    ELSIF           reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    TO              reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    DOWN            reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    BY              reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    FI              reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    WHILE           reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)
    LBRACKET        reduce using rule 89 (value_array_element -> array_primitive_value LBRACKET integer_expression RBRACKET .)


state 265

    (162) else_clause -> ELSIF boolean_expression . then_clause
    (163) else_clause -> ELSIF boolean_expression . then_clause else_clause
    (156) then_clause -> . THEN
    (157) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 153

    then_clause                    shift and go to state 304

state 266

    (155) if_action -> IF boolean_expression then_clause else_clause FI .

    SEMI            reduce using rule 155 (if_action -> IF boolean_expression then_clause else_clause FI .)


state 267

    (161) else_clause -> ELSE action_statement_list .
    (159) action_statement_list -> action_statement_list . action_statement
    (135) action_statement -> . action SEMI
    (136) action_statement -> . label_id COLON action SEMI
    (138) action -> . bracketed_action
    (139) action -> . assignment_action
    (140) action -> . call_action
    (141) action -> . exit_action
    (142) action -> . return_action
    (143) action -> . result_action
    (137) label_id -> . identifier
    (144) bracketed_action -> . if_action
    (145) bracketed_action -> . do_action
    (146) assignment_action -> . location assigning_operator expression
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (192) exit_action -> . EXIT label_id
    (193) return_action -> . RETURN
    (194) return_action -> . RETURN result
    (195) result_action -> . RESULT result
    (17) identifier -> . ID
    (154) if_action -> . IF boolean_expression then_clause FI
    (155) if_action -> . IF boolean_expression then_clause else_clause FI
    (164) do_action -> . DO OD
    (165) do_action -> . DO control_part SEMI OD
    (166) do_action -> . DO action_statement_list OD
    (167) do_action -> . DO control_part SEMI action_statement_list OD
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT
    (73) array_location -> . location

    FI              reduce using rule 161 (else_clause -> ELSE action_statement_list .)
    EXIT            shift and go to state 7
    RETURN          shift and go to state 14
    RESULT          shift and go to state 22
    ID              shift and go to state 19
    IF              shift and go to state 11
    DO              shift and go to state 43
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    exit_action                    shift and go to state 1
    action_statement               shift and go to state 188
    result_action                  shift and go to state 6
    location                       shift and go to state 8
    do_action                      shift and go to state 9
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    assignment_action              shift and go to state 31
    array_slice                    shift and go to state 42
    return_action                  shift and go to state 21
    string_element                 shift and go to state 35
    action                         shift and go to state 16
    array_location                 shift and go to state 10
    if_action                      shift and go to state 36
    string_slice                   shift and go to state 37
    builtin_name                   shift and go to state 24
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 41
    bracketed_action               shift and go to state 13
    identifier                     shift and go to state 23
    label_id                       shift and go to state 116

state 268

    (68) right_element -> integer_expression .

    RBRACKET        reduce using rule 68 (right_element -> integer_expression .)


state 269

    (66) string_slice -> identifier LBRACKET left_element COLON right_element . RBRACKET

    RBRACKET        shift and go to state 305


state 270

    (190) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 190 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 190 (parameter_list -> parameter_list COMMA parameter .)


state 271

    (52) index_mode -> discrete_mode .
    (39) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    RBRACKET        reduce using rule 52 (index_mode -> discrete_mode .)
    COMMA           reduce using rule 52 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 237


state 272

    (49) array_mode -> ARRAY LBRACKET index_mode_list . RBRACKET element_mode
    (51) index_mode_list -> index_mode_list . COMMA index_mode

    RBRACKET        shift and go to state 307
    COMMA           shift and go to state 306


state 273

    (53) index_mode -> literal_range .

    RBRACKET        reduce using rule 53 (index_mode -> literal_range .)
    COMMA           reduce using rule 53 (index_mode -> literal_range .)


state 274

    (42) lower_bound -> expression .

    COLON           reduce using rule 42 (lower_bound -> expression .)


state 275

    (41) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 308


state 276

    (38) discrete_range_mode -> identifier . LPAREN literal_range RPAREN
    (56) location -> identifier .
    (64) string_element -> identifier . LBRACKET start_element RBRACKET
    (66) string_slice -> identifier . LBRACKET left_element COLON right_element RBRACKET
    (187) procedure_call -> identifier . LPAREN RPAREN
    (188) procedure_call -> identifier . LPAREN parameter_list RPAREN

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          shift and go to state 309
    ARROW           reduce using rule 56 (location -> identifier .)
    TIMES           reduce using rule 56 (location -> identifier .)
    DIVIDE          reduce using rule 56 (location -> identifier .)
    MOD             reduce using rule 56 (location -> identifier .)
    PLUS            reduce using rule 56 (location -> identifier .)
    MINUS           reduce using rule 56 (location -> identifier .)
    STRCAT          reduce using rule 56 (location -> identifier .)
    AND             reduce using rule 56 (location -> identifier .)
    OR              reduce using rule 56 (location -> identifier .)
    EQUAL           reduce using rule 56 (location -> identifier .)
    DIFF            reduce using rule 56 (location -> identifier .)
    GREATER         reduce using rule 56 (location -> identifier .)
    GREATEREQ       reduce using rule 56 (location -> identifier .)
    LESS            reduce using rule 56 (location -> identifier .)
    LESSEQ          reduce using rule 56 (location -> identifier .)
    IN              reduce using rule 56 (location -> identifier .)
    COLON           reduce using rule 56 (location -> identifier .)
    LBRACKET        shift and go to state 103

  ! LBRACKET        [ reduce using rule 56 (location -> identifier .) ]


state 277

    (50) index_mode_list -> index_mode .

    RBRACKET        reduce using rule 50 (index_mode_list -> index_mode .)
    COMMA           reduce using rule 50 (index_mode_list -> index_mode .)


state 278

    (39) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 310


state 279

    (48) string_length -> integer_literal .

    RBRACKET        reduce using rule 48 (string_length -> integer_literal .)


state 280

    (47) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 311


state 281

    (38) discrete_range_mode -> identifier LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 312


state 282

    (167) do_action -> DO control_part SEMI action_statement_list OD .

    SEMI            reduce using rule 167 (do_action -> DO control_part SEMI action_statement_list OD .)


state 283

    (174) step_enumeration -> loop_counter ASSIGN start_value . end_value
    (175) step_enumeration -> loop_counter ASSIGN start_value . step_value end_value
    (179) end_value -> . TO discrete_expression
    (180) end_value -> . DOWN TO discrete_expression
    (178) step_value -> . BY integer_expression

    TO              shift and go to state 317
    DOWN            shift and go to state 315
    BY              shift and go to state 314

    end_value                      shift and go to state 313
    step_value                     shift and go to state 316

state 284

    (177) start_value -> discrete_expression .

    TO              reduce using rule 177 (start_value -> discrete_expression .)
    DOWN            reduce using rule 177 (start_value -> discrete_expression .)
    BY              reduce using rule 177 (start_value -> discrete_expression .)


state 285

    (181) discrete_expression -> expression .

    WHILE           reduce using rule 181 (discrete_expression -> expression .)
    SEMI            reduce using rule 181 (discrete_expression -> expression .)
    TO              reduce using rule 181 (discrete_expression -> expression .)
    DOWN            reduce using rule 181 (discrete_expression -> expression .)
    BY              reduce using rule 181 (discrete_expression -> expression .)


state 286

    (183) range_enumeration -> loop_counter DOWN IN . discrete_mode
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (17) identifier -> . ID

    INT             shift and go to state 177
    BOOL            shift and go to state 176
    CHAR            shift and go to state 180
    ID              shift and go to state 19

    boolean_mode                   shift and go to state 183
    integer_mode                   shift and go to state 174
    discrete_range_mode            shift and go to state 175
    identifier                     shift and go to state 288
    discrete_mode                  shift and go to state 318
    character_mode                 shift and go to state 172

state 287

    (182) range_enumeration -> loop_counter IN discrete_mode .
    (39) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 182 (range_enumeration -> loop_counter IN discrete_mode .)
    SEMI            reduce using rule 182 (range_enumeration -> loop_counter IN discrete_mode .)
    LPAREN          shift and go to state 237


state 288

    (38) discrete_range_mode -> identifier . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 239


state 289

    (216) formal_parameter -> identifier_list . parameter_spec
    (16) identifier_list -> identifier_list . COMMA identifier
    (217) parameter_spec -> . mode
    (218) parameter_spec -> . mode LOC
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (40) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    COMMA           shift and go to state 156
    REF             shift and go to state 168
    ID              shift and go to state 19
    INT             shift and go to state 177
    BOOL            shift and go to state 176
    CHAR            shift and go to state 180
    CHARS           shift and go to state 173
    ARRAY           shift and go to state 170

    composite_mode                 shift and go to state 178
    string_mode                    shift and go to state 181
    mode_name                      shift and go to state 179
    array_mode                     shift and go to state 182
    mode                           shift and go to state 319
    discrete_mode                  shift and go to state 171
    character_mode                 shift and go to state 172
    boolean_mode                   shift and go to state 183
    integer_mode                   shift and go to state 174
    identifier                     shift and go to state 184
    parameter_spec                 shift and go to state 320
    discrete_range_mode            shift and go to state 175
    reference_mode                 shift and go to state 185

state 290

    (213) parenthesis_gambiarra -> LPAREN formal_parameter_list . RPAREN
    (215) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          shift and go to state 321
    COMMA           shift and go to state 322


state 291

    (214) formal_parameter_list -> formal_parameter .

    RPAREN          reduce using rule 214 (formal_parameter_list -> formal_parameter .)
    COMMA           reduce using rule 214 (formal_parameter_list -> formal_parameter .)


state 292

    (212) parenthesis_gambiarra -> LPAREN RPAREN .

    SEMI            reduce using rule 212 (parenthesis_gambiarra -> LPAREN RPAREN .)
    RETURNS         reduce using rule 212 (parenthesis_gambiarra -> LPAREN RPAREN .)


state 293

    (219) result_spec -> RETURNS . LPAREN mode RPAREN
    (220) result_spec -> RETURNS . LPAREN mode LOC RPAREN

    LPAREN          shift and go to state 323


state 294

    (211) formal_procedure_head -> PROC parenthesis_gambiarra result_spec . SEMI

    SEMI            shift and go to state 324


state 295

    (210) formal_procedure_head -> PROC parenthesis_gambiarra SEMI .

    END             reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    DCL             reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    SYN             reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    TYPE            reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    ID              reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    EXIT            reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    RETURN          reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    RESULT          reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    IF              reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    DO              reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    ABS             reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    ASC             reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    NUM             reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    UPPER           reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    LOWER           reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    LENGTH          reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    READ            reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)
    PRINT           reduce using rule 210 (formal_procedure_head -> PROC parenthesis_gambiarra SEMI .)


state 296

    (209) procedure_definition -> formal_procedure_head statement_list END .

    SEMI            reduce using rule 209 (procedure_definition -> formal_procedure_head statement_list END .)


state 297

    (72) array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .

    ARROW           reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ASSIGN          reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    INCREASE        reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DECREASE        reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MULCREASE       reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVCREASE       reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MODCREASE       reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TIMES           reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MOD             reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    STRCAT          reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIFF            reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATEREQ       reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESSEQ          reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TO              reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DOWN            reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ID              reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    BY              reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    WHILE           reduce using rule 72 (array_slice -> array_location LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 298

    (95) conditional_expression -> IF boolean_expression then_expression else_expression FI .

    WHILE           reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    SEMI            reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COLON           reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ID              reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COMMA           reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RPAREN          reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    TO              reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    DOWN            reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    BY              reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    THEN            reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    FI              reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSE            reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSIF           reduce using rule 95 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)


state 299

    (99) else_expression -> ELSE expression .

    FI              reduce using rule 99 (else_expression -> ELSE expression .)


state 300

    (100) elsif_expression -> ELSIF boolean_expression . then_expression
    (98) then_expression -> . THEN expression

    THEN            shift and go to state 214

    then_expression                shift and go to state 325

state 301

    (96) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 326


state 302

    (101) elsif_expression -> elsif_expression ELSIF . boolean_expression then_expression
    (97) boolean_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_string_literal       shift and go to state 62
    array_element                  shift and go to state 3
    character_literal              shift and go to state 59
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 90
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42
    boolean_expression             shift and go to state 327

state 303

    (90) value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 328


state 304

    (162) else_clause -> ELSIF boolean_expression then_clause .
    (163) else_clause -> ELSIF boolean_expression then_clause . else_clause
    (160) else_clause -> . ELSE
    (161) else_clause -> . ELSE action_statement_list
    (162) else_clause -> . ELSIF boolean_expression then_clause
    (163) else_clause -> . ELSIF boolean_expression then_clause else_clause

    FI              reduce using rule 162 (else_clause -> ELSIF boolean_expression then_clause .)
    ELSE            shift and go to state 223
    ELSIF           shift and go to state 221

    else_clause                    shift and go to state 329

state 305

    (66) string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .

    ARROW           reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TIMES           reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIVIDE          reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MOD             reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    PLUS            reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MINUS           reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    STRCAT          reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    AND             reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    OR              reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    EQUAL           reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIFF            reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GREATER         reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    GREATEREQ       reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LESS            reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LESSEQ          reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    IN              reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    THEN            reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    SEMI            reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RBRACKET        reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COMMA           reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    COLON           reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    RPAREN          reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    LBRACKET        reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ID              reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSE            reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ELSIF           reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    TO              reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DOWN            reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    BY              reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    FI              reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    WHILE           reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    ASSIGN          reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    INCREASE        reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DECREASE        reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MULCREASE       reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    DIVCREASE       reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)
    MODCREASE       reduce using rule 66 (string_slice -> identifier LBRACKET left_element COLON right_element RBRACKET .)


state 306

    (51) index_mode_list -> index_mode_list COMMA . index_mode
    (52) index_mode -> . discrete_mode
    (53) index_mode -> . literal_range
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (41) literal_range -> . lower_bound COLON upper_bound
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (42) lower_bound -> . expression
    (17) identifier -> . ID
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    INT             shift and go to state 177
    BOOL            shift and go to state 176
    CHAR            shift and go to state 180
    ID              shift and go to state 19
    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    integer_literal                shift and go to state 66
    discrete_mode                  shift and go to state 271
    location                       shift and go to state 63
    character_mode                 shift and go to state 172
    literal_range                  shift and go to state 273
    integer_mode                   shift and go to state 174
    operand4                       shift and go to state 67
    discrete_range_mode            shift and go to state 175
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    lower_bound                    shift and go to state 275
    referenced_location            shift and go to state 72
    operand0                       shift and go to state 87
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 276
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    boolean_mode                   shift and go to state 183
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    array_location                 shift and go to state 10
    string_slice                   shift and go to state 37
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    index_mode                     shift and go to state 330
    character_string_literal       shift and go to state 62
    expression                     shift and go to state 274
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 307

    (49) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET . element_mode
    (54) element_mode -> . mode
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (40) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    REF             shift and go to state 168
    ID              shift and go to state 19
    INT             shift and go to state 177
    BOOL            shift and go to state 176
    CHAR            shift and go to state 180
    CHARS           shift and go to state 173
    ARRAY           shift and go to state 170

    composite_mode                 shift and go to state 178
    string_mode                    shift and go to state 181
    mode_name                      shift and go to state 179
    array_mode                     shift and go to state 182
    mode                           shift and go to state 331
    discrete_mode                  shift and go to state 171
    character_mode                 shift and go to state 172
    element_mode                   shift and go to state 332
    boolean_mode                   shift and go to state 183
    integer_mode                   shift and go to state 174
    identifier                     shift and go to state 184
    discrete_range_mode            shift and go to state 175
    reference_mode                 shift and go to state 185

state 308

    (41) literal_range -> lower_bound COLON . upper_bound
    (43) upper_bound -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    operand0                       shift and go to state 87
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    conditional_expression         shift and go to state 88
    upper_bound                    shift and go to state 333
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 256
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 309

    (38) discrete_range_mode -> identifier LPAREN . literal_range RPAREN
    (187) procedure_call -> identifier LPAREN . RPAREN
    (188) procedure_call -> identifier LPAREN . parameter_list RPAREN
    (41) literal_range -> . lower_bound COLON upper_bound
    (189) parameter_list -> . parameter
    (190) parameter_list -> . parameter_list COMMA parameter
    (42) lower_bound -> . expression
    (191) parameter -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    RPAREN          shift and go to state 162
    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    parameter                      shift and go to state 163
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    literal_range                  shift and go to state 281
    parameter_list                 shift and go to state 164
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    lower_bound                    shift and go to state 275
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    array_location                 shift and go to state 10
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_slice                    shift and go to state 42
    expression                     shift and go to state 334
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92

state 310

    (39) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 39 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 311

    (47) string_mode -> CHARS LBRACKET string_length RBRACKET .

    ASSIGN          reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    COMMA           reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    LOC             reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    RPAREN          reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 312

    (38) discrete_range_mode -> identifier LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 38 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 38 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 38 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 38 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    LOC             reduce using rule 38 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 38 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 38 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 38 (discrete_range_mode -> identifier LPAREN literal_range RPAREN .)


state 313

    (174) step_enumeration -> loop_counter ASSIGN start_value end_value .

    WHILE           reduce using rule 174 (step_enumeration -> loop_counter ASSIGN start_value end_value .)
    SEMI            reduce using rule 174 (step_enumeration -> loop_counter ASSIGN start_value end_value .)


state 314

    (178) step_value -> BY . integer_expression
    (55) integer_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    array_element                  shift and go to state 3
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    value_array_slice              shift and go to state 76
    integer_expression             shift and go to state 335
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    expression                     shift and go to state 161
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92
    array_slice                    shift and go to state 42

state 315

    (180) end_value -> DOWN . TO discrete_expression

    TO              shift and go to state 336


state 316

    (175) step_enumeration -> loop_counter ASSIGN start_value step_value . end_value
    (179) end_value -> . TO discrete_expression
    (180) end_value -> . DOWN TO discrete_expression

    TO              shift and go to state 317
    DOWN            shift and go to state 315

    end_value                      shift and go to state 337

state 317

    (179) end_value -> TO . discrete_expression
    (181) discrete_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    discrete_expression            shift and go to state 338
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_slice                    shift and go to state 42
    expression                     shift and go to state 285
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92

state 318

    (183) range_enumeration -> loop_counter DOWN IN discrete_mode .
    (39) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 183 (range_enumeration -> loop_counter DOWN IN discrete_mode .)
    SEMI            reduce using rule 183 (range_enumeration -> loop_counter DOWN IN discrete_mode .)
    LPAREN          shift and go to state 237


state 319

    (217) parameter_spec -> mode .
    (218) parameter_spec -> mode . LOC

    RPAREN          reduce using rule 217 (parameter_spec -> mode .)
    COMMA           reduce using rule 217 (parameter_spec -> mode .)
    LOC             shift and go to state 339


state 320

    (216) formal_parameter -> identifier_list parameter_spec .

    RPAREN          reduce using rule 216 (formal_parameter -> identifier_list parameter_spec .)
    COMMA           reduce using rule 216 (formal_parameter -> identifier_list parameter_spec .)


state 321

    (213) parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN .

    SEMI            reduce using rule 213 (parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN .)
    RETURNS         reduce using rule 213 (parenthesis_gambiarra -> LPAREN formal_parameter_list RPAREN .)


state 322

    (215) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (216) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 19

    identifier                     shift and go to state 99
    identifier_list                shift and go to state 289
    formal_parameter               shift and go to state 340

state 323

    (219) result_spec -> RETURNS LPAREN . mode RPAREN
    (220) result_spec -> RETURNS LPAREN . mode LOC RPAREN
    (27) mode -> . mode_name
    (28) mode -> . discrete_mode
    (29) mode -> . reference_mode
    (30) mode -> . composite_mode
    (40) mode_name -> . identifier
    (31) discrete_mode -> . integer_mode
    (32) discrete_mode -> . boolean_mode
    (33) discrete_mode -> . character_mode
    (34) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (35) integer_mode -> . INT
    (36) boolean_mode -> . BOOL
    (37) character_mode -> . CHAR
    (38) discrete_range_mode -> . identifier LPAREN literal_range RPAREN
    (39) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode_list RBRACKET element_mode

    REF             shift and go to state 168
    ID              shift and go to state 19
    INT             shift and go to state 177
    BOOL            shift and go to state 176
    CHAR            shift and go to state 180
    CHARS           shift and go to state 173
    ARRAY           shift and go to state 170

    composite_mode                 shift and go to state 178
    mode_name                      shift and go to state 179
    array_mode                     shift and go to state 182
    string_mode                    shift and go to state 181
    integer_mode                   shift and go to state 174
    discrete_mode                  shift and go to state 171
    character_mode                 shift and go to state 172
    boolean_mode                   shift and go to state 183
    mode                           shift and go to state 341
    identifier                     shift and go to state 184
    discrete_range_mode            shift and go to state 175
    reference_mode                 shift and go to state 185

state 324

    (211) formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .

    END             reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    DCL             reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    SYN             reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    TYPE            reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    ID              reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    EXIT            reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    RETURN          reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    RESULT          reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    IF              reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    DO              reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    ABS             reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    ASC             reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    NUM             reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    UPPER           reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    LOWER           reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    LENGTH          reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    READ            reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)
    PRINT           reduce using rule 211 (formal_procedure_head -> PROC parenthesis_gambiarra result_spec SEMI .)


state 325

    (100) elsif_expression -> ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 100 (elsif_expression -> ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 100 (elsif_expression -> ELSIF boolean_expression then_expression .)


state 326

    (96) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .

    WHILE           reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    SEMI            reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ID              reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    TO              reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    DOWN            reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    BY              reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    THEN            reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSE            reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 96 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)


state 327

    (101) elsif_expression -> elsif_expression ELSIF boolean_expression . then_expression
    (98) then_expression -> . THEN expression

    THEN            shift and go to state 214

    then_expression                shift and go to state 342

state 328

    (90) value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .

    TIMES           reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MOD             reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    STRCAT          reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQUAL           reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIFF            reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATER         reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GREATEREQ       reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESS            reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LESSEQ          reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LBRACKET        reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    WHILE           reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ID              reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TO              reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DOWN            reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    BY              reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 90 (value_array_slice -> array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 329

    (163) else_clause -> ELSIF boolean_expression then_clause else_clause .

    FI              reduce using rule 163 (else_clause -> ELSIF boolean_expression then_clause else_clause .)


state 330

    (51) index_mode_list -> index_mode_list COMMA index_mode .

    RBRACKET        reduce using rule 51 (index_mode_list -> index_mode_list COMMA index_mode .)
    COMMA           reduce using rule 51 (index_mode_list -> index_mode_list COMMA index_mode .)


state 331

    (54) element_mode -> mode .

    ASSIGN          reduce using rule 54 (element_mode -> mode .)
    SEMI            reduce using rule 54 (element_mode -> mode .)
    COMMA           reduce using rule 54 (element_mode -> mode .)
    LOC             reduce using rule 54 (element_mode -> mode .)
    RPAREN          reduce using rule 54 (element_mode -> mode .)


state 332

    (49) array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .

    LOC             reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    RPAREN          reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    COMMA           reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)
    ASSIGN          reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode .)


state 333

    (41) literal_range -> lower_bound COLON upper_bound .

    RBRACKET        reduce using rule 41 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 41 (literal_range -> lower_bound COLON upper_bound .)
    RPAREN          reduce using rule 41 (literal_range -> lower_bound COLON upper_bound .)


state 334

    (42) lower_bound -> expression .
    (191) parameter -> expression .

    COLON           reduce using rule 42 (lower_bound -> expression .)
    RPAREN          reduce using rule 191 (parameter -> expression .)
    COMMA           reduce using rule 191 (parameter -> expression .)


state 335

    (178) step_value -> BY integer_expression .

    TO              reduce using rule 178 (step_value -> BY integer_expression .)
    DOWN            reduce using rule 178 (step_value -> BY integer_expression .)


state 336

    (180) end_value -> DOWN TO . discrete_expression
    (181) discrete_expression -> . expression
    (93) expression -> . operand0
    (94) expression -> . conditional_expression
    (102) operand0 -> . operand1
    (103) operand0 -> . operand0 operator1 operand1
    (95) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (96) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (115) operand1 -> . operand2
    (116) operand1 -> . operand1 operator2 operand2
    (122) operand2 -> . operand3
    (123) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (127) operand3 -> . operand4
    (128) operand3 -> . monadic_operator operand4
    (131) operand4 -> . location
    (132) operand4 -> . referenced_location
    (133) operand4 -> . primitive_value
    (129) monadic_operator -> . MINUS
    (130) monadic_operator -> . NOT
    (56) location -> . identifier
    (57) location -> . dereferenced_reference
    (58) location -> . string_element
    (59) location -> . string_slice
    (60) location -> . array_element
    (61) location -> . array_slice
    (62) location -> . call_action
    (134) referenced_location -> . ARROW location
    (74) primitive_value -> . literal
    (75) primitive_value -> . value_array_element
    (76) primitive_value -> . value_array_slice
    (77) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (63) dereferenced_reference -> . location ARROW
    (64) string_element -> . identifier LBRACKET start_element RBRACKET
    (66) string_slice -> . identifier LBRACKET left_element COLON right_element RBRACKET
    (69) array_element -> . array_location LBRACKET expression_list RBRACKET
    (72) array_slice -> . array_location LBRACKET lower_bound COLON upper_bound RBRACKET
    (185) call_action -> . procedure_call
    (186) call_action -> . builtin_call
    (78) literal -> . integer_literal
    (79) literal -> . boolean_literal
    (80) literal -> . character_literal
    (81) literal -> . empty_literal
    (82) literal -> . character_string_literal
    (89) value_array_element -> . array_primitive_value LBRACKET integer_expression RBRACKET
    (90) value_array_slice -> . array_primitive_value LBRACKET lower_bound COLON upper_bound RBRACKET
    (92) parenthesized_expression -> . LPAREN expression RPAREN
    (73) array_location -> . location
    (187) procedure_call -> . identifier LPAREN RPAREN
    (188) procedure_call -> . identifier LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (198) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (83) integer_literal -> . ICONST
    (84) boolean_literal -> . FALSE
    (85) boolean_literal -> . TRUE
    (86) character_literal -> . CCONST
    (87) empty_literal -> . NULL
    (88) character_string_literal -> . SCONST
    (91) array_primitive_value -> . primitive_value
    (199) builtin_name -> . ABS
    (200) builtin_name -> . ASC
    (201) builtin_name -> . NUM
    (202) builtin_name -> . UPPER
    (203) builtin_name -> . LOWER
    (204) builtin_name -> . LENGTH
    (205) builtin_name -> . READ
    (206) builtin_name -> . PRINT

    IF              shift and go to state 65
    MINUS           shift and go to state 73
    NOT             shift and go to state 84
    ARROW           shift and go to state 75
    ID              shift and go to state 19
    LPAREN          shift and go to state 61
    ICONST          shift and go to state 85
    FALSE           shift and go to state 64
    TRUE            shift and go to state 81
    CCONST          shift and go to state 82
    NULL            shift and go to state 60
    SCONST          shift and go to state 86
    ABS             shift and go to state 25
    ASC             shift and go to state 32
    NUM             shift and go to state 17
    UPPER           shift and go to state 28
    LOWER           shift and go to state 2
    LENGTH          shift and go to state 26
    READ            shift and go to state 27
    PRINT           shift and go to state 33

    character_literal              shift and go to state 59
    character_string_literal       shift and go to state 62
    location                       shift and go to state 63
    array_location                 shift and go to state 10
    integer_literal                shift and go to state 66
    operand4                       shift and go to state 67
    array_primitive_value          shift and go to state 68
    primitive_value                shift and go to state 69
    operand3                       shift and go to state 70
    boolean_literal                shift and go to state 71
    referenced_location            shift and go to state 72
    parenthesized_expression       shift and go to state 74
    discrete_expression            shift and go to state 343
    value_array_slice              shift and go to state 76
    literal                        shift and go to state 77
    identifier                     shift and go to state 78
    builtin_name                   shift and go to state 24
    operand1                       shift and go to state 79
    empty_literal                  shift and go to state 80
    monadic_operator               shift and go to state 83
    dereferenced_reference         shift and go to state 29
    builtin_call                   shift and go to state 38
    string_element                 shift and go to state 35
    string_slice                   shift and go to state 37
    operand0                       shift and go to state 87
    conditional_expression         shift and go to state 88
    array_element                  shift and go to state 3
    procedure_call                 shift and go to state 40
    call_action                    shift and go to state 89
    array_slice                    shift and go to state 42
    expression                     shift and go to state 285
    operand2                       shift and go to state 91
    value_array_element            shift and go to state 92

state 337

    (175) step_enumeration -> loop_counter ASSIGN start_value step_value end_value .

    WHILE           reduce using rule 175 (step_enumeration -> loop_counter ASSIGN start_value step_value end_value .)
    SEMI            reduce using rule 175 (step_enumeration -> loop_counter ASSIGN start_value step_value end_value .)


state 338

    (179) end_value -> TO discrete_expression .

    WHILE           reduce using rule 179 (end_value -> TO discrete_expression .)
    SEMI            reduce using rule 179 (end_value -> TO discrete_expression .)


state 339

    (218) parameter_spec -> mode LOC .

    RPAREN          reduce using rule 218 (parameter_spec -> mode LOC .)
    COMMA           reduce using rule 218 (parameter_spec -> mode LOC .)


state 340

    (215) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    RPAREN          reduce using rule 215 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    COMMA           reduce using rule 215 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 341

    (219) result_spec -> RETURNS LPAREN mode . RPAREN
    (220) result_spec -> RETURNS LPAREN mode . LOC RPAREN

    RPAREN          shift and go to state 345
    LOC             shift and go to state 344


state 342

    (101) elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 101 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 101 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)


state 343

    (180) end_value -> DOWN TO discrete_expression .

    WHILE           reduce using rule 180 (end_value -> DOWN TO discrete_expression .)
    SEMI            reduce using rule 180 (end_value -> DOWN TO discrete_expression .)


state 344

    (220) result_spec -> RETURNS LPAREN mode LOC . RPAREN

    RPAREN          shift and go to state 346


state 345

    (219) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMI            reduce using rule 219 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 346

    (220) result_spec -> RETURNS LPAREN mode LOC RPAREN .

    SEMI            reduce using rule 220 (result_spec -> RETURNS LPAREN mode LOC RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 23 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 78 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 202 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 276 resolved as shift
