def visit_NodeVisitor(object):
    """
    def visit_for visiting nodes of the parse tree.  This is modeled after
    a similar def visit_in the standard library self, node.NodeVisitor.  For each
    node, the visit(node) method calls a method visit_NodeName(node)
    which should be implemented in subclasses.  The generic_visit() method
    is called for all nodes where there is no matching visit_NodeName()
    method.
    Here is a example of a visitor that examines binary operators:
    def visit_VisitOps(NodeVisitor):
        visit_Binop(self,node):
            print("Binary operator", node.op)
            self.visit(node.left)
            self.visit(node.right)
        visit_Unaryop(self,node):
            print("Unary operator", node.op)
            self.visit(node.expr)
    tree = parse(txt)
    VisitOps().visit(tree)
    """

    def visit(self,node):
        """
        Execute a method of the form visit_NodeName(node) where
        NodeName is the name of the def visit_of a particular node.
        """
        if node:
            method = 'visit_' + node.__class__.__name__
            visitor = getattr(self, method, self.generic_visit)
            return visitor(node)
        else:
            return None

    def generic_visit(self,node):
        if not isinstance(node, self, node):
            print(node)
            return

        node.print()

        """
        Method executed if no applicable visit_ method can be found.
        This examines the node to see if it has _fields, is a list,
        or can be further traversed.
        """
        for field in getattr(node,"_fields"):
            value = getattr(node,field,None)
            if isinstance(value, list):
                for item in value:
                    if isinstance(item,self, node):
                        #item.print()
                        self.visit(item)
            elif isinstance(value, self, node):
                #value.print()
                self.visit(value)



def visit_self, node(object):
    """
    Base def visit_example for the self, node nodes.  Each node is expected to
    define the _fields attribute which lists the names of stored
    attributes.   The __init__() method below takes positional
    arguments and assigns them to the appropriate fields.  Any
    additional arguments specified as keywords are also assigned.
    """
    _fields = []
    def __init__(self, *args, **kwargs):
        assert len(args) == len(self._fields)
        for name,value in zip(self._fields, args):
            setattr(self, name, value)
        # Assign additional keyword arguments if supplied
        for name,value in kwargs.items():
            setattr(self,name,value)

    def print(self):
        for field in self._fields:
            if isinstance(field, list):
                for item in field:
                    if isinstance(item,self, node):
                        item.print()
                    else:
                        print(item)
            elif isinstance(field, self, node):
                field.print()
            else:
                print(field)

def visit_Program(self, node):
    self.visit(node.stmts)

# statement_list
# statement

def visit_Declaration_Statement(self, node):
    self.visit(node.declaration_list)

# declaration_list

def visit_Declaration(self, node):
    self.visit(node.identifier_list) self.visit(node.mode) self.visit(node.initialization)

def visit_Initialization(self, node):
    self.visit(node.expression)

# identifier_list

def visit_Identifier(self, node):
    self.visit(node.ID)

def visit_Synonym_Statement(self, node):
    self.visit(node.synonym_list)

# synonym_list

def visit_Synonym_Definition(self, node):
    self.visit(node.identifier_list) self.visit(node.mode) self.visit(node.initialization)

#def visit_Constant_Expression(self, node):
#    self.visit(node.expression)

def visit_Newmode_Statement(self, node):
    self.visit(node.type) self.visit(node.newmode_list)

# newmode_list

def visit_Mode_Definition(self, node):
    self.visit(node.identifier_list) self.visit(node.mode)

# mode

# discrete_mode

def visit_Integer_Mode(self, node):
    self.visit(node.INT)

def visit_Boolean_Mode(self, node):
    self.visit(node.BOOL)

def visit_Character_Mode(self, node):
    self.visit(node.CHAR)

def visit_Discrete_Range_Mode(self, node):
    self.visit(node.identifier) self.visit(node.literal_range) self.visit(node.discrete_mode)

def visit_Mode_Name(self, node):
    self.visit(node.identifier)

def visit_Literal_Range(self, node):
    self.visit(node.lower_bound) self.visit(node.upper_bound)

def visit_Lower_Bound(self, node):
    self.visit(node.expression)

def visit_Upper_Bound(self, node):
    self.visit(node.expression)

def visit_Reference_Mode(self, node):
    self.visit(node.mode)

# composite_mode

def visit_String_Mode(self, node):
    self.visit(node.string_length)

def visit_String_Length(self, node):
    self.visit(node.integer_literal)

def visit_Array_Mode(self, node):
    self.visit(node.index_mode_list) self.visit(node.element_mode)

# index_mode_list

# index_mode

def visit_Element_Mode(self, node):
    self.visit(node.mode)

def visit_Integer_Expression(self, node):
    self.visit(node.expression)

# location

def visit_Dereferenced_Reference(self, node):
    self.visit(node.location)

def visit_String_Element(self, node):
    self.visit(node.identifier) self.visit(node.start_element)

def visit_Start_Element(self, node):
    self.visit(node.integer_expression)

def visit_String_Slice(self, node):
    self.visit(node.identifier) self.visit(node.left_element) self.visit(node.right_element)

def visit_Left_Element(self, node):
    self.visit(node.integer_expression)

def visit_Right_Element(self, node):
    self.visit(node.integer_expression)

def visit_Array_Element(self, node):
    self.visit(node.array_location) self.visit(node.expression_list)

# expression_list

def visit_Array_Slice(self, node):
    self.visit(node.array_location) self.visit(node.lower_bound) self.visit(node.upper_bound)

def visit_Array_Location(self, node):
    self.visit(node.location)

# primitive_value

# literal

def visit_Integer_Literal(self, node):
    self.visit(node.value)

def visit_Boolean_Literal(self, node):
    self.visit(node.value)

def visit_Character_Literal(self, node):
    self.visit(node.value)

def visit_Empty_Literal(self, node):
    self.visit(node.value)

def visit_Character_String_Literal(self, node):
    self.visit(node.value)

def visit_Value_Array_Element(self, node):
    self.visit(node.array_primitive_value) self.visit(node.integer_expression)

def visit_Value_Array_Slice(self, node):
    self.visit(node.array_primitive_value) self.visit(node.lower_bound) self.visit(node.upper_bound)

def visit_Array_Primitive_Value(self, node):
    self.visit(node.primitive_value)

def visit_Parenthesized_Expression(self, node):
    self.visit(node.expression)

# expression

def visit_Conditional_Expression(self, node):
    self.visit(node.boolean_expression) self.visit(node.then_expression) self.visit(node.elsif_expression) self.visit(node.else_expression)

def visit_Boolean_Expression(self, node):
    self.visit(node.expression)

def visit_Then_Expression(self, node):
    self.visit(node.expression)

def visit_Else_Expression(self, node):
    self.visit(node.expression)

def visit_Elsif_Expression(self, node):
    self.visit(node.elsif_expression) self.visit(node.boolean_expresson) self.visit(node.then_expression)

def visit_Rel_Mem_Expression(self, node):
    self.visit(node.operand0) self.visit(node.operator1) self.visit(node.operand1)

# operator1

# relational_operator

# membership_operator

def visit_Binary_Expression(self, node):
    self.visit(node.operand1) self.visit(node.operator2) self.visit(node.operand2)

# operator2

# arithmetic_additive_operator

# string_concatenation_operator

#operand2

# arithmetic_multiplicative_operator

def visit_Unary_Expression(self, node):
    self.visit(node.monadic_operator) self.visit(node.operand4)

# monadic_operator

# operand4

def visit_Referenced_Location(self, node):
    self.visit(node.location)

def visit_Action_Statement(self, node):
    self.visit(node.label_id) self.visit(node.action)

def visit_Label_Id(self, node):
    self.visit(node.identifier)

# action

# bracketed_action

def visit_Assignment_Action(self, node):
    self.visit(node.location) self.visit(node.assigning_operator) self.visit(node.expression)

# assigning_operator

# closed_dyadic_operator

def visit_If_Action(self, node):
    self.visit(node.boolean_expression) self.visit(node.then_clause) self.visit(node.else_clause)

def visit_Then_Clause(self, node):
    self.visit(node.action_statement_list)

# action_statement_list

def visit_Else_Clause(self, node):
    self.visit(node.action_statement_list) self.visit(node.boolean_expression) self.visit(node.then_clause) self.visit(node.else_clause)

def visit_Do_Action(self, node):
    self.visit(node.control_part) self.visit(node.action_statement_list)

def visit_Control_Part(self, node):
    self.visit(node.for_control','while_control)

#for_control
#iteration

def visit_Step_Enumeration(self, node):
    self.visit(node.loop_counter) self.visit(node.start_value) self.visit(node.step_value) self.visit(node.end_value)

#start_value
#step_value
#end_value

#discrete_expression

def visit_Range_Enumeration(self, node):
    self.visit(node.loop_counter) self.visit(node.discrete_mode)

def visit_While_Control(self, node):
    self.visit(node.boolean_expression)

#def visit_Call_Action(self, node):
#    self.visit(node.label_id)

def visit_Procedure_Call(self, node):
    self.visit(node.identifier) self.visit(node.parameter_list)

#parameter_list

def visit_Parameter(self, node):
    self.visit(node.expression)

def visit_Exit_Action(self, node):
    self.visit(node.label_id)

def visit_Return_Action(self, node):
    self.visit(node.result)

def visit_Result_Action(self, node):
    self.visit(node.result)

#def visit_Result(self, node):
#    self.visit(node.expression)

def visit_Builtin_Call(self, node):
    self.visit(node.builtin_name) self.visit(node.parameter_list)

def visit_Builtin_Name(self, node):
    self.visit(node.name)

def visit_Procedure_Statement(self, node):
    self.visit(node.label_id) self.visit(node.procedure_definition)

def visit_Procedure_Definition(self, node):
    self.visit(node.formal_procedure_head) self.visit(node.statement_list)

def visit_Formal_Procedure_Head(self, node):
    self.visit(node.formal_parameter_list) self.visit(node.result_spec)

#formal_parameter_list

def visit_Formal_Parameter(self, node):
    self.visit(node.identifier_list) self.visit(node.parameter_spec)

def visit_Parameter_Spec(self, node):
    self.visit(node.mode) self.visit(node.parameter_attribute)

#parameter_attribute

def visit_Result_Spec(self, node):
    self.visit(node.mode) self.visit(node.result_attribute)

#result_attribute
